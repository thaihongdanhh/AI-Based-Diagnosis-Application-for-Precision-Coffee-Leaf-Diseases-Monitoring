{"ast":null,"code":"import { PerformanceEntry } from \"./PerformanceEntry\";\nimport { warnNoNativePerformanceObserver } from \"./PerformanceObserver\";\nimport NativePerformanceObserver from \"./specs/NativePerformanceObserver\";\nexport class PerformanceEventTiming extends PerformanceEntry {\n  #processingStart;\n  #processingEnd;\n  #interactionId;\n  constructor(init) {\n    super({\n      name: init.name,\n      entryType: 'event',\n      startTime: init.startTime ?? 0,\n      duration: init.duration ?? 0\n    });\n    this.#processingStart = init.processingStart ?? 0;\n    this.#processingEnd = init.processingEnd ?? 0;\n    this.#interactionId = init.interactionId ?? 0;\n  }\n  get processingStart() {\n    return this.#processingStart;\n  }\n  get processingEnd() {\n    return this.#processingEnd;\n  }\n  get interactionId() {\n    return this.#interactionId;\n  }\n  toJSON() {\n    return Object.assign({}, super.toJSON(), {\n      processingStart: this.#processingStart,\n      processingEnd: this.#processingEnd,\n      interactionId: this.#interactionId\n    });\n  }\n}\nlet cachedEventCounts;\nfunction getCachedEventCounts() {\n  if (cachedEventCounts) {\n    return cachedEventCounts;\n  }\n  if (!NativePerformanceObserver) {\n    warnNoNativePerformanceObserver();\n    return new Map();\n  }\n  cachedEventCounts = new Map(NativePerformanceObserver.getEventCounts());\n  global.queueMicrotask(() => {\n    cachedEventCounts = null;\n  });\n  return cachedEventCounts ?? new Map();\n}\nexport class EventCounts {\n  get size() {\n    return getCachedEventCounts().size;\n  }\n  entries() {\n    return getCachedEventCounts().entries();\n  }\n  forEach(callback) {\n    return getCachedEventCounts().forEach(callback);\n  }\n  get(key) {\n    return getCachedEventCounts().get(key);\n  }\n  has(key) {\n    return getCachedEventCounts().has(key);\n  }\n  keys() {\n    return getCachedEventCounts().keys();\n  }\n  values() {\n    return getCachedEventCounts().values();\n  }\n}","map":{"version":3,"names":["PerformanceEntry","warnNoNativePerformanceObserver","NativePerformanceObserver","PerformanceEventTiming","processingStart","processingEnd","interactionId","constructor","init","name","entryType","startTime","duration","toJSON","Object","assign","cachedEventCounts","getCachedEventCounts","Map","getEventCounts","global","queueMicrotask","EventCounts","size","entries","forEach","callback","get","key","has","keys","values"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/src/private/webapis/performance/EventTiming.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n// flowlint unsafe-getters-setters:off\n\nimport type {\n  DOMHighResTimeStamp,\n  PerformanceEntryJSON,\n} from './PerformanceEntry';\n\nimport {PerformanceEntry} from './PerformanceEntry';\nimport {warnNoNativePerformanceObserver} from './PerformanceObserver';\nimport NativePerformanceObserver from './specs/NativePerformanceObserver';\n\nexport type PerformanceEventTimingJSON = {\n  ...PerformanceEntryJSON,\n  processingStart: DOMHighResTimeStamp,\n  processingEnd: DOMHighResTimeStamp,\n  interactionId: number,\n  ...\n};\n\nexport class PerformanceEventTiming extends PerformanceEntry {\n  #processingStart: DOMHighResTimeStamp;\n  #processingEnd: DOMHighResTimeStamp;\n  #interactionId: number;\n\n  constructor(init: {\n    name: string,\n    startTime?: DOMHighResTimeStamp,\n    duration?: DOMHighResTimeStamp,\n    processingStart?: DOMHighResTimeStamp,\n    processingEnd?: DOMHighResTimeStamp,\n    interactionId?: number,\n  }) {\n    super({\n      name: init.name,\n      entryType: 'event',\n      startTime: init.startTime ?? 0,\n      duration: init.duration ?? 0,\n    });\n    this.#processingStart = init.processingStart ?? 0;\n    this.#processingEnd = init.processingEnd ?? 0;\n    this.#interactionId = init.interactionId ?? 0;\n  }\n\n  get processingStart(): DOMHighResTimeStamp {\n    return this.#processingStart;\n  }\n\n  get processingEnd(): DOMHighResTimeStamp {\n    return this.#processingEnd;\n  }\n\n  get interactionId(): number {\n    return this.#interactionId;\n  }\n\n  toJSON(): PerformanceEventTimingJSON {\n    return {\n      ...super.toJSON(),\n      processingStart: this.#processingStart,\n      processingEnd: this.#processingEnd,\n      interactionId: this.#interactionId,\n    };\n  }\n}\n\ntype EventCountsForEachCallbackType =\n  | (() => void)\n  | ((value: number) => void)\n  | ((value: number, key: string) => void)\n  | ((value: number, key: string, map: Map<string, number>) => void);\n\nlet cachedEventCounts: ?Map<string, number>;\n\nfunction getCachedEventCounts(): Map<string, number> {\n  if (cachedEventCounts) {\n    return cachedEventCounts;\n  }\n  if (!NativePerformanceObserver) {\n    warnNoNativePerformanceObserver();\n    return new Map();\n  }\n\n  cachedEventCounts = new Map<string, number>(\n    NativePerformanceObserver.getEventCounts(),\n  );\n  // $FlowFixMe[incompatible-call]\n  global.queueMicrotask(() => {\n    // To be consistent with the calls to the API from the same task,\n    // but also not to refetch the data from native too often,\n    // schedule to invalidate the cache later,\n    // after the current task is guaranteed to have finished.\n    cachedEventCounts = null;\n  });\n  return cachedEventCounts ?? new Map();\n}\n\n/**\n * Implementation of the EventCounts Web Performance API\n * corresponding to the standard in\n * https://www.w3.org/TR/event-timing/#eventcounts\n */\nexport class EventCounts {\n  get size(): number {\n    return getCachedEventCounts().size;\n  }\n\n  entries(): Iterator<[string, number]> {\n    return getCachedEventCounts().entries();\n  }\n\n  forEach(callback: EventCountsForEachCallbackType): void {\n    return getCachedEventCounts().forEach(callback);\n  }\n\n  get(key: string): ?number {\n    return getCachedEventCounts().get(key);\n  }\n\n  has(key: string): boolean {\n    return getCachedEventCounts().has(key);\n  }\n\n  keys(): Iterator<string> {\n    return getCachedEventCounts().keys();\n  }\n\n  values(): Iterator<number> {\n    return getCachedEventCounts().values();\n  }\n}\n"],"mappings":"AAiBA,SAAQA,gBAAgB;AACxB,SAAQC,+BAA+B;AACvC,OAAOC,yBAAyB;AAUhC,OAAO,MAAMC,sBAAsB,SAASH,gBAAgB,CAAC;EAC3D,CAACI,eAAe;EAChB,CAACC,aAAa;EACd,CAACC,aAAa;EAEdC,WAAWA,CAACC,IAOX,EAAE;IACD,KAAK,CAAC;MACJC,IAAI,EAAED,IAAI,CAACC,IAAI;MACfC,SAAS,EAAE,OAAO;MAClBC,SAAS,EAAEH,IAAI,CAACG,SAAS,IAAI,CAAC;MAC9BC,QAAQ,EAAEJ,IAAI,CAACI,QAAQ,IAAI;IAC7B,CAAC,CAAC;IACF,IAAI,CAAC,CAACR,eAAe,GAAGI,IAAI,CAACJ,eAAe,IAAI,CAAC;IACjD,IAAI,CAAC,CAACC,aAAa,GAAGG,IAAI,CAACH,aAAa,IAAI,CAAC;IAC7C,IAAI,CAAC,CAACC,aAAa,GAAGE,IAAI,CAACF,aAAa,IAAI,CAAC;EAC/C;EAEA,IAAIF,eAAeA,CAAA,EAAwB;IACzC,OAAO,IAAI,CAAC,CAACA,eAAe;EAC9B;EAEA,IAAIC,aAAaA,CAAA,EAAwB;IACvC,OAAO,IAAI,CAAC,CAACA,aAAa;EAC5B;EAEA,IAAIC,aAAaA,CAAA,EAAW;IAC1B,OAAO,IAAI,CAAC,CAACA,aAAa;EAC5B;EAEAO,MAAMA,CAAA,EAA+B;IACnC,OAAAC,MAAA,CAAAC,MAAA,KACK,KAAK,CAACF,MAAM,CAAC,CAAC;MACjBT,eAAe,EAAE,IAAI,CAAC,CAACA,eAAe;MACtCC,aAAa,EAAE,IAAI,CAAC,CAACA,aAAa;MAClCC,aAAa,EAAE,IAAI,CAAC,CAACA;IAAa;EAEtC;AACF;AAQA,IAAIU,iBAAuC;AAE3C,SAASC,oBAAoBA,CAAA,EAAwB;EACnD,IAAID,iBAAiB,EAAE;IACrB,OAAOA,iBAAiB;EAC1B;EACA,IAAI,CAACd,yBAAyB,EAAE;IAC9BD,+BAA+B,CAAC,CAAC;IACjC,OAAO,IAAIiB,GAAG,CAAC,CAAC;EAClB;EAEAF,iBAAiB,GAAG,IAAIE,GAAG,CACzBhB,yBAAyB,CAACiB,cAAc,CAAC,CAC3C,CAAC;EAEDC,MAAM,CAACC,cAAc,CAAC,MAAM;IAK1BL,iBAAiB,GAAG,IAAI;EAC1B,CAAC,CAAC;EACF,OAAOA,iBAAiB,IAAI,IAAIE,GAAG,CAAC,CAAC;AACvC;AAOA,OAAO,MAAMI,WAAW,CAAC;EACvB,IAAIC,IAAIA,CAAA,EAAW;IACjB,OAAON,oBAAoB,CAAC,CAAC,CAACM,IAAI;EACpC;EAEAC,OAAOA,CAAA,EAA+B;IACpC,OAAOP,oBAAoB,CAAC,CAAC,CAACO,OAAO,CAAC,CAAC;EACzC;EAEAC,OAAOA,CAACC,QAAwC,EAAQ;IACtD,OAAOT,oBAAoB,CAAC,CAAC,CAACQ,OAAO,CAACC,QAAQ,CAAC;EACjD;EAEAC,GAAGA,CAACC,GAAW,EAAW;IACxB,OAAOX,oBAAoB,CAAC,CAAC,CAACU,GAAG,CAACC,GAAG,CAAC;EACxC;EAEAC,GAAGA,CAACD,GAAW,EAAW;IACxB,OAAOX,oBAAoB,CAAC,CAAC,CAACY,GAAG,CAACD,GAAG,CAAC;EACxC;EAEAE,IAAIA,CAAA,EAAqB;IACvB,OAAOb,oBAAoB,CAAC,CAAC,CAACa,IAAI,CAAC,CAAC;EACtC;EAEAC,MAAMA,CAAA,EAAqB;IACzB,OAAOd,oBAAoB,CAAC,CAAC,CAACc,MAAM,CAAC,CAAC;EACxC;AACF"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}