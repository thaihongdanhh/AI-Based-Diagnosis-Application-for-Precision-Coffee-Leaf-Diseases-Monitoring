{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nconst isOrientationPortrait = _ref => {\n  let {\n    width,\n    height\n  } = _ref;\n  return height >= width;\n};\nconst isOrientationLandscape = _ref2 => {\n  let {\n    width,\n    height\n  } = _ref2;\n  return width >= height;\n};\nexport function useDeviceOrientation() {\n  const screen = Dimensions.get('screen');\n  const initialState = {\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen)\n  };\n  const [orientation, setOrientation] = useState(initialState);\n  useEffect(() => {\n    const onChange = _ref3 => {\n      let {\n        screen\n      } = _ref3;\n      setOrientation({\n        portrait: isOrientationPortrait(screen),\n        landscape: isOrientationLandscape(screen)\n      });\n    };\n    const subscription = Dimensions.addEventListener('change', onChange);\n    return () => {\n      if (typeof (subscription === null || subscription === void 0 ? void 0 : subscription.remove) === 'function') {\n        subscription.remove();\n      }\n    };\n  }, []);\n  return orientation.portrait ? 'PORTRAIT' : 'LANDSCAPE';\n}","map":{"version":3,"names":["useEffect","useState","Dimensions","isOrientationPortrait","_ref","width","height","isOrientationLandscape","_ref2","useDeviceOrientation","screen","get","initialState","portrait","landscape","orientation","setOrientation","onChange","_ref3","subscription","addEventListener","remove"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-element-dropdown/src/useDeviceOrientation.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-shadow */\nimport { useEffect, useState } from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\n\nconst isOrientationPortrait = ({ width, height }: ScaledSize) =>\n  height >= width;\nconst isOrientationLandscape = ({ width, height }: ScaledSize) =>\n  width >= height;\n\nexport function useDeviceOrientation() {\n  const screen = Dimensions.get('screen');\n  const initialState = {\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen),\n  };\n\n  const [orientation, setOrientation] = useState(initialState);\n\n  useEffect(() => {\n    const onChange = ({ screen }: { screen: ScaledSize }) => {\n      setOrientation({\n        portrait: isOrientationPortrait(screen),\n        landscape: isOrientationLandscape(screen),\n      });\n    };\n\n    const subscription = Dimensions.addEventListener('change', onChange);\n\n    return () => {\n      if (typeof subscription?.remove === 'function') {\n        subscription.remove();\n      }\n    };\n  }, []);\n\n  return orientation.portrait ? 'PORTRAIT' : 'LANDSCAPE';\n}\n"],"mappings":"AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,OAAAC,UAAA;AAG3C,MAAMC,qBAAqB,GAAGC,IAAA;EAAA,IAAC;IAAEC,KAAK;IAAEC;EAAmB,CAAC,GAAAF,IAAA;EAAA,OAC1DE,MAAM,IAAID,KAAK;AAAA;AACjB,MAAME,sBAAsB,GAAGC,KAAA;EAAA,IAAC;IAAEH,KAAK;IAAEC;EAAmB,CAAC,GAAAE,KAAA;EAAA,OAC3DH,KAAK,IAAIC,MAAM;AAAA;AAEjB,OAAO,SAASG,oBAAoBA,CAAA,EAAG;EACrC,MAAMC,MAAM,GAAGR,UAAU,CAACS,GAAG,CAAC,QAAQ,CAAC;EACvC,MAAMC,YAAY,GAAG;IACnBC,QAAQ,EAAEV,qBAAqB,CAACO,MAAM,CAAC;IACvCI,SAAS,EAAEP,sBAAsB,CAACG,MAAM;EAC1C,CAAC;EAED,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAACW,YAAY,CAAC;EAE5DZ,SAAS,CAAC,MAAM;IACd,MAAMiB,QAAQ,GAAGC,KAAA,IAAwC;MAAA,IAAvC;QAAER;MAA+B,CAAC,GAAAQ,KAAA;MAClDF,cAAc,CAAC;QACbH,QAAQ,EAAEV,qBAAqB,CAACO,MAAM,CAAC;QACvCI,SAAS,EAAEP,sBAAsB,CAACG,MAAM;MAC1C,CAAC,CAAC;IACJ,CAAC;IAED,MAAMS,YAAY,GAAGjB,UAAU,CAACkB,gBAAgB,CAAC,QAAQ,EAAEH,QAAQ,CAAC;IAEpE,OAAO,MAAM;MACX,IAAI,QAAOE,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEE,MAAM,MAAK,UAAU,EAAE;QAC9CF,YAAY,CAACE,MAAM,EAAE;MACvB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAON,WAAW,CAACF,QAAQ,GAAG,UAAU,GAAG,WAAW;AACxD"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}