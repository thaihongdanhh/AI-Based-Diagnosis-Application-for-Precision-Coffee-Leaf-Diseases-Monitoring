{"ast":null,"code":"import NativeBlobModule from \"./NativeBlobModule\";\nlet BLOB_URL_PREFIX = null;\nif (NativeBlobModule && typeof NativeBlobModule.getConstants().BLOB_URI_SCHEME === 'string') {\n  const constants = NativeBlobModule.getConstants();\n  BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ':';\n  if (typeof constants.BLOB_URI_HOST === 'string') {\n    BLOB_URL_PREFIX += `//${constants.BLOB_URI_HOST}/`;\n  }\n}\nexport { URLSearchParams } from \"./URLSearchParams\";\nfunction validateBaseUrl(url) {\n  return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)*(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/.test(url);\n}\nexport class URL {\n  _searchParamsInstance = null;\n  static createObjectURL(blob) {\n    if (BLOB_URL_PREFIX === null) {\n      throw new Error('Cannot create URL for blob!');\n    }\n    return `${BLOB_URL_PREFIX}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.size}`;\n  }\n  static revokeObjectURL(url) {}\n  constructor(url, base) {\n    let baseUrl = null;\n    if (!base || validateBaseUrl(url)) {\n      this._url = url;\n      if (!this._url.endsWith('/')) {\n        this._url += '/';\n      }\n    } else {\n      if (typeof base === 'string') {\n        baseUrl = base;\n        if (!validateBaseUrl(baseUrl)) {\n          throw new TypeError(`Invalid base URL: ${baseUrl}`);\n        }\n      } else {\n        baseUrl = base.toString();\n      }\n      if (baseUrl.endsWith('/')) {\n        baseUrl = baseUrl.slice(0, baseUrl.length - 1);\n      }\n      if (!url.startsWith('/')) {\n        url = `/${url}`;\n      }\n      if (baseUrl.endsWith(url)) {\n        url = '';\n      }\n      this._url = `${baseUrl}${url}`;\n    }\n  }\n  get hash() {\n    throw new Error('URL.hash is not implemented');\n  }\n  get host() {\n    throw new Error('URL.host is not implemented');\n  }\n  get hostname() {\n    throw new Error('URL.hostname is not implemented');\n  }\n  get href() {\n    return this.toString();\n  }\n  get origin() {\n    throw new Error('URL.origin is not implemented');\n  }\n  get password() {\n    throw new Error('URL.password is not implemented');\n  }\n  get pathname() {\n    throw new Error('URL.pathname not implemented');\n  }\n  get port() {\n    throw new Error('URL.port is not implemented');\n  }\n  get protocol() {\n    throw new Error('URL.protocol is not implemented');\n  }\n  get search() {\n    throw new Error('URL.search is not implemented');\n  }\n  get searchParams() {\n    if (this._searchParamsInstance == null) {\n      this._searchParamsInstance = new URLSearchParams();\n    }\n    return this._searchParamsInstance;\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toString() {\n    if (this._searchParamsInstance === null) {\n      return this._url;\n    }\n    const instanceString = this._searchParamsInstance.toString();\n    const separator = this._url.indexOf('?') > -1 ? '&' : '?';\n    return this._url + separator + instanceString;\n  }\n  get username() {\n    throw new Error('URL.username is not implemented');\n  }\n}","map":{"version":3,"names":["NativeBlobModule","BLOB_URL_PREFIX","getConstants","BLOB_URI_SCHEME","constants","BLOB_URI_HOST","URLSearchParams","validateBaseUrl","url","test","URL","_searchParamsInstance","createObjectURL","blob","Error","data","blobId","offset","size","revokeObjectURL","constructor","base","baseUrl","_url","endsWith","TypeError","toString","slice","length","startsWith","hash","host","hostname","href","origin","password","pathname","port","protocol","search","searchParams","toJSON","instanceString","separator","indexOf","username"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Blob/URL.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type Blob from './Blob';\n\nimport NativeBlobModule from './NativeBlobModule';\n\nlet BLOB_URL_PREFIX = null;\n\nif (\n  NativeBlobModule &&\n  typeof NativeBlobModule.getConstants().BLOB_URI_SCHEME === 'string'\n) {\n  const constants = NativeBlobModule.getConstants();\n  // $FlowFixMe[incompatible-type] asserted above\n  // $FlowFixMe[unsafe-addition]\n  BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ':';\n  if (typeof constants.BLOB_URI_HOST === 'string') {\n    BLOB_URL_PREFIX += `//${constants.BLOB_URI_HOST}/`;\n  }\n}\n\n/*\n * To allow Blobs be accessed via `content://` URIs,\n * you need to register `BlobProvider` as a ContentProvider in your app's `AndroidManifest.xml`:\n *\n * ```xml\n * <manifest>\n *   <application>\n *     <provider\n *       android:name=\"com.facebook.react.modules.blob.BlobProvider\"\n *       android:authorities=\"@string/blob_provider_authority\"\n *       android:exported=\"false\"\n *     />\n *   </application>\n * </manifest>\n * ```\n * And then define the `blob_provider_authority` string in `res/values/strings.xml`.\n * Use a dotted name that's entirely unique to your app:\n *\n * ```xml\n * <resources>\n *   <string name=\"blob_provider_authority\">your.app.package.blobs</string>\n * </resources>\n * ```\n */\n\nexport {URLSearchParams} from './URLSearchParams';\n\nfunction validateBaseUrl(url: string) {\n  // from this MIT-licensed gist: https://gist.github.com/dperini/729294\n  return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)*(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/.test(\n    url,\n  );\n}\n\nexport class URL {\n  _url: string;\n  _searchParamsInstance: ?URLSearchParams = null;\n\n  static createObjectURL(blob: Blob): string {\n    if (BLOB_URL_PREFIX === null) {\n      throw new Error('Cannot create URL for blob!');\n    }\n    return `${BLOB_URL_PREFIX}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.size}`;\n  }\n\n  static revokeObjectURL(url: string) {\n    // Do nothing.\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  constructor(url: string, base: string | URL) {\n    let baseUrl = null;\n    if (!base || validateBaseUrl(url)) {\n      this._url = url;\n      if (!this._url.endsWith('/')) {\n        this._url += '/';\n      }\n    } else {\n      if (typeof base === 'string') {\n        baseUrl = base;\n        if (!validateBaseUrl(baseUrl)) {\n          throw new TypeError(`Invalid base URL: ${baseUrl}`);\n        }\n      } else {\n        baseUrl = base.toString();\n      }\n      if (baseUrl.endsWith('/')) {\n        baseUrl = baseUrl.slice(0, baseUrl.length - 1);\n      }\n      if (!url.startsWith('/')) {\n        url = `/${url}`;\n      }\n      if (baseUrl.endsWith(url)) {\n        url = '';\n      }\n      this._url = `${baseUrl}${url}`;\n    }\n  }\n\n  get hash(): string {\n    throw new Error('URL.hash is not implemented');\n  }\n\n  get host(): string {\n    throw new Error('URL.host is not implemented');\n  }\n\n  get hostname(): string {\n    throw new Error('URL.hostname is not implemented');\n  }\n\n  get href(): string {\n    return this.toString();\n  }\n\n  get origin(): string {\n    throw new Error('URL.origin is not implemented');\n  }\n\n  get password(): string {\n    throw new Error('URL.password is not implemented');\n  }\n\n  get pathname(): string {\n    throw new Error('URL.pathname not implemented');\n  }\n\n  get port(): string {\n    throw new Error('URL.port is not implemented');\n  }\n\n  get protocol(): string {\n    throw new Error('URL.protocol is not implemented');\n  }\n\n  get search(): string {\n    throw new Error('URL.search is not implemented');\n  }\n\n  get searchParams(): URLSearchParams {\n    if (this._searchParamsInstance == null) {\n      this._searchParamsInstance = new URLSearchParams();\n    }\n    return this._searchParamsInstance;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    if (this._searchParamsInstance === null) {\n      return this._url;\n    }\n    // $FlowFixMe[incompatible-use]\n    const instanceString = this._searchParamsInstance.toString();\n    const separator = this._url.indexOf('?') > -1 ? '&' : '?';\n    return this._url + separator + instanceString;\n  }\n\n  get username(): string {\n    throw new Error('URL.username is not implemented');\n  }\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}