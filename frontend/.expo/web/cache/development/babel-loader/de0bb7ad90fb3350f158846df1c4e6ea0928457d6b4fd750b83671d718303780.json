{"ast":null,"code":"import { Platform, UnavailabilityError } from 'expo-modules-core';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ExpoScreenOrientation from \"./ExpoScreenOrientation\";\nimport { Orientation, OrientationLock, WebOrientationLock, WebOrientation, SizeClassIOS } from \"./ScreenOrientation.types\";\nexport { Orientation, OrientationLock, WebOrientationLock, WebOrientation, SizeClassIOS };\nlet _orientationChangeSubscribers = [];\nlet _lastOrientationLock = OrientationLock.UNKNOWN;\nexport async function lockAsync(orientationLock) {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\nexport async function lockPlatformAsync(options) {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n  const {\n    screenOrientationConstantAndroid,\n    screenOrientationArrayIOS,\n    screenOrientationLockWeb\n  } = options;\n  let platformOrientationParam;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(`lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`);\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(`lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`);\n    }\n    const orientations = Object.values(Orientation);\n    for (const orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(`lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`);\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\nexport async function unlockAsync() {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n  await ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);\n}\nexport async function getOrientationAsync() {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\nexport async function getOrientationLockAsync() {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\nexport async function getPlatformOrientationLockAsync() {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock\n    };\n  } else {\n    return {};\n  }\n}\nexport async function supportsOrientationLockAsync(orientationLock) {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = createDidUpdateDimensionsSubscription(listener);\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\nexport function removeOrientationChangeListeners() {\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}\nfunction createDidUpdateDimensionsSubscription(listener) {\n  if (Platform.OS === 'web' || Platform.OS === 'ios') {\n    return ExpoScreenOrientation.addListener('expoDidUpdateDimensions', async update => {\n      listener(update);\n    });\n  }\n  return Dimensions.addEventListener('change', async () => {\n    const [orientationLock, orientation] = await Promise.all([getOrientationLockAsync(), getOrientationAsync()]);\n    listener({\n      orientationInfo: {\n        orientation\n      },\n      orientationLock\n    });\n  });\n}","map":{"version":3,"names":["Platform","UnavailabilityError","Dimensions","ExpoScreenOrientation","Orientation","OrientationLock","WebOrientationLock","WebOrientation","SizeClassIOS","_orientationChangeSubscribers","_lastOrientationLock","UNKNOWN","lockAsync","orientationLock","orientationLocks","Object","values","includes","TypeError","OTHER","lockPlatformAsync","options","screenOrientationConstantAndroid","screenOrientationArrayIOS","screenOrientationLockWeb","platformOrientationParam","OS","isNaN","Array","isArray","orientations","orientation","webOrientationLocks","unlockAsync","DEFAULT","getOrientationAsync","getOrientationLockAsync","getPlatformOrientationLockAsync","platformOrientationLock","supportsOrientationLockAsync","addOrientationChangeListener","listener","subscription","createDidUpdateDimensionsSubscription","push","removeOrientationChangeListeners","i","length","subscriber","remove","pop","removeOrientationChangeListener","filter","sub","addListener","update","addEventListener","Promise","all","orientationInfo"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/expo-screen-orientation/src/ScreenOrientation.ts"],"sourcesContent":["import { Platform, type EventSubscription, UnavailabilityError } from 'expo-modules-core';\nimport { Dimensions } from 'react-native';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationLock,\n  PlatformOrientationInfo,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n  EventSubscription as Subscription,\n};\n\nlet _orientationChangeSubscribers: EventSubscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\n// @needsAudit\n/**\n * Lock the screen orientation to a particular `OrientationLock`.\n * @param orientationLock The orientation lock to apply. See the [`OrientationLock`](#orientationlock)\n * enum for possible values.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n *\n * @example\n * ```ts\n * async function changeScreenOrientation() {\n *   await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE_LEFT);\n * }\n * ```\n */\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\n// @needsAudit @docsMissing\n/**\n * @param options The platform specific lock to apply. See the [`PlatformOrientationInfo`](#platformorientationinfo)\n * object type for the different platform formats.\n * @return Returns a promise with `void` value, resolving when the orientation is set and rejecting\n * if an invalid option or value is passed.\n */\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const { screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb } =\n    options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (const orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\n// @needsAudit\n/**\n * Sets the screen orientation back to the `OrientationLock.DEFAULT` policy.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n */\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n  await ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation.\n * @return Returns a promise that fulfils with an [`Orientation`](#orientation)\n * value that reflects the current screen orientation.\n */\nexport async function getOrientationAsync(): Promise<Orientation> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation lock type.\n * @return Returns a promise which fulfils with an [`OrientationLock`](#orientationlock)\n * value.\n */\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\n// @needsAudit\n/**\n * Gets the platform specific screen orientation lock type.\n * @return Returns a promise which fulfils with a [`PlatformOrientationInfo`](#platformorientationinfo)\n * value.\n */\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\n// @needsAudit @docsMissing\n/**\n * Returns whether the [`OrientationLock`](#orientationlock) policy is supported on\n * the device.\n * @param orientationLock\n * @return Returns a promise that resolves to a `boolean` value that reflects whether or not the\n * orientationLock is supported.\n */\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\n// @needsAudit\n/**\n * Invokes the `listener` function when the screen orientation changes from `portrait` to `landscape`\n * or from `landscape` to `portrait`. For example, it won't be invoked when screen orientation\n * change from `portrait up` to `portrait down`, but it will be called when there was a change from\n * `portrait up` to `landscape left`.\n * @param listener Each orientation update will pass an object with the new [`OrientationChangeEvent`](#orientationchangeevent)\n * to the listener.\n */\nexport function addOrientationChangeListener(\n  listener: OrientationChangeListener\n): EventSubscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n\n  const subscription = createDidUpdateDimensionsSubscription(listener);\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\n// @needsAudit\n/**\n * Removes all listeners subscribed to orientation change updates.\n */\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\n// @needsAudit\n/**\n * Unsubscribes the listener associated with the `Subscription` object from all orientation change\n * updates.\n * @param subscription A subscription object that manages the updates passed to a listener function\n * on an orientation change.\n */\nexport function removeOrientationChangeListener(subscription: EventSubscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(\n    (sub) => sub !== subscription\n  );\n}\n\nfunction createDidUpdateDimensionsSubscription(\n  listener: OrientationChangeListener\n): EventSubscription {\n  if (Platform.OS === 'web' || Platform.OS === 'ios') {\n    return ExpoScreenOrientation.addListener(\n      'expoDidUpdateDimensions',\n      async (update: OrientationChangeEvent) => {\n        listener(update);\n      }\n    );\n  }\n\n  // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n  return Dimensions.addEventListener('change', async () => {\n    const [orientationLock, orientation] = await Promise.all([\n      getOrientationLockAsync(),\n      getOrientationAsync(),\n    ]);\n    listener({ orientationInfo: { orientation }, orientationLock });\n  });\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}