{"ast":null,"code":"import { Platform } from 'expo-modules-core';\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { getOrientationLockAsync, getOrientationAsync } from \"./ScreenOrientation\";\nimport { Orientation, OrientationLock, WebOrientationLock, WebOrientation } from \"./ScreenOrientation.types\";\nconst OrientationLockAPIToWeb = {\n  [OrientationLock.DEFAULT]: WebOrientationLock.NATURAL,\n  [OrientationLock.ALL]: WebOrientationLock.ANY,\n  [OrientationLock.PORTRAIT]: WebOrientationLock.PORTRAIT,\n  [OrientationLock.PORTRAIT_UP]: WebOrientationLock.PORTRAIT_PRIMARY,\n  [OrientationLock.PORTRAIT_DOWN]: WebOrientationLock.PORTRAIT_SECONDARY,\n  [OrientationLock.LANDSCAPE]: WebOrientationLock.LANDSCAPE,\n  [OrientationLock.LANDSCAPE_LEFT]: WebOrientationLock.LANDSCAPE_PRIMARY,\n  [OrientationLock.LANDSCAPE_RIGHT]: WebOrientationLock.LANDSCAPE_SECONDARY\n};\nconst OrientationWebToAPI = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT\n};\nconst screen = Platform.canUseViewport ? window.screen : {};\nconst orientation = Platform.canUseViewport ? screen.orientation || screen.msOrientation || null : null;\nasync function emitOrientationEvent() {\n  const [orientationLock, orientation] = await Promise.all([getOrientationLockAsync(), getOrientationAsync()]);\n  DeviceEventEmitter.emit('expoDidUpdateDimensions', {\n    orientationLock,\n    orientationInfo: {\n      orientation\n    }\n  });\n}\nif (Platform.canUseEventListeners) {\n  if (orientation && orientation.addEventListener) {\n    orientation.addEventListener('change', emitOrientationEvent);\n  } else {\n    window.addEventListener('orientationchange', emitOrientationEvent);\n  }\n}\nfunction _convertToLegacyOrientationLock(orientationLock) {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(`expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.`);\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\nasync function _lockAsync(webOrientationLock) {\n  if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n    throw new Error(`expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.`);\n  }\n  if (screen.orientation && screen.orientation.lock) {\n    await screen.orientation.lock(webOrientationLock);\n  } else if (screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation']) {\n    const legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n    const lockOrientation = screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n    const isSuccess = lockOrientation.call(screen, legacyLock);\n    if (!isSuccess) {\n      throw new Error(`Applying orientation lock: ${JSON.stringify(webOrientationLock)} to device was denied`);\n    }\n  } else {\n    throw new Error(`expo-screen-orientation: The browser doesn't support locking screen orientation.`);\n  }\n}\nlet _lastWebOrientationLock = WebOrientationLock.UNKNOWN;\nexport default {\n  async supportsOrientationLockAsync(orientationLock) {\n    return orientationLock in OrientationLockAPIToWeb;\n  },\n  async getPlatformOrientationLockAsync() {\n    return _lastWebOrientationLock;\n  },\n  async getOrientationAsync() {\n    const webOrientation = screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n    if (!webOrientation) {\n      return Orientation.UNKNOWN;\n    }\n    return OrientationWebToAPI[webOrientation];\n  },\n  async lockAsync(orientationLock) {\n    const webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n    if (!webOrientationLock) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    await _lockAsync(webOrientationLock);\n  },\n  async lockPlatformAsync(webOrientationLock) {\n    await _lockAsync(webOrientationLock);\n    _lastWebOrientationLock = webOrientationLock;\n  },\n  async unlockAsync() {\n    if (screen.orientation && screen.orientation.unlock) {\n      screen.orientation.unlock();\n    } else if (screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation']) {\n      const unlockOrientation = screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation'];\n      const isSuccess = unlockOrientation.call(screen);\n      if (!isSuccess) {\n        throw new Error(`Unlocking screen orientation on device was denied`);\n      }\n    } else {\n      throw new Error(`expo-screen-orientation: The browser doesn't support unlocking screen orientation.`);\n    }\n  }\n};","map":{"version":3,"names":["Platform","DeviceEventEmitter","getOrientationLockAsync","getOrientationAsync","Orientation","OrientationLock","WebOrientationLock","WebOrientation","OrientationLockAPIToWeb","DEFAULT","NATURAL","ALL","ANY","PORTRAIT","PORTRAIT_UP","PORTRAIT_PRIMARY","PORTRAIT_DOWN","PORTRAIT_SECONDARY","LANDSCAPE","LANDSCAPE_LEFT","LANDSCAPE_PRIMARY","LANDSCAPE_RIGHT","LANDSCAPE_SECONDARY","OrientationWebToAPI","screen","canUseViewport","window","orientation","msOrientation","emitOrientationEvent","orientationLock","Promise","all","emit","orientationInfo","canUseEventListeners","addEventListener","_convertToLegacyOrientationLock","UNKNOWN","Error","_lockAsync","webOrientationLock","lock","legacyLock","lockOrientation","isSuccess","call","JSON","stringify","_lastWebOrientationLock","supportsOrientationLockAsync","getPlatformOrientationLockAsync","webOrientation","type","lockAsync","TypeError","lockPlatformAsync","unlockAsync","unlock","unlockOrientation"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/expo-screen-orientation/src/ExpoScreenOrientation.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { DeviceEventEmitter } from 'react-native';\n\nimport { getOrientationLockAsync, getOrientationAsync } from './ScreenOrientation';\nimport {\n  Orientation,\n  OrientationLock,\n  WebOrientationLock,\n  WebOrientation,\n} from './ScreenOrientation.types';\n\nconst OrientationLockAPIToWeb: {\n  [lock: string]: WebOrientationLock;\n} = {\n  [OrientationLock.DEFAULT]: WebOrientationLock.NATURAL,\n  [OrientationLock.ALL]: WebOrientationLock.ANY,\n  [OrientationLock.PORTRAIT]: WebOrientationLock.PORTRAIT,\n  [OrientationLock.PORTRAIT_UP]: WebOrientationLock.PORTRAIT_PRIMARY,\n  [OrientationLock.PORTRAIT_DOWN]: WebOrientationLock.PORTRAIT_SECONDARY,\n  [OrientationLock.LANDSCAPE]: WebOrientationLock.LANDSCAPE,\n  [OrientationLock.LANDSCAPE_LEFT]: WebOrientationLock.LANDSCAPE_PRIMARY,\n  [OrientationLock.LANDSCAPE_RIGHT]: WebOrientationLock.LANDSCAPE_SECONDARY,\n};\n\nconst OrientationWebToAPI: {\n  [orientationWeb: string]: Orientation;\n} = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT,\n};\n\ndeclare const window: Window;\n\nconst screen: Screen = Platform.canUseViewport ? window.screen : ({} as Screen);\nconst orientation: ScreenOrientation | null = Platform.canUseViewport\n  ? screen.orientation || (screen as any).msOrientation || null\n  : null;\n\nasync function emitOrientationEvent() {\n  const [orientationLock, orientation] = await Promise.all([\n    getOrientationLockAsync(),\n    getOrientationAsync(),\n  ]);\n  DeviceEventEmitter.emit('expoDidUpdateDimensions', {\n    orientationLock,\n    orientationInfo: { orientation },\n  });\n}\n\nif (Platform.canUseEventListeners) {\n  if (orientation && orientation.addEventListener) {\n    orientation.addEventListener('change', emitOrientationEvent);\n  } else {\n    window.addEventListener('orientationchange', emitOrientationEvent);\n  }\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock: WebOrientationLock): string | string[] {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\n        `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.`\n      );\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\n\nasync function _lockAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n  if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n    throw new Error(\n      `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.`\n    );\n  }\n  // @ts-ignore-error: This is missing in the TypeScript definitions\n  if (screen.orientation && screen.orientation.lock) {\n    // @ts-ignore-error\n    await screen.orientation.lock(webOrientationLock);\n  } else if (\n    screen['lockOrientation'] ||\n    screen['mozLockOrientation'] ||\n    screen['msLockOrientation']\n  ) {\n    const legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n    const lockOrientation =\n      screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n    // correct `this` context must be passed in otherwise method call is disallowed by browser\n    const isSuccess = lockOrientation.call(screen, legacyLock);\n    if (!isSuccess) {\n      throw new Error(\n        `Applying orientation lock: ${JSON.stringify(webOrientationLock)} to device was denied`\n      );\n    }\n  } else {\n    throw new Error(\n      `expo-screen-orientation: The browser doesn't support locking screen orientation.`\n    );\n  }\n}\n\nlet _lastWebOrientationLock: WebOrientationLock = WebOrientationLock.UNKNOWN;\n\nexport default {\n  async supportsOrientationLockAsync(orientationLock: OrientationLock): Promise<boolean> {\n    return orientationLock in OrientationLockAPIToWeb;\n  },\n  async getPlatformOrientationLockAsync(): Promise<WebOrientationLock> {\n    return _lastWebOrientationLock;\n  },\n  async getOrientationAsync(): Promise<Orientation> {\n    const webOrientation =\n      screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n    if (!webOrientation) {\n      return Orientation.UNKNOWN;\n    }\n    return OrientationWebToAPI[webOrientation];\n  },\n  async lockAsync(orientationLock: OrientationLock): Promise<void> {\n    const webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n    if (!webOrientationLock) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    await _lockAsync(webOrientationLock);\n  },\n  async lockPlatformAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n    await _lockAsync(webOrientationLock);\n    _lastWebOrientationLock = webOrientationLock;\n  },\n  async unlockAsync(): Promise<void> {\n    if (screen.orientation && screen.orientation.unlock) {\n      screen.orientation.unlock();\n    } else if (\n      screen['unlockOrientation'] ||\n      screen['mozUnlockOrientation'] ||\n      screen['msUnlockOrientation']\n    ) {\n      const unlockOrientation =\n        screen['unlockOrientation'] ||\n        screen['mozUnlockOrientation'] ||\n        screen['msUnlockOrientation'];\n      // correct `this` context must be passed in otherwise method call is disallowed by browser\n      const isSuccess = unlockOrientation.call(screen);\n      if (!isSuccess) {\n        throw new Error(`Unlocking screen orientation on device was denied`);\n      }\n    } else {\n      throw new Error(\n        `expo-screen-orientation: The browser doesn't support unlocking screen orientation.`\n      );\n    }\n  },\n};\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}