{"ast":null,"code":"import NativeUIManager from \"./NativeUIManager\";\nimport nullthrows from 'nullthrows';\nconst NativeModules = require(\"../BatchedBridge/NativeModules\");\nconst defineLazyObjectProperty = require(\"../Utilities/defineLazyObjectProperty\");\nconst Platform = require(\"../Utilities/Platform\");\nconst UIManagerProperties = require(\"./UIManagerProperties\");\nconst viewManagerConfigs = {};\nconst triedLoadingConfig = new Set();\nlet NativeUIManagerConstants = {};\nlet isNativeUIManagerConstantsSet = false;\nfunction getConstants() {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\nfunction getViewManagerConfig(viewManagerName) {\n  if (viewManagerConfigs[viewManagerName] === undefined && global.nativeCallSyncHook && NativeUIManager.getConstantsForViewManager) {\n    try {\n      viewManagerConfigs[viewManagerName] = NativeUIManager.getConstantsForViewManager(viewManagerName);\n    } catch (e) {\n      console.error(\"NativeUIManager.getConstantsForViewManager('\" + viewManagerName + \"') threw an exception.\", e);\n      viewManagerConfigs[viewManagerName] = null;\n    }\n  }\n  const config = viewManagerConfigs[viewManagerName];\n  if (config) {\n    return config;\n  }\n  if (!global.nativeCallSyncHook) {\n    return config;\n  }\n  if (NativeUIManager.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {\n    const result = nullthrows(NativeUIManager.lazilyLoadView)(viewManagerName);\n    triedLoadingConfig.add(viewManagerName);\n    if (result != null && result.viewConfig != null) {\n      getConstants()[viewManagerName] = result.viewConfig;\n      lazifyViewManagerConfig(viewManagerName);\n    }\n  }\n  return viewManagerConfigs[viewManagerName];\n}\nconst UIManagerJS = Object.assign({}, NativeUIManager, {\n  createView(reactTag, viewName, rootTag, props) {\n    if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {\n      getViewManagerConfig(viewName);\n    }\n    NativeUIManager.createView(reactTag, viewName, rootTag, props);\n  },\n  getConstants() {\n    return getConstants();\n  },\n  getViewManagerConfig(viewManagerName) {\n    return getViewManagerConfig(viewManagerName);\n  },\n  hasViewManagerConfig(viewManagerName) {\n    return getViewManagerConfig(viewManagerName) != null;\n  }\n});\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\nfunction lazifyViewManagerConfig(viewName) {\n  const viewConfig = getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const constants = {};\n        viewManager && Object.keys(viewManager).forEach(key => {\n          const value = viewManager[key];\n          if (typeof value !== 'function') {\n            constants[key] = value;\n          }\n        });\n        return constants;\n      }\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const commands = {};\n        let index = 0;\n        viewManager && Object.keys(viewManager).forEach(key => {\n          const value = viewManager[key];\n          if (typeof value === 'function') {\n            commands[key] = index++;\n          }\n        });\n        return commands;\n      }\n    });\n  }\n}\nif (Platform.OS === 'ios') {\n  Object.keys(getConstants()).forEach(viewName => {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: () => nullthrows(NativeUIManager.getConstantsForViewManager)(viewManagerName)\n    });\n  });\n}\nif (!global.nativeCallSyncHook) {\n  Object.keys(getConstants()).forEach(viewManagerName => {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: () => {\n          console.warn(`Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` + `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`);\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        }\n      });\n    }\n  });\n}\nmodule.exports = UIManagerJS;","map":{"version":3,"names":["NativeUIManager","nullthrows","NativeModules","require","defineLazyObjectProperty","Platform","UIManagerProperties","viewManagerConfigs","triedLoadingConfig","Set","NativeUIManagerConstants","isNativeUIManagerConstantsSet","getConstants","getViewManagerConfig","viewManagerName","undefined","global","nativeCallSyncHook","getConstantsForViewManager","e","console","error","config","lazilyLoadView","has","result","add","viewConfig","lazifyViewManagerConfig","UIManagerJS","Object","assign","createView","reactTag","viewName","rootTag","props","OS","hasViewManagerConfig","Manager","get","viewManager","constants","keys","forEach","key","value","commands","index","ViewManagerNames","includes","warn","module","exports"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/ReactNative/PaperUIManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {RootTag} from '../Types/RootTagTypes';\nimport type {UIManagerJSInterface} from '../Types/UIManagerJSInterface';\n\nimport NativeUIManager from './NativeUIManager';\nimport nullthrows from 'nullthrows';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\nconst Platform = require('../Utilities/Platform');\nconst UIManagerProperties = require('./UIManagerProperties');\n\nconst viewManagerConfigs: {[string]: any | null} = {};\n\nconst triedLoadingConfig = new Set<string>();\n\nlet NativeUIManagerConstants = {};\nlet isNativeUIManagerConstantsSet = false;\nfunction getConstants(): Object {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\n\nfunction getViewManagerConfig(viewManagerName: string): any {\n  if (\n    viewManagerConfigs[viewManagerName] === undefined &&\n    global.nativeCallSyncHook && // If we're in the Chrome Debugger, let's not even try calling the sync method\n    NativeUIManager.getConstantsForViewManager\n  ) {\n    try {\n      viewManagerConfigs[viewManagerName] =\n        NativeUIManager.getConstantsForViewManager(viewManagerName);\n    } catch (e) {\n      console.error(\n        \"NativeUIManager.getConstantsForViewManager('\" +\n          viewManagerName +\n          \"') threw an exception.\",\n        e,\n      );\n      viewManagerConfigs[viewManagerName] = null;\n    }\n  }\n\n  const config = viewManagerConfigs[viewManagerName];\n  if (config) {\n    return config;\n  }\n\n  // If we're in the Chrome Debugger, let's not even try calling the sync\n  // method.\n  if (!global.nativeCallSyncHook) {\n    return config;\n  }\n\n  if (\n    NativeUIManager.lazilyLoadView &&\n    !triedLoadingConfig.has(viewManagerName)\n  ) {\n    const result = nullthrows(NativeUIManager.lazilyLoadView)(viewManagerName);\n    triedLoadingConfig.add(viewManagerName);\n    if (result != null && result.viewConfig != null) {\n      getConstants()[viewManagerName] = result.viewConfig;\n      lazifyViewManagerConfig(viewManagerName);\n    }\n  }\n\n  return viewManagerConfigs[viewManagerName];\n}\n\n// $FlowFixMe[cannot-spread-interface]\nconst UIManagerJS: UIManagerJSInterface = {\n  ...NativeUIManager,\n  createView(\n    reactTag: number,\n    viewName: string,\n    rootTag: RootTag,\n    props: Object,\n  ): void {\n    if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {\n      // This is necessary to force the initialization of native viewManager\n      // classes in iOS when using static ViewConfigs\n      getViewManagerConfig(viewName);\n    }\n\n    NativeUIManager.createView(reactTag, viewName, rootTag, props);\n  },\n  getConstants(): Object {\n    return getConstants();\n  },\n  getViewManagerConfig(viewManagerName: string): any {\n    return getViewManagerConfig(viewManagerName);\n  },\n  hasViewManagerConfig(viewManagerName: string): boolean {\n    return getViewManagerConfig(viewManagerName) != null;\n  },\n};\n\n// TODO (T45220498): Remove this.\n// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`\n// instead of `UIManager.getViewManagerConfig()` off UIManager.js.\n// This is a workaround for now.\n// $FlowFixMe[prop-missing]\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName: string) {\n  const viewConfig = getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const constants: {[string]: mixed} = {};\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n        return constants;\n      },\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const commands: {[string]: number} = {};\n        let index = 0;\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n        return commands;\n      },\n    });\n  }\n}\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(getConstants()).forEach(viewName => {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: () =>\n        nullthrows(NativeUIManager.getConstantsForViewManager)(viewManagerName),\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(getConstants()).forEach(viewManagerName => {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: () => {\n          console.warn(\n            `Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` +\n              `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`,\n          );\n\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        },\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;\n"],"mappings":"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"},"metadata":{"hasCjsExports":true},"sourceType":"module","externalDependencies":[]}