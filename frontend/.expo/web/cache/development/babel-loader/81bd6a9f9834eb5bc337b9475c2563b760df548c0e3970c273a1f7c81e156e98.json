{"ast":null,"code":"var _jsxFileName = \"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js\";\nimport Keyboard from \"../../Components/Keyboard/Keyboard\";\nimport View from \"../../Components/View/View\";\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport * as LogBoxData from \"../Data/LogBoxData\";\nimport LogBoxLog from \"../Data/LogBoxLog\";\nimport LogBoxInspectorBody from \"./LogBoxInspectorBody\";\nimport LogBoxInspectorFooter from \"./LogBoxInspectorFooter\";\nimport LogBoxInspectorHeader from \"./LogBoxInspectorHeader\";\nimport * as LogBoxStyle from \"./LogBoxStyle\";\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LogBoxInspector(props) {\n  const {\n    logs,\n    selectedIndex\n  } = props;\n  let log = logs[selectedIndex];\n  useEffect(() => {\n    if (log) {\n      LogBoxData.symbolicateLogNow(log);\n    }\n  }, [log]);\n  useEffect(() => {\n    if (logs.length > 1) {\n      const selected = selectedIndex;\n      const lastIndex = logs.length - 1;\n      const prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;\n      const nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;\n      LogBoxData.symbolicateLogLazy(logs[prevIndex]);\n      LogBoxData.symbolicateLogLazy(logs[nextIndex]);\n    }\n  }, [logs, selectedIndex]);\n  useEffect(() => {\n    Keyboard.dismiss();\n  }, []);\n  function _handleRetry() {\n    LogBoxData.retrySymbolicateLogNow(log);\n  }\n  if (log == null) {\n    return null;\n  }\n  return _jsxDEV(View, {\n    style: styles.root,\n    children: [_jsxDEV(LogBoxInspectorHeader, {\n      onSelectIndex: props.onChangeSelectedIndex,\n      selectedIndex: selectedIndex,\n      total: logs.length,\n      level: log.level\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), _jsxDEV(LogBoxInspectorBody, {\n      log: log,\n      onRetry: _handleRetry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), _jsxDEV(LogBoxInspectorFooter, {\n      onDismiss: props.onDismiss,\n      onMinimize: props.onMinimize,\n      level: log.level\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: LogBoxStyle.getTextColor()\n  }\n});","map":{"version":3,"names":["Keyboard","View","StyleSheet","LogBoxData","LogBoxLog","LogBoxInspectorBody","LogBoxInspectorFooter","LogBoxInspectorHeader","LogBoxStyle","React","useEffect","jsxDEV","_jsxDEV","LogBoxInspector","props","logs","selectedIndex","log","symbolicateLogNow","length","selected","lastIndex","prevIndex","nextIndex","symbolicateLogLazy","dismiss","_handleRetry","retrySymbolicateLogNow","style","styles","root","children","onSelectIndex","onChangeSelectedIndex","total","level","fileName","_jsxFileName","lineNumber","columnNumber","onRetry","onDismiss","onMinimize","create","flex","backgroundColor","getTextColor"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Keyboard from '../../Components/Keyboard/Keyboard';\nimport View from '../../Components/View/View';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport * as LogBoxData from '../Data/LogBoxData';\nimport LogBoxLog, {type LogLevel} from '../Data/LogBoxLog';\nimport LogBoxInspectorBody from './LogBoxInspectorBody';\nimport LogBoxInspectorFooter from './LogBoxInspectorFooter';\nimport LogBoxInspectorHeader from './LogBoxInspectorHeader';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport * as React from 'react';\nimport {useEffect} from 'react';\n\ntype Props = $ReadOnly<{\n  onDismiss: () => void,\n  onChangeSelectedIndex: (index: number) => void,\n  onMinimize: () => void,\n  logs: $ReadOnlyArray<LogBoxLog>,\n  selectedIndex: number,\n  fatalType?: ?LogLevel,\n}>;\n\nexport default function LogBoxInspector(props: Props): React.Node {\n  const {logs, selectedIndex} = props;\n  let log = logs[selectedIndex];\n\n  useEffect(() => {\n    if (log) {\n      LogBoxData.symbolicateLogNow(log);\n    }\n  }, [log]);\n\n  useEffect(() => {\n    // Optimistically symbolicate the last and next logs.\n    if (logs.length > 1) {\n      const selected = selectedIndex;\n      const lastIndex = logs.length - 1;\n      const prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;\n      const nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;\n      LogBoxData.symbolicateLogLazy(logs[prevIndex]);\n      LogBoxData.symbolicateLogLazy(logs[nextIndex]);\n    }\n  }, [logs, selectedIndex]);\n\n  useEffect(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  function _handleRetry() {\n    LogBoxData.retrySymbolicateLogNow(log);\n  }\n\n  if (log == null) {\n    return null;\n  }\n\n  return (\n    <View style={styles.root}>\n      <LogBoxInspectorHeader\n        onSelectIndex={props.onChangeSelectedIndex}\n        selectedIndex={selectedIndex}\n        total={logs.length}\n        level={log.level}\n      />\n      <LogBoxInspectorBody log={log} onRetry={_handleRetry} />\n      <LogBoxInspectorFooter\n        onDismiss={props.onDismiss}\n        onMinimize={props.onMinimize}\n        level={log.level}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: LogBoxStyle.getTextColor(),\n  },\n});\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}