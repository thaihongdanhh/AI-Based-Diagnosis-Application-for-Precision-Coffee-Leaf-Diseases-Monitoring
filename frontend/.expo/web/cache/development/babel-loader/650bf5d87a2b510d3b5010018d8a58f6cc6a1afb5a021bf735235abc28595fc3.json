{"ast":null,"code":"'use strict';\n\nimport { useRef } from 'react';\nimport { useSharedValue } from \"./useSharedValue.js\";\nimport { getShadowNodeWrapperFromRef } from \"../fabricUtils\";\nimport { makeShareableCloneRecursive } from \"../shareables.js\";\nimport { shareableMappingCache } from \"../shareableMappingCache.js\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { findNodeHandle } from \"../platformFunctions/findNodeHandle\";\nimport { isFabric, isWeb } from \"../PlatformChecker.js\";\nconst IS_WEB = isWeb();\nfunction getComponentOrScrollable(component) {\n  if (isFabric() && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!isFabric() && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\nconst _worklet_9724470751943_init_data = {\n  code: \"function reactNativeReanimated_useAnimatedRefJs1(){const{tag,viewName}=this.__closure;const f=function(){return tag.value;};f.viewName=viewName;return f;}\",\n  location: \"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/lib/module/hook/useAnimatedRef.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"reactNativeReanimated_useAnimatedRefJs1\\\",\\\"tag\\\",\\\"viewName\\\",\\\"__closure\\\",\\\"f\\\",\\\"value\\\"],\\\"sources\\\":[\\\"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/lib/module/hook/useAnimatedRef.js\\\"],\\\"mappings\\\":\\\"AAqDc,SAAAA,uCAAMA,CAAA,QAAAC,GAAA,CAAAC,QAAA,OAAAC,SAAA,CAGZ,KAAM,CAAAC,CAAC,CAAG,QAAAA,CAAA,QAAM,CAAAH,GAAG,CAACI,KAAK,GACzBD,CAAC,CAACF,QAAQ,CAAGA,QAAQ,CACrB,MAAO,CAAAE,CAAC,CACV\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.16.1\"\n};\nexport function useAnimatedRef() {\n  const tag = useSharedValue(-1);\n  const viewName = useSharedValue(null);\n  const ref = useRef();\n  if (!ref.current) {\n    const fun = component => {\n      if (component) {\n        const getTagValueFunction = isFabric() ? getShadowNodeWrapperFromRef : findNodeHandle;\n        const getTagOrShadowNodeWrapper = () => {\n          return IS_WEB ? getComponentOrScrollable(component) : getTagValueFunction(getComponentOrScrollable(component));\n        };\n        tag.value = getTagOrShadowNodeWrapper();\n        fun.getTag = isFabric() ? () => findNodeHandle(getComponentOrScrollable(component)) : getTagOrShadowNodeWrapper;\n        fun.current = component;\n        if (Platform.OS === 'ios' && !isFabric()) {\n          viewName.value = component?.viewConfig?.uiViewClassName || 'RCTView';\n        }\n      }\n      return tag.value;\n    };\n    fun.current = null;\n    const animatedRefShareableHandle = makeShareableCloneRecursive({\n      __init: function () {\n        const _e = [new global.Error(), -3, -27];\n        const reactNativeReanimated_useAnimatedRefJs1 = function () {\n          const f = () => tag.value;\n          f.viewName = viewName;\n          return f;\n        };\n        reactNativeReanimated_useAnimatedRefJs1.__closure = {\n          tag,\n          viewName\n        };\n        reactNativeReanimated_useAnimatedRefJs1.__workletHash = 9724470751943;\n        reactNativeReanimated_useAnimatedRefJs1.__initData = _worklet_9724470751943_init_data;\n        reactNativeReanimated_useAnimatedRefJs1.__stackDetails = _e;\n        return reactNativeReanimated_useAnimatedRefJs1;\n      }()\n    });\n    shareableMappingCache.set(fun, animatedRefShareableHandle);\n    ref.current = fun;\n  }\n  return ref.current;\n}","map":{"version":3,"names":["useRef","useSharedValue","getShadowNodeWrapperFromRef","makeShareableCloneRecursive","shareableMappingCache","Platform","findNodeHandle","isFabric","isWeb","IS_WEB","getComponentOrScrollable","component","getNativeScrollRef","getScrollableNode","_worklet_9724470751943_init_data","code","location","sourceMap","version","useAnimatedRef","tag","viewName","ref","current","fun","getTagValueFunction","getTagOrShadowNodeWrapper","value","getTag","OS","viewConfig","uiViewClassName","animatedRefShareableHandle","__init","_e","global","Error","reactNativeReanimated_useAnimatedRefJs1","f","__closure","__workletHash","__initData","__stackDetails","set"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/src/hook/useAnimatedRef.ts"],"sourcesContent":["'use strict';\nimport type { Component } from 'react';\nimport { useRef } from 'react';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedRef, AnimatedRefOnUI } from './commonTypes';\nimport type { ShadowNodeWrapper } from '../commonTypes';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { makeShareableCloneRecursive } from '../shareables';\nimport { shareableMappingCache } from '../shareableMappingCache';\nimport { Platform } from 'react-native';\nimport { findNodeHandle } from '../platformFunctions/findNodeHandle';\nimport type { ScrollView, FlatList } from 'react-native';\nimport { isFabric, isWeb } from '../PlatformChecker';\n\nconst IS_WEB = isWeb();\n\ninterface MaybeScrollableComponent extends Component {\n  getNativeScrollRef?: FlatList['getNativeScrollRef'];\n  getScrollableNode?:\n    | ScrollView['getScrollableNode']\n    | FlatList['getScrollableNode'];\n  viewConfig?: {\n    uiViewClassName?: string;\n  };\n}\n\nfunction getComponentOrScrollable(component: MaybeScrollableComponent) {\n  if (isFabric() && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!isFabric() && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\n\n/**\n * Lets you get a reference of a view that you can use inside a worklet.\n *\n * @returns An object with a `.current` property which contains an instance of a\n *   component.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef\n */\nexport function useAnimatedRef<\n  TComponent extends Component,\n>(): AnimatedRef<TComponent> {\n  const tag = useSharedValue<number | ShadowNodeWrapper | null>(-1);\n  const viewName = useSharedValue<string | null>(null);\n\n  const ref = useRef<AnimatedRef<TComponent>>();\n\n  if (!ref.current) {\n    const fun: AnimatedRef<TComponent> = <AnimatedRef<TComponent>>((\n      component\n    ) => {\n      // enters when ref is set by attaching to a component\n      if (component) {\n        const getTagValueFunction = isFabric()\n          ? getShadowNodeWrapperFromRef\n          : findNodeHandle;\n\n        const getTagOrShadowNodeWrapper = () => {\n          return IS_WEB\n            ? getComponentOrScrollable(component)\n            : getTagValueFunction(getComponentOrScrollable(component));\n        };\n\n        tag.value = getTagOrShadowNodeWrapper();\n\n        // On Fabric we have to unwrap the tag from the shadow node wrapper\n        fun.getTag = isFabric()\n          ? () => findNodeHandle(getComponentOrScrollable(component))\n          : getTagOrShadowNodeWrapper;\n\n        fun.current = component;\n        // viewName is required only on iOS with Paper\n        if (Platform.OS === 'ios' && !isFabric()) {\n          viewName.value =\n            (component as MaybeScrollableComponent)?.viewConfig\n              ?.uiViewClassName || 'RCTView';\n        }\n      }\n      return tag.value;\n    });\n\n    fun.current = null;\n\n    const animatedRefShareableHandle = makeShareableCloneRecursive({\n      __init: () => {\n        'worklet';\n        const f: AnimatedRefOnUI = () => tag.value;\n        f.viewName = viewName;\n        return f;\n      },\n    });\n    shareableMappingCache.set(fun, animatedRefShareableHandle);\n    ref.current = fun;\n  }\n\n  return ref.current;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,cAAc;AAGvB,SAASC,2BAA2B;AACpC,SAASC,2BAA2B;AACpC,SAASC,qBAAqB;AAAkC,OAAAC,QAAA;AAEhE,SAASC,cAAc;AAEvB,SAASC,QAAQ,EAAEC,KAAK;AAExB,MAAMC,MAAM,GAAGD,KAAK,CAAC,CAAC;AAYtB,SAASE,wBAAwBA,CAACC,SAAmC,EAAE;EACrE,IAAIJ,QAAQ,CAAC,CAAC,IAAII,SAAS,CAACC,kBAAkB,EAAE;IAC9C,OAAOD,SAAS,CAACC,kBAAkB,CAAC,CAAC;EACvC,CAAC,MAAM,IAAI,CAACL,QAAQ,CAAC,CAAC,IAAII,SAAS,CAACE,iBAAiB,EAAE;IACrD,OAAOF,SAAS,CAACE,iBAAiB,CAAC,CAAC;EACtC;EACA,OAAOF,SAAS;AAClB;AAAA,MAAAG,gCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;EAAAC,OAAA;AAAA;AASA,OAAO,SAASC,cAAcA,CAAA,EAED;EAC3B,MAAMC,GAAG,GAAGnB,cAAc,CAAoC,CAAC,CAAC,CAAC;EACjE,MAAMoB,QAAQ,GAAGpB,cAAc,CAAgB,IAAI,CAAC;EAEpD,MAAMqB,GAAG,GAAGtB,MAAM,CAA0B,CAAC;EAE7C,IAAI,CAACsB,GAAG,CAACC,OAAO,EAAE;IAChB,MAAMC,GAA4B,GAChCb,SAAS,IACN;MAEH,IAAIA,SAAS,EAAE;QACb,MAAMc,mBAAmB,GAAGlB,QAAQ,CAAC,CAAC,GAClCL,2BAA2B,GAC3BI,cAAc;QAElB,MAAMoB,yBAAyB,GAAGA,CAAA,KAAM;UACtC,OAAOjB,MAAM,GACTC,wBAAwB,CAACC,SAAS,CAAC,GACnCc,mBAAmB,CAACf,wBAAwB,CAACC,SAAS,CAAC,CAAC;QAC9D,CAAC;QAEDS,GAAG,CAACO,KAAK,GAAGD,yBAAyB,CAAC,CAAC;QAGvCF,GAAG,CAACI,MAAM,GAAGrB,QAAQ,CAAC,CAAC,GACnB,MAAMD,cAAc,CAACI,wBAAwB,CAACC,SAAS,CAAC,CAAC,GACzDe,yBAAyB;QAE7BF,GAAG,CAACD,OAAO,GAAGZ,SAAS;QAEvB,IAAIN,QAAQ,CAACwB,EAAE,KAAK,KAAK,IAAI,CAACtB,QAAQ,CAAC,CAAC,EAAE;UACxCc,QAAQ,CAACM,KAAK,GACXhB,SAAS,EAA+BmB,UAAU,EAC/CC,eAAe,IAAI,SAAS;QACpC;MACF;MACA,OAAOX,GAAG,CAACO,KAAK;IAClB,CAAE;IAEFH,GAAG,CAACD,OAAO,GAAG,IAAI;IAElB,MAAMS,0BAA0B,GAAG7B,2BAA2B,CAAC;MAC7D8B,MAAM,EAAE;QAAA,MAAAC,EAAA,QAAAC,MAAA,CAAAC,KAAA;QAAA,MAAAC,uCAAA,YAAAA,CAAA,EAAM;UAEZ,MAAMC,CAAkB,GAAGA,CAAA,KAAMlB,GAAG,CAACO,KAAK;UAC1CW,CAAC,CAACjB,QAAQ,GAAGA,QAAQ;UACrB,OAAOiB,CAAC;QACV;QAAAD,uCAAA,CAAAE,SAAA;UAAAnB,GAAA;UAAAC;QAAA;QAAAgB,uCAAA,CAAAG,aAAA;QAAAH,uCAAA,CAAAI,UAAA,GAAA3B,gCAAA;QAAAuB,uCAAA,CAAAK,cAAA,GAAAR,EAAA;QAAA,OAAAG,uCAAA;MAAA,CALQ;IAMV,CAAC,CAAC;IACFjC,qBAAqB,CAACuC,GAAG,CAACnB,GAAG,EAAEQ,0BAA0B,CAAC;IAC1DV,GAAG,CAACC,OAAO,GAAGC,GAAG;EACnB;EAEA,OAAOF,GAAG,CAACC,OAAO;AACpB"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}