{"ast":null,"code":"'use strict';\n\nimport { WebEasings } from \"./Easing.web.js\";\nexport function convertAnimationObjectToKeyframes(animationObject) {\n  let keyframe = `@keyframes ${animationObject.name} { `;\n  for (const [timestamp, style] of Object.entries(animationObject.style)) {\n    const step = timestamp === 'from' ? 0 : timestamp === 'to' ? 100 : timestamp;\n    keyframe += `${step}% { `;\n    for (const [property, values] of Object.entries(style)) {\n      if (property === 'easing') {\n        let easingName = 'linear';\n        if (values in WebEasings) {\n          easingName = values;\n        } else if (values.name in WebEasings) {\n          easingName = values.name;\n        }\n        keyframe += `animation-timing-function: cubic-bezier(${WebEasings[easingName].toString()});`;\n        continue;\n      }\n      if (property === 'originX') {\n        keyframe += `left: ${values}px; `;\n        continue;\n      }\n      if (property === 'originY') {\n        keyframe += `top: ${values}px; `;\n        continue;\n      }\n      if (property !== 'transform') {\n        keyframe += `${property}: ${values}; `;\n        continue;\n      }\n      keyframe += `transform:`;\n      values.forEach(value => {\n        for (const [transformProperty, transformPropertyValue] of Object.entries(value)) {\n          keyframe += ` ${transformProperty}(${transformPropertyValue})`;\n        }\n      });\n      keyframe += `; `;\n    }\n    keyframe += `} `;\n  }\n  keyframe += `} `;\n  return keyframe;\n}","map":{"version":3,"names":["WebEasings","convertAnimationObjectToKeyframes","animationObject","keyframe","name","timestamp","style","Object","entries","step","property","values","easingName","toString","forEach","value","transformProperty","transformPropertyValue"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/src/layoutReanimation/web/animationParser.ts"],"sourcesContent":["'use strict';\n\nimport { WebEasings } from './Easing.web';\nimport type { WebEasingsNames } from './Easing.web';\n\nexport interface ReanimatedWebTransformProperties {\n  translateX?: string;\n  translateY?: string;\n  rotate?: string;\n  rotateX?: string;\n  rotateY?: string;\n  scale?: number | string;\n  scaleX?: number;\n  scaleY?: number;\n  perspective?: string;\n  skew?: string;\n  skewX?: string;\n}\n\nexport interface AnimationStyle {\n  opacity?: number;\n  transform?: ReanimatedWebTransformProperties[];\n}\n\nexport interface AnimationData {\n  name: string;\n  style: Record<number, AnimationStyle>;\n  duration: number;\n}\n\nexport interface TransitionData {\n  translateX: number;\n  translateY: number;\n  scaleX: number;\n  scaleY: number;\n  reversed?: boolean;\n  easingX?: string;\n  easingY?: string;\n  entering?: any;\n  exiting?: any;\n}\n\nexport function convertAnimationObjectToKeyframes(\n  animationObject: AnimationData\n) {\n  let keyframe = `@keyframes ${animationObject.name} { `;\n\n  for (const [timestamp, style] of Object.entries(animationObject.style)) {\n    const step =\n      timestamp === 'from' ? 0 : timestamp === 'to' ? 100 : timestamp;\n\n    keyframe += `${step}% { `;\n\n    for (const [property, values] of Object.entries(style)) {\n      if (property === 'easing') {\n        let easingName: WebEasingsNames = 'linear';\n\n        if (values in WebEasings) {\n          easingName = values;\n        } else if (values.name in WebEasings) {\n          easingName = values.name;\n        }\n\n        keyframe += `animation-timing-function: cubic-bezier(${WebEasings[\n          easingName\n        ].toString()});`;\n\n        continue;\n      }\n\n      if (property === 'originX') {\n        keyframe += `left: ${values}px; `;\n        continue;\n      }\n\n      if (property === 'originY') {\n        keyframe += `top: ${values}px; `;\n        continue;\n      }\n\n      if (property !== 'transform') {\n        keyframe += `${property}: ${values}; `;\n        continue;\n      }\n\n      keyframe += `transform:`;\n\n      values.forEach((value: ReanimatedWebTransformProperties) => {\n        for (const [\n          transformProperty,\n          transformPropertyValue,\n        ] of Object.entries(value)) {\n          keyframe += ` ${transformProperty}(${transformPropertyValue})`;\n        }\n      });\n      keyframe += `; `; // Property end\n    }\n    keyframe += `} `; // Timestamp end\n  }\n  keyframe += `} `; // Keyframe end\n\n  return keyframe;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,UAAU;AAwCnB,OAAO,SAASC,iCAAiCA,CAC/CC,eAA8B,EAC9B;EACA,IAAIC,QAAQ,GAAG,cAAcD,eAAe,CAACE,IAAI,KAAK;EAEtD,KAAK,MAAM,CAACC,SAAS,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACN,eAAe,CAACI,KAAK,CAAC,EAAE;IACtE,MAAMG,IAAI,GACRJ,SAAS,KAAK,MAAM,GAAG,CAAC,GAAGA,SAAS,KAAK,IAAI,GAAG,GAAG,GAAGA,SAAS;IAEjEF,QAAQ,IAAI,GAAGM,IAAI,MAAM;IAEzB,KAAK,MAAM,CAACC,QAAQ,EAAEC,MAAM,CAAC,IAAIJ,MAAM,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MACtD,IAAII,QAAQ,KAAK,QAAQ,EAAE;QACzB,IAAIE,UAA2B,GAAG,QAAQ;QAE1C,IAAID,MAAM,IAAIX,UAAU,EAAE;UACxBY,UAAU,GAAGD,MAAM;QACrB,CAAC,MAAM,IAAIA,MAAM,CAACP,IAAI,IAAIJ,UAAU,EAAE;UACpCY,UAAU,GAAGD,MAAM,CAACP,IAAI;QAC1B;QAEAD,QAAQ,IAAI,2CAA2CH,UAAU,CAC/DY,UAAU,CACX,CAACC,QAAQ,CAAC,CAAC,IAAI;QAEhB;MACF;MAEA,IAAIH,QAAQ,KAAK,SAAS,EAAE;QAC1BP,QAAQ,IAAI,SAASQ,MAAM,MAAM;QACjC;MACF;MAEA,IAAID,QAAQ,KAAK,SAAS,EAAE;QAC1BP,QAAQ,IAAI,QAAQQ,MAAM,MAAM;QAChC;MACF;MAEA,IAAID,QAAQ,KAAK,WAAW,EAAE;QAC5BP,QAAQ,IAAI,GAAGO,QAAQ,KAAKC,MAAM,IAAI;QACtC;MACF;MAEAR,QAAQ,IAAI,YAAY;MAExBQ,MAAM,CAACG,OAAO,CAAEC,KAAuC,IAAK;QAC1D,KAAK,MAAM,CACTC,iBAAiB,EACjBC,sBAAsB,CACvB,IAAIV,MAAM,CAACC,OAAO,CAACO,KAAK,CAAC,EAAE;UAC1BZ,QAAQ,IAAI,IAAIa,iBAAiB,IAAIC,sBAAsB,GAAG;QAChE;MACF,CAAC,CAAC;MACFd,QAAQ,IAAI,IAAI;IAClB;IACAA,QAAQ,IAAI,IAAI;EAClB;EACAA,QAAQ,IAAI,IAAI;EAEhB,OAAOA,QAAQ;AACjB"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}