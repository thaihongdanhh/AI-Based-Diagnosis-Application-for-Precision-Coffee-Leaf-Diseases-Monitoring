{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"order\", \"defaultNavigationOptions\", \"navigationOptions\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { NavigationRouteContext } from '@react-navigation/native';\nimport CompatScreen from \"./CompatScreen\";\nimport ScreenPropsContext from \"./ScreenPropsContext\";\nimport createCompatNavigationProp from \"./createCompatNavigationProp\";\nexport default function createCompatNavigatorFactory(createNavigator) {\n  if (createNavigator.isCompat) {\n    throw new Error(\"The navigator is already in compat mode. You don't need to wrap it in 'createCompatNavigatorFactory'.\");\n  }\n  const createCompatNavigator = (routeConfig, navigationConfig = {}) => {\n    const Pair = createNavigator();\n    const {\n        order,\n        defaultNavigationOptions,\n        navigationOptions: parentNavigationOptions\n      } = navigationConfig,\n      restConfig = _objectWithoutPropertiesLoose(navigationConfig, _excluded);\n    const routeNames = order !== undefined ? order : Object.keys(routeConfig);\n    function Navigator({\n      screenProps\n    }) {\n      var _React$useContext;\n      const parentRouteParams = (_React$useContext = React.useContext(NavigationRouteContext)) === null || _React$useContext === void 0 ? void 0 : _React$useContext.params;\n      const screens = React.useMemo(() => routeNames.map(name => {\n        let getScreenComponent;\n        let initialParams;\n        const routeConfigItem = routeConfig[name];\n        if ('getScreen' in routeConfigItem) {\n          getScreenComponent = routeConfigItem.getScreen;\n          initialParams = routeConfigItem.params;\n        } else if ('screen' in routeConfigItem) {\n          getScreenComponent = () => routeConfigItem.screen;\n          initialParams = routeConfigItem.params;\n        } else {\n          getScreenComponent = () => routeConfigItem;\n        }\n        const screenOptions = ({\n          navigation,\n          route\n        }) => {\n          const routeNavigationOptions = routeConfigItem.navigationOptions;\n          const screenNavigationOptions = getScreenComponent().navigationOptions;\n          if (routeNavigationOptions == null && screenNavigationOptions == null) {\n            return undefined;\n          }\n          const options = typeof routeNavigationOptions === 'function' || typeof screenNavigationOptions === 'function' ? {\n            navigation: createCompatNavigationProp(navigation, route, {}),\n            navigationOptions: defaultNavigationOptions || {},\n            screenProps\n          } : {};\n          return Object.assign({}, typeof routeNavigationOptions === 'function' ? routeNavigationOptions(options) : routeNavigationOptions, typeof screenNavigationOptions === 'function' ? screenNavigationOptions(options) : screenNavigationOptions);\n        };\n        return React.createElement(Pair.Screen, {\n          key: name,\n          name: name,\n          initialParams: Object.assign({}, parentRouteParams, initialParams),\n          options: screenOptions\n        }, () => React.createElement(CompatScreen, {\n          getComponent: getScreenComponent\n        }));\n      }), [parentRouteParams, screenProps]);\n      return React.createElement(ScreenPropsContext.Provider, {\n        value: screenProps\n      }, React.createElement(Pair.Navigator, _extends({}, restConfig, {\n        screenOptions: defaultNavigationOptions\n      }), screens));\n    }\n    Navigator.navigationOptions = parentNavigationOptions;\n    return Navigator;\n  };\n  Object.defineProperties(createCompatNavigator, {\n    isCompat: {\n      get() {\n        return true;\n      }\n    },\n    router: {\n      get() {\n        throw new Error(\"It's no longer possible to access the router with the 'router' property.\");\n      },\n      set() {\n        throw new Error(\"It's no longer possible to override the router by assigning the 'router' property.\");\n      }\n    }\n  });\n  return createCompatNavigator;\n}","map":{"version":3,"names":["React","NavigationRouteContext","CompatScreen","ScreenPropsContext","createCompatNavigationProp","createCompatNavigatorFactory","createNavigator","isCompat","Error","createCompatNavigator","routeConfig","navigationConfig","Pair","order","defaultNavigationOptions","navigationOptions","parentNavigationOptions","restConfig","_objectWithoutPropertiesLoose","_excluded","routeNames","undefined","Object","keys","Navigator","screenProps","_React$useContext","parentRouteParams","useContext","params","screens","useMemo","map","name","getScreenComponent","initialParams","routeConfigItem","getScreen","screen","screenOptions","navigation","route","routeNavigationOptions","screenNavigationOptions","options","assign","createElement","Screen","key","getComponent","Provider","value","_extends","defineProperties","get","router","set"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/@react-navigation/compat/lib/module/createCompatNavigatorFactory.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  NavigationState,\n  PartialState,\n  ParamListBase,\n  TypedNavigator,\n  NavigationProp,\n  RouteProp,\n  NavigationRouteContext,\n} from '@react-navigation/native';\nimport CompatScreen from './CompatScreen';\nimport ScreenPropsContext from './ScreenPropsContext';\nimport createCompatNavigationProp from './createCompatNavigationProp';\nimport type { CompatScreenType, CompatRouteConfig } from './types';\n\nexport default function createCompatNavigatorFactory<\n  CreateNavigator extends () => TypedNavigator<\n    ParamListBase,\n    NavigationState,\n    {},\n    any,\n    React.ComponentType<any>\n  >\n>(createNavigator: CreateNavigator) {\n  // @ts-expect-error: isCompat may or may not exist\n  if (createNavigator.isCompat) {\n    throw new Error(\n      `The navigator is already in compat mode. You don't need to wrap it in 'createCompatNavigatorFactory'.`\n    );\n  }\n\n  const createCompatNavigator = <\n    NavigationPropType extends NavigationProp<any, any, any, any, any>,\n    ParamList extends ParamListBase = NavigationPropType extends NavigationProp<\n      infer P,\n      any,\n      any,\n      any,\n      any\n    >\n      ? P\n      : ParamListBase,\n    ScreenOptions extends {} = NavigationPropType extends NavigationProp<\n      any,\n      any,\n      any,\n      infer O\n    >\n      ? O\n      : {},\n    NavigationConfig extends {} = React.ComponentProps<\n      ReturnType<CreateNavigator>['Navigator']\n    >\n  >(\n    routeConfig: CompatRouteConfig<NavigationPropType>,\n    navigationConfig: Partial<Omit<NavigationConfig, 'screenOptions'>> & {\n      order?: Extract<keyof ParamList, string>[];\n      defaultNavigationOptions?: ScreenOptions;\n      navigationOptions?: Record<string, any>;\n    } = {}\n  ) => {\n    const Pair = createNavigator();\n\n    const {\n      order,\n      defaultNavigationOptions,\n      navigationOptions: parentNavigationOptions,\n      ...restConfig\n    } = navigationConfig;\n\n    const routeNames = order !== undefined ? order : Object.keys(routeConfig);\n\n    function Navigator({ screenProps }: { screenProps?: unknown }) {\n      const parentRouteParams = React.useContext(NavigationRouteContext)\n        ?.params;\n\n      const screens = React.useMemo(\n        () =>\n          routeNames.map((name) => {\n            let getScreenComponent: () => CompatScreenType<NavigationPropType>;\n\n            let initialParams;\n\n            const routeConfigItem = routeConfig[name];\n\n            if ('getScreen' in routeConfigItem) {\n              getScreenComponent = routeConfigItem.getScreen;\n              initialParams = routeConfigItem.params;\n            } else if ('screen' in routeConfigItem) {\n              getScreenComponent = () => routeConfigItem.screen;\n              initialParams = routeConfigItem.params;\n            } else {\n              getScreenComponent = () => routeConfigItem;\n            }\n\n            const screenOptions = ({\n              navigation,\n              route,\n            }: {\n              navigation: NavigationPropType;\n              route: RouteProp<ParamList, keyof ParamList> & {\n                state?: NavigationState | PartialState<NavigationState>;\n              };\n            }) => {\n              // @ts-expect-error: navigationOptions may exists on the component, but TS is dumb\n              const routeNavigationOptions = routeConfigItem.navigationOptions;\n              const screenNavigationOptions = getScreenComponent()\n                .navigationOptions;\n\n              if (\n                routeNavigationOptions == null &&\n                screenNavigationOptions == null\n              ) {\n                return undefined;\n              }\n\n              const options =\n                typeof routeNavigationOptions === 'function' ||\n                typeof screenNavigationOptions === 'function'\n                  ? {\n                      navigation: createCompatNavigationProp<\n                        NavigationPropType,\n                        ParamList\n                      >(navigation, route, {}),\n                      navigationOptions: defaultNavigationOptions || {},\n                      screenProps,\n                    }\n                  : {};\n\n              return {\n                ...(typeof routeNavigationOptions === 'function'\n                  ? routeNavigationOptions(options)\n                  : routeNavigationOptions),\n                ...(typeof screenNavigationOptions === 'function'\n                  ? (screenNavigationOptions as (o: any) => ScreenOptions)(\n                      options\n                    )\n                  : screenNavigationOptions),\n              } as ScreenOptions;\n            };\n\n            return (\n              <Pair.Screen\n                key={name}\n                name={name}\n                initialParams={{ ...parentRouteParams, ...initialParams }}\n                options={screenOptions}\n              >\n                {() => <CompatScreen getComponent={getScreenComponent} />}\n              </Pair.Screen>\n            );\n          }),\n        [parentRouteParams, screenProps]\n      );\n\n      return (\n        <ScreenPropsContext.Provider value={screenProps}>\n          <Pair.Navigator\n            {...(restConfig as NavigationConfig)}\n            screenOptions={defaultNavigationOptions}\n          >\n            {screens}\n          </Pair.Navigator>\n        </ScreenPropsContext.Provider>\n      );\n    }\n\n    Navigator.navigationOptions = parentNavigationOptions;\n\n    return Navigator;\n  };\n\n  Object.defineProperties(createCompatNavigator, {\n    isCompat: {\n      get() {\n        return true;\n      },\n    },\n    router: {\n      get() {\n        throw new Error(\n          \"It's no longer possible to access the router with the 'router' property.\"\n        );\n      },\n      set() {\n        throw new Error(\n          \"It's no longer possible to override the router by assigning the 'router' property.\"\n        );\n      },\n    },\n  });\n\n  return createCompatNavigator;\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}