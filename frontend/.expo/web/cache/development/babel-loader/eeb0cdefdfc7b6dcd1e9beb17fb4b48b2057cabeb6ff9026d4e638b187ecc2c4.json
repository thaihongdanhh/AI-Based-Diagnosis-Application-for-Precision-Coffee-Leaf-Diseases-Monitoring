{"ast":null,"code":"import ReadOnlyNode, { getShadowNode } from \"./ReadOnlyNode\";\nimport NativeDOM from \"./specs/NativeDOM\";\nimport { getElementSibling } from \"./utilities/Traversal\";\nexport default class ReadOnlyCharacterData extends ReadOnlyNode {\n  get nextElementSibling() {\n    return getElementSibling(this, 'next');\n  }\n  get previousElementSibling() {\n    return getElementSibling(this, 'previous');\n  }\n  get data() {\n    const shadowNode = getShadowNode(this);\n    if (shadowNode != null) {\n      return NativeDOM.getTextContent(shadowNode);\n    }\n    return '';\n  }\n  get length() {\n    return this.data.length;\n  }\n  get textContent() {\n    return this.data;\n  }\n  get nodeValue() {\n    return this.data;\n  }\n  substringData(offset, count) {\n    const data = this.data;\n    if (offset < 0) {\n      throw new TypeError(`Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is negative.`);\n    }\n    if (offset > data.length) {\n      throw new TypeError(`Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is greater than the node's length (${data.length}).`);\n    }\n    let adjustedCount = count < 0 || count > data.length ? data.length : count;\n    return data.slice(offset, offset + adjustedCount);\n  }\n}","map":{"version":3,"names":["ReadOnlyNode","getShadowNode","NativeDOM","getElementSibling","ReadOnlyCharacterData","nextElementSibling","previousElementSibling","data","shadowNode","getTextContent","length","textContent","nodeValue","substringData","offset","count","TypeError","adjustedCount","slice"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/src/private/webapis/dom/nodes/ReadOnlyCharacterData.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// flowlint unsafe-getters-setters:off\n\nimport type ReadOnlyElement from './ReadOnlyElement';\n\nimport ReadOnlyNode, {getShadowNode} from './ReadOnlyNode';\nimport NativeDOM from './specs/NativeDOM';\nimport {getElementSibling} from './utilities/Traversal';\n\nexport default class ReadOnlyCharacterData extends ReadOnlyNode {\n  get nextElementSibling(): ReadOnlyElement | null {\n    return getElementSibling(this, 'next');\n  }\n\n  get previousElementSibling(): ReadOnlyElement | null {\n    return getElementSibling(this, 'previous');\n  }\n\n  get data(): string {\n    const shadowNode = getShadowNode(this);\n\n    if (shadowNode != null) {\n      return NativeDOM.getTextContent(shadowNode);\n    }\n\n    return '';\n  }\n\n  get length(): number {\n    return this.data.length;\n  }\n\n  /**\n   * @override\n   */\n  get textContent(): string | null {\n    return this.data;\n  }\n\n  /**\n   * @override\n   */\n  get nodeValue(): string {\n    return this.data;\n  }\n\n  substringData(offset: number, count: number): string {\n    const data = this.data;\n    if (offset < 0) {\n      throw new TypeError(\n        `Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is negative.`,\n      );\n    }\n    if (offset > data.length) {\n      throw new TypeError(\n        `Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is greater than the node's length (${data.length}).`,\n      );\n    }\n    let adjustedCount = count < 0 || count > data.length ? data.length : count;\n    return data.slice(offset, offset + adjustedCount);\n  }\n}\n"],"mappings":"AAcA,OAAOA,YAAY,IAAGC,aAAa;AACnC,OAAOC,SAAS;AAChB,SAAQC,iBAAiB;AAEzB,eAAe,MAAMC,qBAAqB,SAASJ,YAAY,CAAC;EAC9D,IAAIK,kBAAkBA,CAAA,EAA2B;IAC/C,OAAOF,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC;EACxC;EAEA,IAAIG,sBAAsBA,CAAA,EAA2B;IACnD,OAAOH,iBAAiB,CAAC,IAAI,EAAE,UAAU,CAAC;EAC5C;EAEA,IAAII,IAAIA,CAAA,EAAW;IACjB,MAAMC,UAAU,GAAGP,aAAa,CAAC,IAAI,CAAC;IAEtC,IAAIO,UAAU,IAAI,IAAI,EAAE;MACtB,OAAON,SAAS,CAACO,cAAc,CAACD,UAAU,CAAC;IAC7C;IAEA,OAAO,EAAE;EACX;EAEA,IAAIE,MAAMA,CAAA,EAAW;IACnB,OAAO,IAAI,CAACH,IAAI,CAACG,MAAM;EACzB;EAKA,IAAIC,WAAWA,CAAA,EAAkB;IAC/B,OAAO,IAAI,CAACJ,IAAI;EAClB;EAKA,IAAIK,SAASA,CAAA,EAAW;IACtB,OAAO,IAAI,CAACL,IAAI;EAClB;EAEAM,aAAaA,CAACC,MAAc,EAAEC,KAAa,EAAU;IACnD,MAAMR,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,IAAIO,MAAM,GAAG,CAAC,EAAE;MACd,MAAM,IAAIE,SAAS,CAChB,oEAAmEF,MAAO,eAC7E,CAAC;IACH;IACA,IAAIA,MAAM,GAAGP,IAAI,CAACG,MAAM,EAAE;MACxB,MAAM,IAAIM,SAAS,CAChB,oEAAmEF,MAAO,uCAAsCP,IAAI,CAACG,MAAO,IAC/H,CAAC;IACH;IACA,IAAIO,aAAa,GAAGF,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGR,IAAI,CAACG,MAAM,GAAGH,IAAI,CAACG,MAAM,GAAGK,KAAK;IAC1E,OAAOR,IAAI,CAACW,KAAK,CAACJ,MAAM,EAAEA,MAAM,GAAGG,aAAa,CAAC;EACnD;AACF"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}