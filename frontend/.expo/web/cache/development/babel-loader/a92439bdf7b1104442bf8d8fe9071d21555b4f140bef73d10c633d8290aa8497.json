{"ast":null,"code":"'use strict';\n\nclass FormData {\n  constructor() {\n    this._parts = [];\n  }\n  append(key, value) {\n    this._parts.push([key, value]);\n  }\n  getAll(key) {\n    return this._parts.filter(([name]) => name === key).map(([, value]) => value);\n  }\n  getParts() {\n    return this._parts.map(([name, value]) => {\n      const contentDisposition = 'form-data; name=\"' + name + '\"';\n      const headers = {\n        'content-disposition': contentDisposition\n      };\n      if (typeof value === 'object' && !Array.isArray(value) && value) {\n        if (typeof value.name === 'string') {\n          headers['content-disposition'] += `; filename=\"${value.name}\"; filename*=utf-8''${encodeURI(value.name)}`;\n        }\n        if (typeof value.type === 'string') {\n          headers['content-type'] = value.type;\n        }\n        return Object.assign({}, value, {\n          headers,\n          fieldName: name\n        });\n      }\n      return {\n        string: String(value),\n        headers,\n        fieldName: name\n      };\n    });\n  }\n}\nmodule.exports = FormData;","map":{"version":3,"names":["FormData","constructor","_parts","append","key","value","push","getAll","filter","name","map","getParts","contentDisposition","headers","Array","isArray","encodeURI","type","Object","assign","fieldName","string","String","module","exports"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Network/FormData.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\ntype FormDataValue = string | {name?: string, type?: string, uri: string};\ntype FormDataNameValuePair = [string, FormDataValue];\n\ntype Headers = {[name: string]: string, ...};\ntype FormDataPart =\n  | {\n      string: string,\n      headers: Headers,\n      ...\n    }\n  | {\n      uri: string,\n      headers: Headers,\n      name?: string,\n      type?: string,\n      ...\n    };\n\n/**\n * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests\n * with mixed data (string, native files) to be submitted via XMLHttpRequest.\n *\n * Example:\n *\n *   var photo = {\n *     uri: uriFromCameraRoll,\n *     type: 'image/jpeg',\n *     name: 'photo.jpg',\n *   };\n *\n *   var body = new FormData();\n *   body.append('authToken', 'secret');\n *   body.append('photo', photo);\n *   body.append('title', 'A beautiful photo!');\n *\n *   xhr.open('POST', serverURL);\n *   xhr.send(body);\n */\nclass FormData {\n  _parts: Array<FormDataNameValuePair>;\n\n  constructor() {\n    this._parts = [];\n  }\n\n  append(key: string, value: FormDataValue) {\n    // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.\n    // MDN says that any new values should be appended to existing values.\n    // In any case, major browsers allow duplicate keys, so that's what we'll do\n    // too. They'll simply get appended as additional form data parts in the\n    // request body, leaving the server to deal with them.\n    this._parts.push([key, value]);\n  }\n\n  getAll(key: string): Array<FormDataValue> {\n    return this._parts\n      .filter(([name]) => name === key)\n      .map(([, value]) => value);\n  }\n\n  getParts(): Array<FormDataPart> {\n    return this._parts.map(([name, value]) => {\n      const contentDisposition = 'form-data; name=\"' + name + '\"';\n\n      const headers: Headers = {'content-disposition': contentDisposition};\n\n      // The body part is a \"blob\", which in React Native just means\n      // an object with a `uri` attribute. Optionally, it can also\n      // have a `name` and `type` attribute to specify filename and\n      // content type (cf. web Blob interface.)\n      if (typeof value === 'object' && !Array.isArray(value) && value) {\n        if (typeof value.name === 'string') {\n          headers['content-disposition'] += `; filename=\"${\n            value.name\n          }\"; filename*=utf-8''${encodeURI(value.name)}`;\n        }\n        if (typeof value.type === 'string') {\n          headers['content-type'] = value.type;\n        }\n        return {...value, headers, fieldName: name};\n      }\n      // Convert non-object values to strings as per FormData.append() spec\n      return {string: String(value), headers, fieldName: name};\n    });\n  }\n}\n\nmodule.exports = FormData;\n"],"mappings":"AAUA,YAAY;;AAwCZ,MAAMA,QAAQ,CAAC;EAGbC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE;EAClB;EAEAC,MAAMA,CAACC,GAAW,EAAEC,KAAoB,EAAE;IAMxC,IAAI,CAACH,MAAM,CAACI,IAAI,CAAC,CAACF,GAAG,EAAEC,KAAK,CAAC,CAAC;EAChC;EAEAE,MAAMA,CAACH,GAAW,EAAwB;IACxC,OAAO,IAAI,CAACF,MAAM,CACfM,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,KAAKA,IAAI,KAAKL,GAAG,CAAC,CAChCM,GAAG,CAAC,CAAC,GAAGL,KAAK,CAAC,KAAKA,KAAK,CAAC;EAC9B;EAEAM,QAAQA,CAAA,EAAwB;IAC9B,OAAO,IAAI,CAACT,MAAM,CAACQ,GAAG,CAAC,CAAC,CAACD,IAAI,EAAEJ,KAAK,CAAC,KAAK;MACxC,MAAMO,kBAAkB,GAAG,mBAAmB,GAAGH,IAAI,GAAG,GAAG;MAE3D,MAAMI,OAAgB,GAAG;QAAC,qBAAqB,EAAED;MAAkB,CAAC;MAMpE,IAAI,OAAOP,KAAK,KAAK,QAAQ,IAAI,CAACS,KAAK,CAACC,OAAO,CAACV,KAAK,CAAC,IAAIA,KAAK,EAAE;QAC/D,IAAI,OAAOA,KAAK,CAACI,IAAI,KAAK,QAAQ,EAAE;UAClCI,OAAO,CAAC,qBAAqB,CAAC,IAAK,eACjCR,KAAK,CAACI,IACP,uBAAsBO,SAAS,CAACX,KAAK,CAACI,IAAI,CAAE,EAAC;QAChD;QACA,IAAI,OAAOJ,KAAK,CAACY,IAAI,KAAK,QAAQ,EAAE;UAClCJ,OAAO,CAAC,cAAc,CAAC,GAAGR,KAAK,CAACY,IAAI;QACtC;QACA,OAAAC,MAAA,CAAAC,MAAA,KAAWd,KAAK;UAAEQ,OAAO;UAAEO,SAAS,EAAEX;QAAI;MAC5C;MAEA,OAAO;QAACY,MAAM,EAAEC,MAAM,CAACjB,KAAK,CAAC;QAAEQ,OAAO;QAAEO,SAAS,EAAEX;MAAI,CAAC;IAC1D,CAAC,CAAC;EACJ;AACF;AAEAc,MAAM,CAACC,OAAO,GAAGxB,QAAQ"},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}