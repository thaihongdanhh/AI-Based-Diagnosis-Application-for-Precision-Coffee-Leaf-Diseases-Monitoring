{"ast":null,"code":"import ExpoLocation from \"./ExpoLocation\";\nimport { LocationEventEmitter } from \"./LocationEventEmitter\";\nlet nextWatchId = 0;\nclass Subscriber {\n  callbacks = {};\n  eventSubscription = null;\n  constructor(eventName, eventDataField) {\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n  maybeInitializeSubscription() {\n    if (this.eventSubscription) {\n      return;\n    }\n    this.eventSubscription = LocationEventEmitter.addListener(this.eventName, event => this.trigger(event));\n  }\n  registerCallback(callback) {\n    this.maybeInitializeSubscription();\n    const id = ++nextWatchId;\n    this.callbacks[id] = callback;\n    return id;\n  }\n  unregisterCallback(id) {\n    if (!this.callbacks[id]) {\n      return;\n    }\n    delete this.callbacks[id];\n    ExpoLocation.removeWatchAsync(id);\n    if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n      LocationEventEmitter.removeSubscription(this.eventSubscription);\n      this.eventSubscription = null;\n    }\n  }\n  trigger(event) {\n    const watchId = event.watchId;\n    const callback = this.callbacks[watchId];\n    if (callback) {\n      callback(event[this.eventDataField]);\n    } else {\n      ExpoLocation.removeWatchAsync(watchId);\n    }\n  }\n}\nexport const LocationSubscriber = new Subscriber('Expo.locationChanged', 'location');\nexport const HeadingSubscriber = new Subscriber('Expo.headingChanged', 'heading');\nexport function _getCurrentWatchId() {\n  return nextWatchId;\n}","map":{"version":3,"names":["ExpoLocation","LocationEventEmitter","nextWatchId","Subscriber","callbacks","eventSubscription","constructor","eventName","eventDataField","maybeInitializeSubscription","addListener","event","trigger","registerCallback","callback","id","unregisterCallback","removeWatchAsync","Object","keys","length","removeSubscription","watchId","LocationSubscriber","HeadingSubscriber","_getCurrentWatchId"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/expo-location/src/LocationSubscribers.ts"],"sourcesContent":["import { type EventSubscription } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationCallback, LocationHeadingCallback } from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\n\ntype EventObject = {\n  watchId: number;\n  [key: string]: any;\n};\n\nlet nextWatchId = 0;\n\nclass Subscriber<CallbackType extends LocationCallback | LocationHeadingCallback> {\n  private eventName: string;\n  private eventDataField: string;\n  private callbacks: { [id: string]: CallbackType } = {};\n  private eventSubscription: EventSubscription | null = null;\n\n  constructor(eventName: string, eventDataField: string) {\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n\n  maybeInitializeSubscription() {\n    if (this.eventSubscription) {\n      return;\n    }\n    this.eventSubscription = LocationEventEmitter.addListener(\n      this.eventName,\n      (event: EventObject) => this.trigger(event)\n    );\n  }\n\n  /**\n   * Registers given callback under new id which is then returned.\n   */\n  registerCallback(callback: CallbackType): number {\n    this.maybeInitializeSubscription();\n    const id = ++nextWatchId;\n    this.callbacks[id] = callback;\n    return id;\n  }\n\n  /**\n   * Unregisters a callback with given id and revokes the subscription if possible.\n   */\n  unregisterCallback(id: number): void {\n    // Do nothing if we have already unregistered the callback.\n    if (!this.callbacks[id]) {\n      return;\n    }\n\n    delete this.callbacks[id];\n    ExpoLocation.removeWatchAsync(id);\n\n    if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n      LocationEventEmitter.removeSubscription(this.eventSubscription);\n      this.eventSubscription = null;\n    }\n  }\n\n  trigger(event: EventObject): void {\n    const watchId = event.watchId;\n    const callback = this.callbacks[watchId];\n\n    if (callback) {\n      callback(event[this.eventDataField]);\n    } else {\n      ExpoLocation.removeWatchAsync(watchId);\n    }\n  }\n}\n\nexport const LocationSubscriber = new Subscriber<LocationCallback>(\n  'Expo.locationChanged',\n  'location'\n);\nexport const HeadingSubscriber = new Subscriber<LocationHeadingCallback>(\n  'Expo.headingChanged',\n  'heading'\n);\n\n/**\n * @private Necessary for some unit tests.\n */\nexport function _getCurrentWatchId(): number {\n  return nextWatchId;\n}\n"],"mappings":"AAEA,OAAOA,YAAY;AAEnB,SAASC,oBAAoB;AAO7B,IAAIC,WAAW,GAAG,CAAC;AAEnB,MAAMC,UAAU;EAGNC,SAAS,GAAmC,EAAE;EAC9CC,iBAAiB,GAA6B,IAAI;EAE1DC,YAAYC,SAAiB,EAAEC,cAAsB;IACnD,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;EAEAC,2BAA2BA,CAAA;IACzB,IAAI,IAAI,CAACJ,iBAAiB,EAAE;MAC1B;;IAEF,IAAI,CAACA,iBAAiB,GAAGJ,oBAAoB,CAACS,WAAW,CACvD,IAAI,CAACH,SAAS,EACbI,KAAkB,IAAK,IAAI,CAACC,OAAO,CAACD,KAAK,CAAC,CAC5C;EACH;EAKAE,gBAAgBA,CAACC,QAAsB;IACrC,IAAI,CAACL,2BAA2B,EAAE;IAClC,MAAMM,EAAE,GAAG,EAAEb,WAAW;IACxB,IAAI,CAACE,SAAS,CAACW,EAAE,CAAC,GAAGD,QAAQ;IAC7B,OAAOC,EAAE;EACX;EAKAC,kBAAkBA,CAACD,EAAU;IAE3B,IAAI,CAAC,IAAI,CAACX,SAAS,CAACW,EAAE,CAAC,EAAE;MACvB;;IAGF,OAAO,IAAI,CAACX,SAAS,CAACW,EAAE,CAAC;IACzBf,YAAY,CAACiB,gBAAgB,CAACF,EAAE,CAAC;IAEjC,IAAIG,MAAM,CAACC,IAAI,CAAC,IAAI,CAACf,SAAS,CAAC,CAACgB,MAAM,KAAK,CAAC,IAAI,IAAI,CAACf,iBAAiB,EAAE;MACtEJ,oBAAoB,CAACoB,kBAAkB,CAAC,IAAI,CAAChB,iBAAiB,CAAC;MAC/D,IAAI,CAACA,iBAAiB,GAAG,IAAI;;EAEjC;EAEAO,OAAOA,CAACD,KAAkB;IACxB,MAAMW,OAAO,GAAGX,KAAK,CAACW,OAAO;IAC7B,MAAMR,QAAQ,GAAG,IAAI,CAACV,SAAS,CAACkB,OAAO,CAAC;IAExC,IAAIR,QAAQ,EAAE;MACZA,QAAQ,CAACH,KAAK,CAAC,IAAI,CAACH,cAAc,CAAC,CAAC;KACrC,MAAM;MACLR,YAAY,CAACiB,gBAAgB,CAACK,OAAO,CAAC;;EAE1C;;AAGF,OAAO,MAAMC,kBAAkB,GAAG,IAAIpB,UAAU,CAC9C,sBAAsB,EACtB,UAAU,CACX;AACD,OAAO,MAAMqB,iBAAiB,GAAG,IAAIrB,UAAU,CAC7C,qBAAqB,EACrB,SAAS,CACV;AAKD,OAAM,SAAUsB,kBAAkBA,CAAA;EAChC,OAAOvB,WAAW;AACpB"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}