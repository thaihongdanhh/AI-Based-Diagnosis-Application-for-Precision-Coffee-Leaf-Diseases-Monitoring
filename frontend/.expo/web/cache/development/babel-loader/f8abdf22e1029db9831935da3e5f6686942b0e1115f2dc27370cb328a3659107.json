{"ast":null,"code":"'use strict';\n\nimport { validateInterpolation } from \"../../../src/private/animated/NativeAnimatedValidation\";\nimport normalizeColor from \"../../StyleSheet/normalizeColor\";\nimport processColor from \"../../StyleSheet/processColor\";\nimport Easing from \"../Easing\";\nimport NativeAnimatedHelper from \"../../../src/private/animated/NativeAnimatedHelper\";\nimport AnimatedWithChildren from \"./AnimatedWithChildren\";\nimport invariant from 'invariant';\nfunction createNumericInterpolation(config) {\n  const outputRange = config.outputRange;\n  const inputRange = config.inputRange;\n  const easing = config.easing || Easing.linear;\n  let extrapolateLeft = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n  let extrapolateRight = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n  return input => {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    const range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  let result = input;\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {}\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {}\n  }\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n  result = easing(result);\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n  return result;\n}\nconst numericComponentRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\nfunction mapStringToNumericComponents(input) {\n  let normalizedColor = normalizeColor(input);\n  invariant(normalizedColor == null || typeof normalizedColor !== 'object', 'PlatformColors are not supported');\n  if (typeof normalizedColor === 'number') {\n    normalizedColor = normalizedColor || 0;\n    const r = (normalizedColor & 0xff000000) >>> 24;\n    const g = (normalizedColor & 0x00ff0000) >>> 16;\n    const b = (normalizedColor & 0x0000ff00) >>> 8;\n    const a = (normalizedColor & 0x000000ff) / 255;\n    return {\n      isColor: true,\n      components: [r, g, b, a]\n    };\n  } else {\n    const components = [];\n    let lastMatchEnd = 0;\n    let match;\n    while ((match = numericComponentRegex.exec(input)) != null) {\n      if (match.index > lastMatchEnd) {\n        components.push(input.substring(lastMatchEnd, match.index));\n      }\n      components.push(parseFloat(match[0]));\n      lastMatchEnd = match.index + match[0].length;\n    }\n    invariant(components.length > 0, 'outputRange must contain color or value with numeric component');\n    if (lastMatchEnd < input.length) {\n      components.push(input.substring(lastMatchEnd, input.length));\n    }\n    return {\n      isColor: false,\n      components\n    };\n  }\n}\nfunction createStringInterpolation(config) {\n  invariant(config.outputRange.length >= 2, 'Bad output range');\n  const outputRange = config.outputRange.map(mapStringToNumericComponents);\n  const isColor = outputRange[0].isColor;\n  if (__DEV__) {\n    invariant(outputRange.every(output => output.isColor === isColor), 'All elements of output range should either be a color or a string with numeric components');\n    const firstOutput = outputRange[0].components;\n    invariant(outputRange.every(output => output.components.length === firstOutput.length), 'All elements of output range should have the same number of components');\n    invariant(outputRange.every(output => output.components.every((component, i) => typeof component === 'number' || component === firstOutput[i])), 'All elements of output range should have the same non-numeric components');\n  }\n  const numericComponents = outputRange.map(output => isColor ? output.components : output.components.filter(c => typeof c === 'number'));\n  const interpolations = numericComponents[0].map((_, i) => createNumericInterpolation(Object.assign({}, config, {\n    outputRange: numericComponents.map(components => components[i])\n  })));\n  if (!isColor) {\n    return input => {\n      const values = interpolations.map(interpolation => interpolation(input));\n      let i = 0;\n      return outputRange[0].components.map(c => typeof c === 'number' ? values[i++] : c).join('');\n    };\n  } else {\n    return input => {\n      const result = interpolations.map((interpolation, i) => {\n        const value = interpolation(input);\n        return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;\n      });\n      return `rgba(${result[0]}, ${result[1]}, ${result[2]}, ${result[3]})`;\n    };\n  }\n}\nfunction findRange(input, inputRange) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\nfunction checkValidRanges(inputRange, outputRange) {\n  checkInfiniteRange('outputRange', outputRange);\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n}\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  const message = 'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\nexport default class AnimatedInterpolation extends AnimatedWithChildren {\n  constructor(parent, config) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    if (__DEV__) {\n      checkValidRanges(config.inputRange, config.outputRange);\n      this._getInterpolation();\n    }\n  }\n  _getInterpolation() {\n    if (!this._interpolation) {\n      const config = this._config;\n      if (config.outputRange && typeof config.outputRange[0] === 'string') {\n        this._interpolation = createStringInterpolation(config);\n      } else {\n        this._interpolation = createNumericInterpolation(config);\n      }\n    }\n    return this._interpolation;\n  }\n  __makeNative(platformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n  __getValue() {\n    const parentValue = this._parent.__getValue();\n    invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._getInterpolation()(parentValue);\n  }\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n  __attach() {\n    this._parent.__addChild(this);\n  }\n  __detach() {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n  __getNativeConfig() {\n    if (__DEV__) {\n      validateInterpolation(this._config);\n    }\n    let outputRange = this._config.outputRange;\n    let outputType = null;\n    if (typeof outputRange[0] === 'string') {\n      outputRange = outputRange.map(value => {\n        const processedColor = processColor(value);\n        if (typeof processedColor === 'number') {\n          outputType = 'color';\n          return processedColor;\n        } else {\n          return NativeAnimatedHelper.transformDataType(value);\n        }\n      });\n    }\n    return {\n      inputRange: this._config.inputRange,\n      outputRange,\n      outputType,\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  }\n}","map":{"version":3,"names":["validateInterpolation","normalizeColor","processColor","Easing","NativeAnimatedHelper","AnimatedWithChildren","invariant","createNumericInterpolation","config","outputRange","inputRange","easing","linear","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","numericComponentRegex","mapStringToNumericComponents","normalizedColor","r","g","b","a","isColor","components","lastMatchEnd","match","exec","index","push","substring","parseFloat","length","createStringInterpolation","map","__DEV__","every","output","firstOutput","component","i","numericComponents","filter","c","interpolations","_","Object","assign","values","interpolation","join","value","Math","round","checkValidRanges","checkInfiniteRange","checkValidInputRange","arr","message","String","name","AnimatedInterpolation","constructor","parent","_parent","_config","_getInterpolation","_interpolation","__makeNative","platformConfig","__getValue","parentValue","__attach","__addChild","__detach","__removeChild","__getNativeConfig","outputType","processedColor","transformDataType","type"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedNode from './AnimatedNode';\n\nimport {validateInterpolation} from '../../../src/private/animated/NativeAnimatedValidation';\nimport normalizeColor from '../../StyleSheet/normalizeColor';\nimport processColor from '../../StyleSheet/processColor';\nimport Easing from '../Easing';\nimport NativeAnimatedHelper from '../../../src/private/animated/NativeAnimatedHelper';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport invariant from 'invariant';\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType<OutputT: number | string> = $ReadOnly<{\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n}>;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createNumericInterpolation(\n  config: InterpolationConfigType<number>,\n): (input: number) => number {\n  const outputRange: $ReadOnlyArray<number> = (config.outputRange: any);\n  const inputRange = config.inputRange;\n\n  const easing = config.easing || Easing.linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return (interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    ): any);\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nconst numericComponentRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n// Maps string inputs an RGBA color or an array of numeric components\nfunction mapStringToNumericComponents(\n  input: string,\n):\n  | {isColor: true, components: [number, number, number, number]}\n  | {isColor: false, components: $ReadOnlyArray<number | string>} {\n  let normalizedColor = normalizeColor(input);\n  invariant(\n    normalizedColor == null || typeof normalizedColor !== 'object',\n    'PlatformColors are not supported',\n  );\n\n  if (typeof normalizedColor === 'number') {\n    normalizedColor = normalizedColor || 0;\n    const r = (normalizedColor & 0xff000000) >>> 24;\n    const g = (normalizedColor & 0x00ff0000) >>> 16;\n    const b = (normalizedColor & 0x0000ff00) >>> 8;\n    const a = (normalizedColor & 0x000000ff) / 255;\n    return {isColor: true, components: [r, g, b, a]};\n  } else {\n    const components: Array<string | number> = [];\n    let lastMatchEnd = 0;\n    let match: RegExp$matchResult;\n    while ((match = (numericComponentRegex.exec(input): any)) != null) {\n      if (match.index > lastMatchEnd) {\n        components.push(input.substring(lastMatchEnd, match.index));\n      }\n      components.push(parseFloat(match[0]));\n      lastMatchEnd = match.index + match[0].length;\n    }\n    invariant(\n      components.length > 0,\n      'outputRange must contain color or value with numeric component',\n    );\n    if (lastMatchEnd < input.length) {\n      components.push(input.substring(lastMatchEnd, input.length));\n    }\n    return {isColor: false, components};\n  }\n}\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createStringInterpolation(\n  config: InterpolationConfigType<string>,\n): (input: number) => string {\n  invariant(config.outputRange.length >= 2, 'Bad output range');\n  const outputRange = config.outputRange.map(mapStringToNumericComponents);\n\n  const isColor = outputRange[0].isColor;\n  if (__DEV__) {\n    invariant(\n      outputRange.every(output => output.isColor === isColor),\n      'All elements of output range should either be a color or a string with numeric components',\n    );\n    const firstOutput = outputRange[0].components;\n    invariant(\n      outputRange.every(\n        output => output.components.length === firstOutput.length,\n      ),\n      'All elements of output range should have the same number of components',\n    );\n    invariant(\n      outputRange.every(output =>\n        output.components.every(\n          (component, i) =>\n            // $FlowIgnoreMe[invalid-compare]\n            typeof component === 'number' || component === firstOutput[i],\n        ),\n      ),\n      'All elements of output range should have the same non-numeric components',\n    );\n  }\n\n  const numericComponents: $ReadOnlyArray<$ReadOnlyArray<number>> =\n    outputRange.map(output =>\n      isColor\n        ? // $FlowIgnoreMe[incompatible-call]\n          output.components\n        : // $FlowIgnoreMe[incompatible-call]\n          output.components.filter(c => typeof c === 'number'),\n    );\n  const interpolations = numericComponents[0].map((_, i) =>\n    createNumericInterpolation({\n      ...config,\n      outputRange: numericComponents.map(components => components[i]),\n    }),\n  );\n  if (!isColor) {\n    return input => {\n      const values = interpolations.map(interpolation => interpolation(input));\n      let i = 0;\n      return outputRange[0].components\n        .map(c => (typeof c === 'number' ? values[i++] : c))\n        .join('');\n    };\n  } else {\n    return input => {\n      const result = interpolations.map((interpolation, i) => {\n        const value = interpolation(input);\n        // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n        // round the opacity (4th column).\n        return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;\n      });\n      return `rgba(${result[0]}, ${result[1]}, ${result[2]}, ${result[3]})`;\n    };\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidRanges<OutputT: number | string>(\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n) {\n  checkInfiniteRange('outputRange', outputRange);\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange (' +\n      inputRange.length +\n      ') and outputRange (' +\n      outputRange.length +\n      ') must have the same length',\n  );\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  const message =\n    'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\n\nfunction checkInfiniteRange<OutputT: number | string>(\n  name: string,\n  arr: $ReadOnlyArray<OutputT>,\n) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n     * below this comment, one or both of the operands may be something that\n     * doesn't cleanly convert to a string, like undefined, null, and object,\n     * etc. If you really mean this implicit string conversion, you can do\n     * something like String(myThing) */\n    // $FlowFixMe[unsafe-addition]\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nexport default class AnimatedInterpolation<\n  OutputT: number | string,\n> extends AnimatedWithChildren {\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType<OutputT>;\n  _interpolation: ?(input: number) => OutputT;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType<OutputT>) {\n    super();\n    this._parent = parent;\n    this._config = config;\n\n    if (__DEV__) {\n      checkValidRanges(config.inputRange, config.outputRange);\n\n      // Create interpolation eagerly in dev, so we can signal errors faster\n      // even when using the native driver\n      this._getInterpolation();\n    }\n  }\n\n  _getInterpolation(): number => OutputT {\n    if (!this._interpolation) {\n      const config = this._config;\n      if (config.outputRange && typeof config.outputRange[0] === 'string') {\n        this._interpolation = (createStringInterpolation((config: any)): any);\n      } else {\n        this._interpolation = (createNumericInterpolation((config: any)): any);\n      }\n    }\n    return this._interpolation;\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n\n  __getValue(): OutputT {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._getInterpolation()(parentValue);\n  }\n\n  interpolate<NewOutputT: number | string>(\n    config: InterpolationConfigType<NewOutputT>,\n  ): AnimatedInterpolation<NewOutputT> {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      validateInterpolation(this._config);\n    }\n\n    // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n    let outputRange = this._config.outputRange;\n    let outputType = null;\n    if (typeof outputRange[0] === 'string') {\n      // $FlowIgnoreMe[incompatible-cast]\n      outputRange = ((outputRange: $ReadOnlyArray<string>).map(value => {\n        const processedColor = processColor(value);\n        if (typeof processedColor === 'number') {\n          outputType = 'color';\n          return processedColor;\n        } else {\n          return NativeAnimatedHelper.transformDataType(value);\n        }\n      }): any);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      outputRange,\n      outputType,\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}