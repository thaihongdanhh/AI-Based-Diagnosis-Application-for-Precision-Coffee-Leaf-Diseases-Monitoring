{"ast":null,"code":"'use strict';\n\nconst ReactNativeFeatureFlags = require(\"../../src/private/featureflags/ReactNativeFeatureFlags\");\nconst NativeReactNativeFeatureFlags = require(\"../../src/private/featureflags/specs/NativeReactNativeFeatureFlags\").default;\nconst {\n  polyfillGlobal\n} = require(\"../Utilities/PolyfillFunctions\");\nif (__DEV__) {\n  if (typeof global.Promise !== 'function') {\n    console.error('Promise should exist before setting up timers.');\n  }\n}\nif (global.RN$Bridgeless !== true) {\n  const defineLazyTimer = name => {\n    polyfillGlobal(name, () => require(\"./Timers/JSTimers\")[name]);\n  };\n  defineLazyTimer('setTimeout');\n  defineLazyTimer('clearTimeout');\n  defineLazyTimer('setInterval');\n  defineLazyTimer('clearInterval');\n  defineLazyTimer('requestAnimationFrame');\n  defineLazyTimer('cancelAnimationFrame');\n  defineLazyTimer('requestIdleCallback');\n  defineLazyTimer('cancelIdleCallback');\n} else if (NativeReactNativeFeatureFlags != null && ReactNativeFeatureFlags.useModernRuntimeScheduler()) {\n  polyfillGlobal('requestIdleCallback', () => require(\"../../src/private/webapis/idlecallbacks/specs/NativeIdleCallbacks\").default.requestIdleCallback);\n  polyfillGlobal('cancelIdleCallback', () => require(\"../../src/private/webapis/idlecallbacks/specs/NativeIdleCallbacks\").default.cancelIdleCallback);\n}\nif (NativeReactNativeFeatureFlags != null && ReactNativeFeatureFlags.enableMicrotasks()) {\n  global.RN$enableMicrotasksInReact = true;\n  polyfillGlobal('queueMicrotask', () => require(\"../../src/private/webapis/microtasks/specs/NativeMicrotasks\").default.queueMicrotask);\n  polyfillGlobal('setImmediate', () => require(\"./Timers/immediateShim\").setImmediate);\n  polyfillGlobal('clearImmediate', () => require(\"./Timers/immediateShim\").clearImmediate);\n} else {\n  polyfillGlobal('queueMicrotask', () => require(\"./Timers/queueMicrotask.js\").default);\n  if (global.RN$Bridgeless !== true) {\n    polyfillGlobal('setImmediate', () => require(\"./Timers/JSTimers\").queueReactNativeMicrotask);\n    polyfillGlobal('clearImmediate', () => require(\"./Timers/JSTimers\").clearReactNativeMicrotask);\n  }\n}","map":{"version":3,"names":["ReactNativeFeatureFlags","require","NativeReactNativeFeatureFlags","default","polyfillGlobal","__DEV__","global","Promise","console","error","RN$Bridgeless","defineLazyTimer","name","useModernRuntimeScheduler","requestIdleCallback","cancelIdleCallback","enableMicrotasks","RN$enableMicrotasksInReact","queueMicrotask","setImmediate","clearImmediate","queueReactNativeMicrotask","clearReactNativeMicrotask"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Core/setUpTimers.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst ReactNativeFeatureFlags = require('../../src/private/featureflags/ReactNativeFeatureFlags');\nconst NativeReactNativeFeatureFlags =\n  require('../../src/private/featureflags/specs/NativeReactNativeFeatureFlags').default;\nconst {polyfillGlobal} = require('../Utilities/PolyfillFunctions');\n\nif (__DEV__) {\n  if (typeof global.Promise !== 'function') {\n    console.error('Promise should exist before setting up timers.');\n  }\n}\n\n// In bridgeless mode, timers are host functions installed from cpp.\nif (global.RN$Bridgeless !== true) {\n  /**\n   * Set up timers.\n   * You can use this module directly, or just require InitializeCore.\n   */\n  const defineLazyTimer = (\n    name:\n      | $TEMPORARY$string<'cancelAnimationFrame'>\n      | $TEMPORARY$string<'cancelIdleCallback'>\n      | $TEMPORARY$string<'clearInterval'>\n      | $TEMPORARY$string<'clearTimeout'>\n      | $TEMPORARY$string<'requestAnimationFrame'>\n      | $TEMPORARY$string<'requestIdleCallback'>\n      | $TEMPORARY$string<'setInterval'>\n      | $TEMPORARY$string<'setTimeout'>,\n  ) => {\n    polyfillGlobal(name, () => require('./Timers/JSTimers')[name]);\n  };\n  defineLazyTimer('setTimeout');\n  defineLazyTimer('clearTimeout');\n  defineLazyTimer('setInterval');\n  defineLazyTimer('clearInterval');\n  defineLazyTimer('requestAnimationFrame');\n  defineLazyTimer('cancelAnimationFrame');\n  defineLazyTimer('requestIdleCallback');\n  defineLazyTimer('cancelIdleCallback');\n} else if (\n  // TODO remove this condition when bridgeless == modern scheduler everywhere.\n  NativeReactNativeFeatureFlags != null &&\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- false positive due to `use` prefix\n  ReactNativeFeatureFlags.useModernRuntimeScheduler()\n) {\n  polyfillGlobal(\n    'requestIdleCallback',\n    () =>\n      require('../../src/private/webapis/idlecallbacks/specs/NativeIdleCallbacks')\n        .default.requestIdleCallback,\n  );\n\n  polyfillGlobal(\n    'cancelIdleCallback',\n    () =>\n      require('../../src/private/webapis/idlecallbacks/specs/NativeIdleCallbacks')\n        .default.cancelIdleCallback,\n  );\n}\n\n// We need to check if the native module is available before accessing the\n// feature flag, because otherwise the API would throw an error in the legacy\n// architecture in OSS, where the native module isn't available.\nif (\n  NativeReactNativeFeatureFlags != null &&\n  ReactNativeFeatureFlags.enableMicrotasks()\n) {\n  // This is the flag that tells React to use `queueMicrotask` to batch state\n  // updates, instead of using the scheduler to schedule a regular task.\n  // We use a global variable because we don't currently have any other\n  // mechanism to pass feature flags from RN to React in OSS.\n  global.RN$enableMicrotasksInReact = true;\n\n  polyfillGlobal(\n    'queueMicrotask',\n    () =>\n      require('../../src/private/webapis/microtasks/specs/NativeMicrotasks')\n        .default.queueMicrotask,\n  );\n\n  // We shim the immediate APIs via `queueMicrotask` to maintain the backward\n  // compatibility.\n  polyfillGlobal(\n    'setImmediate',\n    () => require('./Timers/immediateShim').setImmediate,\n  );\n  polyfillGlobal(\n    'clearImmediate',\n    () => require('./Timers/immediateShim').clearImmediate,\n  );\n} else {\n  // Polyfill it with promise (regardless it's polyfilled or native) otherwise.\n  polyfillGlobal(\n    'queueMicrotask',\n    () => require('./Timers/queueMicrotask.js').default,\n  );\n\n  // When promise was polyfilled hence is queued to the RN microtask queue,\n  // we polyfill the immediate APIs as aliases to the ReactNativeMicrotask APIs.\n  // Note that in bridgeless mode, immediate APIs are installed from cpp.\n  if (global.RN$Bridgeless !== true) {\n    polyfillGlobal(\n      'setImmediate',\n      () => require('./Timers/JSTimers').queueReactNativeMicrotask,\n    );\n    polyfillGlobal(\n      'clearImmediate',\n      () => require('./Timers/JSTimers').clearReactNativeMicrotask,\n    );\n  }\n}\n"],"mappings":"AAUA,YAAY;;AAEZ,MAAMA,uBAAuB,GAAGC,OAAO,yDAAyD,CAAC;AACjG,MAAMC,6BAA6B,GACjCD,OAAO,qEAAqE,CAAC,CAACE,OAAO;AACvF,MAAM;EAACC;AAAc,CAAC,GAAGH,OAAO,iCAAiC,CAAC;AAElE,IAAII,OAAO,EAAE;EACX,IAAI,OAAOC,MAAM,CAACC,OAAO,KAAK,UAAU,EAAE;IACxCC,OAAO,CAACC,KAAK,CAAC,gDAAgD,CAAC;EACjE;AACF;AAGA,IAAIH,MAAM,CAACI,aAAa,KAAK,IAAI,EAAE;EAKjC,MAAMC,eAAe,GACnBC,IAQmC,IAChC;IACHR,cAAc,CAACQ,IAAI,EAAE,MAAMX,OAAO,oBAAoB,CAAC,CAACW,IAAI,CAAC,CAAC;EAChE,CAAC;EACDD,eAAe,CAAC,YAAY,CAAC;EAC7BA,eAAe,CAAC,cAAc,CAAC;EAC/BA,eAAe,CAAC,aAAa,CAAC;EAC9BA,eAAe,CAAC,eAAe,CAAC;EAChCA,eAAe,CAAC,uBAAuB,CAAC;EACxCA,eAAe,CAAC,sBAAsB,CAAC;EACvCA,eAAe,CAAC,qBAAqB,CAAC;EACtCA,eAAe,CAAC,oBAAoB,CAAC;AACvC,CAAC,MAAM,IAELT,6BAA6B,IAAI,IAAI,IAErCF,uBAAuB,CAACa,yBAAyB,CAAC,CAAC,EACnD;EACAT,cAAc,CACZ,qBAAqB,EACrB,MACEH,OAAO,oEAAoE,CAAC,CACzEE,OAAO,CAACW,mBACf,CAAC;EAEDV,cAAc,CACZ,oBAAoB,EACpB,MACEH,OAAO,oEAAoE,CAAC,CACzEE,OAAO,CAACY,kBACf,CAAC;AACH;AAKA,IACEb,6BAA6B,IAAI,IAAI,IACrCF,uBAAuB,CAACgB,gBAAgB,CAAC,CAAC,EAC1C;EAKAV,MAAM,CAACW,0BAA0B,GAAG,IAAI;EAExCb,cAAc,CACZ,gBAAgB,EAChB,MACEH,OAAO,8DAA8D,CAAC,CACnEE,OAAO,CAACe,cACf,CAAC;EAIDd,cAAc,CACZ,cAAc,EACd,MAAMH,OAAO,yBAAyB,CAAC,CAACkB,YAC1C,CAAC;EACDf,cAAc,CACZ,gBAAgB,EAChB,MAAMH,OAAO,yBAAyB,CAAC,CAACmB,cAC1C,CAAC;AACH,CAAC,MAAM;EAELhB,cAAc,CACZ,gBAAgB,EAChB,MAAMH,OAAO,6BAA6B,CAAC,CAACE,OAC9C,CAAC;EAKD,IAAIG,MAAM,CAACI,aAAa,KAAK,IAAI,EAAE;IACjCN,cAAc,CACZ,cAAc,EACd,MAAMH,OAAO,oBAAoB,CAAC,CAACoB,yBACrC,CAAC;IACDjB,cAAc,CACZ,gBAAgB,EAChB,MAAMH,OAAO,oBAAoB,CAAC,CAACqB,yBACrC,CAAC;EACH;AACF"},"metadata":{"hasCjsExports":false},"sourceType":"script","externalDependencies":[]}