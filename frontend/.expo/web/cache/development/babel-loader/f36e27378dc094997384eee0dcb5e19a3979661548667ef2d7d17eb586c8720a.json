{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onContextCreate\", \"onContextRestored\", \"onContextLost\", \"webglContextAttributes\", \"msaaSamples\", \"nativeRef_EXPERIMENTAL\", \"ref\"];\nvar _jsxFileName = \"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/expo-gl/build/GLView.web.js\";\nimport { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Canvas from \"./Canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getImageForAsset(asset) {\n  if (asset != null && typeof asset === 'object' && asset.downloadAsync) {\n    const dataURI = asset.localUri || asset.uri || '';\n    const image = new Image();\n    image.src = dataURI;\n    return image;\n  }\n  return asset;\n}\nfunction isOffscreenCanvas(element) {\n  return element && typeof element.convertToBlob === 'function';\n}\nfunction asExpoContext(gl) {\n  gl.endFrameEXP = function glEndFrameEXP() {};\n  if (!gl['_expo_texImage2D']) {\n    gl['_expo_texImage2D'] = gl.texImage2D;\n    gl.texImage2D = (...props) => {\n      const nextProps = [...props];\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texImage2D'](...nextProps);\n    };\n  }\n  if (!gl['_expo_texSubImage2D']) {\n    gl['_expo_texSubImage2D'] = gl.texSubImage2D;\n    gl.texSubImage2D = (...props) => {\n      const nextProps = [...props];\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texSubImage2D'](...nextProps);\n    };\n  }\n  return gl;\n}\nfunction ensureContext(canvas, contextAttributes) {\n  if (!canvas) {\n    throw new CodedError('ERR_GL_INVALID', 'Attempting to use the GL context before it has been created.');\n  }\n  const context = canvas.getContext('webgl2', contextAttributes) || canvas.getContext('webgl', contextAttributes) || canvas.getContext('webgl-experimental', contextAttributes) || canvas.getContext('experimental-webgl', contextAttributes);\n  invariant(context, 'Browser does not support WebGL');\n  return asExpoContext(context);\n}\nasync function getBlobFromWebGLRenderingContext(gl, options = {}) {\n  invariant(gl, 'getBlobFromWebGLRenderingContext(): WebGL Rendering Context is not defined');\n  const {\n    canvas\n  } = gl;\n  let blob = null;\n  if (typeof canvas.msToBlob === 'function') {\n    blob = await canvas.msToBlob();\n  } else if (isOffscreenCanvas(canvas)) {\n    blob = await canvas.convertToBlob({\n      quality: options.compress,\n      type: options.format\n    });\n  } else {\n    blob = await new Promise(resolve => {\n      canvas.toBlob(blob => resolve(blob), options.format, options.compress);\n    });\n  }\n  return {\n    blob,\n    width: canvas.width,\n    height: canvas.height\n  };\n}\nexport class GLView extends React.Component {\n  static async createContextAsync() {\n    if (!Platform.isDOMAvailable) {\n      return null;\n    }\n    const canvas = document.createElement('canvas');\n    const {\n      width,\n      height,\n      scale\n    } = Dimensions.get('window');\n    canvas.width = width * scale;\n    canvas.height = height * scale;\n    return ensureContext(canvas);\n  }\n  static async destroyContextAsync(exgl) {\n    return true;\n  }\n  static async takeSnapshotAsync(gl, options = {}) {\n    const {\n      blob,\n      width,\n      height\n    } = await getBlobFromWebGLRenderingContext(gl, options);\n    if (!blob) {\n      throw new CodedError('ERR_GL_SNAPSHOT', 'Failed to save the GL context');\n    }\n    return {\n      uri: blob,\n      localUri: '',\n      width,\n      height\n    };\n  }\n  componentWillUnmount() {\n    if (this.gl) {\n      const loseContextExt = this.gl.getExtension('WEBGL_lose_context');\n      if (loseContextExt) {\n        loseContextExt.loseContext();\n      }\n      this.gl = undefined;\n    }\n    if (this.canvas) {\n      this.canvas.removeEventListener('webglcontextlost', this.onContextLost);\n      this.canvas.removeEventListener('webglcontextrestored', this.onContextRestored);\n    }\n  }\n  render() {\n    const _this$props = this.props,\n      domProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n    return _jsxDEV(Canvas, Object.assign({}, domProps, {\n      canvasRef: this.setCanvasRef\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 16\n    }, this);\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      webglContextAttributes\n    } = this.props;\n    if (this.canvas && webglContextAttributes !== prevProps.webglContextAttributes) {\n      this.onContextLost(null);\n      this.onContextRestored();\n    }\n  }\n  getGLContextOrReject() {\n    const gl = this.getGLContext();\n    if (!gl) {\n      throw new CodedError('ERR_GL_INVALID', 'Attempting to use the GL context before it has been created.');\n    }\n    return gl;\n  }\n  onContextLost = event => {\n    if (event && event.preventDefault) {\n      event.preventDefault();\n    }\n    this.gl = undefined;\n    if (typeof this.props.onContextLost === 'function') {\n      this.props.onContextLost();\n    }\n  };\n  onContextRestored = () => {\n    this.gl = undefined;\n    if (this.getGLContext() == null) {\n      throw new CodedError('ERR_GL_INVALID', 'Failed to restore GL context.');\n    }\n  };\n  getGLContext() {\n    if (this.gl) return this.gl;\n    if (this.canvas) {\n      this.gl = ensureContext(this.canvas, this.props.webglContextAttributes);\n      if (typeof this.props.onContextCreate === 'function') {\n        this.props.onContextCreate(this.gl);\n      }\n      return this.gl;\n    }\n    return null;\n  }\n  setCanvasRef = canvas => {\n    this.canvas = canvas;\n    if (typeof this.props.nativeRef_EXPERIMENTAL === 'function') {\n      this.props.nativeRef_EXPERIMENTAL(canvas);\n    }\n    if (this.canvas) {\n      this.canvas.addEventListener('webglcontextlost', this.onContextLost);\n      this.canvas.addEventListener('webglcontextrestored', this.onContextRestored);\n      this.getGLContext();\n    }\n  };\n  async takeSnapshotAsync(options = {}) {\n    if (!GLView.takeSnapshotAsync) {\n      throw new UnavailabilityError('expo-gl', 'takeSnapshotAsync');\n    }\n    const gl = this.getGLContextOrReject();\n    return await GLView.takeSnapshotAsync(gl, options);\n  }\n  async startARSessionAsync() {\n    throw new UnavailabilityError('GLView', 'startARSessionAsync');\n  }\n  async createCameraTextureAsync() {\n    throw new UnavailabilityError('GLView', 'createCameraTextureAsync');\n  }\n  async destroyObjectAsync(glObject) {\n    throw new UnavailabilityError('GLView', 'destroyObjectAsync');\n  }\n}","map":{"version":3,"names":["CodedError","Platform","UnavailabilityError","invariant","React","Dimensions","Canvas","jsxDEV","_jsxDEV","getImageForAsset","asset","downloadAsync","dataURI","localUri","uri","image","Image","src","isOffscreenCanvas","element","convertToBlob","asExpoContext","gl","endFrameEXP","glEndFrameEXP","texImage2D","props","nextProps","push","pop","texSubImage2D","ensureContext","canvas","contextAttributes","context","getContext","getBlobFromWebGLRenderingContext","options","blob","msToBlob","quality","compress","type","format","Promise","resolve","toBlob","width","height","GLView","Component","createContextAsync","isDOMAvailable","document","createElement","scale","get","destroyContextAsync","exgl","takeSnapshotAsync","componentWillUnmount","loseContextExt","getExtension","loseContext","undefined","removeEventListener","onContextLost","onContextRestored","render","_this$props","domProps","_objectWithoutPropertiesLoose","_excluded","Object","assign","canvasRef","setCanvasRef","fileName","_jsxFileName","lineNumber","columnNumber","componentDidUpdate","prevProps","webglContextAttributes","getGLContextOrReject","getGLContext","event","preventDefault","onContextCreate","nativeRef_EXPERIMENTAL","addEventListener","startARSessionAsync","createCameraTextureAsync","destroyObjectAsync","glObject"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/expo-gl/src/GLView.web.tsx"],"sourcesContent":["import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport { Dimensions } from 'react-native';\n\nimport Canvas from './Canvas';\nimport { WebGLObject } from './GLView';\nimport {\n  GLViewProps,\n  ExpoWebGLRenderingContext,\n  GLSnapshot,\n  SnapshotOptions,\n  ComponentOrHandle,\n} from './GLView.types';\n\nfunction getImageForAsset(asset: {\n  downloadAsync?: () => Promise<any>;\n  uri?: string;\n  localUri?: string;\n}): HTMLImageElement | any {\n  if (asset != null && typeof asset === 'object' && asset.downloadAsync) {\n    const dataURI = asset.localUri || asset.uri || '';\n    const image = new Image();\n    image.src = dataURI;\n    return image;\n  }\n  return asset;\n}\n\nfunction isOffscreenCanvas(element: any): element is OffscreenCanvas {\n  return element && typeof element.convertToBlob === 'function';\n}\n\nfunction asExpoContext(gl: ExpoWebGLRenderingContext): WebGLRenderingContext {\n  gl.endFrameEXP = function glEndFrameEXP(): void {};\n\n  if (!gl['_expo_texImage2D']) {\n    gl['_expo_texImage2D'] = gl.texImage2D;\n    gl.texImage2D = (...props: any[]): any => {\n      const nextProps = [...props];\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texImage2D'](...nextProps);\n    };\n  }\n\n  if (!gl['_expo_texSubImage2D']) {\n    gl['_expo_texSubImage2D'] = gl.texSubImage2D;\n    gl.texSubImage2D = (...props: any[]): any => {\n      const nextProps = [...props];\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texSubImage2D'](...nextProps);\n    };\n  }\n\n  return gl;\n}\n\nfunction ensureContext(\n  canvas?: HTMLCanvasElement,\n  contextAttributes?: WebGLContextAttributes\n): WebGLRenderingContext {\n  if (!canvas) {\n    throw new CodedError(\n      'ERR_GL_INVALID',\n      'Attempting to use the GL context before it has been created.'\n    );\n  }\n\n  const context =\n    canvas.getContext('webgl2', contextAttributes) ||\n    canvas.getContext('webgl', contextAttributes) ||\n    canvas.getContext('webgl-experimental', contextAttributes) ||\n    canvas.getContext('experimental-webgl', contextAttributes);\n  invariant(context, 'Browser does not support WebGL');\n  return asExpoContext(context as ExpoWebGLRenderingContext);\n}\n\n// @needsAudit @docsMissing\nexport type GLViewWebProps = GLViewProps & {\n  onContextCreate: (gl: WebGLRenderingContext) => void;\n  onContextRestored?: (gl?: WebGLRenderingContext) => void;\n  onContextLost?: () => void;\n  webglContextAttributes?: WebGLContextAttributes;\n  // type overwrite\n  nativeRef_EXPERIMENTAL?(callback: ComponentOrHandle | HTMLCanvasElement | null);\n};\n\nasync function getBlobFromWebGLRenderingContext(\n  gl: WebGLRenderingContext,\n  options: SnapshotOptions = {}\n): Promise<{ width: number; height: number; blob: Blob | null }> {\n  invariant(gl, 'getBlobFromWebGLRenderingContext(): WebGL Rendering Context is not defined');\n\n  const { canvas } = gl;\n\n  let blob: Blob | null = null;\n\n  if (typeof (canvas as any).msToBlob === 'function') {\n    // @ts-ignore: polyfill: https://stackoverflow.com/a/29815058/4047926\n    blob = await canvas.msToBlob();\n  } else if (isOffscreenCanvas(canvas)) {\n    blob = await canvas.convertToBlob({ quality: options.compress, type: options.format });\n  } else {\n    blob = await new Promise((resolve) => {\n      canvas.toBlob((blob: Blob | null) => resolve(blob), options.format, options.compress);\n    });\n  }\n\n  return {\n    blob,\n    width: canvas.width,\n    height: canvas.height,\n  };\n}\n\nexport class GLView extends React.Component<GLViewWebProps> {\n  canvas?: HTMLCanvasElement;\n\n  gl?: WebGLRenderingContext;\n\n  static async createContextAsync(): Promise<WebGLRenderingContext | null> {\n    if (!Platform.isDOMAvailable) {\n      return null;\n    }\n    const canvas = document.createElement('canvas');\n    const { width, height, scale } = Dimensions.get('window');\n    canvas.width = width * scale;\n    canvas.height = height * scale;\n    return ensureContext(canvas);\n  }\n\n  static async destroyContextAsync(exgl?: WebGLRenderingContext | number): Promise<boolean> {\n    // Do nothing\n    return true;\n  }\n\n  static async takeSnapshotAsync(\n    gl: WebGLRenderingContext,\n    options: SnapshotOptions = {}\n  ): Promise<GLSnapshot> {\n    const { blob, width, height } = await getBlobFromWebGLRenderingContext(gl, options);\n\n    if (!blob) {\n      throw new CodedError('ERR_GL_SNAPSHOT', 'Failed to save the GL context');\n    }\n\n    return {\n      uri: blob,\n      localUri: '',\n      width,\n      height,\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.gl) {\n      const loseContextExt = this.gl.getExtension('WEBGL_lose_context');\n      if (loseContextExt) {\n        loseContextExt.loseContext();\n      }\n      this.gl = undefined;\n    }\n    if (this.canvas) {\n      this.canvas.removeEventListener('webglcontextlost', this.onContextLost);\n      this.canvas.removeEventListener('webglcontextrestored', this.onContextRestored);\n    }\n  }\n\n  render() {\n    const {\n      onContextCreate,\n      onContextRestored,\n      onContextLost,\n      webglContextAttributes,\n      msaaSamples,\n      nativeRef_EXPERIMENTAL,\n      // @ts-ignore: ref does not exist\n      ref,\n      ...domProps\n    } = this.props;\n\n    return <Canvas {...domProps} canvasRef={this.setCanvasRef} />;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { webglContextAttributes } = this.props;\n    if (this.canvas && webglContextAttributes !== prevProps.webglContextAttributes) {\n      this.onContextLost(null);\n      this.onContextRestored();\n    }\n  }\n\n  private getGLContextOrReject(): WebGLRenderingContext {\n    const gl = this.getGLContext();\n    if (!gl) {\n      throw new CodedError(\n        'ERR_GL_INVALID',\n        'Attempting to use the GL context before it has been created.'\n      );\n    }\n    return gl;\n  }\n\n  private onContextLost = (event: Event | null): void => {\n    if (event && event.preventDefault) {\n      event.preventDefault();\n    }\n    this.gl = undefined;\n\n    if (typeof this.props.onContextLost === 'function') {\n      this.props.onContextLost();\n    }\n  };\n\n  private onContextRestored = (): void => {\n    this.gl = undefined;\n    if (this.getGLContext() == null) {\n      throw new CodedError('ERR_GL_INVALID', 'Failed to restore GL context.');\n    }\n  };\n\n  private getGLContext(): WebGLRenderingContext | null {\n    if (this.gl) return this.gl;\n\n    if (this.canvas) {\n      this.gl = ensureContext(this.canvas, this.props.webglContextAttributes);\n      if (typeof this.props.onContextCreate === 'function') {\n        this.props.onContextCreate(this.gl);\n      }\n      return this.gl;\n    }\n    return null;\n  }\n\n  private setCanvasRef = (canvas: HTMLCanvasElement): void => {\n    this.canvas = canvas;\n\n    if (typeof this.props.nativeRef_EXPERIMENTAL === 'function') {\n      this.props.nativeRef_EXPERIMENTAL(canvas);\n    }\n\n    if (this.canvas) {\n      this.canvas.addEventListener('webglcontextlost', this.onContextLost);\n      this.canvas.addEventListener('webglcontextrestored', this.onContextRestored);\n\n      this.getGLContext();\n    }\n  };\n\n  public async takeSnapshotAsync(options: SnapshotOptions = {}): Promise<GLSnapshot> {\n    if (!GLView.takeSnapshotAsync) {\n      throw new UnavailabilityError('expo-gl', 'takeSnapshotAsync');\n    }\n\n    const gl = this.getGLContextOrReject();\n    return await GLView.takeSnapshotAsync(gl, options);\n  }\n\n  public async startARSessionAsync(): Promise<void> {\n    throw new UnavailabilityError('GLView', 'startARSessionAsync');\n  }\n\n  public async createCameraTextureAsync(): Promise<void> {\n    throw new UnavailabilityError('GLView', 'createCameraTextureAsync');\n  }\n\n  public async destroyObjectAsync(glObject: WebGLObject): Promise<void> {\n    throw new UnavailabilityError('GLView', 'destroyObjectAsync');\n  }\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}