{"ast":null,"code":"import { createPermissionHook } from 'expo-modules-core';\nimport CameraManager from \"./ExpoCameraManager\";\nexport { default as CameraView } from \"./CameraView\";\nasync function getCameraPermissionsAsync() {\n  return CameraManager.getCameraPermissionsAsync();\n}\nasync function requestCameraPermissionsAsync() {\n  return CameraManager.requestCameraPermissionsAsync();\n}\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync\n});\nasync function getMicrophonePermissionsAsync() {\n  return CameraManager.getMicrophonePermissionsAsync();\n}\nasync function requestMicrophonePermissionsAsync() {\n  return CameraManager.requestMicrophonePermissionsAsync();\n}\nexport const useMicrophonePermissions = createPermissionHook({\n  getMethod: getMicrophonePermissionsAsync,\n  requestMethod: requestMicrophonePermissionsAsync\n});\nexport async function scanFromURLAsync(url, barcodeTypes = ['qr']) {\n  return CameraManager.scanFromURLAsync(url, barcodeTypes);\n}\nexport * from \"./Camera.types\";\nexport const Camera = {\n  getCameraPermissionsAsync,\n  requestCameraPermissionsAsync,\n  getMicrophonePermissionsAsync,\n  requestMicrophonePermissionsAsync,\n  scanFromURLAsync\n};","map":{"version":3,"names":["createPermissionHook","CameraManager","default","CameraView","getCameraPermissionsAsync","requestCameraPermissionsAsync","useCameraPermissions","getMethod","requestMethod","getMicrophonePermissionsAsync","requestMicrophonePermissionsAsync","useMicrophonePermissions","scanFromURLAsync","url","barcodeTypes","Camera"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/expo-camera/src/index.ts"],"sourcesContent":["import { createPermissionHook, PermissionResponse } from 'expo-modules-core';\n\nimport { BarcodeScanningResult, BarcodeType } from './Camera.types';\nimport CameraManager from './ExpoCameraManager';\n\nexport { default as CameraView } from './CameraView';\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera.\n * On iOS this will require apps to specify an `NSCameraUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing microphone.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing the microphone.\n * On iOS this will require apps to specify an `NSMicrophoneUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the microphone.\n * This uses both `requestMicrophonePermissionsAsync` and `getMicrophonePermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Camera.useMicrophonePermissions();\n * ```\n */\nexport const useMicrophonePermissions = createPermissionHook({\n  getMethod: getMicrophonePermissionsAsync,\n  requestMethod: requestMicrophonePermissionsAsync,\n});\n\n/**\n * Scan bar codes from the image at the given URL.\n * @param url URL to get the image from.\n * @param barcodeTypes An array of bar code types. Defaults to all supported bar code types on\n * the platform.\n * > __Note:__ Only QR codes are supported on iOS.\n * On android, the barcode should take up the majority of the image for best results.\n * @return A possibly empty array of objects of the `BarcodeScanningResult` shape, where the type\n * refers to the barcode type that was scanned and the data is the information encoded in the barcode.\n */\nexport async function scanFromURLAsync(\n  url: string,\n  barcodeTypes: BarcodeType[] = ['qr']\n): Promise<BarcodeScanningResult[]> {\n  return CameraManager.scanFromURLAsync(url, barcodeTypes);\n}\n\nexport * from './Camera.types';\n\n/**\n * @hidden\n */\nexport const Camera = {\n  getCameraPermissionsAsync,\n  requestCameraPermissionsAsync,\n  getMicrophonePermissionsAsync,\n  requestMicrophonePermissionsAsync,\n  scanFromURLAsync,\n};\n"],"mappings":"AAAA,SAASA,oBAAoB,QAA4B,mBAAmB;AAG5E,OAAOC,aAAa;AAEpB,SAASC,OAAO,IAAIC,UAAU;AAO9B,eAAeC,yBAAyBA,CAAA;EACtC,OAAOH,aAAa,CAACG,yBAAyB,EAAE;AAClD;AAQA,eAAeC,6BAA6BA,CAAA;EAC1C,OAAOJ,aAAa,CAACI,6BAA6B,EAAE;AACtD;AAYA,OAAO,MAAMC,oBAAoB,GAAGN,oBAAoB,CAAC;EACvDO,SAAS,EAAEH,yBAAyB;EACpCI,aAAa,EAAEH;CAChB,CAAC;AAOF,eAAeI,6BAA6BA,CAAA;EAC1C,OAAOR,aAAa,CAACQ,6BAA6B,EAAE;AACtD;AAQA,eAAeC,iCAAiCA,CAAA;EAC9C,OAAOT,aAAa,CAACS,iCAAiC,EAAE;AAC1D;AAYA,OAAO,MAAMC,wBAAwB,GAAGX,oBAAoB,CAAC;EAC3DO,SAAS,EAAEE,6BAA6B;EACxCD,aAAa,EAAEE;CAChB,CAAC;AAYF,OAAO,eAAeE,gBAAgBA,CACpCC,GAAW,EACXC,YAAA,GAA8B,CAAC,IAAI,CAAC;EAEpC,OAAOb,aAAa,CAACW,gBAAgB,CAACC,GAAG,EAAEC,YAAY,CAAC;AAC1D;AAEA;AAKA,OAAO,MAAMC,MAAM,GAAG;EACpBX,yBAAyB;EACzBC,6BAA6B;EAC7BI,6BAA6B;EAC7BC,iCAAiC;EACjCE;CACD"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}