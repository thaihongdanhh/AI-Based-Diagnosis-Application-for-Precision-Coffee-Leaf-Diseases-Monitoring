{"ast":null,"code":"import parseErrorStack from \"../../Core/Devtools/parseErrorStack\";\nimport UTFSequence from \"../../UTFSequence\";\nimport stringifySafe from \"../../Utilities/stringifySafe\";\nimport ansiRegex from 'ansi-regex';\nconst ANSI_REGEX = ansiRegex().source;\nconst RE_TRANSFORM_ERROR = /^TransformError /;\nconst RE_COMPONENT_STACK_LINE = /\\n {4}(in|at) /;\nconst RE_COMPONENT_STACK_LINE_GLOBAL = /\\n {4}(in|at) /g;\nconst RE_COMPONENT_STACK_LINE_OLD = / {4}in/;\nconst RE_COMPONENT_STACK_LINE_NEW = / {4}at/;\nconst RE_COMPONENT_STACK_LINE_STACK_FRAME = /@.*\\n/;\nconst RE_BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nconst RE_COMPONENT_STACK_WITH_SOURCE = /(.*) \\(at (.*\\.(?:js|jsx|ts|tsx)):([\\d]+)\\)/;\nconst RE_COMPONENT_STACK_NO_SOURCE = /(.*) \\(created by .*\\)/;\nconst RE_BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\nconst RE_METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\nconst RE_BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp(['^', `(?:${ANSI_REGEX})*`, '>', `(?:${ANSI_REGEX})*`, ' +', '[0-9]+', ' \\\\|'].join(''), 'm');\nexport function hasComponentStack(args) {\n  for (const arg of args) {\n    if (typeof arg === 'string' && isComponentStack(arg)) {\n      return true;\n    }\n  }\n  return false;\n}\nconst SUBSTITUTION = UTFSequence.BOM + '%s';\nexport function parseInterpolation(args) {\n  const categoryParts = [];\n  const contentParts = [];\n  const substitutionOffsets = [];\n  const remaining = [...args];\n  if (typeof remaining[0] === 'string') {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split('%s');\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n    let categoryString = '';\n    let contentString = '';\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          const substitution = typeof substitutions[substitutionIndex] === 'string' ? substitutions[substitutionIndex] : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length\n          });\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length\n          });\n          categoryString += '%s';\n          contentString += '%s';\n        }\n        substitutionIndex++;\n      }\n    }\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n  const remainingArgs = remaining.map(arg => {\n    return typeof arg === 'string' ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets\n    }\n  };\n}\nfunction isComponentStack(consoleArgument) {\n  const isOldComponentStackFormat = RE_COMPONENT_STACK_LINE_OLD.test(consoleArgument);\n  const isNewComponentStackFormat = RE_COMPONENT_STACK_LINE_NEW.test(consoleArgument);\n  const isNewJSCComponentStackFormat = RE_COMPONENT_STACK_LINE_STACK_FRAME.test(consoleArgument);\n  return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;\n}\nexport function parseComponentStack(message) {\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return {\n      type: 'stack',\n      stack: stack.map(frame => ({\n        content: frame.methodName,\n        collapse: frame.collapse || false,\n        fileName: frame.file == null ? 'unknown' : frame.file,\n        location: {\n          column: frame.column == null ? -1 : frame.column,\n          row: frame.lineNumber == null ? -1 : frame.lineNumber\n        }\n      }))\n    };\n  }\n  const legacyStack = message.split(RE_COMPONENT_STACK_LINE_GLOBAL).map(s => {\n    if (!s) {\n      return null;\n    }\n    const match = s.match(RE_COMPONENT_STACK_WITH_SOURCE);\n    if (match) {\n      let [content, fileName, row] = match.slice(1);\n      return {\n        content,\n        fileName,\n        location: {\n          column: -1,\n          row: parseInt(row, 10)\n        }\n      };\n    }\n    const matchWithoutSource = s.match(RE_COMPONENT_STACK_NO_SOURCE);\n    if (matchWithoutSource) {\n      return {\n        content: matchWithoutSource[1],\n        fileName: '',\n        location: null\n      };\n    }\n    return null;\n  }).filter(Boolean);\n  return {\n    type: 'legacy',\n    stack: legacyStack\n  };\n}\nexport function parseLogBoxException(error) {\n  const message = error.originalMessage != null ? error.originalMessage : 'Unknown';\n  const metroInternalError = message.match(RE_METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [content, fileName, row, column, codeFrame] = metroInternalError.slice(1);\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStackType: 'legacy',\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10)\n        },\n        content: codeFrame\n      },\n      message: {\n        content,\n        substitutions: []\n      },\n      category: `${fileName}-${row}-${column}`,\n      extraData: error.extraData\n    };\n  }\n  const babelTransformError = message.match(RE_BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    const [fileName, content, row, column, codeFrame] = babelTransformError.slice(1);\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStackType: 'legacy',\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10)\n        },\n        content: codeFrame\n      },\n      message: {\n        content,\n        substitutions: []\n      },\n      category: `${fileName}-${row}-${column}`,\n      extraData: error.extraData\n    };\n  }\n  if (RE_BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {\n    const babelCodeFrameError = message.match(RE_BABEL_CODE_FRAME_ERROR_FORMAT);\n    if (babelCodeFrameError) {\n      const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n      return {\n        level: 'syntax',\n        stack: [],\n        isComponentError: false,\n        componentStackType: 'legacy',\n        componentStack: [],\n        codeFrame: {\n          fileName,\n          location: null,\n          content: codeFrame\n        },\n        message: {\n          content,\n          substitutions: []\n        },\n        category: `${fileName}-${1}-${1}`,\n        extraData: error.extraData\n      };\n    }\n  }\n  if (message.match(RE_TRANSFORM_ERROR)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStackType: 'legacy',\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: []\n      },\n      category: message,\n      extraData: error.extraData\n    };\n  }\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    if (componentStack != null) {\n      const {\n        type,\n        stack\n      } = parseComponentStack(componentStack);\n      return Object.assign({\n        level: 'fatal',\n        stack: error.stack,\n        isComponentError: error.isComponentError,\n        componentStackType: type,\n        componentStack: stack,\n        extraData: error.extraData\n      }, parseInterpolation([message]));\n    } else {\n      return Object.assign({\n        level: 'fatal',\n        stack: error.stack,\n        isComponentError: error.isComponentError,\n        componentStackType: 'legacy',\n        componentStack: [],\n        extraData: error.extraData\n      }, parseInterpolation([message]));\n    }\n  }\n  if (componentStack != null) {\n    const {\n      type,\n      stack\n    } = parseComponentStack(componentStack);\n    return Object.assign({\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStackType: type,\n      componentStack: stack,\n      extraData: error.extraData\n    }, parseInterpolation([message]));\n  }\n  return Object.assign({\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    extraData: error.extraData\n  }, parseLogBoxLog([message]));\n}\nexport function withoutANSIColorStyles(message) {\n  if (typeof message !== 'string') {\n    return message;\n  }\n  return message.replace(/[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');\n}\nexport function parseLogBoxLog(args) {\n  const message = withoutANSIColorStyles(args[0]);\n  let argsWithoutComponentStack = [];\n  let componentStack = [];\n  let componentStackType = 'legacy';\n  if (typeof message === 'string' && message.slice(-2) === '%s' && args.length > 0) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      const {\n        type,\n        stack\n      } = parseComponentStack(lastArg);\n      componentStack = stack;\n      componentStackType = type;\n    }\n  }\n  if (componentStack.length === 0 && argsWithoutComponentStack.length === 0) {\n    for (const arg of args) {\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        let messageEndIndex = arg.search(RE_COMPONENT_STACK_LINE);\n        if (messageEndIndex < 0) {\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n        const {\n          type,\n          stack\n        } = parseComponentStack(arg);\n        componentStack = stack;\n        componentStackType = type;\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n  return Object.assign({}, parseInterpolation(argsWithoutComponentStack), {\n    componentStack,\n    componentStackType\n  });\n}","map":{"version":3,"names":["parseErrorStack","UTFSequence","stringifySafe","ansiRegex","ANSI_REGEX","source","RE_TRANSFORM_ERROR","RE_COMPONENT_STACK_LINE","RE_COMPONENT_STACK_LINE_GLOBAL","RE_COMPONENT_STACK_LINE_OLD","RE_COMPONENT_STACK_LINE_NEW","RE_COMPONENT_STACK_LINE_STACK_FRAME","RE_BABEL_TRANSFORM_ERROR_FORMAT","RE_COMPONENT_STACK_WITH_SOURCE","RE_COMPONENT_STACK_NO_SOURCE","RE_BABEL_CODE_FRAME_ERROR_FORMAT","RE_METRO_ERROR_FORMAT","RE_BABEL_CODE_FRAME_MARKER_PATTERN","RegExp","join","hasComponentStack","args","arg","isComponentStack","SUBSTITUTION","BOM","parseInterpolation","categoryParts","contentParts","substitutionOffsets","remaining","formatString","String","shift","formatStringParts","split","substitutionCount","length","substitutions","splice","categoryString","contentString","substitutionIndex","formatStringPart","substitution","push","offset","remainingArgs","map","category","message","content","consoleArgument","isOldComponentStackFormat","test","isNewComponentStackFormat","isNewJSCComponentStackFormat","parseComponentStack","stack","type","frame","methodName","collapse","fileName","file","location","column","row","lineNumber","legacyStack","s","match","slice","parseInt","matchWithoutSource","filter","Boolean","parseLogBoxException","error","originalMessage","metroInternalError","codeFrame","level","isComponentError","componentStackType","componentStack","extraData","babelTransformError","babelCodeFrameError","isFatal","Object","assign","parseLogBoxLog","withoutANSIColorStyles","replace","argsWithoutComponentStack","lastArg","messageEndIndex","search"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/LogBox/Data/parseLogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {ExceptionData} from '../../Core/NativeExceptionsManager';\nimport type {LogBoxLogData} from './LogBoxLog';\n\nimport parseErrorStack from '../../Core/Devtools/parseErrorStack';\nimport UTFSequence from '../../UTFSequence';\nimport stringifySafe from '../../Utilities/stringifySafe';\nimport ansiRegex from 'ansi-regex';\n\nconst ANSI_REGEX = ansiRegex().source;\n\nconst RE_TRANSFORM_ERROR = /^TransformError /;\nconst RE_COMPONENT_STACK_LINE = /\\n {4}(in|at) /;\nconst RE_COMPONENT_STACK_LINE_GLOBAL = /\\n {4}(in|at) /g;\nconst RE_COMPONENT_STACK_LINE_OLD = / {4}in/;\nconst RE_COMPONENT_STACK_LINE_NEW = / {4}at/;\nconst RE_COMPONENT_STACK_LINE_STACK_FRAME = /@.*\\n/;\n\n// \"TransformError \" (Optional) and either \"SyntaxError: \" or \"ReferenceError: \"\n// Capturing groups:\n// 1: error message\n// 2: file path\n// 3: line number\n// 4: column number\n// \\n\\n\n// 5: code frame\nconst RE_BABEL_TRANSFORM_ERROR_FORMAT =\n  /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\n\n// Capturing groups:\n// 1: component name\n// \"at\"\n// 2: file path including extension\n// 3: line number\nconst RE_COMPONENT_STACK_WITH_SOURCE =\n  /(.*) \\(at (.*\\.(?:js|jsx|ts|tsx)):([\\d]+)\\)/;\n\n// Capturing groups:\n// 1: component name\n// \"at\"\n// 2: parent component name\nconst RE_COMPONENT_STACK_NO_SOURCE = /(.*) \\(created by .*\\)/;\n\n// Capturing groups:\n// - non-capturing \"TransformError \" (optional)\n// - non-capturing Error message\n// 1: file path\n// 2: file name\n// 3: error message\n// 4: code frame, which includes code snippet indicators or terminal escape sequences for formatting.\nconst RE_BABEL_CODE_FRAME_ERROR_FORMAT =\n  // eslint-disable-next-line no-control-regex\n  /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\n\n// Capturing groups:\n// - non-capturing \"InternalError Metro has encountered an error:\"\n// 1: error title\n// 2: error message\n// 3: file path\n// 4: line number\n// 5: column number\n// 6: code frame, which includes code snippet indicators or terminal escape sequences for formatting.\nconst RE_METRO_ERROR_FORMAT =\n  /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\n\n// https://github.com/babel/babel/blob/33dbb85e9e9fe36915273080ecc42aee62ed0ade/packages/babel-code-frame/src/index.ts#L183-L184\nconst RE_BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp(\n  [\n    // Beginning of a line (per 'm' flag)\n    '^',\n    // Optional ANSI escapes for colors\n    `(?:${ANSI_REGEX})*`,\n    // Marker\n    '>',\n    // Optional ANSI escapes for colors\n    `(?:${ANSI_REGEX})*`,\n    // Left padding for line number\n    ' +',\n    // Line number\n    '[0-9]+',\n    // Gutter\n    ' \\\\|',\n  ].join(''),\n  'm',\n);\n\nexport function hasComponentStack(args: $ReadOnlyArray<mixed>): boolean {\n  for (const arg of args) {\n    if (typeof arg === 'string' && isComponentStack(arg)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport type ExtendedExceptionData = ExceptionData & {\n  isComponentError: boolean,\n  ...\n};\nexport type Category = string;\nexport type CodeFrame = $ReadOnly<{|\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n\n  // TODO: When React switched to using call stack frames,\n  // we gained the ability to use the collapse flag, but\n  // it is not integrated into the LogBox UI.\n  collapse?: boolean,\n|}>;\nexport type Message = $ReadOnly<{|\n  content: string,\n  substitutions: $ReadOnlyArray<\n    $ReadOnly<{|\n      length: number,\n      offset: number,\n    |}>,\n  >,\n|}>;\n\nexport type ComponentStack = $ReadOnlyArray<CodeFrame>;\nexport type ComponentStackType = 'legacy' | 'stack';\n\nconst SUBSTITUTION = UTFSequence.BOM + '%s';\n\nexport function parseInterpolation(args: $ReadOnlyArray<mixed>): $ReadOnly<{|\n  category: Category,\n  message: Message,\n|}> {\n  const categoryParts = [];\n  const contentParts = [];\n  const substitutionOffsets = [];\n\n  const remaining = [...args];\n  if (typeof remaining[0] === 'string') {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split('%s');\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n\n    let categoryString = '';\n    let contentString = '';\n\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          // Don't stringify a string type.\n          // It adds quotation mark wrappers around the string,\n          // which causes the LogBox to look odd.\n          const substitution =\n            typeof substitutions[substitutionIndex] === 'string'\n              ? substitutions[substitutionIndex]\n              : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length,\n          });\n\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length,\n          });\n\n          categoryString += '%s';\n          contentString += '%s';\n        }\n\n        substitutionIndex++;\n      }\n    }\n\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n\n  const remainingArgs = remaining.map(arg => {\n    // Don't stringify a string type.\n    // It adds quotation mark wrappers around the string,\n    // which causes the LogBox to look odd.\n    return typeof arg === 'string' ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets,\n    },\n  };\n}\n\nfunction isComponentStack(consoleArgument: string) {\n  const isOldComponentStackFormat =\n    RE_COMPONENT_STACK_LINE_OLD.test(consoleArgument);\n  const isNewComponentStackFormat =\n    RE_COMPONENT_STACK_LINE_NEW.test(consoleArgument);\n  const isNewJSCComponentStackFormat =\n    RE_COMPONENT_STACK_LINE_STACK_FRAME.test(consoleArgument);\n\n  return (\n    isOldComponentStackFormat ||\n    isNewComponentStackFormat ||\n    isNewJSCComponentStackFormat\n  );\n}\n\nexport function parseComponentStack(message: string): {\n  type: ComponentStackType,\n  stack: ComponentStack,\n} {\n  // In newer versions of React, the component stack is formatted as a call stack frame.\n  // First try to parse the component stack as a call stack frame, and if that doesn't\n  // work then we'll fallback to the old custom component stack format parsing.\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return {\n      type: 'stack',\n      stack: stack.map(frame => ({\n        content: frame.methodName,\n        collapse: frame.collapse || false,\n        fileName: frame.file == null ? 'unknown' : frame.file,\n        location: {\n          column: frame.column == null ? -1 : frame.column,\n          row: frame.lineNumber == null ? -1 : frame.lineNumber,\n        },\n      })),\n    };\n  }\n  const legacyStack = message\n    .split(RE_COMPONENT_STACK_LINE_GLOBAL)\n    .map(s => {\n      if (!s) {\n        return null;\n      }\n      const match = s.match(RE_COMPONENT_STACK_WITH_SOURCE);\n      if (match) {\n        let [content, fileName, row] = match.slice(1);\n        return {\n          content,\n          fileName,\n          location: {column: -1, row: parseInt(row, 10)},\n        };\n      }\n\n      // In some cases, the component stack doesn't have a source.\n      const matchWithoutSource = s.match(RE_COMPONENT_STACK_NO_SOURCE);\n      if (matchWithoutSource) {\n        return {\n          content: matchWithoutSource[1],\n          fileName: '',\n          location: null,\n        };\n      }\n\n      return null;\n    })\n    .filter(Boolean);\n\n  return {\n    type: 'legacy',\n    stack: legacyStack,\n  };\n}\n\nexport function parseLogBoxException(\n  error: ExtendedExceptionData,\n): LogBoxLogData {\n  const message =\n    error.originalMessage != null ? error.originalMessage : 'Unknown';\n\n  const metroInternalError = message.match(RE_METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [content, fileName, row, column, codeFrame] =\n      metroInternalError.slice(1);\n\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStackType: 'legacy',\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n      extraData: error.extraData,\n    };\n  }\n\n  const babelTransformError = message.match(RE_BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    // Transform errors are thrown from inside the Babel transformer.\n    const [fileName, content, row, column, codeFrame] =\n      babelTransformError.slice(1);\n\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStackType: 'legacy',\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n      extraData: error.extraData,\n    };\n  }\n\n  // Perform a cheap match first before trying to parse the full message, which\n  // can get expensive for arbitrary input.\n  if (RE_BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {\n    const babelCodeFrameError = message.match(RE_BABEL_CODE_FRAME_ERROR_FORMAT);\n\n    if (babelCodeFrameError) {\n      // Codeframe errors are thrown from any use of buildCodeFrameError.\n      const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n      return {\n        level: 'syntax',\n        stack: [],\n        isComponentError: false,\n        componentStackType: 'legacy',\n        componentStack: [],\n        codeFrame: {\n          fileName,\n          location: null, // We are not given the location.\n          content: codeFrame,\n        },\n        message: {\n          content,\n          substitutions: [],\n        },\n        category: `${fileName}-${1}-${1}`,\n        extraData: error.extraData,\n      };\n    }\n  }\n\n  if (message.match(RE_TRANSFORM_ERROR)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStackType: 'legacy',\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n      extraData: error.extraData,\n    };\n  }\n\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    if (componentStack != null) {\n      const {type, stack} = parseComponentStack(componentStack);\n      return {\n        level: 'fatal',\n        stack: error.stack,\n        isComponentError: error.isComponentError,\n        componentStackType: type,\n        componentStack: stack,\n        extraData: error.extraData,\n        ...parseInterpolation([message]),\n      };\n    } else {\n      return {\n        level: 'fatal',\n        stack: error.stack,\n        isComponentError: error.isComponentError,\n        componentStackType: 'legacy',\n        componentStack: [],\n        extraData: error.extraData,\n        ...parseInterpolation([message]),\n      };\n    }\n  }\n\n  if (componentStack != null) {\n    // It is possible that console errors have a componentStack.\n    const {type, stack} = parseComponentStack(componentStack);\n    return {\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStackType: type,\n      componentStack: stack,\n      extraData: error.extraData,\n      ...parseInterpolation([message]),\n    };\n  }\n\n  // Most `console.error` calls won't have a componentStack. We parse them like\n  // regular logs which have the component stack buried in the message.\n  return {\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    extraData: error.extraData,\n    ...parseLogBoxLog([message]),\n  };\n}\n\nexport function withoutANSIColorStyles(message: mixed): mixed {\n  if (typeof message !== 'string') {\n    return message;\n  }\n\n  return message.replace(\n    // eslint-disable-next-line no-control-regex\n    /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,\n    '',\n  );\n}\n\nexport function parseLogBoxLog(args: $ReadOnlyArray<mixed>): {|\n  componentStack: ComponentStack,\n  componentStackType: ComponentStackType,\n  category: Category,\n  message: Message,\n|} {\n  const message = withoutANSIColorStyles(args[0]);\n  let argsWithoutComponentStack: Array<mixed> = [];\n  let componentStack: ComponentStack = [];\n  let componentStackType = 'legacy';\n\n  // Extract component stack from warnings like \"Some warning%s\".\n  if (\n    typeof message === 'string' &&\n    message.slice(-2) === '%s' &&\n    args.length > 0\n  ) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      const {type, stack} = parseComponentStack(lastArg);\n      componentStack = stack;\n      componentStackType = type;\n    }\n  }\n\n  if (componentStack.length === 0 && argsWithoutComponentStack.length === 0) {\n    // Try finding the component stack elsewhere.\n    for (const arg of args) {\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        // Strip out any messages before the component stack.\n        let messageEndIndex = arg.search(RE_COMPONENT_STACK_LINE);\n        if (messageEndIndex < 0) {\n          // Handle JSC component stacks.\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n\n        const {type, stack} = parseComponentStack(arg);\n        componentStack = stack;\n        componentStackType = type;\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n\n  return {\n    ...parseInterpolation(argsWithoutComponentStack),\n    componentStack,\n    componentStackType,\n  };\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}