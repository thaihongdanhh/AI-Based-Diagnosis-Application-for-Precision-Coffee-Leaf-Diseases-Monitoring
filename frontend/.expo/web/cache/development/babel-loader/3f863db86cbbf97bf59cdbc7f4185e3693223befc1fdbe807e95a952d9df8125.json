{"ast":null,"code":"import getNativeComponentAttributes from \"../ReactNative/getNativeComponentAttributes\";\nimport UIManager from \"../ReactNative/UIManager\";\nimport * as ReactNativeViewConfigRegistry from \"../Renderer/shims/ReactNativeViewConfigRegistry\";\nimport * as StaticViewConfigValidator from \"./StaticViewConfigValidator\";\nimport { createViewConfig } from \"./ViewConfig\";\nimport invariant from 'invariant';\nimport * as React from 'react';\nlet getRuntimeConfig;\nexport function setRuntimeConfigProvider(runtimeConfigProvider) {\n  if (getRuntimeConfig === undefined) {\n    getRuntimeConfig = runtimeConfigProvider;\n  }\n}\nexport function get(name, viewConfigProvider) {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {\n      native,\n      verify\n    } = getRuntimeConfig?.(name) ?? {\n      native: !global.RN$Bridgeless,\n      verify: false\n    };\n    let viewConfig;\n    if (native) {\n      viewConfig = getNativeComponentAttributes(name) ?? createViewConfig(viewConfigProvider());\n    } else {\n      viewConfig = createViewConfig(viewConfigProvider()) ?? getNativeComponentAttributes(name);\n    }\n    invariant(viewConfig != null, 'NativeComponentRegistry.get: both static and native view config are missing for native component \"%s\".', name);\n    if (verify) {\n      const nativeViewConfig = native ? viewConfig : getNativeComponentAttributes(name);\n      if (nativeViewConfig == null) {\n        return viewConfig;\n      }\n      const staticViewConfig = native ? createViewConfig(viewConfigProvider()) : viewConfig;\n      const validationOutput = StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);\n      if (validationOutput.type === 'invalid') {\n        console.error(StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));\n      }\n    }\n    return viewConfig;\n  });\n  return name;\n}\nexport function getWithFallback_DEPRECATED(name, viewConfigProvider) {\n  if (getRuntimeConfig == null) {\n    if (hasNativeViewConfig(name)) {\n      return get(name, viewConfigProvider);\n    }\n  } else {\n    if (getRuntimeConfig(name) != null) {\n      return get(name, viewConfigProvider);\n    }\n  }\n  const FallbackNativeComponent = function (props) {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\nfunction hasNativeViewConfig(name) {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\nexport function unstable_hasStaticViewConfig(name) {\n  const {\n    native\n  } = getRuntimeConfig?.(name) ?? {\n    native: true\n  };\n  return !native;\n}","map":{"version":3,"names":["getNativeComponentAttributes","UIManager","ReactNativeViewConfigRegistry","StaticViewConfigValidator","createViewConfig","invariant","React","getRuntimeConfig","setRuntimeConfigProvider","runtimeConfigProvider","undefined","get","name","viewConfigProvider","register","native","verify","global","RN$Bridgeless","viewConfig","nativeViewConfig","staticViewConfig","validationOutput","validate","type","console","error","stringifyValidationResult","getWithFallback_DEPRECATED","hasNativeViewConfig","FallbackNativeComponent","props","displayName","getViewManagerConfig","unstable_hasStaticViewConfig"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n  ViewConfig,\n} from '../Renderer/shims/ReactNativeTypes';\n\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\nimport UIManager from '../ReactNative/UIManager';\nimport * as ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport * as StaticViewConfigValidator from './StaticViewConfigValidator';\nimport {createViewConfig} from './ViewConfig';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nlet getRuntimeConfig;\n\n/**\n * Configures a function that is called to determine whether a given component\n * should be registered using reflection of the native component at runtime.\n *\n * The provider should return null if the native component is unavailable in\n * the current environment.\n */\nexport function setRuntimeConfigProvider(\n  runtimeConfigProvider: (name: string) => ?{\n    native: boolean,\n    verify: boolean,\n  },\n): void {\n  if (getRuntimeConfig === undefined) {\n    getRuntimeConfig = runtimeConfigProvider;\n  }\n}\n\n/**\n * Gets a `NativeComponent` that can be rendered by React Native.\n *\n * The supplied `viewConfigProvider` may or may not be invoked and utilized,\n * depending on how `setRuntimeConfigProvider` is configured.\n */\nexport function get<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): HostComponent<Config> {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {native, verify} = getRuntimeConfig?.(name) ?? {\n      native: !global.RN$Bridgeless,\n      verify: false,\n    };\n\n    let viewConfig: ViewConfig;\n    if (native) {\n      viewConfig =\n        getNativeComponentAttributes(name) ??\n        createViewConfig(viewConfigProvider());\n    } else {\n      viewConfig =\n        createViewConfig(viewConfigProvider()) ??\n        getNativeComponentAttributes(name);\n    }\n\n    invariant(\n      viewConfig != null,\n      'NativeComponentRegistry.get: both static and native view config are missing for native component \"%s\".',\n      name,\n    );\n\n    if (verify) {\n      const nativeViewConfig = native\n        ? viewConfig\n        : getNativeComponentAttributes(name);\n\n      if (nativeViewConfig == null) {\n        // Defer to static view config if native view config is missing.\n        return viewConfig;\n      }\n\n      const staticViewConfig: ViewConfig = native\n        ? createViewConfig(viewConfigProvider())\n        : viewConfig;\n\n      const validationOutput = StaticViewConfigValidator.validate(\n        name,\n        nativeViewConfig,\n        staticViewConfig,\n      );\n\n      if (validationOutput.type === 'invalid') {\n        console.error(\n          StaticViewConfigValidator.stringifyValidationResult(\n            name,\n            validationOutput,\n          ),\n        );\n      }\n    }\n\n    return viewConfig;\n  });\n\n  // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!\n  return name;\n}\n\n/**\n * Same as `NativeComponentRegistry.get(...)`, except this will check either\n * the `setRuntimeConfigProvider` configuration or use native reflection (slow)\n * to determine whether this native component is available.\n *\n * If the native component is not available, a stub component is returned. Note\n * that the return value of this is not `HostComponent` because the returned\n * component instance is not guaranteed to have native methods.\n */\nexport function getWithFallback_DEPRECATED<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): React.AbstractComponent<Config> {\n  if (getRuntimeConfig == null) {\n    // `getRuntimeConfig == null` when static view configs are disabled\n    // If `setRuntimeConfigProvider` is not configured, use native reflection.\n    if (hasNativeViewConfig(name)) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  } else {\n    // If there is no runtime config, then the native component is unavailable.\n    if (getRuntimeConfig(name) != null) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  }\n\n  const FallbackNativeComponent = function (props: Config): React.Node {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name: string): boolean {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if there is a StaticViewConfig registered for the\n * component name received as a parameter.\n */\nexport function unstable_hasStaticViewConfig(name: string): boolean {\n  const {native} = getRuntimeConfig?.(name) ?? {\n    native: true,\n  };\n  return !native;\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}