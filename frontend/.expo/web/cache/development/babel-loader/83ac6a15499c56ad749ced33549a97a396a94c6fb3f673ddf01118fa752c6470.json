{"ast":null,"code":"import { PerformanceEventTiming } from \"./EventTiming\";\nimport { PerformanceLongTaskTiming } from \"./LongTasks\";\nimport { PerformanceEntry } from \"./PerformanceEntry\";\nimport { PerformanceMark, PerformanceMeasure } from \"./UserTiming\";\nexport const RawPerformanceEntryTypeValues = {\n  MARK: 1,\n  MEASURE: 2,\n  EVENT: 3,\n  LONGTASK: 4\n};\nexport function rawToPerformanceEntry(entry) {\n  if (entry.entryType === RawPerformanceEntryTypeValues.EVENT) {\n    return new PerformanceEventTiming({\n      name: entry.name,\n      startTime: entry.startTime,\n      duration: entry.duration,\n      processingStart: entry.processingStart,\n      processingEnd: entry.processingEnd,\n      interactionId: entry.interactionId\n    });\n  } else if (entry.entryType === RawPerformanceEntryTypeValues.LONGTASK) {\n    return new PerformanceLongTaskTiming({\n      name: entry.name,\n      entryType: rawToPerformanceEntryType(entry.entryType),\n      startTime: entry.startTime,\n      duration: entry.duration\n    });\n  } else if (entry.entryType === RawPerformanceEntryTypeValues.MARK) {\n    return new PerformanceMark(entry.name, {\n      startTime: entry.startTime\n    });\n  } else if (entry.entryType === RawPerformanceEntryTypeValues.MEASURE) {\n    return new PerformanceMeasure(entry.name, {\n      startTime: entry.startTime,\n      duration: entry.duration\n    });\n  } else {\n    return new PerformanceEntry({\n      name: entry.name,\n      entryType: rawToPerformanceEntryType(entry.entryType),\n      startTime: entry.startTime,\n      duration: entry.duration\n    });\n  }\n}\nexport function rawToPerformanceEntryType(type) {\n  switch (type) {\n    case RawPerformanceEntryTypeValues.MARK:\n      return 'mark';\n    case RawPerformanceEntryTypeValues.MEASURE:\n      return 'measure';\n    case RawPerformanceEntryTypeValues.EVENT:\n      return 'event';\n    case RawPerformanceEntryTypeValues.LONGTASK:\n      return 'longtask';\n    default:\n      throw new TypeError(`rawToPerformanceEntryType: unexpected performance entry type received: ${type}`);\n  }\n}\nexport function performanceEntryTypeToRaw(type) {\n  switch (type) {\n    case 'mark':\n      return RawPerformanceEntryTypeValues.MARK;\n    case 'measure':\n      return RawPerformanceEntryTypeValues.MEASURE;\n    case 'event':\n      return RawPerformanceEntryTypeValues.EVENT;\n    case 'longtask':\n      return RawPerformanceEntryTypeValues.LONGTASK;\n    default:\n      type;\n      throw new TypeError(`performanceEntryTypeToRaw: unexpected performance entry type received: ${type}`);\n  }\n}","map":{"version":3,"names":["PerformanceEventTiming","PerformanceLongTaskTiming","PerformanceEntry","PerformanceMark","PerformanceMeasure","RawPerformanceEntryTypeValues","MARK","MEASURE","EVENT","LONGTASK","rawToPerformanceEntry","entry","entryType","name","startTime","duration","processingStart","processingEnd","interactionId","rawToPerformanceEntryType","type","TypeError","performanceEntryTypeToRaw"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/src/private/webapis/performance/RawPerformanceEntry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport type {PerformanceEntryType} from './PerformanceEntry';\nimport type {\n  RawPerformanceEntry,\n  RawPerformanceEntryType,\n} from './specs/NativePerformanceObserver';\n\nimport {PerformanceEventTiming} from './EventTiming';\nimport {PerformanceLongTaskTiming} from './LongTasks';\nimport {PerformanceEntry} from './PerformanceEntry';\nimport {PerformanceMark, PerformanceMeasure} from './UserTiming';\n\nexport const RawPerformanceEntryTypeValues = {\n  MARK: 1,\n  MEASURE: 2,\n  EVENT: 3,\n  LONGTASK: 4,\n};\n\nexport function rawToPerformanceEntry(\n  entry: RawPerformanceEntry,\n): PerformanceEntry {\n  if (entry.entryType === RawPerformanceEntryTypeValues.EVENT) {\n    return new PerformanceEventTiming({\n      name: entry.name,\n      startTime: entry.startTime,\n      duration: entry.duration,\n      processingStart: entry.processingStart,\n      processingEnd: entry.processingEnd,\n      interactionId: entry.interactionId,\n    });\n  } else if (entry.entryType === RawPerformanceEntryTypeValues.LONGTASK) {\n    return new PerformanceLongTaskTiming({\n      name: entry.name,\n      entryType: rawToPerformanceEntryType(entry.entryType),\n      startTime: entry.startTime,\n      duration: entry.duration,\n    });\n  } else if (entry.entryType === RawPerformanceEntryTypeValues.MARK) {\n    return new PerformanceMark(entry.name, {\n      startTime: entry.startTime,\n    });\n  } else if (entry.entryType === RawPerformanceEntryTypeValues.MEASURE) {\n    return new PerformanceMeasure(entry.name, {\n      startTime: entry.startTime,\n      duration: entry.duration,\n    });\n  } else {\n    return new PerformanceEntry({\n      name: entry.name,\n      entryType: rawToPerformanceEntryType(entry.entryType),\n      startTime: entry.startTime,\n      duration: entry.duration,\n    });\n  }\n}\n\nexport function rawToPerformanceEntryType(\n  type: RawPerformanceEntryType,\n): PerformanceEntryType {\n  switch (type) {\n    case RawPerformanceEntryTypeValues.MARK:\n      return 'mark';\n    case RawPerformanceEntryTypeValues.MEASURE:\n      return 'measure';\n    case RawPerformanceEntryTypeValues.EVENT:\n      return 'event';\n    case RawPerformanceEntryTypeValues.LONGTASK:\n      return 'longtask';\n    default:\n      throw new TypeError(\n        `rawToPerformanceEntryType: unexpected performance entry type received: ${type}`,\n      );\n  }\n}\n\nexport function performanceEntryTypeToRaw(\n  type: PerformanceEntryType,\n): RawPerformanceEntryType {\n  switch (type) {\n    case 'mark':\n      return RawPerformanceEntryTypeValues.MARK;\n    case 'measure':\n      return RawPerformanceEntryTypeValues.MEASURE;\n    case 'event':\n      return RawPerformanceEntryTypeValues.EVENT;\n    case 'longtask':\n      return RawPerformanceEntryTypeValues.LONGTASK;\n    default:\n      // Verify exhaustive check with Flow\n      (type: empty);\n      throw new TypeError(\n        `performanceEntryTypeToRaw: unexpected performance entry type received: ${type}`,\n      );\n  }\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}