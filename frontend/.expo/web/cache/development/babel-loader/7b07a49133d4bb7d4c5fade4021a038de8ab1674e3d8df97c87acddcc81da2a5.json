{"ast":null,"code":"'use strict';\n\nimport Sensor from \"./Sensor.js\";\nexport class SensorContainer {\n  nativeSensors = new Map();\n  getSensorId(sensorType, config) {\n    return sensorType * 100 + config.iosReferenceFrame * 10 + Number(config.adjustToInterfaceOrientation);\n  }\n  initializeSensor(sensorType, config) {\n    const sensorId = this.getSensorId(sensorType, config);\n    if (!this.nativeSensors.has(sensorId)) {\n      const newSensor = new Sensor(sensorType, config);\n      this.nativeSensors.set(sensorId, newSensor);\n    }\n    const sensor = this.nativeSensors.get(sensorId);\n    return sensor.getSharedValue();\n  }\n  registerSensor(sensorType, config, handler) {\n    const sensorId = this.getSensorId(sensorType, config);\n    if (!this.nativeSensors.has(sensorId)) {\n      return -1;\n    }\n    const sensor = this.nativeSensors.get(sensorId);\n    if (sensor && sensor.isAvailable() && (sensor.isRunning() || sensor.register(handler))) {\n      sensor.listenersNumber++;\n      return sensorId;\n    }\n    return -1;\n  }\n  unregisterSensor(sensorId) {\n    if (this.nativeSensors.has(sensorId)) {\n      const sensor = this.nativeSensors.get(sensorId);\n      if (sensor && sensor.isRunning()) {\n        sensor.listenersNumber--;\n        if (sensor.listenersNumber === 0) {\n          sensor.unregister();\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["Sensor","SensorContainer","nativeSensors","Map","getSensorId","sensorType","config","iosReferenceFrame","Number","adjustToInterfaceOrientation","initializeSensor","sensorId","has","newSensor","set","sensor","get","getSharedValue","registerSensor","handler","isAvailable","isRunning","register","listenersNumber","unregisterSensor","unregister"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/src/SensorContainer.ts"],"sourcesContent":["'use strict';\nimport type {\n  SensorType,\n  SensorConfig,\n  Value3D,\n  ValueRotation,\n  ShareableRef,\n  SharedValue,\n} from './commonTypes';\nimport Sensor from './Sensor';\n\nexport class SensorContainer {\n  private nativeSensors: Map<number, Sensor> = new Map();\n\n  getSensorId(sensorType: SensorType, config: SensorConfig) {\n    return (\n      sensorType * 100 +\n      config.iosReferenceFrame * 10 +\n      Number(config.adjustToInterfaceOrientation)\n    );\n  }\n\n  initializeSensor(\n    sensorType: SensorType,\n    config: SensorConfig\n  ): SharedValue<Value3D | ValueRotation> {\n    const sensorId = this.getSensorId(sensorType, config);\n\n    if (!this.nativeSensors.has(sensorId)) {\n      const newSensor = new Sensor(sensorType, config);\n      this.nativeSensors.set(sensorId, newSensor);\n    }\n\n    const sensor = this.nativeSensors.get(sensorId);\n    return sensor!.getSharedValue();\n  }\n\n  registerSensor(\n    sensorType: SensorType,\n    config: SensorConfig,\n    handler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ): number {\n    const sensorId = this.getSensorId(sensorType, config);\n\n    if (!this.nativeSensors.has(sensorId)) {\n      return -1;\n    }\n\n    const sensor = this.nativeSensors.get(sensorId);\n    if (\n      sensor &&\n      sensor.isAvailable() &&\n      (sensor.isRunning() || sensor.register(handler))\n    ) {\n      sensor.listenersNumber++;\n      return sensorId;\n    }\n    return -1;\n  }\n\n  unregisterSensor(sensorId: number) {\n    if (this.nativeSensors.has(sensorId)) {\n      const sensor = this.nativeSensors.get(sensorId);\n      if (sensor && sensor.isRunning()) {\n        sensor.listenersNumber--;\n        if (sensor.listenersNumber === 0) {\n          sensor.unregister();\n        }\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AASZ,OAAOA,MAAM;AAEb,OAAO,MAAMC,eAAe,CAAC;EACnBC,aAAa,GAAwB,IAAIC,GAAG,CAAC,CAAC;EAEtDC,WAAWA,CAACC,UAAsB,EAAEC,MAAoB,EAAE;IACxD,OACED,UAAU,GAAG,GAAG,GAChBC,MAAM,CAACC,iBAAiB,GAAG,EAAE,GAC7BC,MAAM,CAACF,MAAM,CAACG,4BAA4B,CAAC;EAE/C;EAEAC,gBAAgBA,CACdL,UAAsB,EACtBC,MAAoB,EACkB;IACtC,MAAMK,QAAQ,GAAG,IAAI,CAACP,WAAW,CAACC,UAAU,EAAEC,MAAM,CAAC;IAErD,IAAI,CAAC,IAAI,CAACJ,aAAa,CAACU,GAAG,CAACD,QAAQ,CAAC,EAAE;MACrC,MAAME,SAAS,GAAG,IAAIb,MAAM,CAACK,UAAU,EAAEC,MAAM,CAAC;MAChD,IAAI,CAACJ,aAAa,CAACY,GAAG,CAACH,QAAQ,EAAEE,SAAS,CAAC;IAC7C;IAEA,MAAME,MAAM,GAAG,IAAI,CAACb,aAAa,CAACc,GAAG,CAACL,QAAQ,CAAC;IAC/C,OAAOI,MAAM,CAAEE,cAAc,CAAC,CAAC;EACjC;EAEAC,cAAcA,CACZb,UAAsB,EACtBC,MAAoB,EACpBa,OAA8D,EACtD;IACR,MAAMR,QAAQ,GAAG,IAAI,CAACP,WAAW,CAACC,UAAU,EAAEC,MAAM,CAAC;IAErD,IAAI,CAAC,IAAI,CAACJ,aAAa,CAACU,GAAG,CAACD,QAAQ,CAAC,EAAE;MACrC,OAAO,CAAC,CAAC;IACX;IAEA,MAAMI,MAAM,GAAG,IAAI,CAACb,aAAa,CAACc,GAAG,CAACL,QAAQ,CAAC;IAC/C,IACEI,MAAM,IACNA,MAAM,CAACK,WAAW,CAAC,CAAC,KACnBL,MAAM,CAACM,SAAS,CAAC,CAAC,IAAIN,MAAM,CAACO,QAAQ,CAACH,OAAO,CAAC,CAAC,EAChD;MACAJ,MAAM,CAACQ,eAAe,EAAE;MACxB,OAAOZ,QAAQ;IACjB;IACA,OAAO,CAAC,CAAC;EACX;EAEAa,gBAAgBA,CAACb,QAAgB,EAAE;IACjC,IAAI,IAAI,CAACT,aAAa,CAACU,GAAG,CAACD,QAAQ,CAAC,EAAE;MACpC,MAAMI,MAAM,GAAG,IAAI,CAACb,aAAa,CAACc,GAAG,CAACL,QAAQ,CAAC;MAC/C,IAAII,MAAM,IAAIA,MAAM,CAACM,SAAS,CAAC,CAAC,EAAE;QAChCN,MAAM,CAACQ,eAAe,EAAE;QACxB,IAAIR,MAAM,CAACQ,eAAe,KAAK,CAAC,EAAE;UAChCR,MAAM,CAACU,UAAU,CAAC,CAAC;QACrB;MACF;IACF;EACF;AACF"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}