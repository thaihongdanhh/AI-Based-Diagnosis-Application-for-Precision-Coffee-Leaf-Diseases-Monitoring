{"ast":null,"code":"'use strict';\n\nimport ListMetricsAggregator from \"./ListMetricsAggregator\";\nconst invariant = require('invariant');\nclass ViewabilityHelper {\n  _hasInteracted = false;\n  _timers = new Set();\n  _viewableIndices = [];\n  _viewableItems = new Map();\n  constructor(config = {\n    viewAreaCoveragePercentThreshold: 0\n  }) {\n    this._config = config;\n  }\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n  computeViewableItems(props, scrollOffset, viewportHeight, listMetrics, renderRange) {\n    const itemCount = props.getItemCount(props.data);\n    const {\n      itemVisiblePercentThreshold,\n      viewAreaCoveragePercentThreshold\n    } = this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;\n    invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {\n      first,\n      last\n    } = renderRange || {\n      first: 0,\n      last: itemCount - 1\n    };\n    if (last >= itemCount) {\n      console.warn('Invalid render range computing viewability ' + JSON.stringify({\n        renderRange,\n        itemCount\n      }));\n      return [];\n    }\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = listMetrics.getCellMetrics(idx, props);\n      if (!metrics) {\n        continue;\n      }\n      const top = Math.floor(metrics.offset - scrollOffset);\n      const bottom = Math.floor(top + metrics.length);\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n  onUpdate(props, scrollOffset, viewportHeight, listMetrics, createViewToken, onViewableItemsChanged, renderRange) {\n    const itemCount = props.getItemCount(props.data);\n    if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !listMetrics.getCellMetrics(0, props)) {\n      return;\n    }\n    let viewableIndices = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(props, scrollOffset, viewportHeight, listMetrics, renderRange);\n    }\n    if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every((v, ii) => v === viewableIndices[ii])) {\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle = setTimeout(() => {\n        this._timers.delete(handle);\n        this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);\n      }, this._config.minimumViewTime);\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);\n    }\n  }\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n  _onUpdateSync(props, viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii => this._viewableIndices.includes(ii));\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(viewableIndicesToCheck.map(ii => {\n      const viewable = createViewToken(ii, true, props);\n      return [viewable.key, viewable];\n    }));\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push(Object.assign({}, viewable, {\n          isViewable: false\n        }));\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config\n      });\n    }\n  }\n}\nfunction _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\nfunction _getPixelsVisible(top, bottom, viewportHeight) {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\nfunction _isEntirelyVisible(top, bottom, viewportHeight) {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\nmodule.exports = ViewabilityHelper;","map":{"version":3,"names":["ListMetricsAggregator","invariant","require","ViewabilityHelper","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","constructor","config","viewAreaCoveragePercentThreshold","_config","dispose","forEach","clearTimeout","computeViewableItems","props","scrollOffset","viewportHeight","listMetrics","renderRange","itemCount","getItemCount","data","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","first","last","console","warn","JSON","stringify","idx","metrics","getCellMetrics","top","Math","floor","offset","bottom","length","_isViewable","push","onUpdate","createViewToken","onViewableItemsChanged","waitForInteraction","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","resetViewableIndices","recordInteraction","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","has","Object","assign","isViewable","viewableItems","Array","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","min","max","module","exports"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/@react-native/virtualized-lists/Lists/ViewabilityHelper.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {CellMetricProps} from './ListMetricsAggregator';\n\nimport ListMetricsAggregator from './ListMetricsAggregator';\n\nconst invariant = require('invariant');\n\nexport type ViewToken = {\n  item: any,\n  key: string,\n  index: ?number,\n  isViewable: boolean,\n  section?: any,\n  ...\n};\n\nexport type ViewabilityConfigCallbackPair = {\n  viewabilityConfig: ViewabilityConfig,\n  onViewableItemsChanged: (info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n    ...\n  }) => void,\n  ...\n};\n\nexport type ViewabilityConfig = {|\n  /**\n   * Minimum amount of time (in milliseconds) that an item must be physically viewable before the\n   * viewability callback will be fired. A high number means that scrolling through content without\n   * stopping will not mark the content as viewable.\n   */\n  minimumViewTime?: number,\n\n  /**\n   * Percent of viewport that must be covered for a partially occluded item to count as\n   * \"viewable\", 0-100. Fully visible items are always considered viewable. A value of 0 means\n   * that a single pixel in the viewport makes the item viewable, and a value of 100 means that\n   * an item must be either entirely visible or cover the entire viewport to count as viewable.\n   */\n  viewAreaCoveragePercentThreshold?: number,\n\n  /**\n   * Similar to `viewAreaPercentThreshold`, but considers the percent of the item that is visible,\n   * rather than the fraction of the viewable area it covers.\n   */\n  itemVisiblePercentThreshold?: number,\n\n  /**\n   * Nothing is considered viewable until the user scrolls or `recordInteraction` is called after\n   * render.\n   */\n  waitForInteraction?: boolean,\n|};\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config: ViewabilityConfig;\n  _hasInteracted: boolean = false;\n  _timers: Set<number> = new Set();\n  _viewableIndices: Array<number> = [];\n  _viewableItems: Map<string, ViewToken> = new Map();\n\n  constructor(\n    config: ViewabilityConfig = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n     * comment suppresses an error found when Flow v0.63 was deployed. To see\n     * the error delete this comment and run Flow. */\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    props: CellMetricProps,\n    scrollOffset: number,\n    viewportHeight: number,\n    listMetrics: ListMetricsAggregator,\n    // Optional optimization to reduce the scan size\n    renderRange?: {\n      first: number,\n      last: number,\n      ...\n    },\n  ): Array<number> {\n    const itemCount = props.getItemCount(props.data);\n    const {itemVisiblePercentThreshold, viewAreaCoveragePercentThreshold} =\n      this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    if (last >= itemCount) {\n      console.warn(\n        'Invalid render range computing viewability ' +\n          JSON.stringify({renderRange, itemCount}),\n      );\n      return [];\n    }\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = listMetrics.getCellMetrics(idx, props);\n      if (!metrics) {\n        continue;\n      }\n      const top = Math.floor(metrics.offset - scrollOffset);\n      const bottom = Math.floor(top + metrics.length);\n\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    props: CellMetricProps,\n    scrollOffset: number,\n    viewportHeight: number,\n    listMetrics: ListMetricsAggregator,\n    createViewToken: (\n      index: number,\n      isViewable: boolean,\n      props: CellMetricProps,\n    ) => ViewToken,\n    onViewableItemsChanged: ({\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => void,\n    // Optional optimization to reduce the scan size\n    renderRange?: {\n      first: number,\n      last: number,\n      ...\n    },\n  ): void {\n    const itemCount = props.getItemCount(props.data);\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !listMetrics.getCellMetrics(0, props)\n    ) {\n      return;\n    }\n    let viewableIndices: Array<number> = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        props,\n        scrollOffset,\n        viewportHeight,\n        listMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle: TimeoutID = setTimeout(() => {\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.63 was deployed. To\n         * see the error delete this comment and run Flow. */\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          props,\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n       * comment suppresses an error found when Flow v0.63 was deployed. To see\n       * the error delete this comment and run Flow. */\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        props,\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    props: CellMetricProps,\n    viewableIndicesToCheck: Array<number>,\n    onViewableItemsChanged: ({\n      changed: Array<ViewToken>,\n      viewableItems: Array<ViewToken>,\n      ...\n    }) => void,\n    createViewToken: (\n      index: number,\n      isViewable: boolean,\n      props: CellMetricProps,\n    ) => ViewToken,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true, props);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode: boolean,\n  viewablePercentThreshold: number,\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n  itemLength: number,\n): boolean {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): number {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): boolean {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n"],"mappings":"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"},"metadata":{"hasCjsExports":true},"sourceType":"module","externalDependencies":[]}