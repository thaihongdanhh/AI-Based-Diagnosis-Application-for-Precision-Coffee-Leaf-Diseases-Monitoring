{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport EventManager from \"./EventManager\";\nimport { MouseButton } from \"../../handlers/gestureHandlerCommon\";\nimport { EventTypes } from \"../interfaces\";\nimport { PointerTypeMapping, calculateViewScale, tryExtractStylusData, isPointerInBounds } from \"../utils\";\nimport { PointerType } from \"../../PointerType\";\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set(['SELECT', 'INPUT']);\nexport default class PointerEventManager extends EventManager {\n  constructor(view) {\n    super(view);\n    _defineProperty(this, \"trackedPointers\", new Set());\n    _defineProperty(this, \"mouseButtonsMapper\", new Map());\n    _defineProperty(this, \"lastPosition\", void 0);\n    _defineProperty(this, \"pointerDownCallback\", event => {\n      if (!isPointerInBounds(this.view, {\n        x: event.clientX,\n        y: event.clientY\n      })) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target;\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(adaptedEvent.pointerId);\n      }\n      this.markAsInBounds(adaptedEvent.pointerId);\n      this.trackedPointers.add(adaptedEvent.pointerId);\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n    _defineProperty(this, \"pointerUpCallback\", event => {\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target;\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.releasePointerCapture(adaptedEvent.pointerId);\n      }\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.trackedPointers.delete(adaptedEvent.pointerId);\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n    _defineProperty(this, \"pointerMoveCallback\", event => {\n      const adaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n      const target = event.target;\n      if (!target.hasPointerCapture(event.pointerId) && !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(event.pointerId);\n      }\n      const inBounds = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y\n      });\n      const pointerIndex = this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.LEAVE;\n          this.onPointerLeave(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n      this.lastPosition.x = event.x;\n      this.lastPosition.y = event.y;\n    });\n    _defineProperty(this, \"pointerCancelCallback\", event => {\n      const adaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    });\n    _defineProperty(this, \"pointerEnterCallback\", event => {\n      const adaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n      this.onPointerMoveOver(adaptedEvent);\n    });\n    _defineProperty(this, \"pointerLeaveCallback\", event => {\n      const adaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n      this.onPointerMoveOut(adaptedEvent);\n    });\n    _defineProperty(this, \"lostPointerCaptureCallback\", event => {\n      const adaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n      if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n        this.onPointerCancel(adaptedEvent);\n        this.activePointersCounter = 0;\n        this.trackedPointers.clear();\n      }\n    });\n    this.mouseButtonsMapper.set(0, MouseButton.LEFT);\n    this.mouseButtonsMapper.set(1, MouseButton.MIDDLE);\n    this.mouseButtonsMapper.set(2, MouseButton.RIGHT);\n    this.mouseButtonsMapper.set(3, MouseButton.BUTTON_4);\n    this.mouseButtonsMapper.set(4, MouseButton.BUTTON_5);\n    this.lastPosition = {\n      x: -Infinity,\n      y: -Infinity\n    };\n  }\n  registerListeners() {\n    this.view.addEventListener('pointerdown', this.pointerDownCallback);\n    this.view.addEventListener('pointerup', this.pointerUpCallback);\n    this.view.addEventListener('pointermove', this.pointerMoveCallback);\n    this.view.addEventListener('pointercancel', this.pointerCancelCallback);\n    this.view.addEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.addEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.addEventListener('lostpointercapture', this.lostPointerCaptureCallback);\n  }\n  unregisterListeners() {\n    this.view.removeEventListener('pointerdown', this.pointerDownCallback);\n    this.view.removeEventListener('pointerup', this.pointerUpCallback);\n    this.view.removeEventListener('pointermove', this.pointerMoveCallback);\n    this.view.removeEventListener('pointercancel', this.pointerCancelCallback);\n    this.view.removeEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.removeEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.removeEventListener('lostpointercapture', this.lostPointerCaptureCallback);\n  }\n  mapEvent(event, eventType) {\n    var _PointerTypeMapping$g;\n    const rect = this.view.getBoundingClientRect();\n    const {\n      scaleX,\n      scaleY\n    } = calculateViewScale(this.view);\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: (event.clientX - rect.left) / scaleX,\n      offsetY: (event.clientY - rect.top) / scaleY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: (_PointerTypeMapping$g = PointerTypeMapping.get(event.pointerType)) !== null && _PointerTypeMapping$g !== void 0 ? _PointerTypeMapping$g : PointerType.OTHER,\n      button: this.mouseButtonsMapper.get(event.button),\n      time: event.timeStamp,\n      stylusData: tryExtractStylusData(event)\n    };\n  }\n  resetManager() {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}","map":{"version":3,"names":["EventManager","MouseButton","EventTypes","PointerTypeMapping","calculateViewScale","tryExtractStylusData","isPointerInBounds","PointerType","POINTER_CAPTURE_EXCLUDE_LIST","Set","PointerEventManager","constructor","view","_defineProperty","Map","event","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","has","tagName","setPointerCapture","pointerId","markAsInBounds","trackedPointers","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOVE","hasPointerCapture","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","LEAVE","onPointerLeave","onPointerOutOfBounds","lastPosition","CANCEL","onPointerCancel","clear","onPointerMoveOver","onPointerMoveOut","mouseButtonsMapper","set","LEFT","MIDDLE","RIGHT","BUTTON_4","BUTTON_5","Infinity","registerListeners","addEventListener","pointerDownCallback","pointerUpCallback","pointerMoveCallback","pointerCancelCallback","pointerEnterCallback","pointerLeaveCallback","lostPointerCaptureCallback","unregisterListeners","removeEventListener","_PointerTypeMapping$g","rect","getBoundingClientRect","scaleX","scaleY","offsetX","left","offsetY","top","pointerType","get","OTHER","button","time","timeStamp","stylusData","resetManager"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-gesture-handler/lib/module/web/tools/PointerEventManager.ts"],"sourcesContent":["import EventManager from './EventManager';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport { AdaptedEvent, EventTypes, Point } from '../interfaces';\nimport {\n  PointerTypeMapping,\n  calculateViewScale,\n  tryExtractStylusData,\n  isPointerInBounds,\n} from '../utils';\nimport { PointerType } from '../../PointerType';\n\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set<string>(['SELECT', 'INPUT']);\n\nexport default class PointerEventManager extends EventManager<HTMLElement> {\n  private trackedPointers = new Set<number>();\n  private readonly mouseButtonsMapper = new Map<number, MouseButton>();\n  private lastPosition: Point;\n\n  constructor(view: HTMLElement) {\n    super(view);\n\n    this.mouseButtonsMapper.set(0, MouseButton.LEFT);\n    this.mouseButtonsMapper.set(1, MouseButton.MIDDLE);\n    this.mouseButtonsMapper.set(2, MouseButton.RIGHT);\n    this.mouseButtonsMapper.set(3, MouseButton.BUTTON_4);\n    this.mouseButtonsMapper.set(4, MouseButton.BUTTON_5);\n\n    this.lastPosition = {\n      x: -Infinity,\n      y: -Infinity,\n    };\n  }\n\n  private pointerDownCallback = (event: PointerEvent) => {\n    if (!isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n    const target = event.target as HTMLElement;\n\n    if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n      target.setPointerCapture(adaptedEvent.pointerId);\n    }\n\n    this.markAsInBounds(adaptedEvent.pointerId);\n    this.trackedPointers.add(adaptedEvent.pointerId);\n\n    if (++this.activePointersCounter > 1) {\n      adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n      this.onPointerAdd(adaptedEvent);\n    } else {\n      this.onPointerDown(adaptedEvent);\n    }\n  };\n\n  private pointerUpCallback = (event: PointerEvent) => {\n    // When we call reset on gesture handlers, it also resets their event managers\n    // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n    // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n    // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n    if (this.activePointersCounter === 0) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n    const target = event.target as HTMLElement;\n\n    if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n      target.releasePointerCapture(adaptedEvent.pointerId);\n    }\n\n    this.markAsOutOfBounds(adaptedEvent.pointerId);\n    this.trackedPointers.delete(adaptedEvent.pointerId);\n\n    if (--this.activePointersCounter > 0) {\n      adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n      this.onPointerRemove(adaptedEvent);\n    } else {\n      this.onPointerUp(adaptedEvent);\n    }\n  };\n\n  private pointerMoveCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n    const target = event.target as HTMLElement;\n\n    // You may be wondering why are we setting pointer capture here, when we\n    // already set it in `pointerdown` handler. Well, that's a great question,\n    // for which I don't have an answer. Specification (https://www.w3.org/TR/pointerevents2/#dom-element-setpointercapture)\n    // says that the requirement for `setPointerCapture` to work is that pointer\n    // must be in 'active buttons state`, otherwise it will fail silently, which\n    // is lovely. Obviously, when `pointerdown` is fired, one of the buttons\n    // (when using mouse) is pressed, but that doesn't mean that `setPointerCapture`\n    // will succeed, for some reason. Since it fails silently, we don't actually know\n    // if it worked or not (there's `gotpointercapture` event, but the complexity of\n    // incorporating it here seems stupid), so we just call it again here, every time\n    // pointer moves until it succeeds.\n    // God, I do love web development.\n    if (\n      !target.hasPointerCapture(event.pointerId) &&\n      !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)\n    ) {\n      target.setPointerCapture(event.pointerId);\n    }\n\n    const inBounds: boolean = isPointerInBounds(this.view, {\n      x: adaptedEvent.x,\n      y: adaptedEvent.y,\n    });\n\n    const pointerIndex: number = this.pointersInBounds.indexOf(\n      adaptedEvent.pointerId\n    );\n\n    if (inBounds) {\n      if (pointerIndex < 0) {\n        adaptedEvent.eventType = EventTypes.ENTER;\n        this.onPointerEnter(adaptedEvent);\n        this.markAsInBounds(adaptedEvent.pointerId);\n      } else {\n        this.onPointerMove(adaptedEvent);\n      }\n    } else {\n      if (pointerIndex >= 0) {\n        adaptedEvent.eventType = EventTypes.LEAVE;\n        this.onPointerLeave(adaptedEvent);\n        this.markAsOutOfBounds(adaptedEvent.pointerId);\n      } else {\n        this.onPointerOutOfBounds(adaptedEvent);\n      }\n    }\n\n    this.lastPosition.x = event.x;\n    this.lastPosition.y = event.y;\n  };\n\n  private pointerCancelCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n\n    this.onPointerCancel(adaptedEvent);\n    this.markAsOutOfBounds(adaptedEvent.pointerId);\n    this.activePointersCounter = 0;\n    this.trackedPointers.clear();\n  };\n\n  private pointerEnterCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n\n    this.onPointerMoveOver(adaptedEvent);\n  };\n\n  private pointerLeaveCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n\n    this.onPointerMoveOut(adaptedEvent);\n  };\n\n  private lostPointerCaptureCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n\n    if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n      // In some cases the `pointerup` event is not fired, but `lostpointercapture` is.\n      // Here we simulate the `pointercancel` event to make sure the gesture handler stops tracking it.\n      this.onPointerCancel(adaptedEvent);\n\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    }\n  };\n\n  public registerListeners(): void {\n    this.view.addEventListener('pointerdown', this.pointerDownCallback);\n    this.view.addEventListener('pointerup', this.pointerUpCallback);\n    this.view.addEventListener('pointermove', this.pointerMoveCallback);\n    this.view.addEventListener('pointercancel', this.pointerCancelCallback);\n\n    // onPointerEnter and onPointerLeave are triggered by a custom logic responsible for\n    // handling shouldCancelWhenOutside flag, and are unreliable unless the pointer is down.\n    // We therefore use pointerenter and pointerleave events to handle the hover gesture,\n    // mapping them to onPointerMoveOver and onPointerMoveOut respectively.\n    this.view.addEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.addEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.addEventListener(\n      'lostpointercapture',\n      this.lostPointerCaptureCallback\n    );\n  }\n\n  public unregisterListeners(): void {\n    this.view.removeEventListener('pointerdown', this.pointerDownCallback);\n    this.view.removeEventListener('pointerup', this.pointerUpCallback);\n    this.view.removeEventListener('pointermove', this.pointerMoveCallback);\n    this.view.removeEventListener('pointercancel', this.pointerCancelCallback);\n    this.view.removeEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.removeEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.removeEventListener(\n      'lostpointercapture',\n      this.lostPointerCaptureCallback\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    const rect = this.view.getBoundingClientRect();\n    const { scaleX, scaleY } = calculateViewScale(this.view);\n\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: (event.clientX - rect.left) / scaleX,\n      offsetY: (event.clientY - rect.top) / scaleY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType:\n        PointerTypeMapping.get(event.pointerType) ?? PointerType.OTHER,\n      button: this.mouseButtonsMapper.get(event.button),\n      time: event.timeStamp,\n      stylusData: tryExtractStylusData(event),\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}