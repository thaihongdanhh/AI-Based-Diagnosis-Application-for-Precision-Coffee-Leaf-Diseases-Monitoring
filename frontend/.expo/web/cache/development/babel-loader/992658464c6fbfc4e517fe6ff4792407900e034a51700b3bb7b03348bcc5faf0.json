{"ast":null,"code":"import * as helpers from \"./helpers\";\nexport default function createCompatNavigationProp(navigation, state, context, isFirstRouteInParent) {\n  var _state$params;\n  context.parent = context.parent || {};\n  context.subscriptions = context.subscriptions || {\n    didFocus: new Map(),\n    didBlur: new Map(),\n    refocus: new Map()\n  };\n  return Object.assign({}, navigation, Object.entries(helpers).reduce((acc, [name, method]) => {\n    if (name in navigation) {\n      acc[name] = (...args) => navigation.dispatch(method(...args));\n    }\n    return acc;\n  }, {}), {\n    original: navigation,\n    addListener(type, callback) {\n      let unsubscribe;\n      switch (type) {\n        case 'willFocus':\n          unsubscribe = navigation.addListener('focus', callback);\n          break;\n        case 'willBlur':\n          unsubscribe = navigation.addListener('blur', callback);\n          break;\n        case 'didFocus':\n          {\n            const listener = () => {\n              if (navigation.isFocused()) {\n                callback();\n              }\n            };\n            unsubscribe = navigation.addListener('transitionEnd', listener);\n            context.subscriptions.didFocus.set(callback, unsubscribe);\n            break;\n          }\n        case 'didBlur':\n          {\n            const listener = () => {\n              if (!navigation.isFocused()) {\n                callback();\n              }\n            };\n            unsubscribe = navigation.addListener('transitionEnd', listener);\n            context.subscriptions.didBlur.set(callback, unsubscribe);\n            break;\n          }\n        case 'refocus':\n          {\n            const listener = () => {\n              if (navigation.isFocused()) {\n                callback();\n              }\n            };\n            unsubscribe = navigation.addListener('tabPress', listener);\n            context.subscriptions.refocus.set(callback, unsubscribe);\n            break;\n          }\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n        default:\n          unsubscribe = navigation.addListener(type, callback);\n      }\n      const subscription = () => unsubscribe();\n      subscription.remove = unsubscribe;\n      return subscription;\n    },\n    removeListener(type, callback) {\n      context.subscriptions = context.subscriptions || {};\n      switch (type) {\n        case 'willFocus':\n          navigation.removeListener('focus', callback);\n          break;\n        case 'willBlur':\n          navigation.removeListener('blur', callback);\n          break;\n        case 'didFocus':\n          {\n            const unsubscribe = context.subscriptions.didFocus.get(callback);\n            unsubscribe === null || unsubscribe === void 0 ? void 0 : unsubscribe();\n            break;\n          }\n        case 'didBlur':\n          {\n            const unsubscribe = context.subscriptions.didBlur.get(callback);\n            unsubscribe === null || unsubscribe === void 0 ? void 0 : unsubscribe();\n            break;\n          }\n        case 'refocus':\n          {\n            const unsubscribe = context.subscriptions.refocus.get(callback);\n            unsubscribe === null || unsubscribe === void 0 ? void 0 : unsubscribe();\n            break;\n          }\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n        default:\n          navigation.removeListener(type, callback);\n      }\n    },\n    state: {\n      key: state.key,\n      routeName: state.name,\n      params: (_state$params = state.params) !== null && _state$params !== void 0 ? _state$params : {},\n      get index() {\n        var _state$state;\n        if (state.index !== undefined) {\n          return state.index;\n        }\n        console.warn(\"Looks like you are using 'navigation.state.index' in your code. Accessing child navigation state for a route is not safe and won't work correctly. You should refactor it not to access the 'index' property in the child navigation state.\");\n        return (_state$state = state.state) === null || _state$state === void 0 ? void 0 : _state$state.index;\n      },\n      get routes() {\n        var _state$state2;\n        if (state.routes !== undefined) {\n          return state.routes;\n        }\n        console.warn(\"Looks like you are using 'navigation.state.routes' in your code. Accessing child navigation state for a route is not safe and won't work correctly. You should refactor it not to access the 'routes' property in the child navigation state.\");\n        return (_state$state2 = state.state) === null || _state$state2 === void 0 ? void 0 : _state$state2.routes;\n      }\n    },\n    getParam(paramName, defaultValue) {\n      const params = state.params;\n      if (params && paramName in params) {\n        return params[paramName];\n      }\n      return defaultValue;\n    },\n    isFirstRouteInParent() {\n      if (typeof isFirstRouteInParent === 'boolean') {\n        return isFirstRouteInParent;\n      }\n      const {\n        routes\n      } = 'getState' in navigation ? navigation.getState() : navigation.dangerouslyGetState();\n      return routes[0].key === state.key;\n    },\n    dangerouslyGetParent() {\n      const parent = 'getParent' in navigation ? navigation.getParent() : navigation.dangerouslyGetParent();\n      if (parent) {\n        return createCompatNavigationProp(parent, 'getState' in navigation ? navigation.getState() : navigation.dangerouslyGetState(), context.parent);\n      }\n      return undefined;\n    }\n  });\n}","map":{"version":3,"names":["helpers","createCompatNavigationProp","navigation","state","context","isFirstRouteInParent","_state$params","parent","subscriptions","didFocus","Map","didBlur","refocus","Object","assign","entries","reduce","acc","name","method","args","dispatch","original","addListener","type","callback","unsubscribe","listener","isFocused","set","Error","subscription","remove","removeListener","get","key","routeName","params","index","_state$state","undefined","console","warn","routes","_state$state2","getParam","paramName","defaultValue","getState","dangerouslyGetState","dangerouslyGetParent","getParent"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/@react-navigation/compat/lib/module/createCompatNavigationProp.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  ParamListBase,\n  NavigationProp,\n  RouteProp,\n} from '@react-navigation/native';\nimport * as helpers from './helpers';\nimport type { CompatNavigationProp } from './types';\n\ntype EventName =\n  | 'action'\n  | 'willFocus'\n  | 'willBlur'\n  | 'didFocus'\n  | 'didBlur'\n  | 'refocus';\n\nexport default function createCompatNavigationProp<\n  NavigationPropType extends NavigationProp<ParamListBase>,\n  ParamList extends ParamListBase = NavigationPropType extends NavigationProp<\n    infer P,\n    any,\n    any,\n    any,\n    any\n  >\n    ? P\n    : ParamListBase\n>(\n  navigation: NavigationPropType,\n  state:\n    | (RouteProp<ParamList, keyof ParamList> & {\n        state?: NavigationState | PartialState<NavigationState>;\n      })\n    | NavigationState\n    | PartialState<NavigationState>,\n  context: Record<string, any>,\n  isFirstRouteInParent?: boolean\n): CompatNavigationProp<NavigationPropType> {\n  context.parent = context.parent || {};\n  context.subscriptions = context.subscriptions || {\n    didFocus: new Map<() => void, () => void>(),\n    didBlur: new Map<() => void, () => void>(),\n    refocus: new Map<() => void, () => void>(),\n  };\n\n  return {\n    ...navigation,\n    ...Object.entries(helpers).reduce<{\n      [key: string]: (...args: any[]) => void;\n    }>((acc, [name, method]: [string, Function]) => {\n      if (name in navigation) {\n        acc[name] = (...args: any[]) => navigation.dispatch(method(...args));\n      }\n\n      return acc;\n    }, {}),\n    original: navigation,\n    addListener(type: EventName, callback: () => void) {\n      let unsubscribe: () => void;\n\n      switch (type) {\n        case 'willFocus':\n          unsubscribe = navigation.addListener('focus', callback);\n          break;\n        case 'willBlur':\n          unsubscribe = navigation.addListener('blur', callback);\n          break;\n        case 'didFocus': {\n          const listener = () => {\n            if (navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-expect-error: this event may not exist in this navigator\n          unsubscribe = navigation.addListener('transitionEnd', listener);\n          context.subscriptions.didFocus.set(callback, unsubscribe);\n          break;\n        }\n        case 'didBlur': {\n          const listener = () => {\n            if (!navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-expect-error: this event may not exist in this navigator\n          unsubscribe = navigation.addListener('transitionEnd', listener);\n          context.subscriptions.didBlur.set(callback, unsubscribe);\n          break;\n        }\n        case 'refocus': {\n          const listener = () => {\n            if (navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-expect-error: this event may not exist in this navigator\n          unsubscribe = navigation.addListener('tabPress', listener);\n          context.subscriptions.refocus.set(callback, unsubscribe);\n          break;\n        }\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n        default:\n          unsubscribe = navigation.addListener(type, callback);\n      }\n\n      const subscription = () => unsubscribe();\n\n      subscription.remove = unsubscribe;\n\n      return subscription;\n    },\n    removeListener(type: EventName, callback: () => void) {\n      context.subscriptions = context.subscriptions || {};\n\n      switch (type) {\n        case 'willFocus':\n          navigation.removeListener('focus', callback);\n          break;\n        case 'willBlur':\n          navigation.removeListener('blur', callback);\n          break;\n        case 'didFocus': {\n          const unsubscribe = context.subscriptions.didFocus.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'didBlur': {\n          const unsubscribe = context.subscriptions.didBlur.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'refocus': {\n          const unsubscribe = context.subscriptions.refocus.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n        default:\n          navigation.removeListener(type, callback);\n      }\n    },\n    state: {\n      key: state.key,\n      // @ts-expect-error\n      routeName: state.name,\n      // @ts-expect-error\n      params: state.params ?? {},\n      get index() {\n        // @ts-expect-error\n        if (state.index !== undefined) {\n          // @ts-expect-error\n          return state.index;\n        }\n\n        console.warn(\n          \"Looks like you are using 'navigation.state.index' in your code. Accessing child navigation state for a route is not safe and won't work correctly. You should refactor it not to access the 'index' property in the child navigation state.\"\n        );\n\n        // @ts-expect-error\n        return state.state?.index;\n      },\n      get routes() {\n        // @ts-expect-error\n        if (state.routes !== undefined) {\n          // @ts-expect-error\n          return state.routes;\n        }\n\n        console.warn(\n          \"Looks like you are using 'navigation.state.routes' in your code. Accessing child navigation state for a route is not safe and won't work correctly. You should refactor it not to access the 'routes' property in the child navigation state.\"\n        );\n\n        // @ts-expect-error\n        return state.state?.routes;\n      },\n    },\n    getParam<T extends keyof ParamList>(\n      paramName: T,\n      defaultValue: ParamList[T]\n    ): ParamList[T] {\n      // @ts-expect-error\n      const params = state.params;\n\n      if (params && paramName in params) {\n        return params[paramName];\n      }\n\n      return defaultValue;\n    },\n    isFirstRouteInParent(): boolean {\n      if (typeof isFirstRouteInParent === 'boolean') {\n        return isFirstRouteInParent;\n      }\n\n      const { routes } =\n        'getState' in navigation\n          ? navigation.getState()\n          : navigation.dangerouslyGetState();\n\n      return routes[0].key === state.key;\n    },\n    dangerouslyGetParent() {\n      const parent =\n        'getParent' in navigation\n          ? navigation.getParent()\n          : navigation.dangerouslyGetParent();\n\n      if (parent) {\n        return createCompatNavigationProp(\n          parent,\n          'getState' in navigation\n            ? navigation.getState()\n            : navigation.dangerouslyGetState(),\n          context.parent\n        );\n      }\n\n      return undefined;\n    },\n  } as any;\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}