{"ast":null,"code":"import Platform from \"../Utilities/Platform\";\nimport RCTLog from \"../Utilities/RCTLog\";\nimport { hasComponentStack } from \"./Data/parseLogBoxLog\";\nlet LogBox;\nif (__DEV__) {\n  const LogBoxData = require(\"./Data/LogBoxData\");\n  const {\n    parseLogBoxLog,\n    parseInterpolation\n  } = require(\"./Data/parseLogBoxLog\");\n  let originalConsoleError;\n  let originalConsoleWarn;\n  let consoleErrorImpl;\n  let consoleWarnImpl;\n  let isLogBoxInstalled = false;\n  LogBox = {\n    install() {\n      if (isLogBoxInstalled) {\n        return;\n      }\n      isLogBoxInstalled = true;\n      require(\"../NativeModules/specs/NativeLogBox\");\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n        originalConsoleWarn = console.warn.bind(console);\n        console.error = (...args) => {\n          consoleErrorImpl(...args);\n        };\n        console.warn = (...args) => {\n          consoleWarnImpl(...args);\n        };\n      }\n      consoleErrorImpl = registerError;\n      consoleWarnImpl = registerWarning;\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n      RCTLog.setWarningHandler((...args) => {\n        registerWarning(...args);\n      });\n    },\n    uninstall() {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n      isLogBoxInstalled = false;\n      consoleErrorImpl = originalConsoleError;\n      consoleWarnImpl = originalConsoleWarn;\n    },\n    isInstalled() {\n      return isLogBoxInstalled;\n    },\n    ignoreLogs(patterns) {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n    ignoreAllLogs(value) {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n    clearAllLogs() {\n      LogBoxData.clear();\n    },\n    addLog(log) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n    addException(error) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    }\n  };\n  const isRCTLogAdviceWarning = (...args) => {\n    return typeof args[0] === 'string' && args[0].startsWith('(ADVICE)');\n  };\n  const isWarningModuleWarning = (...args) => {\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n  const registerWarning = (...args) => {\n    if (LogBoxData.isLogBoxErrorMessage(String(args[0]))) {\n      originalConsoleError(...args);\n      return;\n    } else {\n      originalConsoleWarn(...args);\n    }\n    try {\n      if (!isRCTLogAdviceWarning(...args)) {\n        const {\n          category,\n          message,\n          componentStack,\n          componentStackType\n        } = parseLogBoxLog(args);\n        if (!LogBoxData.isMessageIgnored(message.content)) {\n          LogBoxData.addLog({\n            level: 'warn',\n            category,\n            message,\n            componentStack,\n            componentStackType\n          });\n        }\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n  const registerError = (...args) => {\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError(...args);\n      return;\n    }\n    try {\n      if (!isWarningModuleWarning(...args) && !hasComponentStack(args)) {\n        originalConsoleError(...args);\n        return;\n      }\n      const format = args[0].replace('Warning: ', '');\n      const filterResult = LogBoxData.checkWarningFilter(format);\n      let level = 'error';\n      if (filterResult.monitorEvent !== 'warning_unhandled') {\n        if (filterResult.suppressCompletely) {\n          return;\n        }\n        if (filterResult.suppressDialog_LEGACY === true) {\n          level = 'warn';\n        } else if (filterResult.forceDialogImmediately === true) {\n          level = 'fatal';\n        }\n      }\n      args[0] = `Warning: ${filterResult.finalFormat}`;\n      const {\n        category,\n        message,\n        componentStack,\n        componentStackType\n      } = parseLogBoxLog(args);\n      const interpolated = parseInterpolation(args);\n      originalConsoleError(interpolated.message.content);\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        LogBoxData.addLog({\n          level,\n          category,\n          message,\n          componentStack,\n          componentStackType\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install() {},\n    uninstall() {},\n    isInstalled() {\n      return false;\n    },\n    ignoreLogs(patterns) {},\n    ignoreAllLogs(value) {},\n    clearAllLogs() {},\n    addLog(log) {},\n    addException(error) {}\n  };\n}\nexport default LogBox;","map":{"version":3,"names":["Platform","RCTLog","hasComponentStack","LogBox","__DEV__","LogBoxData","require","parseLogBoxLog","parseInterpolation","originalConsoleError","originalConsoleWarn","consoleErrorImpl","consoleWarnImpl","isLogBoxInstalled","install","isFirstInstall","console","error","bind","warn","args","registerError","registerWarning","isTesting","setDisabled","setWarningHandler","uninstall","isInstalled","ignoreLogs","patterns","addIgnorePatterns","ignoreAllLogs","value","clearAllLogs","clear","addLog","log","addException","isRCTLogAdviceWarning","startsWith","isWarningModuleWarning","isLogBoxErrorMessage","String","category","message","componentStack","componentStackType","isMessageIgnored","content","level","err","reportLogBoxError","format","replace","filterResult","checkWarningFilter","monitorEvent","suppressCompletely","suppressDialog_LEGACY","forceDialogImmediately","finalFormat","interpolated"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/LogBox/LogBox.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {IgnorePattern, LogData} from './Data/LogBoxData';\nimport type {ExtendedExceptionData} from './Data/parseLogBoxLog';\n\nimport Platform from '../Utilities/Platform';\nimport RCTLog from '../Utilities/RCTLog';\nimport {hasComponentStack} from './Data/parseLogBoxLog';\n\nexport type {LogData, ExtendedExceptionData, IgnorePattern};\n\nlet LogBox;\n\ninterface ILogBox {\n  install(): void;\n  uninstall(): void;\n  isInstalled(): boolean;\n  ignoreLogs($ReadOnlyArray<IgnorePattern>): void;\n  ignoreAllLogs(?boolean): void;\n  clearAllLogs(): void;\n  addLog(log: LogData): void;\n  addException(error: ExtendedExceptionData): void;\n}\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  const LogBoxData = require('./Data/LogBoxData');\n  const {parseLogBoxLog, parseInterpolation} = require('./Data/parseLogBoxLog');\n\n  let originalConsoleError;\n  let originalConsoleWarn;\n  let consoleErrorImpl;\n  let consoleWarnImpl: (...args: Array<mixed>) => void;\n\n  let isLogBoxInstalled: boolean = false;\n\n  LogBox = {\n    install(): void {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      // Trigger lazy initialization of module.\n      require('../NativeModules/specs/NativeLogBox');\n\n      // IMPORTANT: we only overwrite `console.error` and `console.warn` once.\n      // When we uninstall we keep the same reference and only change its\n      // internal implementation\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n        originalConsoleWarn = console.warn.bind(console);\n\n        // $FlowExpectedError[cannot-write]\n        console.error = (...args) => {\n          consoleErrorImpl(...args);\n        };\n        // $FlowExpectedError[cannot-write]\n        console.warn = (...args) => {\n          consoleWarnImpl(...args);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n      consoleWarnImpl = registerWarning;\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n\n      RCTLog.setWarningHandler((...args) => {\n        registerWarning(...args);\n      });\n    },\n\n    uninstall(): void {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n\n      // IMPORTANT: we don't re-assign to `console` in case the method has been\n      // decorated again after installing LogBox. E.g.:\n      // Before uninstalling: original > LogBox > OtherErrorHandler\n      // After uninstalling:  original > LogBox (noop) > OtherErrorHandler\n      consoleErrorImpl = originalConsoleError;\n      consoleWarnImpl = originalConsoleWarn;\n    },\n\n    isInstalled(): boolean {\n      return isLogBoxInstalled;\n    },\n\n    ignoreLogs(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs(value?: ?boolean): void {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    clearAllLogs(): void {\n      LogBoxData.clear();\n    },\n\n    addLog(log: LogData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    },\n  };\n\n  const isRCTLogAdviceWarning = (...args: Array<mixed>) => {\n    // RCTLogAdvice is a native logging function designed to show users\n    // a message in the console, but not show it to them in Logbox.\n    return typeof args[0] === 'string' && args[0].startsWith('(ADVICE)');\n  };\n\n  const isWarningModuleWarning = (...args: Array<mixed>) => {\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n\n  const registerWarning = (...args: Array<mixed>): void => {\n    // Let warnings within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(String(args[0]))) {\n      originalConsoleError(...args);\n      return;\n    } else {\n      // Be sure to pass LogBox warnings through.\n      originalConsoleWarn(...args);\n    }\n\n    try {\n      if (!isRCTLogAdviceWarning(...args)) {\n        const {category, message, componentStack, componentStackType} =\n          parseLogBoxLog(args);\n\n        if (!LogBoxData.isMessageIgnored(message.content)) {\n          LogBoxData.addLog({\n            level: 'warn',\n            category,\n            message,\n            componentStack,\n            componentStackType,\n          });\n        }\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  const registerError = (...args): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError(...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args) && !hasComponentStack(args)) {\n        // Only show LogBox for the 'warning' module, or React errors with\n        // component stacks, otherwise pass the error through.u\n        //\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // Ideally, we refactor all RN error handling so that LogBox patching\n        // errors is not necessary, and they are reported the same as a framework.\n        // The blocker to this is that the ExceptionManager console.error override\n        // strigifys all of the args before passing it through to LogBox, which\n        // would lose all of the interpolation information.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        originalConsoleError(...args);\n        return;\n      }\n\n      const format = args[0].replace('Warning: ', '');\n      const filterResult = LogBoxData.checkWarningFilter(format);\n      let level = 'error';\n      if (filterResult.monitorEvent !== 'warning_unhandled') {\n        if (filterResult.suppressCompletely) {\n          return;\n        }\n\n        if (filterResult.suppressDialog_LEGACY === true) {\n          level = 'warn';\n        } else if (filterResult.forceDialogImmediately === true) {\n          level = 'fatal'; // Do not downgrade. These are real bugs with same severity as throws.\n        }\n      }\n\n      // Unfortunately, we need to add the Warning: prefix back for downstream dependencies.\n      // Downstream, we check for this prefix to know that LogBox already handled it, so\n      // it doesn't get reported back to LogBox. It's an absolute mess.\n      args[0] = `Warning: ${filterResult.finalFormat}`;\n      const {category, message, componentStack, componentStackType} =\n        parseLogBoxLog(args);\n\n      // Interpolate the message so they are formatted for adb and other CLIs.\n      // This is different than the message.content above because it includes component stacks.\n      const interpolated = parseInterpolation(args);\n      originalConsoleError(interpolated.message.content);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        LogBoxData.addLog({\n          level,\n          category,\n          message,\n          componentStack,\n          componentStackType,\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install(): void {\n      // Do nothing.\n    },\n\n    uninstall(): void {\n      // Do nothing.\n    },\n\n    isInstalled(): boolean {\n      return false;\n    },\n\n    ignoreLogs(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      // Do nothing.\n    },\n\n    ignoreAllLogs(value?: ?boolean): void {\n      // Do nothing.\n    },\n\n    clearAllLogs(): void {\n      // Do nothing.\n    },\n\n    addLog(log: LogData): void {\n      // Do nothing.\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      // Do nothing.\n    },\n  };\n}\n\nexport default (LogBox: ILogBox);\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}