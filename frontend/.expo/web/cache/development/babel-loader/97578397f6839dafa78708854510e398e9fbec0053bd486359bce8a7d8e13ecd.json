{"ast":null,"code":"'use strict';\n\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from \"../animation/index.js\";\nimport { makeMutable, startMapper, stopMapper } from \"../core.js\";\nimport { shouldBeUseWeb } from \"../PlatformChecker.js\";\nconst _worklet_3093677085834_init_data = {\n  code: \"function reactNativeReanimated_useDerivedValueJs1(){const{sharedValue,updater}=this.__closure;sharedValue.value=updater();}\",\n  location: \"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/lib/module/hook/useDerivedValue.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"reactNativeReanimated_useDerivedValueJs1\\\",\\\"sharedValue\\\",\\\"updater\\\",\\\"__closure\\\",\\\"value\\\"],\\\"sources\\\":[\\\"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/lib/module/hook/useDerivedValue.js\\\"],\\\"mappings\\\":\\\"AA0CgB,SAAAA,wCAAMA,CAAA,QAAAC,WAAA,CAAAC,OAAA,OAAAC,SAAA,CAGhBF,WAAW,CAACG,KAAK,CAAGF,OAAO,CAAC,CAAC,CAC/B\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.16.1\"\n};\nexport function useDerivedValue(updater, dependencies) {\n  const initRef = useRef(null);\n  let inputs = Object.values(updater.__closure ?? {});\n  if (shouldBeUseWeb()) {\n    if (!inputs.length && dependencies?.length) {\n      inputs = dependencies;\n    }\n  }\n  if (dependencies === undefined) {\n    dependencies = [...inputs, updater.__workletHash];\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n  const sharedValue = initRef.current;\n  useEffect(() => {\n    const fun = function () {\n      const _e = [new global.Error(), -3, -27];\n      const reactNativeReanimated_useDerivedValueJs1 = function () {\n        sharedValue.value = updater();\n      };\n      reactNativeReanimated_useDerivedValueJs1.__closure = {\n        sharedValue,\n        updater\n      };\n      reactNativeReanimated_useDerivedValueJs1.__workletHash = 3093677085834;\n      reactNativeReanimated_useDerivedValueJs1.__initData = _worklet_3093677085834_init_data;\n      reactNativeReanimated_useDerivedValueJs1.__stackDetails = _e;\n      return reactNativeReanimated_useDerivedValueJs1;\n    }();\n    const mapperId = startMapper(fun, inputs, [sharedValue]);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n  return sharedValue;\n}","map":{"version":3,"names":["useEffect","useRef","initialUpdaterRun","makeMutable","startMapper","stopMapper","shouldBeUseWeb","_worklet_3093677085834_init_data","code","location","sourceMap","version","useDerivedValue","updater","dependencies","initRef","inputs","Object","values","__closure","length","undefined","__workletHash","push","current","sharedValue","fun","_e","global","Error","reactNativeReanimated_useDerivedValueJs1","value","__initData","__stackDetails","mapperId"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/src/hook/useDerivedValue.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from '../animation';\nimport type { SharedValue, WorkletFunction } from '../commonTypes';\nimport { makeMutable, startMapper, stopMapper } from '../core';\nimport type { DependencyList } from './commonTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\nexport interface DerivedValue<Value = unknown>\n  extends Readonly<Omit<SharedValue<Value>, 'set'>> {\n  /**\n   * @deprecated Derived values are readonly, don't use this method. It's here\n   *   only to prevent breaking changes in TypeScript types. It will be removed\n   *   in the future.\n   */\n  set: SharedValue<Value>['set'];\n}\n\n/**\n * Lets you create new shared values based on existing ones while keeping them\n * reactive.\n *\n * @param updater - A function called whenever at least one of the shared values\n *   or state used in the function body changes.\n * @param dependencies - An optional array of dependencies. Only relevant when\n *   using Reanimated without the Babel plugin on the Web.\n * @returns A new readonly shared value based on a value returned from the\n *   updater function\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useDerivedValue\n */\n// @ts-expect-error This overload is required by our API.\nexport function useDerivedValue<Value>(\n  updater: () => Value,\n  dependencies?: DependencyList\n): DerivedValue<Value>;\n\nexport function useDerivedValue<Value>(\n  updater: WorkletFunction<[], Value>,\n  dependencies?: DependencyList\n): DerivedValue<Value> {\n  const initRef = useRef<SharedValue<Value> | null>(null);\n  let inputs = Object.values(updater.__closure ?? {});\n  if (shouldBeUseWeb()) {\n    if (!inputs.length && dependencies?.length) {\n      // let web work without a Babel/SWC plugin\n      inputs = dependencies;\n    }\n  }\n\n  // build dependencies\n  if (dependencies === undefined) {\n    dependencies = [...inputs, updater.__workletHash];\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n\n  const sharedValue: SharedValue<Value> = initRef.current;\n\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n      sharedValue.value = updater();\n    };\n    const mapperId = startMapper(fun, inputs, [\n      sharedValue as SharedValue<unknown>,\n    ]);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n\n  return sharedValue;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,iBAAiB;AAE1B,SAASC,WAAW,EAAEC,WAAW,EAAEC,UAAU;AAE7C,SAASC,cAAc;AAA4B,MAAAC,gCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;EAAAC,OAAA;AAAA;AA8BnD,OAAO,SAASC,eAAeA,CAC7BC,OAAmC,EACnCC,YAA6B,EACR;EACrB,MAAMC,OAAO,GAAGd,MAAM,CAA4B,IAAI,CAAC;EACvD,IAAIe,MAAM,GAAGC,MAAM,CAACC,MAAM,CAACL,OAAO,CAACM,SAAS,IAAI,CAAC,CAAC,CAAC;EACnD,IAAIb,cAAc,CAAC,CAAC,EAAE;IACpB,IAAI,CAACU,MAAM,CAACI,MAAM,IAAIN,YAAY,EAAEM,MAAM,EAAE;MAE1CJ,MAAM,GAAGF,YAAY;IACvB;EACF;EAGA,IAAIA,YAAY,KAAKO,SAAS,EAAE;IAC9BP,YAAY,GAAG,CAAC,GAAGE,MAAM,EAAEH,OAAO,CAACS,aAAa,CAAC;EACnD,CAAC,MAAM;IACLR,YAAY,CAACS,IAAI,CAACV,OAAO,CAACS,aAAa,CAAC;EAC1C;EAEA,IAAIP,OAAO,CAACS,OAAO,KAAK,IAAI,EAAE;IAC5BT,OAAO,CAACS,OAAO,GAAGrB,WAAW,CAACD,iBAAiB,CAACW,OAAO,CAAC,CAAC;EAC3D;EAEA,MAAMY,WAA+B,GAAGV,OAAO,CAACS,OAAO;EAEvDxB,SAAS,CAAC,MAAM;IACd,MAAM0B,GAAG,GAAG;MAAA,MAAAC,EAAA,QAAAC,MAAA,CAAAC,KAAA;MAAA,MAAAC,wCAAA,YAAAA,CAAA,EAAM;QAEhBL,WAAW,CAACM,KAAK,GAAGlB,OAAO,CAAC,CAAC;MAC/B,CAAC;MAAAiB,wCAAA,CAAAX,SAAA;QAAAM,WAAA;QAAAZ;MAAA;MAAAiB,wCAAA,CAAAR,aAAA;MAAAQ,wCAAA,CAAAE,UAAA,GAAAzB,gCAAA;MAAAuB,wCAAA,CAAAG,cAAA,GAAAN,EAAA;MAAA,OAAAG,wCAAA;IAAA,CAHW,EAGX;IACD,MAAMI,QAAQ,GAAG9B,WAAW,CAACsB,GAAG,EAAEV,MAAM,EAAE,CACxCS,WAAW,CACZ,CAAC;IACF,OAAO,MAAM;MACXpB,UAAU,CAAC6B,QAAQ,CAAC;IACtB,CAAC;EACH,CAAC,EAAEpB,YAAY,CAAC;EAEhBd,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXe,OAAO,CAACS,OAAO,GAAG,IAAI;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOC,WAAW;AACpB"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}