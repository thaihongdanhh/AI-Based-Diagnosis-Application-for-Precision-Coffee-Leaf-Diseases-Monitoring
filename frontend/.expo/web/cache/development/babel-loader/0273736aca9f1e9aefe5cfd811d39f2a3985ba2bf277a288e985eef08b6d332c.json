{"ast":null,"code":"import { isRunningInExpoGo } from 'expo';\nimport { createPermissionHook, Platform } from 'expo-modules-core';\nimport ExpoLocation from \"./ExpoLocation\";\nimport { LocationAccuracy } from \"./Location.types\";\nimport { LocationSubscriber, HeadingSubscriber } from \"./LocationSubscribers\";\nlet warnAboutExpoGoDisplayed = false;\nexport async function getProviderStatusAsync() {\n  return ExpoLocation.getProviderStatusAsync();\n}\nexport async function enableNetworkProviderAsync() {\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\nexport async function getCurrentPositionAsync(options = {}) {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\nexport async function getLastKnownPositionAsync(options = {}) {\n  return ExpoLocation.getLastKnownPositionAsync(options);\n}\nexport async function watchPositionAsync(options, callback) {\n  const watchId = LocationSubscriber.registerCallback(callback);\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n  return {\n    remove() {\n      LocationSubscriber.unregisterCallback(watchId);\n    }\n  };\n}\nexport async function getHeadingAsync() {\n  return new Promise(async resolve => {\n    let tries = 0;\n    const subscription = await watchHeadingAsync(heading => {\n      if (heading.accuracy > 1 || tries > 5) {\n        subscription.remove();\n        resolve(heading);\n      } else {\n        tries += 1;\n      }\n    });\n  });\n}\nexport async function watchHeadingAsync(callback) {\n  const watchId = HeadingSubscriber.registerCallback(callback);\n  await ExpoLocation.watchDeviceHeading(watchId);\n  return {\n    remove() {\n      HeadingSubscriber.unregisterCallback(watchId);\n    }\n  };\n}\nexport async function geocodeAsync(address) {\n  if (typeof address !== 'string') {\n    throw new TypeError(`Address to geocode must be a string. Got ${address} instead.`);\n  }\n  if (Platform.OS === 'web') {\n    if (__DEV__) {\n      console.warn('The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead' + '(https://developers.google.com/maps/documentation/places/web-service/autocomplete)');\n    }\n    return [];\n  }\n  return await ExpoLocation.geocodeAsync(address);\n}\nexport async function reverseGeocodeAsync(location) {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError('Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.');\n  }\n  if (Platform.OS === 'web') {\n    if (__DEV__) {\n      console.warn('The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead' + '(https://developers.google.com/maps/documentation/places/web-service/autocomplete)');\n    }\n    return [];\n  }\n  return await ExpoLocation.reverseGeocodeAsync(location);\n}\nexport async function getForegroundPermissionsAsync() {\n  return await ExpoLocation.getForegroundPermissionsAsync();\n}\nexport async function requestForegroundPermissionsAsync() {\n  return await ExpoLocation.requestForegroundPermissionsAsync();\n}\nexport const useForegroundPermissions = createPermissionHook({\n  getMethod: getForegroundPermissionsAsync,\n  requestMethod: requestForegroundPermissionsAsync\n});\nexport async function getBackgroundPermissionsAsync() {\n  return await ExpoLocation.getBackgroundPermissionsAsync();\n}\nexport async function requestBackgroundPermissionsAsync() {\n  return await ExpoLocation.requestBackgroundPermissionsAsync();\n}\nexport const useBackgroundPermissions = createPermissionHook({\n  getMethod: getBackgroundPermissionsAsync,\n  requestMethod: requestBackgroundPermissionsAsync\n});\nexport async function hasServicesEnabledAsync() {\n  return await ExpoLocation.hasServicesEnabledAsync();\n}\nfunction _validate(taskName) {\n  if (!taskName || typeof taskName !== 'string') {\n    throw new Error(`\\`taskName\\` must be a non-empty string. Got ${taskName} instead.`);\n  }\n  if (isRunningInExpoGo()) {\n    if (!warnAboutExpoGoDisplayed) {\n      const message = 'Background location is limited in Expo Go:\\n' + 'On Android, it is not available at all.\\n' + 'On iOS, it works when running in the Simulator.\\n' + 'Please use a development build to avoid limitations. Learn more: https://expo.fyi/dev-client.';\n      console.warn(message);\n      warnAboutExpoGoDisplayed = true;\n    }\n  }\n}\nexport async function isBackgroundLocationAvailableAsync() {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\nexport async function startLocationUpdatesAsync(taskName, options = {\n  accuracy: LocationAccuracy.Balanced\n}) {\n  _validate(taskName);\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\nexport async function stopLocationUpdatesAsync(taskName) {\n  _validate(taskName);\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\nexport async function hasStartedLocationUpdatesAsync(taskName) {\n  _validate(taskName);\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n}\nfunction _validateRegions(regions) {\n  if (!regions || regions.length === 0) {\n    throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');\n  }\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(`Region's longitude must be a number. Got '${region.longitude}' instead.`);\n    }\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\nexport async function startGeofencingAsync(taskName, regions = []) {\n  _validate(taskName);\n  _validateRegions(regions);\n  await ExpoLocation.startGeofencingAsync(taskName, {\n    regions\n  });\n}\nexport async function stopGeofencingAsync(taskName) {\n  _validate(taskName);\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\nexport async function hasStartedGeofencingAsync(taskName) {\n  _validate(taskName);\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}","map":{"version":3,"names":["isRunningInExpoGo","createPermissionHook","Platform","ExpoLocation","LocationAccuracy","LocationSubscriber","HeadingSubscriber","warnAboutExpoGoDisplayed","getProviderStatusAsync","enableNetworkProviderAsync","OS","getCurrentPositionAsync","options","getLastKnownPositionAsync","watchPositionAsync","callback","watchId","registerCallback","watchPositionImplAsync","remove","unregisterCallback","getHeadingAsync","Promise","resolve","tries","subscription","watchHeadingAsync","heading","accuracy","watchDeviceHeading","geocodeAsync","address","TypeError","__DEV__","console","warn","reverseGeocodeAsync","location","latitude","longitude","getForegroundPermissionsAsync","requestForegroundPermissionsAsync","useForegroundPermissions","getMethod","requestMethod","getBackgroundPermissionsAsync","requestBackgroundPermissionsAsync","useBackgroundPermissions","hasServicesEnabledAsync","_validate","taskName","Error","message","isBackgroundLocationAvailableAsync","providerStatus","backgroundModeEnabled","startLocationUpdatesAsync","Balanced","stopLocationUpdatesAsync","hasStartedLocationUpdatesAsync","_validateRegions","regions","length","region","radius","startGeofencingAsync","stopGeofencingAsync","hasStartedGeofencingAsync"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/expo-location/src/Location.ts"],"sourcesContent":["import { isRunningInExpoGo } from 'expo';\nimport { PermissionResponse, createPermissionHook, Platform } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport {\n  LocationAccuracy,\n  LocationCallback,\n  LocationGeocodedAddress,\n  LocationGeocodedLocation,\n  LocationHeadingCallback,\n  LocationHeadingObject,\n  LocationLastKnownOptions,\n  LocationObject,\n  LocationOptions,\n  LocationPermissionResponse,\n  LocationProviderStatus,\n  LocationRegion,\n  LocationSubscription,\n  LocationTaskOptions,\n} from './Location.types';\nimport { LocationSubscriber, HeadingSubscriber } from './LocationSubscribers';\n\n// Flag for warning about background services not being available in Expo Go\nlet warnAboutExpoGoDisplayed = false;\n\n// @needsAudit\n/**\n * Check status of location providers.\n * @return A promise which fulfills with an object of type [`LocationProviderStatus`](#locationproviderstatus).\n */\nexport async function getProviderStatusAsync(): Promise<LocationProviderStatus> {\n  return ExpoLocation.getProviderStatusAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to turn on high accuracy location mode which enables network provider that uses\n * Google Play services to improve location accuracy and location-based services.\n * @return A promise resolving as soon as the user accepts the dialog. Rejects if denied.\n *\n * @platform android\n */\nexport async function enableNetworkProviderAsync(): Promise<void> {\n  // If network provider is disabled (user's location mode is set to \"Device only\"),\n  // Android's location provider may not give you any results. Use this method in order to ask the user\n  // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n  // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\n\n// @needsAudit\n/**\n * Requests for one-time delivery of the user's current location.\n * Depending on given `accuracy` option it may take some time to resolve,\n * especially when you're inside a building.\n * > __Note:__ Calling it causes the location manager to obtain a location fix which may take several\n * > seconds. Consider using [`getLastKnownPositionAsync`](#locationgetlastknownpositionasyncoptions)\n * > if you expect to get a quick response and high accuracy is not required.\n * @param options\n * @return A promise which fulfills with an object of type [`LocationObject`](#locationobject).\n */\nexport async function getCurrentPositionAsync(\n  options: LocationOptions = {}\n): Promise<LocationObject> {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\n\n// @needsAudit\n/**\n * Gets the last known position of the device or `null` if it's not available or doesn't match given\n * requirements such as maximum age or required accuracy.\n * It's considered to be faster than `getCurrentPositionAsync` as it doesn't request for the current\n * location, but keep in mind the returned location may not be up-to-date.\n * @param options\n * @return A promise which fulfills with an object of type [`LocationObject`](#locationobject) or\n * `null` if it's not available or doesn't match given requirements such as maximum age or required\n * accuracy.\n */\nexport async function getLastKnownPositionAsync(\n  options: LocationLastKnownOptions = {}\n): Promise<LocationObject | null> {\n  return ExpoLocation.getLastKnownPositionAsync(options);\n}\n\n// @needsAudit\n/**\n * Subscribe to location updates from the device. Please note that updates will only occur while the\n * application is in the foreground. To get location updates while in background you'll need to use\n * [`startLocationUpdatesAsync`](#locationstartlocationupdatesasynctaskname-options).\n * @param options\n * @param callback This function is called on each location update. It receives an object of type\n * [`LocationObject`](#locationobject) as the first argument.\n * @return A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.\n */\nexport async function watchPositionAsync(\n  options: LocationOptions,\n  callback: LocationCallback\n): Promise<LocationSubscription> {\n  const watchId = LocationSubscriber.registerCallback(callback);\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n\n  return {\n    remove() {\n      LocationSubscriber.unregisterCallback(watchId);\n    },\n  };\n}\n\n// @needsAudit\n/**\n * Gets the current heading information from the device. To simplify, it calls `watchHeadingAsync`\n * and waits for a couple of updates, and then returns the one that is accurate enough.\n * @return A promise which fulfills with an object of type [`LocationHeadingObject`](#locationheadingobject).\n */\nexport async function getHeadingAsync(): Promise<LocationHeadingObject> {\n  return new Promise(async (resolve) => {\n    let tries = 0;\n\n    const subscription = await watchHeadingAsync((heading) => {\n      if (heading.accuracy > 1 || tries > 5) {\n        subscription.remove();\n        resolve(heading);\n      } else {\n        tries += 1;\n      }\n    });\n  });\n}\n\n// @needsAudit\n/**\n * Subscribe to compass updates from the device.\n *\n * @param callback This function is called on each compass update. It receives an object of type\n * [LocationHeadingObject](#locationheadingobject) as the first argument.\n * @return A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.\n *\n * @platform android\n * @platform ios\n */\nexport async function watchHeadingAsync(\n  callback: LocationHeadingCallback\n): Promise<LocationSubscription> {\n  const watchId = HeadingSubscriber.registerCallback(callback);\n  await ExpoLocation.watchDeviceHeading(watchId);\n\n  return {\n    remove() {\n      HeadingSubscriber.unregisterCallback(watchId);\n    },\n  };\n}\n\n// @needsAudit\n/**\n * Geocode an address string to latitude-longitude location.\n *\n * On Android, you must request location permissions with [`requestForegroundPermissionsAsync`](#locationrequestforegroundpermissionsasync)\n * before geocoding can be used.\n *\n * > **Note**: Geocoding is resource consuming and has to be used reasonably. Creating too many\n * > requests at a time can result in an error, so they have to be managed properly.\n * > It's also discouraged to use geocoding while the app is in the background and its results won't\n * > be shown to the user immediately.\n *\n * @param address A string representing address, eg. `\"Baker Street London\"`.\n * @return A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedLocation`](#locationgeocodedlocation)\n * objects.\n *\n * @platform android\n * @platform ios\n */\nexport async function geocodeAsync(address: string): Promise<LocationGeocodedLocation[]> {\n  if (typeof address !== 'string') {\n    throw new TypeError(`Address to geocode must be a string. Got ${address} instead.`);\n  }\n\n  if (Platform.OS === 'web') {\n    if (__DEV__) {\n      console.warn(\n        'The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead' +\n          '(https://developers.google.com/maps/documentation/places/web-service/autocomplete)'\n      );\n    }\n    return [];\n  }\n\n  return await ExpoLocation.geocodeAsync(address);\n}\n\n// @needsAudit\n/**\n * Reverse geocode a location to postal address.\n *\n * On Android, you must request location permissions with [`requestForegroundPermissionsAsync`](#locationrequestforegroundpermissionsasync)\n * before geocoding can be used.\n *\n * > **Note**: Geocoding is resource consuming and has to be used reasonably. Creating too many\n * > requests at a time can result in an error, so they have to be managed properly.\n * > It's also discouraged to use geocoding while the app is in the background and its results won't\n * > be shown to the user immediately.\n *\n * @param location An object representing a location.\n * @return A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedAddress`](#locationgeocodedaddress) objects.\n *\n * @platform android\n * @platform ios\n */\nexport async function reverseGeocodeAsync(\n  location: Pick<LocationGeocodedLocation, 'latitude' | 'longitude'>\n): Promise<LocationGeocodedAddress[]> {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError(\n      'Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.'\n    );\n  }\n\n  if (Platform.OS === 'web') {\n    if (__DEV__) {\n      console.warn(\n        'The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead' +\n          '(https://developers.google.com/maps/documentation/places/web-service/autocomplete)'\n      );\n    }\n    return [];\n  }\n\n  return await ExpoLocation.reverseGeocodeAsync(location);\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing location while the app is in the foreground.\n * @return A promise that fulfills with an object of type [`LocationPermissionResponse`](#locationpermissionresponse).\n */\nexport async function getForegroundPermissionsAsync(): Promise<LocationPermissionResponse> {\n  return await ExpoLocation.getForegroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for location while the app is in the foreground.\n * @return A promise that fulfills with an object of type [`LocationPermissionResponse`](#locationpermissionresponse).\n */\nexport async function requestForegroundPermissionsAsync(): Promise<LocationPermissionResponse> {\n  return await ExpoLocation.requestForegroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions for the foreground location.\n * This uses both `requestForegroundPermissionsAsync` and `getForegroundPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Location.useForegroundPermissions();\n * ```\n */\nexport const useForegroundPermissions = createPermissionHook({\n  getMethod: getForegroundPermissionsAsync,\n  requestMethod: requestForegroundPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing location while the app is in the background.\n * @return A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).\n */\nexport async function getBackgroundPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.getBackgroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for location while the app is in the background.\n * On __Android 11 or higher__: this method will open the system settings page - before that happens\n * you should explain to the user why your application needs background location permission.\n * For example, you can use `Modal` component from `react-native` to do that.\n * > __Note__: Foreground permissions should be granted before asking for the background permissions\n * (your app can't obtain background permission without foreground permission).\n * @return A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).\n */\nexport async function requestBackgroundPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.requestBackgroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions for the background location.\n * This uses both `requestBackgroundPermissionsAsync` and `getBackgroundPermissionsAsync` to\n * interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Location.useBackgroundPermissions();\n * ```\n */\nexport const useBackgroundPermissions = createPermissionHook({\n  getMethod: getBackgroundPermissionsAsync,\n  requestMethod: requestBackgroundPermissionsAsync,\n});\n\n// --- Location service\n\n// @needsAudit\n/**\n * Checks whether location services are enabled by the user.\n * @return A promise which fulfills to `true` if location services are enabled on the device,\n * or `false` if not.\n */\nexport async function hasServicesEnabledAsync(): Promise<boolean> {\n  return await ExpoLocation.hasServicesEnabledAsync();\n}\n\n// --- Background location updates\n\nfunction _validate(taskName: string) {\n  if (!taskName || typeof taskName !== 'string') {\n    throw new Error(`\\`taskName\\` must be a non-empty string. Got ${taskName} instead.`);\n  }\n  if (isRunningInExpoGo()) {\n    if (!warnAboutExpoGoDisplayed) {\n      const message =\n        'Background location is limited in Expo Go:\\n' +\n        'On Android, it is not available at all.\\n' +\n        'On iOS, it works when running in the Simulator.\\n' +\n        'Please use a development build to avoid limitations. Learn more: https://expo.fyi/dev-client.';\n      console.warn(message);\n      warnAboutExpoGoDisplayed = true;\n    }\n  }\n}\n\n// @docsMissing\nexport async function isBackgroundLocationAvailableAsync(): Promise<boolean> {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\n\n// @needsAudit\n/**\n * Registers for receiving location updates that can also come when the app is in the background.\n *\n * # Task parameters\n *\n * Background location task will be receiving following data:\n * - `locations` - An array of the new locations.\n *\n * @example\n * ```ts\n * import * as TaskManager from 'expo-task-manager';\n *\n * TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { locations }, error }) => {\n *  if (error) {\n *    // check `error.message` for more details.\n *    return;\n *  }\n *  console.log('Received new locations', locations);\n * });\n * ```\n *\n * @param taskName Name of the task receiving location updates.\n * @param options An object of options passed to the location manager.\n *\n * @return A promise resolving once the task with location updates is registered.\n */\nexport async function startLocationUpdatesAsync(\n  taskName: string,\n  options: LocationTaskOptions = { accuracy: LocationAccuracy.Balanced }\n): Promise<void> {\n  _validate(taskName);\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\n\n// @needsAudit\n/**\n * Stops location updates for specified task.\n * @param taskName Name of the background location task to stop.\n * @return A promise resolving as soon as the task is unregistered.\n */\nexport async function stopLocationUpdatesAsync(taskName: string): Promise<void> {\n  _validate(taskName);\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\n\n// @needsAudit\n/**\n * @param taskName Name of the location task to check.\n * @return A promise which fulfills with boolean value indicating whether the location task is\n * started or not.\n */\nexport async function hasStartedLocationUpdatesAsync(taskName: string): Promise<boolean> {\n  _validate(taskName);\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n}\n\n// --- Geofencing\n\nfunction _validateRegions(regions: LocationRegion[]) {\n  if (!regions || regions.length === 0) {\n    throw new Error(\n      'Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions'\n    );\n  }\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(\n        `Region's longitude must be a number. Got '${region.longitude}' instead.`\n      );\n    }\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\n\n// @needsAudit\n/**\n * Starts geofencing for given regions. When the new event comes, the task with specified name will\n * be called with the region that the device enter to or exit from.\n * If you want to add or remove regions from already running geofencing task, you can just call\n * `startGeofencingAsync` again with the new array of regions.\n *\n * # Task parameters\n *\n * Geofencing task will be receiving following data:\n *  - `eventType` - Indicates the reason for calling the task, which can be triggered by entering or exiting the region.\n *    See [`GeofencingEventType`](#geofencingeventtype).\n *  - `region` - Object containing details about updated region. See [`LocationRegion`](#locationregion) for more details.\n *\n * @param taskName Name of the task that will be called when the device enters or exits from specified regions.\n * @param regions Array of region objects to be geofenced.\n *\n * @return A promise resolving as soon as the task is registered.\n *\n * @example\n * ```ts\n * import { GeofencingEventType } from 'expo-location';\n * import * as TaskManager from 'expo-task-manager';\n *\n *  TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { eventType, region }, error }) => {\n *   if (error) {\n *     // check `error.message` for more details.\n *     return;\n *   }\n *   if (eventType === GeofencingEventType.Enter) {\n *     console.log(\"You've entered region:\", region);\n *   } else if (eventType === GeofencingEventType.Exit) {\n *     console.log(\"You've left region:\", region);\n *   }\n * });\n * ```\n */\nexport async function startGeofencingAsync(\n  taskName: string,\n  regions: LocationRegion[] = []\n): Promise<void> {\n  _validate(taskName);\n  _validateRegions(regions);\n  await ExpoLocation.startGeofencingAsync(taskName, { regions });\n}\n\n// @needsAudit\n/**\n * Stops geofencing for specified task. It unregisters the background task so the app will not be\n * receiving any updates, especially in the background.\n * @param taskName Name of the task to unregister.\n * @return A promise resolving as soon as the task is unregistered.\n */\nexport async function stopGeofencingAsync(taskName: string): Promise<void> {\n  _validate(taskName);\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\n\n// @needsAudit\n/**\n * @param taskName Name of the geofencing task to check.\n * @return A promise which fulfills with boolean value indicating whether the geofencing task is\n * started or not.\n */\nexport async function hasStartedGeofencingAsync(taskName: string): Promise<boolean> {\n  _validate(taskName);\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}