{"ast":null,"code":"import NativeReactNativeFeatureFlags from \"./specs/NativeReactNativeFeatureFlags\";\nconst accessedFeatureFlags = new Set();\nlet overrides;\nfunction createGetter(configName, customValueGetter, defaultValue) {\n  let cachedValue;\n  return () => {\n    if (cachedValue == null) {\n      cachedValue = customValueGetter() ?? defaultValue;\n    }\n    return cachedValue;\n  };\n}\nexport function createJavaScriptFlagGetter(configName, defaultValue) {\n  return createGetter(configName, () => {\n    accessedFeatureFlags.add(configName);\n    return overrides?.[configName]?.();\n  }, defaultValue);\n}\nexport function createNativeFlagGetter(configName, defaultValue) {\n  return createGetter(configName, () => {\n    const valueFromNative = NativeReactNativeFeatureFlags?.[configName]?.();\n    if (valueFromNative == null) {\n      logUnavailableNativeModuleError(configName);\n    }\n    return valueFromNative;\n  }, defaultValue);\n}\nexport function getOverrides() {\n  return overrides;\n}\nexport function setOverrides(newOverrides) {\n  if (overrides != null) {\n    throw new Error('Feature flags cannot be overridden more than once');\n  }\n  if (accessedFeatureFlags.size > 0) {\n    const accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');\n    throw new Error(`Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`);\n  }\n  overrides = newOverrides;\n}\nconst reportedConfigNames = new Set();\nfunction logUnavailableNativeModuleError(configName) {\n  if (!reportedConfigNames.has(configName)) {\n    reportedConfigNames.add(configName);\n    console.error(`Could not access feature flag '${configName}' because native module method was not available`);\n  }\n}","map":{"version":3,"names":["NativeReactNativeFeatureFlags","accessedFeatureFlags","Set","overrides","createGetter","configName","customValueGetter","defaultValue","cachedValue","createJavaScriptFlagGetter","add","createNativeFlagGetter","valueFromNative","logUnavailableNativeModuleError","getOverrides","setOverrides","newOverrides","Error","size","accessedFeatureFlagsStr","Array","from","join","reportedConfigNames","has","console","error"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlagsBase.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  ReactNativeFeatureFlagsJsOnly,\n  ReactNativeFeatureFlagsJsOnlyOverrides,\n} from './ReactNativeFeatureFlags';\n\nimport NativeReactNativeFeatureFlags from './specs/NativeReactNativeFeatureFlags';\n\nconst accessedFeatureFlags: Set<string> = new Set();\nlet overrides: ?ReactNativeFeatureFlagsJsOnlyOverrides;\n\nexport type Getter<T> = () => T;\n\nfunction createGetter<T: boolean | number | string>(\n  configName: string,\n  customValueGetter: Getter<?T>,\n  defaultValue: T,\n): Getter<T> {\n  let cachedValue: ?T;\n\n  return () => {\n    if (cachedValue == null) {\n      cachedValue = customValueGetter() ?? defaultValue;\n    }\n    return cachedValue;\n  };\n}\n\nexport function createJavaScriptFlagGetter<\n  K: $Keys<ReactNativeFeatureFlagsJsOnly>,\n>(\n  configName: K,\n  defaultValue: ReturnType<ReactNativeFeatureFlagsJsOnly[K]>,\n): Getter<ReturnType<ReactNativeFeatureFlagsJsOnly[K]>> {\n  return createGetter(\n    configName,\n    () => {\n      accessedFeatureFlags.add(configName);\n      return overrides?.[configName]?.();\n    },\n    defaultValue,\n  );\n}\n\ntype NativeFeatureFlags = $NonMaybeType<typeof NativeReactNativeFeatureFlags>;\n\nexport function createNativeFlagGetter<K: $Keys<NativeFeatureFlags>>(\n  configName: K,\n  defaultValue: ReturnType<$NonMaybeType<NativeFeatureFlags[K]>>,\n): Getter<ReturnType<$NonMaybeType<NativeFeatureFlags[K]>>> {\n  return createGetter(\n    configName,\n    () => {\n      const valueFromNative = NativeReactNativeFeatureFlags?.[configName]?.();\n      if (valueFromNative == null) {\n        logUnavailableNativeModuleError(configName);\n      }\n      return valueFromNative;\n    },\n    defaultValue,\n  );\n}\n\nexport function getOverrides(): ?ReactNativeFeatureFlagsJsOnlyOverrides {\n  return overrides;\n}\n\nexport function setOverrides(\n  newOverrides: ReactNativeFeatureFlagsJsOnlyOverrides,\n): void {\n  if (overrides != null) {\n    throw new Error('Feature flags cannot be overridden more than once');\n  }\n\n  if (accessedFeatureFlags.size > 0) {\n    const accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');\n    throw new Error(\n      `Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`,\n    );\n  }\n\n  overrides = newOverrides;\n}\n\nconst reportedConfigNames: Set<string> = new Set();\n\nfunction logUnavailableNativeModuleError(configName: string): void {\n  if (!reportedConfigNames.has(configName)) {\n    reportedConfigNames.add(configName);\n    console.error(\n      `Could not access feature flag '${configName}' because native module method was not available`,\n    );\n  }\n}\n"],"mappings":"AAeA,OAAOA,6BAA6B;AAEpC,MAAMC,oBAAiC,GAAG,IAAIC,GAAG,CAAC,CAAC;AACnD,IAAIC,SAAkD;AAItD,SAASC,YAAYA,CACnBC,UAAkB,EAClBC,iBAA6B,EAC7BC,YAAe,EACJ;EACX,IAAIC,WAAe;EAEnB,OAAO,MAAM;IACX,IAAIA,WAAW,IAAI,IAAI,EAAE;MACvBA,WAAW,GAAGF,iBAAiB,CAAC,CAAC,IAAIC,YAAY;IACnD;IACA,OAAOC,WAAW;EACpB,CAAC;AACH;AAEA,OAAO,SAASC,0BAA0BA,CAGxCJ,UAAa,EACbE,YAA0D,EACJ;EACtD,OAAOH,YAAY,CACjBC,UAAU,EACV,MAAM;IACJJ,oBAAoB,CAACS,GAAG,CAACL,UAAU,CAAC;IACpC,OAAOF,SAAS,GAAGE,UAAU,CAAC,GAAG,CAAC;EACpC,CAAC,EACDE,YACF,CAAC;AACH;AAIA,OAAO,SAASI,sBAAsBA,CACpCN,UAAa,EACbE,YAA8D,EACJ;EAC1D,OAAOH,YAAY,CACjBC,UAAU,EACV,MAAM;IACJ,MAAMO,eAAe,GAAGZ,6BAA6B,GAAGK,UAAU,CAAC,GAAG,CAAC;IACvE,IAAIO,eAAe,IAAI,IAAI,EAAE;MAC3BC,+BAA+B,CAACR,UAAU,CAAC;IAC7C;IACA,OAAOO,eAAe;EACxB,CAAC,EACDL,YACF,CAAC;AACH;AAEA,OAAO,SAASO,YAAYA,CAAA,EAA4C;EACtE,OAAOX,SAAS;AAClB;AAEA,OAAO,SAASY,YAAYA,CAC1BC,YAAoD,EAC9C;EACN,IAAIb,SAAS,IAAI,IAAI,EAAE;IACrB,MAAM,IAAIc,KAAK,CAAC,mDAAmD,CAAC;EACtE;EAEA,IAAIhB,oBAAoB,CAACiB,IAAI,GAAG,CAAC,EAAE;IACjC,MAAMC,uBAAuB,GAAGC,KAAK,CAACC,IAAI,CAACpB,oBAAoB,CAAC,CAACqB,IAAI,CAAC,IAAI,CAAC;IAC3E,MAAM,IAAIL,KAAK,CACZ,wDAAuDE,uBAAwB,EAClF,CAAC;EACH;EAEAhB,SAAS,GAAGa,YAAY;AAC1B;AAEA,MAAMO,mBAAgC,GAAG,IAAIrB,GAAG,CAAC,CAAC;AAElD,SAASW,+BAA+BA,CAACR,UAAkB,EAAQ;EACjE,IAAI,CAACkB,mBAAmB,CAACC,GAAG,CAACnB,UAAU,CAAC,EAAE;IACxCkB,mBAAmB,CAACb,GAAG,CAACL,UAAU,CAAC;IACnCoB,OAAO,CAACC,KAAK,CACV,kCAAiCrB,UAAW,kDAC/C,CAAC;EACH;AACF"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}