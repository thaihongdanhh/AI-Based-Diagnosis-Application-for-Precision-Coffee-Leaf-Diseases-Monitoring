{"ast":null,"code":"'use strict';\n\nimport { useEffect, useRef, useCallback } from 'react';\nimport { useEvent } from \"./useEvent.js\";\nimport { useSharedValue } from \"./useSharedValue.js\";\nimport { isWeb } from \"../PlatformChecker.js\";\nconst IS_WEB = isWeb();\nexport const useScrollViewOffset = IS_WEB ? useScrollViewOffsetWeb : useScrollViewOffsetNative;\nconst _worklet_7236655608623_init_data = {\n  code: \"function reactNativeReanimated_useScrollViewOffsetJs1(){const{animatedRef,getWebScrollableElement,offset}=this.__closure;if(animatedRef){const element=getWebScrollableElement(animatedRef.current);offset.value=element.scrollLeft===0?element.scrollTop:element.scrollLeft;}}\",\n  location: \"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/lib/module/hook/useScrollViewOffset.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"reactNativeReanimated_useScrollViewOffsetJs1\\\",\\\"animatedRef\\\",\\\"getWebScrollableElement\\\",\\\"offset\\\",\\\"__closure\\\",\\\"element\\\",\\\"current\\\",\\\"value\\\",\\\"scrollLeft\\\",\\\"scrollTop\\\"],\\\"sources\\\":[\\\"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/lib/module/hook/useScrollViewOffset.js\\\"],\\\"mappings\\\":\\\"AAqBmC,SAAAA,4CAAMA,CAAA,QAAAC,WAAA,CAAAC,uBAAA,CAAAC,MAAA,OAAAC,SAAA,CAGrC,GAAIH,WAAW,CAAE,CACf,KAAM,CAAAI,OAAO,CAAGH,uBAAuB,CAACD,WAAW,CAACK,OAAO,CAAC,CAE5DH,MAAM,CAACI,KAAK,CAAGF,OAAO,CAACG,UAAU,GAAK,CAAC,CAAGH,OAAO,CAACI,SAAS,CAAGJ,OAAO,CAACG,UAAU,CAClF,CAEF\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.16.1\"\n};\nfunction useScrollViewOffsetWeb(animatedRef, providedOffset) {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n  const eventHandler = useCallback(function () {\n    const _e = [new global.Error(), -4, -27];\n    const reactNativeReanimated_useScrollViewOffsetJs1 = function () {\n      if (animatedRef) {\n        const element = getWebScrollableElement(animatedRef.current);\n        offset.value = element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n      }\n    };\n    reactNativeReanimated_useScrollViewOffsetJs1.__closure = {\n      animatedRef,\n      getWebScrollableElement,\n      offset\n    };\n    reactNativeReanimated_useScrollViewOffsetJs1.__workletHash = 7236655608623;\n    reactNativeReanimated_useScrollViewOffsetJs1.__initData = _worklet_7236655608623_init_data;\n    reactNativeReanimated_useScrollViewOffsetJs1.__stackDetails = _e;\n    return reactNativeReanimated_useScrollViewOffsetJs1;\n  }(), [animatedRef, animatedRef?.current]);\n  useEffect(() => {\n    const element = animatedRef?.current ? getWebScrollableElement(animatedRef.current) : null;\n    if (element) {\n      element.addEventListener('scroll', eventHandler);\n    }\n    return () => {\n      if (element) {\n        element.removeEventListener('scroll', eventHandler);\n      }\n    };\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n  return offset;\n}\nconst _worklet_8663758724346_init_data = {\n  code: \"function reactNativeReanimated_useScrollViewOffsetJs2(event){const{offset}=this.__closure;offset.value=event.contentOffset.x===0?event.contentOffset.y:event.contentOffset.x;}\",\n  location: \"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/lib/module/hook/useScrollViewOffset.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"reactNativeReanimated_useScrollViewOffsetJs2\\\",\\\"event\\\",\\\"offset\\\",\\\"__closure\\\",\\\"value\\\",\\\"contentOffset\\\",\\\"x\\\",\\\"y\\\"],\\\"sources\\\":[\\\"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/lib/module/hook/useScrollViewOffset.js\\\"],\\\"mappings\\\":\\\"AAmDgC,SAAAA,4CAASA,CAAAC,KAAA,QAAAC,MAAA,OAAAC,SAAA,CAGrCD,MAAM,CAACE,KAAK,CAAGH,KAAK,CAACI,aAAa,CAACC,CAAC,GAAK,CAAC,CAAGL,KAAK,CAACI,aAAa,CAACE,CAAC,CAAGN,KAAK,CAACI,aAAa,CAACC,CAAC,CAC5F\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.16.1\"\n};\nfunction useScrollViewOffsetNative(animatedRef, providedOffset) {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n  const eventHandler = useEvent(function () {\n    const _e = [new global.Error(), -2, -27];\n    const reactNativeReanimated_useScrollViewOffsetJs2 = function (event) {\n      offset.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n    };\n    reactNativeReanimated_useScrollViewOffsetJs2.__closure = {\n      offset\n    };\n    reactNativeReanimated_useScrollViewOffsetJs2.__workletHash = 8663758724346;\n    reactNativeReanimated_useScrollViewOffsetJs2.__initData = _worklet_8663758724346_init_data;\n    reactNativeReanimated_useScrollViewOffsetJs2.__stackDetails = _e;\n    return reactNativeReanimated_useScrollViewOffsetJs2;\n  }(), scrollNativeEventNames);\n  useEffect(() => {\n    const elementTag = animatedRef?.getTag() ?? null;\n    if (elementTag) {\n      eventHandler.workletEventHandler.registerForEvents(elementTag);\n    }\n    return () => {\n      if (elementTag) {\n        eventHandler.workletEventHandler.unregisterFromEvents(elementTag);\n      }\n    };\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n  return offset;\n}\nfunction getWebScrollableElement(scrollComponent) {\n  return scrollComponent?.getScrollableNode() ?? scrollComponent;\n}\nconst scrollNativeEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];","map":{"version":3,"names":["useEffect","useRef","useCallback","useEvent","useSharedValue","isWeb","IS_WEB","useScrollViewOffset","useScrollViewOffsetWeb","useScrollViewOffsetNative","_worklet_7236655608623_init_data","code","location","sourceMap","version","animatedRef","providedOffset","internalOffset","offset","current","eventHandler","_e","global","Error","reactNativeReanimated_useScrollViewOffsetJs1","element","getWebScrollableElement","value","scrollLeft","scrollTop","__closure","__workletHash","__initData","__stackDetails","addEventListener","removeEventListener","_worklet_8663758724346_init_data","reactNativeReanimated_useScrollViewOffsetJs2","event","contentOffset","x","y","scrollNativeEventNames","elementTag","getTag","workletEventHandler","registerForEvents","unregisterFromEvents","scrollComponent","getScrollableNode"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native-reanimated/src/hook/useScrollViewOffset.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef, useCallback } from 'react';\nimport type { SharedValue } from '../commonTypes';\nimport type { EventHandlerInternal } from './useEvent';\nimport { useEvent } from './useEvent';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedScrollView } from '../component/ScrollView';\nimport type {\n  AnimatedRef,\n  RNNativeScrollEvent,\n  ReanimatedScrollEvent,\n} from './commonTypes';\nimport { isWeb } from '../PlatformChecker';\n\nconst IS_WEB = isWeb();\n\n/**\n * Lets you synchronously get the current offset of a `ScrollView`.\n *\n * @param animatedRef - An [animated\n *   ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef)\n *   attached to an Animated.ScrollView component.\n * @returns A shared value which holds the current offset of the `ScrollView`.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useScrollViewOffset\n */\nexport const useScrollViewOffset = IS_WEB\n  ? useScrollViewOffsetWeb\n  : useScrollViewOffsetNative;\n\nfunction useScrollViewOffsetWeb(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useCallback(() => {\n    'worklet';\n    if (animatedRef) {\n      const element = getWebScrollableElement(animatedRef.current);\n      // scrollLeft is the X axis scrolled offset, works properly also with RTL layout\n      offset.value =\n        element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current]);\n\n  useEffect(() => {\n    const element = animatedRef?.current\n      ? getWebScrollableElement(animatedRef.current)\n      : null;\n\n    if (element) {\n      element.addEventListener('scroll', eventHandler);\n    }\n    return () => {\n      if (element) {\n        element.removeEventListener('scroll', eventHandler);\n      }\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n\n  return offset;\n}\n\nfunction useScrollViewOffsetNative(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useEvent<RNNativeScrollEvent>(\n    (event: ReanimatedScrollEvent) => {\n      'worklet';\n      offset.value =\n        event.contentOffset.x === 0\n          ? event.contentOffset.y\n          : event.contentOffset.x;\n    },\n    scrollNativeEventNames\n    // Read https://github.com/software-mansion/react-native-reanimated/pull/5056\n    // for more information about this cast.\n  ) as unknown as EventHandlerInternal<ReanimatedScrollEvent>;\n\n  useEffect(() => {\n    const elementTag = animatedRef?.getTag() ?? null;\n\n    if (elementTag) {\n      eventHandler.workletEventHandler.registerForEvents(elementTag);\n    }\n    return () => {\n      if (elementTag) {\n        eventHandler.workletEventHandler.unregisterFromEvents(elementTag);\n      }\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n\n  return offset;\n}\n\nfunction getWebScrollableElement(\n  scrollComponent: AnimatedScrollView | null\n): HTMLElement {\n  return (\n    (scrollComponent?.getScrollableNode() as unknown as HTMLElement) ??\n    scrollComponent\n  );\n}\n\nconst scrollNativeEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}