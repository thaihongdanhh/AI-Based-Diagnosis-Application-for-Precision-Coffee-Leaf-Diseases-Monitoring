{"ast":null,"code":"'use strict';\n\nimport { AnimatedEvent, attachNativeEvent } from \"./AnimatedEvent\";\nimport DecayAnimation from \"./animations/DecayAnimation\";\nimport SpringAnimation from \"./animations/SpringAnimation\";\nimport TimingAnimation from \"./animations/TimingAnimation\";\nimport createAnimatedComponent from \"./createAnimatedComponent\";\nimport AnimatedAddition from \"./nodes/AnimatedAddition\";\nimport AnimatedColor from \"./nodes/AnimatedColor\";\nimport AnimatedDiffClamp from \"./nodes/AnimatedDiffClamp\";\nimport AnimatedDivision from \"./nodes/AnimatedDivision\";\nimport AnimatedInterpolation from \"./nodes/AnimatedInterpolation\";\nimport AnimatedModulo from \"./nodes/AnimatedModulo\";\nimport AnimatedMultiplication from \"./nodes/AnimatedMultiplication\";\nimport AnimatedNode from \"./nodes/AnimatedNode\";\nimport AnimatedSubtraction from \"./nodes/AnimatedSubtraction\";\nimport AnimatedTracking from \"./nodes/AnimatedTracking\";\nimport AnimatedValue from \"./nodes/AnimatedValue\";\nimport AnimatedValueXY from \"./nodes/AnimatedValueXY\";\nconst add = function (a, b) {\n  return new AnimatedAddition(a, b);\n};\nconst subtract = function (a, b) {\n  return new AnimatedSubtraction(a, b);\n};\nconst divide = function (a, b) {\n  return new AnimatedDivision(a, b);\n};\nconst multiply = function (a, b) {\n  return new AnimatedMultiplication(a, b);\n};\nconst modulo = function (a, modulus) {\n  return new AnimatedModulo(a, modulus);\n};\nconst diffClamp = function (a, min, max) {\n  return new AnimatedDiffClamp(a, min, max);\n};\nconst _combineCallbacks = function (callback, config) {\n  if (callback && config.onComplete) {\n    return (...args) => {\n      config.onComplete && config.onComplete(...args);\n      callback && callback(...args);\n    };\n  } else {\n    return callback || config.onComplete;\n  }\n};\nconst maybeVectorAnim = function (value, config, anim) {\n  if (value instanceof AnimatedValueXY) {\n    const configX = Object.assign({}, config);\n    const configY = Object.assign({}, config);\n    for (const key in config) {\n      const {\n        x,\n        y\n      } = config[key];\n      if (x !== undefined && y !== undefined) {\n        configX[key] = x;\n        configY[key] = y;\n      }\n    }\n    const aX = anim(value.x, configX);\n    const aY = anim(value.y, configY);\n    return parallel([aX, aY], {\n      stopTogether: false\n    });\n  } else if (value instanceof AnimatedColor) {\n    const configR = Object.assign({}, config);\n    const configG = Object.assign({}, config);\n    const configB = Object.assign({}, config);\n    const configA = Object.assign({}, config);\n    for (const key in config) {\n      const {\n        r,\n        g,\n        b,\n        a\n      } = config[key];\n      if (r !== undefined && g !== undefined && b !== undefined && a !== undefined) {\n        configR[key] = r;\n        configG[key] = g;\n        configB[key] = b;\n        configA[key] = a;\n      }\n    }\n    const aR = anim(value.r, configR);\n    const aG = anim(value.g, configG);\n    const aB = anim(value.b, configB);\n    const aA = anim(value.a, configA);\n    return parallel([aR, aG, aB, aA], {\n      stopTogether: false\n    });\n  }\n  return null;\n};\nconst spring = function (value, config) {\n  const start = function (animatedValue, configuration, callback) {\n    callback = _combineCallbacks(callback, configuration);\n    const singleValue = animatedValue;\n    const singleConfig = configuration;\n    singleValue.stopTracking();\n    if (configuration.toValue instanceof AnimatedNode) {\n      singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));\n    } else {\n      singleValue.animate(new SpringAnimation(singleConfig), callback);\n    }\n  };\n  return maybeVectorAnim(value, config, spring) || {\n    start: function (callback) {\n      start(value, config, callback);\n    },\n    stop: function () {\n      value.stopAnimation();\n    },\n    reset: function () {\n      value.resetAnimation();\n    },\n    _startNativeLoop: function (iterations) {\n      const singleConfig = Object.assign({}, config, {\n        iterations\n      });\n      start(value, singleConfig);\n    },\n    _isUsingNativeDriver: function () {\n      return config.useNativeDriver || false;\n    }\n  };\n};\nconst timing = function (value, config) {\n  const start = function (animatedValue, configuration, callback) {\n    callback = _combineCallbacks(callback, configuration);\n    const singleValue = animatedValue;\n    const singleConfig = configuration;\n    singleValue.stopTracking();\n    if (configuration.toValue instanceof AnimatedNode) {\n      singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));\n    } else {\n      singleValue.animate(new TimingAnimation(singleConfig), callback);\n    }\n  };\n  return maybeVectorAnim(value, config, timing) || {\n    start: function (callback, isLooping) {\n      start(value, Object.assign({}, config, {\n        isLooping\n      }), callback);\n    },\n    stop: function () {\n      value.stopAnimation();\n    },\n    reset: function () {\n      value.resetAnimation();\n    },\n    _startNativeLoop: function (iterations) {\n      const singleConfig = Object.assign({}, config, {\n        iterations\n      });\n      start(value, singleConfig);\n    },\n    _isUsingNativeDriver: function () {\n      return config.useNativeDriver || false;\n    }\n  };\n};\nconst decay = function (value, config) {\n  const start = function (animatedValue, configuration, callback) {\n    callback = _combineCallbacks(callback, configuration);\n    const singleValue = animatedValue;\n    const singleConfig = configuration;\n    singleValue.stopTracking();\n    singleValue.animate(new DecayAnimation(singleConfig), callback);\n  };\n  return maybeVectorAnim(value, config, decay) || {\n    start: function (callback) {\n      start(value, config, callback);\n    },\n    stop: function () {\n      value.stopAnimation();\n    },\n    reset: function () {\n      value.resetAnimation();\n    },\n    _startNativeLoop: function (iterations) {\n      const singleConfig = Object.assign({}, config, {\n        iterations\n      });\n      start(value, singleConfig);\n    },\n    _isUsingNativeDriver: function () {\n      return config.useNativeDriver || false;\n    }\n  };\n};\nconst sequence = function (animations) {\n  let current = 0;\n  return {\n    start: function (callback, isLooping) {\n      const onComplete = function (result) {\n        if (!result.finished) {\n          callback && callback(result);\n          return;\n        }\n        current++;\n        if (current === animations.length) {\n          current = 0;\n          callback && callback(result);\n          return;\n        }\n        animations[current].start(onComplete, isLooping);\n      };\n      if (animations.length === 0) {\n        callback && callback({\n          finished: true\n        });\n      } else {\n        animations[current].start(onComplete, isLooping);\n      }\n    },\n    stop: function () {\n      if (current < animations.length) {\n        animations[current].stop();\n      }\n    },\n    reset: function () {\n      animations.forEach((animation, idx) => {\n        if (idx <= current) {\n          animation.reset();\n        }\n      });\n      current = 0;\n    },\n    _startNativeLoop: function () {\n      throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');\n    },\n    _isUsingNativeDriver: function () {\n      return false;\n    }\n  };\n};\nconst parallel = function (animations, config) {\n  let doneCount = 0;\n  const hasEnded = {};\n  const stopTogether = !(config && config.stopTogether === false);\n  const result = {\n    start: function (callback) {\n      if (doneCount === animations.length) {\n        callback && callback({\n          finished: true\n        });\n        return;\n      }\n      animations.forEach((animation, idx) => {\n        const cb = function (endResult) {\n          hasEnded[idx] = true;\n          doneCount++;\n          if (doneCount === animations.length) {\n            doneCount = 0;\n            callback && callback(endResult);\n            return;\n          }\n          if (!endResult.finished && stopTogether) {\n            result.stop();\n          }\n        };\n        if (!animation) {\n          cb({\n            finished: true\n          });\n        } else {\n          animation.start(cb);\n        }\n      });\n    },\n    stop: function () {\n      animations.forEach((animation, idx) => {\n        !hasEnded[idx] && animation.stop();\n        hasEnded[idx] = true;\n      });\n    },\n    reset: function () {\n      animations.forEach((animation, idx) => {\n        animation.reset();\n        hasEnded[idx] = false;\n        doneCount = 0;\n      });\n    },\n    _startNativeLoop: function () {\n      throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');\n    },\n    _isUsingNativeDriver: function () {\n      return false;\n    }\n  };\n  return result;\n};\nconst delay = function (time) {\n  return timing(new AnimatedValue(0), {\n    toValue: 0,\n    delay: time,\n    duration: 0,\n    useNativeDriver: false\n  });\n};\nconst stagger = function (time, animations) {\n  return parallel(animations.map((animation, i) => {\n    return sequence([delay(time * i), animation]);\n  }));\n};\nconst loop = function (animation, {\n  iterations = -1,\n  resetBeforeIteration = true\n} = {}) {\n  let isFinished = false;\n  let iterationsSoFar = 0;\n  return {\n    start: function (callback) {\n      const restart = function (result = {\n        finished: true\n      }) {\n        if (isFinished || iterationsSoFar === iterations || result.finished === false) {\n          callback && callback(result);\n        } else {\n          iterationsSoFar++;\n          resetBeforeIteration && animation.reset();\n          animation.start(restart, iterations === -1);\n        }\n      };\n      if (!animation || iterations === 0) {\n        callback && callback({\n          finished: true\n        });\n      } else {\n        if (animation._isUsingNativeDriver()) {\n          animation._startNativeLoop(iterations);\n        } else {\n          restart();\n        }\n      }\n    },\n    stop: function () {\n      isFinished = true;\n      animation.stop();\n    },\n    reset: function () {\n      iterationsSoFar = 0;\n      isFinished = false;\n      animation.reset();\n    },\n    _startNativeLoop: function () {\n      throw new Error('Loops run using the native driver cannot contain Animated.loop animations');\n    },\n    _isUsingNativeDriver: function () {\n      return animation._isUsingNativeDriver();\n    }\n  };\n};\nfunction forkEvent(event, listener) {\n  if (!event) {\n    return listener;\n  } else if (event instanceof AnimatedEvent) {\n    event.__addListener(listener);\n    return event;\n  } else {\n    return (...args) => {\n      typeof event === 'function' && event(...args);\n      listener(...args);\n    };\n  }\n}\nfunction unforkEvent(event, listener) {\n  if (event && event instanceof AnimatedEvent) {\n    event.__removeListener(listener);\n  }\n}\nconst event = function (argMapping, config) {\n  const animatedEvent = new AnimatedEvent(argMapping, config);\n  if (animatedEvent.__isNative) {\n    return animatedEvent;\n  } else {\n    return animatedEvent.__getHandler();\n  }\n};\nexport default {\n  Value: AnimatedValue,\n  ValueXY: AnimatedValueXY,\n  Color: AnimatedColor,\n  Interpolation: AnimatedInterpolation,\n  Node: AnimatedNode,\n  decay,\n  timing,\n  spring,\n  add,\n  subtract,\n  divide,\n  multiply,\n  modulo,\n  diffClamp,\n  delay,\n  sequence,\n  parallel,\n  stagger,\n  loop,\n  event,\n  createAnimatedComponent,\n  attachNativeEvent,\n  forkEvent,\n  unforkEvent,\n  Event: AnimatedEvent\n};","map":{"version":3,"names":["AnimatedEvent","attachNativeEvent","DecayAnimation","SpringAnimation","TimingAnimation","createAnimatedComponent","AnimatedAddition","AnimatedColor","AnimatedDiffClamp","AnimatedDivision","AnimatedInterpolation","AnimatedModulo","AnimatedMultiplication","AnimatedNode","AnimatedSubtraction","AnimatedTracking","AnimatedValue","AnimatedValueXY","add","a","b","subtract","divide","multiply","modulo","modulus","diffClamp","min","max","_combineCallbacks","callback","config","onComplete","args","maybeVectorAnim","value","anim","configX","Object","assign","configY","key","x","y","undefined","aX","aY","parallel","stopTogether","configR","configG","configB","configA","r","g","aR","aG","aB","aA","spring","start","animatedValue","configuration","singleValue","singleConfig","stopTracking","toValue","track","animate","stop","stopAnimation","reset","resetAnimation","_startNativeLoop","iterations","_isUsingNativeDriver","useNativeDriver","timing","isLooping","decay","sequence","animations","current","result","finished","length","forEach","animation","idx","Error","doneCount","hasEnded","cb","endResult","delay","time","duration","stagger","map","i","loop","resetBeforeIteration","isFinished","iterationsSoFar","restart","forkEvent","event","listener","__addListener","unforkEvent","__removeListener","argMapping","animatedEvent","__isNative","__getHandler","Value","ValueXY","Color","Interpolation","Node","Event"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Animated/AnimatedImplementation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {EventConfig, Mapping} from './AnimatedEvent';\nimport type {\n  AnimationConfig,\n  EndCallback,\n  EndResult,\n} from './animations/Animation';\nimport type {DecayAnimationConfig} from './animations/DecayAnimation';\nimport type {SpringAnimationConfig} from './animations/SpringAnimation';\nimport type {TimingAnimationConfig} from './animations/TimingAnimation';\n\nimport {AnimatedEvent, attachNativeEvent} from './AnimatedEvent';\nimport DecayAnimation from './animations/DecayAnimation';\nimport SpringAnimation from './animations/SpringAnimation';\nimport TimingAnimation from './animations/TimingAnimation';\nimport createAnimatedComponent from './createAnimatedComponent';\nimport AnimatedAddition from './nodes/AnimatedAddition';\nimport AnimatedColor from './nodes/AnimatedColor';\nimport AnimatedDiffClamp from './nodes/AnimatedDiffClamp';\nimport AnimatedDivision from './nodes/AnimatedDivision';\nimport AnimatedInterpolation from './nodes/AnimatedInterpolation';\nimport AnimatedModulo from './nodes/AnimatedModulo';\nimport AnimatedMultiplication from './nodes/AnimatedMultiplication';\nimport AnimatedNode from './nodes/AnimatedNode';\nimport AnimatedSubtraction from './nodes/AnimatedSubtraction';\nimport AnimatedTracking from './nodes/AnimatedTracking';\nimport AnimatedValue from './nodes/AnimatedValue';\nimport AnimatedValueXY from './nodes/AnimatedValueXY';\n\nexport type CompositeAnimation = {\n  start: (callback?: ?EndCallback, isLooping?: boolean) => void,\n  stop: () => void,\n  reset: () => void,\n  _startNativeLoop: (iterations?: number) => void,\n  _isUsingNativeDriver: () => boolean,\n  ...\n};\n\nconst add = function (\n  a: AnimatedNode | number,\n  b: AnimatedNode | number,\n): AnimatedAddition {\n  return new AnimatedAddition(a, b);\n};\n\nconst subtract = function (\n  a: AnimatedNode | number,\n  b: AnimatedNode | number,\n): AnimatedSubtraction {\n  return new AnimatedSubtraction(a, b);\n};\n\nconst divide = function (\n  a: AnimatedNode | number,\n  b: AnimatedNode | number,\n): AnimatedDivision {\n  return new AnimatedDivision(a, b);\n};\n\nconst multiply = function (\n  a: AnimatedNode | number,\n  b: AnimatedNode | number,\n): AnimatedMultiplication {\n  return new AnimatedMultiplication(a, b);\n};\n\nconst modulo = function (a: AnimatedNode, modulus: number): AnimatedModulo {\n  return new AnimatedModulo(a, modulus);\n};\n\nconst diffClamp = function (\n  a: AnimatedNode,\n  min: number,\n  max: number,\n): AnimatedDiffClamp {\n  return new AnimatedDiffClamp(a, min, max);\n};\n\nconst _combineCallbacks = function (\n  callback: ?EndCallback,\n  config: $ReadOnly<{...AnimationConfig, ...}>,\n) {\n  if (callback && config.onComplete) {\n    return (...args: Array<EndResult>) => {\n      config.onComplete && config.onComplete(...args);\n      callback && callback(...args);\n    };\n  } else {\n    return callback || config.onComplete;\n  }\n};\n\nconst maybeVectorAnim = function (\n  value: AnimatedValue | AnimatedValueXY | AnimatedColor,\n  config: Object,\n  anim: (value: AnimatedValue, config: Object) => CompositeAnimation,\n): ?CompositeAnimation {\n  if (value instanceof AnimatedValueXY) {\n    const configX = {...config};\n    const configY = {...config};\n    for (const key in config) {\n      const {x, y} = config[key];\n      if (x !== undefined && y !== undefined) {\n        configX[key] = x;\n        configY[key] = y;\n      }\n    }\n    const aX = anim((value: AnimatedValueXY).x, configX);\n    const aY = anim((value: AnimatedValueXY).y, configY);\n    // We use `stopTogether: false` here because otherwise tracking will break\n    // because the second animation will get stopped before it can update.\n    return parallel([aX, aY], {stopTogether: false});\n  } else if (value instanceof AnimatedColor) {\n    const configR = {...config};\n    const configG = {...config};\n    const configB = {...config};\n    const configA = {...config};\n    for (const key in config) {\n      const {r, g, b, a} = config[key];\n      if (\n        r !== undefined &&\n        g !== undefined &&\n        b !== undefined &&\n        a !== undefined\n      ) {\n        configR[key] = r;\n        configG[key] = g;\n        configB[key] = b;\n        configA[key] = a;\n      }\n    }\n    const aR = anim((value: AnimatedColor).r, configR);\n    const aG = anim((value: AnimatedColor).g, configG);\n    const aB = anim((value: AnimatedColor).b, configB);\n    const aA = anim((value: AnimatedColor).a, configA);\n    // We use `stopTogether: false` here because otherwise tracking will break\n    // because the second animation will get stopped before it can update.\n    return parallel([aR, aG, aB, aA], {stopTogether: false});\n  }\n  return null;\n};\n\nconst spring = function (\n  value: AnimatedValue | AnimatedValueXY | AnimatedColor,\n  config: SpringAnimationConfig,\n): CompositeAnimation {\n  const start = function (\n    animatedValue: AnimatedValue | AnimatedValueXY | AnimatedColor,\n    configuration: SpringAnimationConfig,\n    callback?: ?EndCallback,\n  ): void {\n    callback = _combineCallbacks(callback, configuration);\n    const singleValue: any = animatedValue;\n    const singleConfig: any = configuration;\n    singleValue.stopTracking();\n    if (configuration.toValue instanceof AnimatedNode) {\n      singleValue.track(\n        new AnimatedTracking(\n          singleValue,\n          configuration.toValue,\n          SpringAnimation,\n          singleConfig,\n          callback,\n        ),\n      );\n    } else {\n      singleValue.animate(new SpringAnimation(singleConfig), callback);\n    }\n  };\n  return (\n    maybeVectorAnim(value, config, spring) || {\n      start: function (callback?: ?EndCallback): void {\n        start(value, config, callback);\n      },\n\n      stop: function (): void {\n        value.stopAnimation();\n      },\n\n      reset: function (): void {\n        value.resetAnimation();\n      },\n\n      _startNativeLoop: function (iterations?: number): void {\n        const singleConfig = {...config, iterations};\n        start(value, singleConfig);\n      },\n\n      _isUsingNativeDriver: function (): boolean {\n        return config.useNativeDriver || false;\n      },\n    }\n  );\n};\n\nconst timing = function (\n  value: AnimatedValue | AnimatedValueXY | AnimatedColor,\n  config: TimingAnimationConfig,\n): CompositeAnimation {\n  const start = function (\n    animatedValue: AnimatedValue | AnimatedValueXY | AnimatedColor,\n    configuration: TimingAnimationConfig,\n    callback?: ?EndCallback,\n  ): void {\n    callback = _combineCallbacks(callback, configuration);\n    const singleValue: any = animatedValue;\n    const singleConfig: any = configuration;\n    singleValue.stopTracking();\n    if (configuration.toValue instanceof AnimatedNode) {\n      singleValue.track(\n        new AnimatedTracking(\n          singleValue,\n          configuration.toValue,\n          TimingAnimation,\n          singleConfig,\n          callback,\n        ),\n      );\n    } else {\n      singleValue.animate(new TimingAnimation(singleConfig), callback);\n    }\n  };\n\n  return (\n    maybeVectorAnim(value, config, timing) || {\n      start: function (callback?: ?EndCallback, isLooping?: boolean): void {\n        start(value, {...config, isLooping}, callback);\n      },\n\n      stop: function (): void {\n        value.stopAnimation();\n      },\n\n      reset: function (): void {\n        value.resetAnimation();\n      },\n\n      _startNativeLoop: function (iterations?: number): void {\n        const singleConfig = {...config, iterations};\n        start(value, singleConfig);\n      },\n\n      _isUsingNativeDriver: function (): boolean {\n        return config.useNativeDriver || false;\n      },\n    }\n  );\n};\n\nconst decay = function (\n  value: AnimatedValue | AnimatedValueXY | AnimatedColor,\n  config: DecayAnimationConfig,\n): CompositeAnimation {\n  const start = function (\n    animatedValue: AnimatedValue | AnimatedValueXY | AnimatedColor,\n    configuration: DecayAnimationConfig,\n    callback?: ?EndCallback,\n  ): void {\n    callback = _combineCallbacks(callback, configuration);\n    const singleValue: any = animatedValue;\n    const singleConfig: any = configuration;\n    singleValue.stopTracking();\n    singleValue.animate(new DecayAnimation(singleConfig), callback);\n  };\n\n  return (\n    maybeVectorAnim(value, config, decay) || {\n      start: function (callback?: ?EndCallback): void {\n        start(value, config, callback);\n      },\n\n      stop: function (): void {\n        value.stopAnimation();\n      },\n\n      reset: function (): void {\n        value.resetAnimation();\n      },\n\n      _startNativeLoop: function (iterations?: number): void {\n        const singleConfig = {...config, iterations};\n        start(value, singleConfig);\n      },\n\n      _isUsingNativeDriver: function (): boolean {\n        return config.useNativeDriver || false;\n      },\n    }\n  );\n};\n\nconst sequence = function (\n  animations: Array<CompositeAnimation>,\n): CompositeAnimation {\n  let current = 0;\n  return {\n    start: function (callback?: ?EndCallback, isLooping?: boolean) {\n      const onComplete = function (result: EndResult) {\n        if (!result.finished) {\n          callback && callback(result);\n          return;\n        }\n\n        current++;\n\n        if (current === animations.length) {\n          // if the start is called, even without a reset, it should start from the beginning\n          current = 0;\n          callback && callback(result);\n          return;\n        }\n\n        animations[current].start(onComplete, isLooping);\n      };\n\n      if (animations.length === 0) {\n        callback && callback({finished: true});\n      } else {\n        animations[current].start(onComplete, isLooping);\n      }\n    },\n\n    stop: function () {\n      if (current < animations.length) {\n        animations[current].stop();\n      }\n    },\n\n    reset: function () {\n      animations.forEach((animation, idx) => {\n        if (idx <= current) {\n          animation.reset();\n        }\n      });\n      current = 0;\n    },\n\n    _startNativeLoop: function () {\n      throw new Error(\n        'Loops run using the native driver cannot contain Animated.sequence animations',\n      );\n    },\n\n    _isUsingNativeDriver: function (): boolean {\n      return false;\n    },\n  };\n};\n\ntype ParallelConfig = {\n  // If one is stopped, stop all.  default: true\n  stopTogether?: boolean,\n  ...\n};\nconst parallel = function (\n  animations: Array<CompositeAnimation>,\n  config?: ?ParallelConfig,\n): CompositeAnimation {\n  let doneCount = 0;\n  // Make sure we only call stop() at most once for each animation\n  const hasEnded: {[number]: boolean} = {};\n  const stopTogether = !(config && config.stopTogether === false);\n\n  const result = {\n    start: function (callback?: ?EndCallback) {\n      if (doneCount === animations.length) {\n        callback && callback({finished: true});\n        return;\n      }\n\n      animations.forEach((animation, idx) => {\n        const cb = function (endResult: EndResult) {\n          hasEnded[idx] = true;\n          doneCount++;\n          if (doneCount === animations.length) {\n            doneCount = 0;\n            callback && callback(endResult);\n            return;\n          }\n\n          if (!endResult.finished && stopTogether) {\n            result.stop();\n          }\n        };\n\n        if (!animation) {\n          cb({finished: true});\n        } else {\n          animation.start(cb);\n        }\n      });\n    },\n\n    stop: function (): void {\n      animations.forEach((animation, idx) => {\n        !hasEnded[idx] && animation.stop();\n        hasEnded[idx] = true;\n      });\n    },\n\n    reset: function (): void {\n      animations.forEach((animation, idx) => {\n        animation.reset();\n        hasEnded[idx] = false;\n        doneCount = 0;\n      });\n    },\n\n    _startNativeLoop: function (): empty {\n      throw new Error(\n        'Loops run using the native driver cannot contain Animated.parallel animations',\n      );\n    },\n\n    _isUsingNativeDriver: function (): boolean {\n      return false;\n    },\n  };\n\n  return result;\n};\n\nconst delay = function (time: number): CompositeAnimation {\n  // Would be nice to make a specialized implementation\n  return timing(new AnimatedValue(0), {\n    toValue: 0,\n    delay: time,\n    duration: 0,\n    useNativeDriver: false,\n  });\n};\n\nconst stagger = function (\n  time: number,\n  animations: Array<CompositeAnimation>,\n): CompositeAnimation {\n  return parallel(\n    animations.map((animation, i) => {\n      return sequence([delay(time * i), animation]);\n    }),\n  );\n};\n\ntype LoopAnimationConfig = {\n  iterations: number,\n  resetBeforeIteration?: boolean,\n  ...\n};\n\nconst loop = function (\n  animation: CompositeAnimation,\n  // $FlowFixMe[prop-missing]\n  {iterations = -1, resetBeforeIteration = true}: LoopAnimationConfig = {},\n): CompositeAnimation {\n  let isFinished = false;\n  let iterationsSoFar = 0;\n  return {\n    start: function (callback?: ?EndCallback) {\n      const restart = function (result: EndResult = {finished: true}): void {\n        if (\n          isFinished ||\n          iterationsSoFar === iterations ||\n          result.finished === false\n        ) {\n          callback && callback(result);\n        } else {\n          iterationsSoFar++;\n          resetBeforeIteration && animation.reset();\n          animation.start(restart, iterations === -1);\n        }\n      };\n      if (!animation || iterations === 0) {\n        callback && callback({finished: true});\n      } else {\n        if (animation._isUsingNativeDriver()) {\n          animation._startNativeLoop(iterations);\n        } else {\n          restart(); // Start looping recursively on the js thread\n        }\n      }\n    },\n\n    stop: function (): void {\n      isFinished = true;\n      animation.stop();\n    },\n\n    reset: function (): void {\n      iterationsSoFar = 0;\n      isFinished = false;\n      animation.reset();\n    },\n\n    _startNativeLoop: function () {\n      throw new Error(\n        'Loops run using the native driver cannot contain Animated.loop animations',\n      );\n    },\n\n    _isUsingNativeDriver: function (): boolean {\n      return animation._isUsingNativeDriver();\n    },\n  };\n};\n\nfunction forkEvent(\n  event: ?AnimatedEvent | ?Function,\n  listener: Function,\n): AnimatedEvent | Function {\n  if (!event) {\n    return listener;\n  } else if (event instanceof AnimatedEvent) {\n    event.__addListener(listener);\n    return event;\n  } else {\n    return (...args) => {\n      typeof event === 'function' && event(...args);\n      listener(...args);\n    };\n  }\n}\n\nfunction unforkEvent(\n  event: ?AnimatedEvent | ?Function,\n  listener: Function,\n): void {\n  if (event && event instanceof AnimatedEvent) {\n    event.__removeListener(listener);\n  }\n}\n\nconst event = function (\n  argMapping: $ReadOnlyArray<?Mapping>,\n  config: EventConfig,\n): any {\n  const animatedEvent = new AnimatedEvent(argMapping, config);\n  if (animatedEvent.__isNative) {\n    return animatedEvent;\n  } else {\n    return animatedEvent.__getHandler();\n  }\n};\n\n// All types of animated nodes that represent scalar numbers and can be interpolated (etc)\ntype AnimatedNumeric =\n  | AnimatedAddition\n  | AnimatedDiffClamp\n  | AnimatedDivision\n  | AnimatedInterpolation<number>\n  | AnimatedModulo\n  | AnimatedMultiplication\n  | AnimatedSubtraction\n  | AnimatedValue;\n\nexport type {AnimatedNumeric as Numeric};\n\n/**\n * The `Animated` library is designed to make animations fluid, powerful, and\n * easy to build and maintain. `Animated` focuses on declarative relationships\n * between inputs and outputs, with configurable transforms in between, and\n * simple `start`/`stop` methods to control time-based animation execution.\n * If additional transforms are added, be sure to include them in\n * AnimatedMock.js as well.\n *\n * See https://reactnative.dev/docs/animated\n */\nexport default {\n  /**\n   * Standard value class for driving animations.  Typically initialized with\n   * `new Animated.Value(0);`\n   *\n   * See https://reactnative.dev/docs/animated#value\n   */\n  Value: AnimatedValue,\n  /**\n   * 2D value class for driving 2D animations, such as pan gestures.\n   *\n   * See https://reactnative.dev/docs/animatedvaluexy\n   */\n  ValueXY: AnimatedValueXY,\n  /**\n   * Value class for driving color animations.\n   */\n  Color: AnimatedColor,\n  /**\n   * Exported to use the Interpolation type in flow.\n   *\n   * See https://reactnative.dev/docs/animated#interpolation\n   */\n  Interpolation: AnimatedInterpolation,\n  /**\n   * Exported for ease of type checking. All animated values derive from this\n   * class.\n   *\n   * See https://reactnative.dev/docs/animated#node\n   */\n  Node: AnimatedNode,\n\n  /**\n   * Animates a value from an initial velocity to zero based on a decay\n   * coefficient.\n   *\n   * See https://reactnative.dev/docs/animated#decay\n   */\n  decay,\n  /**\n   * Animates a value along a timed easing curve. The Easing module has tons of\n   * predefined curves, or you can use your own function.\n   *\n   * See https://reactnative.dev/docs/animated#timing\n   */\n  timing,\n  /**\n   * Animates a value according to an analytical spring model based on\n   * damped harmonic oscillation.\n   *\n   * See https://reactnative.dev/docs/animated#spring\n   */\n  spring,\n\n  /**\n   * Creates a new Animated value composed from two Animated values added\n   * together.\n   *\n   * See https://reactnative.dev/docs/animated#add\n   */\n  add,\n\n  /**\n   * Creates a new Animated value composed by subtracting the second Animated\n   * value from the first Animated value.\n   *\n   * See https://reactnative.dev/docs/animated#subtract\n   */\n  subtract,\n\n  /**\n   * Creates a new Animated value composed by dividing the first Animated value\n   * by the second Animated value.\n   *\n   * See https://reactnative.dev/docs/animated#divide\n   */\n  divide,\n\n  /**\n   * Creates a new Animated value composed from two Animated values multiplied\n   * together.\n   *\n   * See https://reactnative.dev/docs/animated#multiply\n   */\n  multiply,\n\n  /**\n   * Creates a new Animated value that is the (non-negative) modulo of the\n   * provided Animated value.\n   *\n   * See https://reactnative.dev/docs/animated#modulo\n   */\n  modulo,\n\n  /**\n   * Create a new Animated value that is limited between 2 values. It uses the\n   * difference between the last value so even if the value is far from the\n   * bounds it will start changing when the value starts getting closer again.\n   *\n   * See https://reactnative.dev/docs/animated#diffclamp\n   */\n  diffClamp,\n\n  /**\n   * Starts an animation after the given delay.\n   *\n   * See https://reactnative.dev/docs/animated#delay\n   */\n  delay,\n  /**\n   * Starts an array of animations in order, waiting for each to complete\n   * before starting the next. If the current running animation is stopped, no\n   * following animations will be started.\n   *\n   * See https://reactnative.dev/docs/animated#sequence\n   */\n  sequence,\n  /**\n   * Starts an array of animations all at the same time. By default, if one\n   * of the animations is stopped, they will all be stopped. You can override\n   * this with the `stopTogether` flag.\n   *\n   * See https://reactnative.dev/docs/animated#parallel\n   */\n  parallel,\n  /**\n   * Array of animations may run in parallel (overlap), but are started in\n   * sequence with successive delays.  Nice for doing trailing effects.\n   *\n   * See https://reactnative.dev/docs/animated#stagger\n   */\n  stagger,\n  /**\n   * Loops a given animation continuously, so that each time it reaches the\n   * end, it resets and begins again from the start.\n   *\n   * See https://reactnative.dev/docs/animated#loop\n   */\n  loop,\n\n  /**\n   * Takes an array of mappings and extracts values from each arg accordingly,\n   * then calls `setValue` on the mapped outputs.\n   *\n   * See https://reactnative.dev/docs/animated#event\n   */\n  event,\n\n  /**\n   * Make any React component Animatable.  Used to create `Animated.View`, etc.\n   *\n   * See https://reactnative.dev/docs/animated#createanimatedcomponent\n   */\n  createAnimatedComponent,\n\n  /**\n   * Imperative API to attach an animated value to an event on a view. Prefer\n   * using `Animated.event` with `useNativeDrive: true` if possible.\n   *\n   * See https://reactnative.dev/docs/animated#attachnativeevent\n   */\n  attachNativeEvent,\n\n  /**\n   * Advanced imperative API for snooping on animated events that are passed in\n   * through props. Use values directly where possible.\n   *\n   * See https://reactnative.dev/docs/animated#forkevent\n   */\n  forkEvent,\n  unforkEvent,\n\n  /**\n   * Expose Event class, so it can be used as a type for type checkers.\n   */\n  Event: AnimatedEvent,\n};\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}