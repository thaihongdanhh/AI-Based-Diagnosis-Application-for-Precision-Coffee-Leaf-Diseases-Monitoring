{"ast":null,"code":"import NativeEventEmitter from \"../EventEmitter/NativeEventEmitter\";\nimport EventEmitter from \"../vendor/emitter/EventEmitter\";\nimport { isAsyncDebugging } from \"./DebugEnvironment\";\nimport invariant from 'invariant';\nlet lazyState;\nfunction getState() {\n  if (lazyState != null) {\n    return lazyState;\n  }\n  const eventEmitter = new EventEmitter();\n  const NativeAppearance = require(\"./NativeAppearance\").default;\n  if (NativeAppearance == null) {\n    lazyState = {\n      NativeAppearance: null,\n      appearance: null,\n      eventEmitter\n    };\n  } else {\n    const state = {\n      NativeAppearance,\n      appearance: null,\n      eventEmitter\n    };\n    new NativeEventEmitter(NativeAppearance).addListener('appearanceChanged', newAppearance => {\n      state.appearance = {\n        colorScheme: toColorScheme(newAppearance.colorScheme)\n      };\n      eventEmitter.emit('change', state.appearance);\n    });\n    lazyState = state;\n  }\n  return lazyState;\n}\nexport function getColorScheme() {\n  if (__DEV__) {\n    if (isAsyncDebugging) {\n      return 'light';\n    }\n  }\n  let colorScheme = null;\n  const state = getState();\n  const {\n    NativeAppearance\n  } = state;\n  if (NativeAppearance != null) {\n    if (state.appearance == null) {\n      state.appearance = {\n        colorScheme: toColorScheme(NativeAppearance.getColorScheme())\n      };\n    }\n    colorScheme = state.appearance.colorScheme;\n  }\n  return colorScheme;\n}\nexport function setColorScheme(colorScheme) {\n  const state = getState();\n  const {\n    NativeAppearance\n  } = state;\n  if (NativeAppearance != null) {\n    NativeAppearance.setColorScheme(colorScheme ?? 'unspecified');\n    state.appearance = {\n      colorScheme\n    };\n  }\n}\nexport function addChangeListener(listener) {\n  const {\n    eventEmitter\n  } = getState();\n  return eventEmitter.addListener('change', listener);\n}\nfunction toColorScheme(colorScheme) {\n  invariant(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, \"Unrecognized color scheme. Did you mean 'dark', 'light' or null?\");\n  return colorScheme;\n}","map":{"version":3,"names":["NativeEventEmitter","EventEmitter","isAsyncDebugging","invariant","lazyState","getState","eventEmitter","NativeAppearance","require","default","appearance","state","addListener","newAppearance","colorScheme","toColorScheme","emit","getColorScheme","__DEV__","setColorScheme","addChangeListener","listener"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Utilities/Appearance.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\nimport type {AppearancePreferences, ColorSchemeName} from './NativeAppearance';\nimport typeof INativeAppearance from './NativeAppearance';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport {isAsyncDebugging} from './DebugEnvironment';\nimport invariant from 'invariant';\n\ntype Appearance = {\n  colorScheme: ?ColorSchemeName,\n};\n\nlet lazyState: ?{\n  +NativeAppearance: INativeAppearance,\n  // Cache the color scheme to reduce the cost of reading it between changes.\n  // NOTE: If `NativeAppearance` is null, this will always be null.\n  appearance: ?Appearance,\n  // NOTE: This is non-nullable to make it easier for `onChangedListener` to\n  // return a non-nullable `EventSubscription` value. This is not the common\n  // path, so we do not have to over-optimize it.\n  +eventEmitter: EventEmitter<{change: [Appearance]}>,\n};\n\n/**\n * Ensures that all state and listeners are lazily initialized correctly.\n */\nfunction getState(): $NonMaybeType<typeof lazyState> {\n  if (lazyState != null) {\n    return lazyState;\n  }\n  const eventEmitter = new EventEmitter<{change: [Appearance]}>();\n  // NOTE: Avoid initializing `NativeAppearance` until it is actually used.\n  const NativeAppearance = require('./NativeAppearance').default;\n  if (NativeAppearance == null) {\n    // Assign `null` to avoid re-initializing on subsequent invocations.\n    lazyState = {\n      NativeAppearance: null,\n      appearance: null,\n      eventEmitter,\n    };\n  } else {\n    const state: $NonMaybeType<typeof lazyState> = {\n      NativeAppearance,\n      appearance: null,\n      eventEmitter,\n    };\n    new NativeEventEmitter<{\n      appearanceChanged: [AppearancePreferences],\n    }>(NativeAppearance).addListener('appearanceChanged', newAppearance => {\n      state.appearance = {\n        colorScheme: toColorScheme(newAppearance.colorScheme),\n      };\n      eventEmitter.emit('change', state.appearance);\n    });\n    lazyState = state;\n  }\n  return lazyState;\n}\n\n/**\n * Returns the current color scheme preference. This value may change, so the\n * value should not be cached without either listening to changes or using\n * the `useColorScheme` hook.\n */\nexport function getColorScheme(): ?ColorSchemeName {\n  if (__DEV__) {\n    if (isAsyncDebugging) {\n      // Hard code light theme when using the async debugger as\n      // sync calls aren't supported\n      return 'light';\n    }\n  }\n  let colorScheme = null;\n  const state = getState();\n  const {NativeAppearance} = state;\n  if (NativeAppearance != null) {\n    if (state.appearance == null) {\n      // Lazily initialize `state.appearance`. This should only\n      // happen once because we never reassign a null value to it.\n      state.appearance = {\n        colorScheme: toColorScheme(NativeAppearance.getColorScheme()),\n      };\n    }\n    colorScheme = state.appearance.colorScheme;\n  }\n  return colorScheme;\n}\n\n/**\n * Updates the current color scheme to the supplied value.\n */\nexport function setColorScheme(colorScheme: ?ColorSchemeName): void {\n  const state = getState();\n  const {NativeAppearance} = state;\n  if (NativeAppearance != null) {\n    NativeAppearance.setColorScheme(colorScheme ?? 'unspecified');\n    state.appearance = {colorScheme};\n  }\n}\n\n/**\n * Add an event handler that is fired when appearance preferences change.\n */\nexport function addChangeListener(\n  listener: ({colorScheme: ?ColorSchemeName}) => void,\n): EventSubscription {\n  const {eventEmitter} = getState();\n  return eventEmitter.addListener('change', listener);\n}\n\n/**\n * TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union\n */\nfunction toColorScheme(colorScheme: ?string): ?ColorSchemeName {\n  invariant(\n    colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null,\n    \"Unrecognized color scheme. Did you mean 'dark', 'light' or null?\",\n  );\n  return colorScheme;\n}\n"],"mappings":"AAcA,OAAOA,kBAAkB;AACzB,OAAOC,YAAY;AACnB,SAAQC,gBAAgB;AACxB,OAAOC,SAAS,MAAM,WAAW;AAMjC,IAAIC,SASH;AAKD,SAASC,QAAQA,CAAA,EAAoC;EACnD,IAAID,SAAS,IAAI,IAAI,EAAE;IACrB,OAAOA,SAAS;EAClB;EACA,MAAME,YAAY,GAAG,IAAIL,YAAY,CAAyB,CAAC;EAE/D,MAAMM,gBAAgB,GAAGC,OAAO,qBAAqB,CAAC,CAACC,OAAO;EAC9D,IAAIF,gBAAgB,IAAI,IAAI,EAAE;IAE5BH,SAAS,GAAG;MACVG,gBAAgB,EAAE,IAAI;MACtBG,UAAU,EAAE,IAAI;MAChBJ;IACF,CAAC;EACH,CAAC,MAAM;IACL,MAAMK,KAAsC,GAAG;MAC7CJ,gBAAgB;MAChBG,UAAU,EAAE,IAAI;MAChBJ;IACF,CAAC;IACD,IAAIN,kBAAkB,CAEnBO,gBAAgB,CAAC,CAACK,WAAW,CAAC,mBAAmB,EAAEC,aAAa,IAAI;MACrEF,KAAK,CAACD,UAAU,GAAG;QACjBI,WAAW,EAAEC,aAAa,CAACF,aAAa,CAACC,WAAW;MACtD,CAAC;MACDR,YAAY,CAACU,IAAI,CAAC,QAAQ,EAAEL,KAAK,CAACD,UAAU,CAAC;IAC/C,CAAC,CAAC;IACFN,SAAS,GAAGO,KAAK;EACnB;EACA,OAAOP,SAAS;AAClB;AAOA,OAAO,SAASa,cAAcA,CAAA,EAAqB;EACjD,IAAIC,OAAO,EAAE;IACX,IAAIhB,gBAAgB,EAAE;MAGpB,OAAO,OAAO;IAChB;EACF;EACA,IAAIY,WAAW,GAAG,IAAI;EACtB,MAAMH,KAAK,GAAGN,QAAQ,CAAC,CAAC;EACxB,MAAM;IAACE;EAAgB,CAAC,GAAGI,KAAK;EAChC,IAAIJ,gBAAgB,IAAI,IAAI,EAAE;IAC5B,IAAII,KAAK,CAACD,UAAU,IAAI,IAAI,EAAE;MAG5BC,KAAK,CAACD,UAAU,GAAG;QACjBI,WAAW,EAAEC,aAAa,CAACR,gBAAgB,CAACU,cAAc,CAAC,CAAC;MAC9D,CAAC;IACH;IACAH,WAAW,GAAGH,KAAK,CAACD,UAAU,CAACI,WAAW;EAC5C;EACA,OAAOA,WAAW;AACpB;AAKA,OAAO,SAASK,cAAcA,CAACL,WAA6B,EAAQ;EAClE,MAAMH,KAAK,GAAGN,QAAQ,CAAC,CAAC;EACxB,MAAM;IAACE;EAAgB,CAAC,GAAGI,KAAK;EAChC,IAAIJ,gBAAgB,IAAI,IAAI,EAAE;IAC5BA,gBAAgB,CAACY,cAAc,CAACL,WAAW,IAAI,aAAa,CAAC;IAC7DH,KAAK,CAACD,UAAU,GAAG;MAACI;IAAW,CAAC;EAClC;AACF;AAKA,OAAO,SAASM,iBAAiBA,CAC/BC,QAAmD,EAChC;EACnB,MAAM;IAACf;EAAY,CAAC,GAAGD,QAAQ,CAAC,CAAC;EACjC,OAAOC,YAAY,CAACM,WAAW,CAAC,QAAQ,EAAES,QAAQ,CAAC;AACrD;AAKA,SAASN,aAAaA,CAACD,WAAoB,EAAoB;EAC7DX,SAAS,CACPW,WAAW,KAAK,MAAM,IAAIA,WAAW,KAAK,OAAO,IAAIA,WAAW,IAAI,IAAI,EACxE,kEACF,CAAC;EACD,OAAOA,WAAW;AACpB"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}