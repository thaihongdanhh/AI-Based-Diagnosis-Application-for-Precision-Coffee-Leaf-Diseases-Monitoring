{"ast":null,"code":"\"use strict\";\n\nif (__DEV__) {\n  (function () {\n    \"use strict\";\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === \"function\") {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n    }\n    var React = require(\"react\");\n    require(\"react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore\");\n    var ReactNativePrivateInterface = require(\"react-native/Libraries/ReactPrivate/ReactNativePrivateInterface\");\n    var Scheduler = require(\"scheduler\");\n    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function warn(format) {\n      {\n        {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n          printWarning(\"warn\", format, args);\n        }\n      }\n    }\n    function error(format) {\n      {\n        {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n          printWarning(\"error\", format, args);\n        }\n      }\n    }\n    function printWarning(level, format, args) {\n      {\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n        if (stack !== \"\") {\n          format += \"%s\";\n          args = args.concat([stack]);\n        }\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        });\n        argsWithFormat.unshift(\"Warning: \" + format);\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n    var isArrayImpl = Array.isArray;\n    function isArray(a) {\n      return isArrayImpl(a);\n    }\n    var hasError = false;\n    var caughtError = null;\n    var getFiberCurrentPropsFromNode$1 = null;\n    var getInstanceFromNode$1 = null;\n    var getNodeFromInstance$1 = null;\n    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {\n      getFiberCurrentPropsFromNode$1 = getFiberCurrentPropsFromNodeImpl;\n      getInstanceFromNode$1 = getInstanceFromNodeImpl;\n      getNodeFromInstance$1 = getNodeFromInstanceImpl;\n      {\n        if (!getNodeFromInstance$1 || !getInstanceFromNode$1) {\n          error(\"Injected \" + \"module is missing getNodeFromInstance or getInstanceFromNode.\");\n        }\n      }\n    }\n    function validateEventDispatches(event) {\n      {\n        var dispatchListeners = event._dispatchListeners;\n        var dispatchInstances = event._dispatchInstances;\n        var listenersIsArr = isArray(dispatchListeners);\n        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;\n        var instancesIsArr = isArray(dispatchInstances);\n        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;\n        if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {\n          error(\"EventPluginUtils: Invalid `event`.\");\n        }\n      }\n    }\n    function executeDispatch(event, listener, inst) {\n      event.currentTarget = getNodeFromInstance$1(inst);\n      try {\n        listener(event);\n      } catch (error) {\n        if (!hasError) {\n          hasError = true;\n          caughtError = error;\n        }\n      }\n      event.currentTarget = null;\n    }\n    function executeDispatchesInOrder(event) {\n      var dispatchListeners = event._dispatchListeners;\n      var dispatchInstances = event._dispatchInstances;\n      {\n        validateEventDispatches(event);\n      }\n      if (isArray(dispatchListeners)) {\n        for (var i = 0; i < dispatchListeners.length; i++) {\n          if (event.isPropagationStopped()) {\n            break;\n          }\n          executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);\n        }\n      } else if (dispatchListeners) {\n        executeDispatch(event, dispatchListeners, dispatchInstances);\n      }\n      event._dispatchListeners = null;\n      event._dispatchInstances = null;\n    }\n    function executeDispatchesInOrderStopAtTrueImpl(event) {\n      var dispatchListeners = event._dispatchListeners;\n      var dispatchInstances = event._dispatchInstances;\n      {\n        validateEventDispatches(event);\n      }\n      if (isArray(dispatchListeners)) {\n        for (var i = 0; i < dispatchListeners.length; i++) {\n          if (event.isPropagationStopped()) {\n            break;\n          }\n          if (dispatchListeners[i](event, dispatchInstances[i])) {\n            return dispatchInstances[i];\n          }\n        }\n      } else if (dispatchListeners) {\n        if (dispatchListeners(event, dispatchInstances)) {\n          return dispatchInstances;\n        }\n      }\n      return null;\n    }\n    function executeDispatchesInOrderStopAtTrue(event) {\n      var ret = executeDispatchesInOrderStopAtTrueImpl(event);\n      event._dispatchInstances = null;\n      event._dispatchListeners = null;\n      return ret;\n    }\n    function executeDirectDispatch(event) {\n      {\n        validateEventDispatches(event);\n      }\n      var dispatchListener = event._dispatchListeners;\n      var dispatchInstance = event._dispatchInstances;\n      if (isArray(dispatchListener)) {\n        throw new Error(\"Invalid `event`.\");\n      }\n      event.currentTarget = dispatchListener ? getNodeFromInstance$1(dispatchInstance) : null;\n      var res = dispatchListener ? dispatchListener(event) : null;\n      event.currentTarget = null;\n      event._dispatchListeners = null;\n      event._dispatchInstances = null;\n      return res;\n    }\n    function hasDispatches(event) {\n      return !!event._dispatchListeners;\n    }\n    function rethrowCaughtError() {\n      if (hasError) {\n        var error = caughtError;\n        hasError = false;\n        caughtError = null;\n        throw error;\n      }\n    }\n    var assign = Object.assign;\n    var EVENT_POOL_SIZE = 10;\n    var EventInterface = {\n      type: null,\n      target: null,\n      currentTarget: function () {\n        return null;\n      },\n      eventPhase: null,\n      bubbles: null,\n      cancelable: null,\n      timeStamp: function (event) {\n        return event.timeStamp || Date.now();\n      },\n      defaultPrevented: null,\n      isTrusted: null\n    };\n    function functionThatReturnsTrue() {\n      return true;\n    }\n    function functionThatReturnsFalse() {\n      return false;\n    }\n    function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {\n      {\n        delete this.nativeEvent;\n        delete this.preventDefault;\n        delete this.stopPropagation;\n        delete this.isDefaultPrevented;\n        delete this.isPropagationStopped;\n      }\n      this.dispatchConfig = dispatchConfig;\n      this._targetInst = targetInst;\n      this.nativeEvent = nativeEvent;\n      this._dispatchListeners = null;\n      this._dispatchInstances = null;\n      var Interface = this.constructor.Interface;\n      for (var propName in Interface) {\n        if (!Interface.hasOwnProperty(propName)) {\n          continue;\n        }\n        {\n          delete this[propName];\n        }\n        var normalize = Interface[propName];\n        if (normalize) {\n          this[propName] = normalize(nativeEvent);\n        } else {\n          if (propName === \"target\") {\n            this.target = nativeEventTarget;\n          } else {\n            this[propName] = nativeEvent[propName];\n          }\n        }\n      }\n      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n      if (defaultPrevented) {\n        this.isDefaultPrevented = functionThatReturnsTrue;\n      } else {\n        this.isDefaultPrevented = functionThatReturnsFalse;\n      }\n      this.isPropagationStopped = functionThatReturnsFalse;\n      return this;\n    }\n    assign(SyntheticEvent.prototype, {\n      preventDefault: function () {\n        this.defaultPrevented = true;\n        var event = this.nativeEvent;\n        if (!event) {\n          return;\n        }\n        if (event.preventDefault) {\n          event.preventDefault();\n        } else if (typeof event.returnValue !== \"unknown\") {\n          event.returnValue = false;\n        }\n        this.isDefaultPrevented = functionThatReturnsTrue;\n      },\n      stopPropagation: function () {\n        var event = this.nativeEvent;\n        if (!event) {\n          return;\n        }\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        } else if (typeof event.cancelBubble !== \"unknown\") {\n          event.cancelBubble = true;\n        }\n        this.isPropagationStopped = functionThatReturnsTrue;\n      },\n      persist: function () {\n        this.isPersistent = functionThatReturnsTrue;\n      },\n      isPersistent: functionThatReturnsFalse,\n      destructor: function () {\n        var Interface = this.constructor.Interface;\n        for (var propName in Interface) {\n          {\n            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));\n          }\n        }\n        this.dispatchConfig = null;\n        this._targetInst = null;\n        this.nativeEvent = null;\n        this.isDefaultPrevented = functionThatReturnsFalse;\n        this.isPropagationStopped = functionThatReturnsFalse;\n        this._dispatchListeners = null;\n        this._dispatchInstances = null;\n        {\n          Object.defineProperty(this, \"nativeEvent\", getPooledWarningPropertyDefinition(\"nativeEvent\", null));\n          Object.defineProperty(this, \"isDefaultPrevented\", getPooledWarningPropertyDefinition(\"isDefaultPrevented\", functionThatReturnsFalse));\n          Object.defineProperty(this, \"isPropagationStopped\", getPooledWarningPropertyDefinition(\"isPropagationStopped\", functionThatReturnsFalse));\n          Object.defineProperty(this, \"preventDefault\", getPooledWarningPropertyDefinition(\"preventDefault\", function () {}));\n          Object.defineProperty(this, \"stopPropagation\", getPooledWarningPropertyDefinition(\"stopPropagation\", function () {}));\n        }\n      }\n    });\n    SyntheticEvent.Interface = EventInterface;\n    SyntheticEvent.extend = function (Interface) {\n      var Super = this;\n      var E = function () {};\n      E.prototype = Super.prototype;\n      var prototype = new E();\n      function Class() {\n        return Super.apply(this, arguments);\n      }\n      assign(prototype, Class.prototype);\n      Class.prototype = prototype;\n      Class.prototype.constructor = Class;\n      Class.Interface = assign({}, Super.Interface, Interface);\n      Class.extend = Super.extend;\n      addEventPoolingTo(Class);\n      return Class;\n    };\n    addEventPoolingTo(SyntheticEvent);\n    function getPooledWarningPropertyDefinition(propName, getVal) {\n      function set(val) {\n        var action = isFunction ? \"setting the method\" : \"setting the property\";\n        warn(action, \"This is effectively a no-op\");\n        return val;\n      }\n      function get() {\n        var action = isFunction ? \"accessing the method\" : \"accessing the property\";\n        var result = isFunction ? \"This is a no-op function\" : \"This is set to null\";\n        warn(action, result);\n        return getVal;\n      }\n      function warn(action, result) {\n        {\n          error(\"This synthetic event is reused for performance reasons. If you're seeing this, \" + \"you're %s `%s` on a released/nullified synthetic event. %s. \" + \"If you must keep the original synthetic event around, use event.persist(). \" + \"See https://react.dev/link/event-pooling for more information.\", action, propName, result);\n        }\n      }\n      var isFunction = typeof getVal === \"function\";\n      return {\n        configurable: true,\n        set: set,\n        get: get\n      };\n    }\n    function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {\n      var EventConstructor = this;\n      if (EventConstructor.eventPool.length) {\n        var instance = EventConstructor.eventPool.pop();\n        EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);\n        return instance;\n      }\n      return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);\n    }\n    function releasePooledEvent(event) {\n      var EventConstructor = this;\n      if (!(event instanceof EventConstructor)) {\n        throw new Error(\"Trying to release an event instance into a pool of a different type.\");\n      }\n      event.destructor();\n      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {\n        EventConstructor.eventPool.push(event);\n      }\n    }\n    function addEventPoolingTo(EventConstructor) {\n      EventConstructor.getPooled = createOrGetPooledEvent;\n      EventConstructor.eventPool = [];\n      EventConstructor.release = releasePooledEvent;\n    }\n    var ResponderSyntheticEvent = SyntheticEvent.extend({\n      touchHistory: function (nativeEvent) {\n        return null;\n      }\n    });\n    var TOP_TOUCH_START = \"topTouchStart\";\n    var TOP_TOUCH_MOVE = \"topTouchMove\";\n    var TOP_TOUCH_END = \"topTouchEnd\";\n    var TOP_TOUCH_CANCEL = \"topTouchCancel\";\n    var TOP_SCROLL = \"topScroll\";\n    var TOP_SELECTION_CHANGE = \"topSelectionChange\";\n    function isStartish(topLevelType) {\n      return topLevelType === TOP_TOUCH_START;\n    }\n    function isMoveish(topLevelType) {\n      return topLevelType === TOP_TOUCH_MOVE;\n    }\n    function isEndish(topLevelType) {\n      return topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL;\n    }\n    var startDependencies = [TOP_TOUCH_START];\n    var moveDependencies = [TOP_TOUCH_MOVE];\n    var endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];\n    var MAX_TOUCH_BANK = 20;\n    var touchBank = [];\n    var touchHistory = {\n      touchBank: touchBank,\n      numberActiveTouches: 0,\n      indexOfSingleActiveTouch: -1,\n      mostRecentTimeStamp: 0\n    };\n    function timestampForTouch(touch) {\n      return touch.timeStamp || touch.timestamp;\n    }\n    function createTouchRecord(touch) {\n      return {\n        touchActive: true,\n        startPageX: touch.pageX,\n        startPageY: touch.pageY,\n        startTimeStamp: timestampForTouch(touch),\n        currentPageX: touch.pageX,\n        currentPageY: touch.pageY,\n        currentTimeStamp: timestampForTouch(touch),\n        previousPageX: touch.pageX,\n        previousPageY: touch.pageY,\n        previousTimeStamp: timestampForTouch(touch)\n      };\n    }\n    function resetTouchRecord(touchRecord, touch) {\n      touchRecord.touchActive = true;\n      touchRecord.startPageX = touch.pageX;\n      touchRecord.startPageY = touch.pageY;\n      touchRecord.startTimeStamp = timestampForTouch(touch);\n      touchRecord.currentPageX = touch.pageX;\n      touchRecord.currentPageY = touch.pageY;\n      touchRecord.currentTimeStamp = timestampForTouch(touch);\n      touchRecord.previousPageX = touch.pageX;\n      touchRecord.previousPageY = touch.pageY;\n      touchRecord.previousTimeStamp = timestampForTouch(touch);\n    }\n    function getTouchIdentifier(_ref) {\n      var identifier = _ref.identifier;\n      if (identifier == null) {\n        throw new Error(\"Touch object is missing identifier.\");\n      }\n      {\n        if (identifier > MAX_TOUCH_BANK) {\n          error(\"Touch identifier %s is greater than maximum supported %s which causes \" + \"performance issues backfilling array locations for all of the indices.\", identifier, MAX_TOUCH_BANK);\n        }\n      }\n      return identifier;\n    }\n    function recordTouchStart(touch) {\n      var identifier = getTouchIdentifier(touch);\n      var touchRecord = touchBank[identifier];\n      if (touchRecord) {\n        resetTouchRecord(touchRecord, touch);\n      } else {\n        touchBank[identifier] = createTouchRecord(touch);\n      }\n      touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n    }\n    function recordTouchMove(touch) {\n      var touchRecord = touchBank[getTouchIdentifier(touch)];\n      if (touchRecord) {\n        touchRecord.touchActive = true;\n        touchRecord.previousPageX = touchRecord.currentPageX;\n        touchRecord.previousPageY = touchRecord.currentPageY;\n        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n        touchRecord.currentPageX = touch.pageX;\n        touchRecord.currentPageY = touch.pageY;\n        touchRecord.currentTimeStamp = timestampForTouch(touch);\n        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n      } else {\n        {\n          warn(\"Cannot record touch move without a touch start.\\n\" + \"Touch Move: %s\\n\" + \"Touch Bank: %s\", printTouch(touch), printTouchBank());\n        }\n      }\n    }\n    function recordTouchEnd(touch) {\n      var touchRecord = touchBank[getTouchIdentifier(touch)];\n      if (touchRecord) {\n        touchRecord.touchActive = false;\n        touchRecord.previousPageX = touchRecord.currentPageX;\n        touchRecord.previousPageY = touchRecord.currentPageY;\n        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n        touchRecord.currentPageX = touch.pageX;\n        touchRecord.currentPageY = touch.pageY;\n        touchRecord.currentTimeStamp = timestampForTouch(touch);\n        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n      } else {\n        {\n          warn(\"Cannot record touch end without a touch start.\\n\" + \"Touch End: %s\\n\" + \"Touch Bank: %s\", printTouch(touch), printTouchBank());\n        }\n      }\n    }\n    function printTouch(touch) {\n      return JSON.stringify({\n        identifier: touch.identifier,\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        timestamp: timestampForTouch(touch)\n      });\n    }\n    function printTouchBank() {\n      var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n      if (touchBank.length > MAX_TOUCH_BANK) {\n        printed += \" (original size: \" + touchBank.length + \")\";\n      }\n      return printed;\n    }\n    var instrumentationCallback;\n    var ResponderTouchHistoryStore = {\n      instrument: function (callback) {\n        instrumentationCallback = callback;\n      },\n      recordTouchTrack: function (topLevelType, nativeEvent) {\n        if (instrumentationCallback != null) {\n          instrumentationCallback(topLevelType, nativeEvent);\n        }\n        if (isMoveish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchMove);\n        } else if (isStartish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchStart);\n          touchHistory.numberActiveTouches = nativeEvent.touches.length;\n          if (touchHistory.numberActiveTouches === 1) {\n            touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n          }\n        } else if (isEndish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchEnd);\n          touchHistory.numberActiveTouches = nativeEvent.touches.length;\n          if (touchHistory.numberActiveTouches === 1) {\n            for (var i = 0; i < touchBank.length; i++) {\n              var touchTrackToCheck = touchBank[i];\n              if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n                touchHistory.indexOfSingleActiveTouch = i;\n                break;\n              }\n            }\n            {\n              var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n              if (activeRecord == null || !activeRecord.touchActive) {\n                error(\"Cannot find single active touch.\");\n              }\n            }\n          }\n        }\n      },\n      touchHistory: touchHistory\n    };\n    function accumulate(current, next) {\n      if (next == null) {\n        throw new Error(\"Accumulated items must not be null or undefined.\");\n      }\n      if (current == null) {\n        return next;\n      }\n      if (isArray(current)) {\n        return current.concat(next);\n      }\n      if (isArray(next)) {\n        return [current].concat(next);\n      }\n      return [current, next];\n    }\n    function accumulateInto(current, next) {\n      if (next == null) {\n        throw new Error(\"Accumulated items must not be null or undefined.\");\n      }\n      if (current == null) {\n        return next;\n      }\n      if (isArray(current)) {\n        if (isArray(next)) {\n          current.push.apply(current, next);\n          return current;\n        }\n        current.push(next);\n        return current;\n      }\n      if (isArray(next)) {\n        return [current].concat(next);\n      }\n      return [current, next];\n    }\n    function forEachAccumulated(arr, cb, scope) {\n      if (Array.isArray(arr)) {\n        arr.forEach(cb, scope);\n      } else if (arr) {\n        cb.call(scope, arr);\n      }\n    }\n    var FunctionComponent = 0;\n    var ClassComponent = 1;\n    var IndeterminateComponent = 2;\n    var HostRoot = 3;\n    var HostPortal = 4;\n    var HostComponent = 5;\n    var HostText = 6;\n    var Fragment = 7;\n    var Mode = 8;\n    var ContextConsumer = 9;\n    var ContextProvider = 10;\n    var ForwardRef = 11;\n    var Profiler = 12;\n    var SuspenseComponent = 13;\n    var MemoComponent = 14;\n    var SimpleMemoComponent = 15;\n    var LazyComponent = 16;\n    var IncompleteClassComponent = 17;\n    var DehydratedFragment = 18;\n    var SuspenseListComponent = 19;\n    var ScopeComponent = 21;\n    var OffscreenComponent = 22;\n    var LegacyHiddenComponent = 23;\n    var CacheComponent = 24;\n    var TracingMarkerComponent = 25;\n    var HostHoistable = 26;\n    var HostSingleton = 27;\n    var responderInst = null;\n    var trackedTouchCount = 0;\n    function changeResponder(nextResponderInst, blockHostResponder) {\n      var oldResponderInst = responderInst;\n      responderInst = nextResponderInst;\n      if (ResponderEventPlugin.GlobalResponderHandler !== null) {\n        ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);\n      }\n    }\n    var eventTypes = {\n      startShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onStartShouldSetResponder\",\n          captured: \"onStartShouldSetResponderCapture\"\n        },\n        dependencies: startDependencies\n      },\n      scrollShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onScrollShouldSetResponder\",\n          captured: \"onScrollShouldSetResponderCapture\"\n        },\n        dependencies: [TOP_SCROLL]\n      },\n      selectionChangeShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onSelectionChangeShouldSetResponder\",\n          captured: \"onSelectionChangeShouldSetResponderCapture\"\n        },\n        dependencies: [TOP_SELECTION_CHANGE]\n      },\n      moveShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onMoveShouldSetResponder\",\n          captured: \"onMoveShouldSetResponderCapture\"\n        },\n        dependencies: moveDependencies\n      },\n      responderStart: {\n        registrationName: \"onResponderStart\",\n        dependencies: startDependencies\n      },\n      responderMove: {\n        registrationName: \"onResponderMove\",\n        dependencies: moveDependencies\n      },\n      responderEnd: {\n        registrationName: \"onResponderEnd\",\n        dependencies: endDependencies\n      },\n      responderRelease: {\n        registrationName: \"onResponderRelease\",\n        dependencies: endDependencies\n      },\n      responderTerminationRequest: {\n        registrationName: \"onResponderTerminationRequest\",\n        dependencies: []\n      },\n      responderGrant: {\n        registrationName: \"onResponderGrant\",\n        dependencies: []\n      },\n      responderReject: {\n        registrationName: \"onResponderReject\",\n        dependencies: []\n      },\n      responderTerminate: {\n        registrationName: \"onResponderTerminate\",\n        dependencies: []\n      }\n    };\n    function getParent$1(inst) {\n      do {\n        inst = inst.return;\n      } while (inst && inst.tag !== HostComponent);\n      if (inst) {\n        return inst;\n      }\n      return null;\n    }\n    function getLowestCommonAncestor(instA, instB) {\n      var depthA = 0;\n      for (var tempA = instA; tempA; tempA = getParent$1(tempA)) {\n        depthA++;\n      }\n      var depthB = 0;\n      for (var tempB = instB; tempB; tempB = getParent$1(tempB)) {\n        depthB++;\n      }\n      while (depthA - depthB > 0) {\n        instA = getParent$1(instA);\n        depthA--;\n      }\n      while (depthB - depthA > 0) {\n        instB = getParent$1(instB);\n        depthB--;\n      }\n      var depth = depthA;\n      while (depth--) {\n        if (instA === instB || instA === instB.alternate) {\n          return instA;\n        }\n        instA = getParent$1(instA);\n        instB = getParent$1(instB);\n      }\n      return null;\n    }\n    function isAncestor(instA, instB) {\n      while (instB) {\n        if (instA === instB || instA === instB.alternate) {\n          return true;\n        }\n        instB = getParent$1(instB);\n      }\n      return false;\n    }\n    function traverseTwoPhase$1(inst, fn, arg) {\n      var path = [];\n      while (inst) {\n        path.push(inst);\n        inst = getParent$1(inst);\n      }\n      var i;\n      for (i = path.length; i-- > 0;) {\n        fn(path[i], \"captured\", arg);\n      }\n      for (i = 0; i < path.length; i++) {\n        fn(path[i], \"bubbled\", arg);\n      }\n    }\n    function getListener$1(inst, registrationName) {\n      var stateNode = inst.stateNode;\n      if (stateNode === null) {\n        return null;\n      }\n      var props = getFiberCurrentPropsFromNode$1(stateNode);\n      if (props === null) {\n        return null;\n      }\n      var listener = props[registrationName];\n      if (listener && typeof listener !== \"function\") {\n        throw new Error(\"Expected `\" + registrationName + \"` listener to be a function, instead got a value of `\" + typeof listener + \"` type.\");\n      }\n      return listener;\n    }\n    function listenerAtPhase$1(inst, event, propagationPhase) {\n      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n      return getListener$1(inst, registrationName);\n    }\n    function accumulateDirectionalDispatches$1(inst, phase, event) {\n      {\n        if (!inst) {\n          error(\"Dispatching inst must not be null\");\n        }\n      }\n      var listener = listenerAtPhase$1(inst, event, phase);\n      if (listener) {\n        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n      }\n    }\n    function accumulateDispatches$1(inst, ignoredDirection, event) {\n      if (inst && event && event.dispatchConfig.registrationName) {\n        var registrationName = event.dispatchConfig.registrationName;\n        var listener = getListener$1(inst, registrationName);\n        if (listener) {\n          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n        }\n      }\n    }\n    function accumulateDirectDispatchesSingle$1(event) {\n      if (event && event.dispatchConfig.registrationName) {\n        accumulateDispatches$1(event._targetInst, null, event);\n      }\n    }\n    function accumulateDirectDispatches$1(events) {\n      forEachAccumulated(events, accumulateDirectDispatchesSingle$1);\n    }\n    function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        var targetInst = event._targetInst;\n        var parentInst = targetInst ? getParent$1(targetInst) : null;\n        traverseTwoPhase$1(parentInst, accumulateDirectionalDispatches$1, event);\n      }\n    }\n    function accumulateTwoPhaseDispatchesSkipTarget(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n    }\n    function accumulateTwoPhaseDispatchesSingle$1(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event);\n      }\n    }\n    function accumulateTwoPhaseDispatches$1(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle$1);\n    }\n    function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n      var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === TOP_SELECTION_CHANGE ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;\n      var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);\n      var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;\n      var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);\n      shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      if (skipOverBubbleShouldSetFrom) {\n        accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);\n      } else {\n        accumulateTwoPhaseDispatches$1(shouldSetEvent);\n      }\n      var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);\n      if (!shouldSetEvent.isPersistent()) {\n        shouldSetEvent.constructor.release(shouldSetEvent);\n      }\n      if (!wantsResponderInst || wantsResponderInst === responderInst) {\n        return null;\n      }\n      var extracted;\n      var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);\n      grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches$1(grantEvent);\n      var blockHostResponder = executeDirectDispatch(grantEvent) === true;\n      if (responderInst) {\n        var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);\n        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n        accumulateDirectDispatches$1(terminationRequestEvent);\n        var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);\n        if (!terminationRequestEvent.isPersistent()) {\n          terminationRequestEvent.constructor.release(terminationRequestEvent);\n        }\n        if (shouldSwitch) {\n          var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);\n          terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(terminateEvent);\n          extracted = accumulate(extracted, [grantEvent, terminateEvent]);\n          changeResponder(wantsResponderInst, blockHostResponder);\n        } else {\n          var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);\n          rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(rejectEvent);\n          extracted = accumulate(extracted, rejectEvent);\n        }\n      } else {\n        extracted = accumulate(extracted, grantEvent);\n        changeResponder(wantsResponderInst, blockHostResponder);\n      }\n      return extracted;\n    }\n    function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {\n      return topLevelInst && (topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE || isStartish(topLevelType) || isMoveish(topLevelType));\n    }\n    function noResponderTouches(nativeEvent) {\n      var touches = nativeEvent.touches;\n      if (!touches || touches.length === 0) {\n        return true;\n      }\n      for (var i = 0; i < touches.length; i++) {\n        var activeTouch = touches[i];\n        var target = activeTouch.target;\n        if (target !== null && target !== undefined && target !== 0) {\n          var targetInst = getInstanceFromNode$1(target);\n          if (isAncestor(responderInst, targetInst)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    var ResponderEventPlugin = {\n      _getResponder: function () {\n        return responderInst;\n      },\n      eventTypes: eventTypes,\n      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {\n        if (isStartish(topLevelType)) {\n          trackedTouchCount += 1;\n        } else if (isEndish(topLevelType)) {\n          if (trackedTouchCount >= 0) {\n            trackedTouchCount -= 1;\n          } else {\n            {\n              warn(\"Ended a touch event which was not counted in `trackedTouchCount`.\");\n            }\n            return null;\n          }\n        }\n        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);\n        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;\n        var isResponderTouchStart = responderInst && isStartish(topLevelType);\n        var isResponderTouchMove = responderInst && isMoveish(topLevelType);\n        var isResponderTouchEnd = responderInst && isEndish(topLevelType);\n        var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;\n        if (incrementalTouch) {\n          var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);\n          gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(gesture);\n          extracted = accumulate(extracted, gesture);\n        }\n        var isResponderTerminate = responderInst && topLevelType === TOP_TOUCH_CANCEL;\n        var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);\n        var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;\n        if (finalTouch) {\n          var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);\n          finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(finalEvent);\n          extracted = accumulate(extracted, finalEvent);\n          changeResponder(null);\n        }\n        return extracted;\n      },\n      GlobalResponderHandler: null,\n      injection: {\n        injectGlobalResponderHandler: function (GlobalResponderHandler) {\n          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;\n        }\n      }\n    };\n    var eventPluginOrder = null;\n    var namesToPlugins = {};\n    function recomputePluginOrdering() {\n      if (!eventPluginOrder) {\n        return;\n      }\n      for (var pluginName in namesToPlugins) {\n        var pluginModule = namesToPlugins[pluginName];\n        var pluginIndex = eventPluginOrder.indexOf(pluginName);\n        if (pluginIndex <= -1) {\n          throw new Error(\"EventPluginRegistry: Cannot inject event plugins that do not exist in \" + (\"the plugin ordering, `\" + pluginName + \"`.\"));\n        }\n        if (plugins[pluginIndex]) {\n          continue;\n        }\n        if (!pluginModule.extractEvents) {\n          throw new Error(\"EventPluginRegistry: Event plugins must implement an `extractEvents` \" + (\"method, but `\" + pluginName + \"` does not.\"));\n        }\n        plugins[pluginIndex] = pluginModule;\n        var publishedEvents = pluginModule.eventTypes;\n        for (var eventName in publishedEvents) {\n          if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {\n            throw new Error(\"EventPluginRegistry: Failed to publish event `\" + eventName + \"` for plugin `\" + pluginName + \"`.\");\n          }\n        }\n      }\n    }\n    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        throw new Error(\"EventPluginRegistry: More than one plugin attempted to publish the same \" + (\"event name, `\" + eventName + \"`.\"));\n      }\n      eventNameDispatchConfigs[eventName] = dispatchConfig;\n      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n      if (phasedRegistrationNames) {\n        for (var phaseName in phasedRegistrationNames) {\n          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n            var phasedRegistrationName = phasedRegistrationNames[phaseName];\n            publishRegistrationName(phasedRegistrationName, pluginModule);\n          }\n        }\n        return true;\n      } else if (dispatchConfig.registrationName) {\n        publishRegistrationName(dispatchConfig.registrationName, pluginModule);\n        return true;\n      }\n      return false;\n    }\n    function publishRegistrationName(registrationName, pluginModule, eventName) {\n      if (registrationNameModules[registrationName]) {\n        throw new Error(\"EventPluginRegistry: More than one plugin attempted to publish the same \" + (\"registration name, `\" + registrationName + \"`.\"));\n      }\n      registrationNameModules[registrationName] = pluginModule;\n      {\n        registrationName.toLowerCase();\n      }\n    }\n    var plugins = [];\n    var eventNameDispatchConfigs = {};\n    var registrationNameModules = {};\n    function injectEventPluginOrder(injectedEventPluginOrder) {\n      if (eventPluginOrder) {\n        throw new Error(\"EventPluginRegistry: Cannot inject event plugin ordering more than \" + \"once. You are likely trying to load more than one copy of React.\");\n      }\n      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n      recomputePluginOrdering();\n    }\n    function injectEventPluginsByName(injectedNamesToPlugins) {\n      var isOrderingDirty = false;\n      for (var pluginName in injectedNamesToPlugins) {\n        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n          continue;\n        }\n        var pluginModule = injectedNamesToPlugins[pluginName];\n        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {\n          if (namesToPlugins[pluginName]) {\n            throw new Error(\"EventPluginRegistry: Cannot inject two different event plugins \" + (\"using the same name, `\" + pluginName + \"`.\"));\n          }\n          namesToPlugins[pluginName] = pluginModule;\n          isOrderingDirty = true;\n        }\n      }\n      if (isOrderingDirty) {\n        recomputePluginOrdering();\n      }\n    }\n    function getListener(inst, registrationName) {\n      var stateNode = inst.stateNode;\n      if (stateNode === null) {\n        return null;\n      }\n      var props = getFiberCurrentPropsFromNode$1(stateNode);\n      if (props === null) {\n        return null;\n      }\n      var listener = props[registrationName];\n      if (listener && typeof listener !== \"function\") {\n        throw new Error(\"Expected `\" + registrationName + \"` listener to be a function, instead got a value of `\" + typeof listener + \"` type.\");\n      }\n      return listener;\n    }\n    var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,\n      customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;\n    function listenerAtPhase(inst, event, propagationPhase) {\n      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n      return getListener(inst, registrationName);\n    }\n    function accumulateDirectionalDispatches(inst, phase, event) {\n      {\n        if (!inst) {\n          error(\"Dispatching inst must not be null\");\n        }\n      }\n      var listener = listenerAtPhase(inst, event, phase);\n      if (listener) {\n        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n      }\n    }\n    function getParent(inst) {\n      do {\n        inst = inst.return;\n      } while (inst && inst.tag !== HostComponent);\n      if (inst) {\n        return inst;\n      }\n      return null;\n    }\n    function traverseTwoPhase(inst, fn, arg, skipBubbling) {\n      var path = [];\n      while (inst) {\n        path.push(inst);\n        inst = getParent(inst);\n      }\n      var i;\n      for (i = path.length; i-- > 0;) {\n        fn(path[i], \"captured\", arg);\n      }\n      if (skipBubbling) {\n        fn(path[0], \"bubbled\", arg);\n      } else {\n        for (i = 0; i < path.length; i++) {\n          fn(path[i], \"bubbled\", arg);\n        }\n      }\n    }\n    function accumulateTwoPhaseDispatchesSingle(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event, false);\n      }\n    }\n    function accumulateTwoPhaseDispatches(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n    }\n    function accumulateCapturePhaseDispatches(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event, true);\n      }\n    }\n    function accumulateDispatches(inst, ignoredDirection, event) {\n      if (inst && event && event.dispatchConfig.registrationName) {\n        var registrationName = event.dispatchConfig.registrationName;\n        var listener = getListener(inst, registrationName);\n        if (listener) {\n          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n        }\n      }\n    }\n    function accumulateDirectDispatchesSingle(event) {\n      if (event && event.dispatchConfig.registrationName) {\n        accumulateDispatches(event._targetInst, null, event);\n      }\n    }\n    function accumulateDirectDispatches(events) {\n      forEachAccumulated(events, accumulateDirectDispatchesSingle);\n    }\n    var ReactNativeBridgeEventPlugin = {\n      eventTypes: {},\n      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n        if (targetInst == null) {\n          return null;\n        }\n        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];\n        var directDispatchConfig = customDirectEventTypes[topLevelType];\n        if (!bubbleDispatchConfig && !directDispatchConfig) {\n          throw new Error('Unsupported top level event type \"' + topLevelType + '\" dispatched');\n        }\n        var event = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);\n        if (bubbleDispatchConfig) {\n          var skipBubbling = event != null && event.dispatchConfig.phasedRegistrationNames != null && event.dispatchConfig.phasedRegistrationNames.skipBubbling;\n          if (skipBubbling) {\n            accumulateCapturePhaseDispatches(event);\n          } else {\n            accumulateTwoPhaseDispatches(event);\n          }\n        } else if (directDispatchConfig) {\n          accumulateDirectDispatches(event);\n        } else {\n          return null;\n        }\n        return event;\n      }\n    };\n    var ReactNativeEventPluginOrder = [\"ResponderEventPlugin\", \"ReactNativeBridgeEventPlugin\"];\n    injectEventPluginOrder(ReactNativeEventPluginOrder);\n    injectEventPluginsByName({\n      ResponderEventPlugin: ResponderEventPlugin,\n      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin\n    });\n    var emptyObject$1 = {};\n    var removedKeys = null;\n    var removedKeyCount = 0;\n    var deepDifferOptions = {\n      unsafelyIgnoreFunctions: true\n    };\n    function defaultDiffer(prevProp, nextProp) {\n      if (typeof nextProp !== \"object\" || nextProp === null) {\n        return true;\n      } else {\n        return ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);\n      }\n    }\n    function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {\n      if (isArray(node)) {\n        var i = node.length;\n        while (i-- && removedKeyCount > 0) {\n          restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);\n        }\n      } else if (node && removedKeyCount > 0) {\n        var obj = node;\n        for (var propKey in removedKeys) {\n          if (!removedKeys[propKey]) {\n            continue;\n          }\n          var nextProp = obj[propKey];\n          if (nextProp === undefined) {\n            continue;\n          }\n          var attributeConfig = validAttributes[propKey];\n          if (!attributeConfig) {\n            continue;\n          }\n          if (typeof nextProp === \"function\") {\n            nextProp = true;\n          }\n          if (typeof nextProp === \"undefined\") {\n            nextProp = null;\n          }\n          if (typeof attributeConfig !== \"object\") {\n            updatePayload[propKey] = nextProp;\n          } else if (typeof attributeConfig.diff === \"function\" || typeof attributeConfig.process === \"function\") {\n            var nextValue = typeof attributeConfig.process === \"function\" ? attributeConfig.process(nextProp) : nextProp;\n            updatePayload[propKey] = nextValue;\n          }\n          removedKeys[propKey] = false;\n          removedKeyCount--;\n        }\n      }\n    }\n    function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {\n      var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;\n      var i;\n      for (i = 0; i < minLength; i++) {\n        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);\n      }\n      for (; i < prevArray.length; i++) {\n        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);\n      }\n      for (; i < nextArray.length; i++) {\n        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);\n      }\n      return updatePayload;\n    }\n    function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {\n      if (!updatePayload && prevProp === nextProp) {\n        return updatePayload;\n      }\n      if (!prevProp || !nextProp) {\n        if (nextProp) {\n          return addNestedProperty(updatePayload, nextProp, validAttributes);\n        }\n        if (prevProp) {\n          return clearNestedProperty(updatePayload, prevProp, validAttributes);\n        }\n        return updatePayload;\n      }\n      if (!isArray(prevProp) && !isArray(nextProp)) {\n        return diffProperties(updatePayload, prevProp, nextProp, validAttributes);\n      }\n      if (isArray(prevProp) && isArray(nextProp)) {\n        return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);\n      }\n      if (isArray(prevProp)) {\n        return diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes);\n      }\n      return diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);\n    }\n    function addNestedProperty(updatePayload, nextProp, validAttributes) {\n      if (!nextProp) {\n        return updatePayload;\n      }\n      if (!isArray(nextProp)) {\n        return addProperties(updatePayload, nextProp, validAttributes);\n      }\n      for (var i = 0; i < nextProp.length; i++) {\n        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);\n      }\n      return updatePayload;\n    }\n    function clearNestedProperty(updatePayload, prevProp, validAttributes) {\n      if (!prevProp) {\n        return updatePayload;\n      }\n      if (!isArray(prevProp)) {\n        return clearProperties(updatePayload, prevProp, validAttributes);\n      }\n      for (var i = 0; i < prevProp.length; i++) {\n        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);\n      }\n      return updatePayload;\n    }\n    function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {\n      var attributeConfig;\n      var nextProp;\n      var prevProp;\n      for (var propKey in nextProps) {\n        attributeConfig = validAttributes[propKey];\n        if (!attributeConfig) {\n          continue;\n        }\n        prevProp = prevProps[propKey];\n        nextProp = nextProps[propKey];\n        if (typeof nextProp === \"function\") {\n          nextProp = true;\n          if (typeof prevProp === \"function\") {\n            prevProp = true;\n          }\n        }\n        if (typeof nextProp === \"undefined\") {\n          nextProp = null;\n          if (typeof prevProp === \"undefined\") {\n            prevProp = null;\n          }\n        }\n        if (removedKeys) {\n          removedKeys[propKey] = false;\n        }\n        if (updatePayload && updatePayload[propKey] !== undefined) {\n          if (typeof attributeConfig !== \"object\") {\n            updatePayload[propKey] = nextProp;\n          } else if (typeof attributeConfig.diff === \"function\" || typeof attributeConfig.process === \"function\") {\n            var nextValue = typeof attributeConfig.process === \"function\" ? attributeConfig.process(nextProp) : nextProp;\n            updatePayload[propKey] = nextValue;\n          }\n          continue;\n        }\n        if (prevProp === nextProp) {\n          continue;\n        }\n        if (typeof attributeConfig !== \"object\") {\n          if (defaultDiffer(prevProp, nextProp)) {\n            (updatePayload || (updatePayload = {}))[propKey] = nextProp;\n          }\n        } else if (typeof attributeConfig.diff === \"function\" || typeof attributeConfig.process === \"function\") {\n          var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === \"function\" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));\n          if (shouldUpdate) {\n            var _nextValue = typeof attributeConfig.process === \"function\" ? attributeConfig.process(nextProp) : nextProp;\n            (updatePayload || (updatePayload = {}))[propKey] = _nextValue;\n          }\n        } else {\n          removedKeys = null;\n          removedKeyCount = 0;\n          updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);\n          if (removedKeyCount > 0 && updatePayload) {\n            restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);\n            removedKeys = null;\n          }\n        }\n      }\n      for (var _propKey in prevProps) {\n        if (nextProps[_propKey] !== undefined) {\n          continue;\n        }\n        attributeConfig = validAttributes[_propKey];\n        if (!attributeConfig) {\n          continue;\n        }\n        if (updatePayload && updatePayload[_propKey] !== undefined) {\n          continue;\n        }\n        prevProp = prevProps[_propKey];\n        if (prevProp === undefined) {\n          continue;\n        }\n        if (typeof attributeConfig !== \"object\" || typeof attributeConfig.diff === \"function\" || typeof attributeConfig.process === \"function\") {\n          (updatePayload || (updatePayload = {}))[_propKey] = null;\n          if (!removedKeys) {\n            removedKeys = {};\n          }\n          if (!removedKeys[_propKey]) {\n            removedKeys[_propKey] = true;\n            removedKeyCount++;\n          }\n        } else {\n          updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);\n        }\n      }\n      return updatePayload;\n    }\n    function addProperties(updatePayload, props, validAttributes) {\n      return diffProperties(updatePayload, emptyObject$1, props, validAttributes);\n    }\n    function clearProperties(updatePayload, prevProps, validAttributes) {\n      return diffProperties(updatePayload, prevProps, emptyObject$1, validAttributes);\n    }\n    function create(props, validAttributes) {\n      return addProperties(null, props, validAttributes);\n    }\n    function diff(prevProps, nextProps, validAttributes) {\n      return diffProperties(null, prevProps, nextProps, validAttributes);\n    }\n    var batchedUpdatesImpl = function (fn, bookkeeping) {\n      return fn(bookkeeping);\n    };\n    var isInsideEventHandler = false;\n    function batchedUpdates$1(fn, bookkeeping) {\n      if (isInsideEventHandler) {\n        return fn(bookkeeping);\n      }\n      isInsideEventHandler = true;\n      try {\n        return batchedUpdatesImpl(fn, bookkeeping);\n      } finally {\n        isInsideEventHandler = false;\n      }\n    }\n    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl) {\n      batchedUpdatesImpl = _batchedUpdatesImpl;\n    }\n    var eventQueue = null;\n    function executeDispatchesAndRelease(event) {\n      if (event) {\n        executeDispatchesInOrder(event);\n        if (!event.isPersistent()) {\n          event.constructor.release(event);\n        }\n      }\n    }\n    function executeDispatchesAndReleaseTopLevel(e) {\n      return executeDispatchesAndRelease(e);\n    }\n    function runEventsInBatch(events) {\n      if (events !== null) {\n        eventQueue = accumulateInto(eventQueue, events);\n      }\n      var processingEventQueue = eventQueue;\n      eventQueue = null;\n      if (!processingEventQueue) {\n        return;\n      }\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n      if (eventQueue) {\n        throw new Error(\"processEventQueue(): Additional events were enqueued while processing \" + \"an event queue. Support for this has not yet been implemented.\");\n      }\n      rethrowCaughtError();\n    }\n    function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n      var events = null;\n      var legacyPlugins = plugins;\n      for (var i = 0; i < legacyPlugins.length; i++) {\n        var possiblePlugin = legacyPlugins[i];\n        if (possiblePlugin) {\n          var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n          if (extractedEvents) {\n            events = accumulateInto(events, extractedEvents);\n          }\n        }\n      }\n      return events;\n    }\n    function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n      var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n      runEventsInBatch(events);\n    }\n    function dispatchEvent(target, topLevelType, nativeEvent) {\n      var targetFiber = target;\n      var eventTarget = null;\n      if (targetFiber != null) {\n        var stateNode = targetFiber.stateNode;\n        if (stateNode != null) {\n          eventTarget = getPublicInstance(stateNode);\n        }\n      }\n      batchedUpdates$1(function () {\n        var event = {\n          eventName: topLevelType,\n          nativeEvent: nativeEvent\n        };\n        ReactNativePrivateInterface.RawEventEmitter.emit(topLevelType, event);\n        ReactNativePrivateInterface.RawEventEmitter.emit(\"*\", event);\n        runExtractedPluginEventsInBatch(topLevelType, targetFiber, nativeEvent, eventTarget);\n      });\n    }\n    var enableSchedulingProfiler = false;\n    var enableProfilerTimer = true;\n    var enableProfilerCommitHooks = true;\n    var enableProfilerNestedUpdatePhase = true;\n    var syncLaneExpirationMs = 250;\n    var transitionLaneExpirationMs = 5000;\n    var enableLazyContextPropagation = false;\n    var enableLegacyHidden = false;\n    var enableAsyncActions = false;\n    var passChildrenWhenCloningPersistedNodes = false;\n    var enableBigIntSupport = false;\n    var NoFlags$1 = 0;\n    var PerformedWork = 1;\n    var Placement = 2;\n    var DidCapture = 128;\n    var Hydrating = 4096;\n    var Update = 4;\n    var ChildDeletion = 16;\n    var ContentReset = 32;\n    var Callback = 64;\n    var ForceClientRender = 256;\n    var Ref = 512;\n    var Snapshot = 1024;\n    var Passive$1 = 2048;\n    var Visibility = 8192;\n    var StoreConsistency = 16384;\n    var ScheduleRetry = StoreConsistency;\n    var ShouldSuspendCommit = Visibility;\n    var DidDefer = ContentReset;\n    var LifecycleEffectMask = Passive$1 | Update | Callback | Ref | Snapshot | StoreConsistency;\n    var HostEffectMask = 32767;\n    var Incomplete = 32768;\n    var ShouldCapture = 65536;\n    var ForceUpdateForLegacySuspense = 131072;\n    var Forked = 1048576;\n    var RefStatic = 2097152;\n    var LayoutStatic = 4194304;\n    var PassiveStatic = 8388608;\n    var MaySuspendCommit = 16777216;\n    var PlacementDEV = 33554432;\n    var MountLayoutDev = 67108864;\n    var MountPassiveDev = 134217728;\n    var BeforeMutationMask = Update | Snapshot | 0;\n    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\n    var LayoutMask = Update | Callback | Ref | Visibility;\n    var PassiveMask = Passive$1 | Visibility | ChildDeletion;\n    var StaticMask = LayoutStatic | PassiveStatic | RefStatic | MaySuspendCommit;\n    var scheduleCallback$2 = Scheduler.unstable_scheduleCallback;\n    var cancelCallback$1 = Scheduler.unstable_cancelCallback;\n    var shouldYield = Scheduler.unstable_shouldYield;\n    var requestPaint = Scheduler.unstable_requestPaint;\n    var now$1 = Scheduler.unstable_now;\n    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n    var NormalPriority = Scheduler.unstable_NormalPriority;\n    var IdlePriority = Scheduler.unstable_IdlePriority;\n    var disabledDepth = 0;\n    var prevLog;\n    var prevInfo;\n    var prevWarn;\n    var prevError;\n    var prevGroup;\n    var prevGroupCollapsed;\n    var prevGroupEnd;\n    function disabledLog() {}\n    disabledLog.__reactDisabledLog = true;\n    function disableLogs() {\n      {\n        if (disabledDepth === 0) {\n          prevLog = console.log;\n          prevInfo = console.info;\n          prevWarn = console.warn;\n          prevError = console.error;\n          prevGroup = console.group;\n          prevGroupCollapsed = console.groupCollapsed;\n          prevGroupEnd = console.groupEnd;\n          var props = {\n            configurable: true,\n            enumerable: true,\n            value: disabledLog,\n            writable: true\n          };\n          Object.defineProperties(console, {\n            info: props,\n            log: props,\n            warn: props,\n            error: props,\n            group: props,\n            groupCollapsed: props,\n            groupEnd: props\n          });\n        }\n        disabledDepth++;\n      }\n    }\n    function reenableLogs() {\n      {\n        disabledDepth--;\n        if (disabledDepth === 0) {\n          var props = {\n            configurable: true,\n            enumerable: true,\n            writable: true\n          };\n          Object.defineProperties(console, {\n            log: assign({}, props, {\n              value: prevLog\n            }),\n            info: assign({}, props, {\n              value: prevInfo\n            }),\n            warn: assign({}, props, {\n              value: prevWarn\n            }),\n            error: assign({}, props, {\n              value: prevError\n            }),\n            group: assign({}, props, {\n              value: prevGroup\n            }),\n            groupCollapsed: assign({}, props, {\n              value: prevGroupCollapsed\n            }),\n            groupEnd: assign({}, props, {\n              value: prevGroupEnd\n            })\n          });\n        }\n        if (disabledDepth < 0) {\n          error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n        }\n      }\n    }\n    var rendererID = null;\n    var injectedHook = null;\n    var hasLoggedError = false;\n    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\";\n    function injectInternals(internals) {\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === \"undefined\") {\n        return false;\n      }\n      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n      if (hook.isDisabled) {\n        return true;\n      }\n      if (!hook.supportsFiber) {\n        {\n          error(\"The installed version of React DevTools is too old and will not work \" + \"with the current version of React. Please update React DevTools. \" + \"https://react.dev/link/react-devtools\");\n        }\n        return true;\n      }\n      try {\n        if (enableSchedulingProfiler) ;\n        rendererID = hook.inject(internals);\n        injectedHook = hook;\n      } catch (err) {\n        {\n          error(\"React instrumentation encountered an error: %s.\", err);\n        }\n      }\n      if (hook.checkDCE) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    function onScheduleRoot(root, children) {\n      {\n        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === \"function\") {\n          try {\n            injectedHook.onScheduleFiberRoot(rendererID, root, children);\n          } catch (err) {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onCommitRoot(root, eventPriority) {\n      if (injectedHook && typeof injectedHook.onCommitFiberRoot === \"function\") {\n        try {\n          var didError = (root.current.flags & DidCapture) === DidCapture;\n          if (enableProfilerTimer) {\n            var schedulerPriority;\n            switch (eventPriority) {\n              case DiscreteEventPriority:\n                schedulerPriority = ImmediatePriority;\n                break;\n              case ContinuousEventPriority:\n                schedulerPriority = UserBlockingPriority;\n                break;\n              case DefaultEventPriority:\n                schedulerPriority = NormalPriority;\n                break;\n              case IdleEventPriority:\n                schedulerPriority = IdlePriority;\n                break;\n              default:\n                schedulerPriority = NormalPriority;\n                break;\n            }\n            injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n          }\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onPostCommitRoot(root) {\n      if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === \"function\") {\n        try {\n          injectedHook.onPostCommitFiberRoot(rendererID, root);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onCommitUnmount(fiber) {\n      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === \"function\") {\n        try {\n          injectedHook.onCommitFiberUnmount(rendererID, fiber);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function setIsStrictModeForDevtools(newIsStrictMode) {\n      {\n        if (newIsStrictMode) {\n          disableLogs();\n        } else {\n          reenableLogs();\n        }\n      }\n    }\n    function injectProfilingHooks(profilingHooks) {}\n    function getLaneLabelMap() {\n      {\n        return null;\n      }\n    }\n    var NoMode = 0;\n    var ConcurrentMode = 1;\n    var ProfileMode = 2;\n    var StrictLegacyMode = 8;\n    var StrictEffectsMode = 16;\n    var NoStrictPassiveEffectsMode = 64;\n    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n    var log = Math.log;\n    var LN2 = Math.LN2;\n    function clz32Fallback(x) {\n      var asUint = x >>> 0;\n      if (asUint === 0) {\n        return 32;\n      }\n      return 31 - (log(asUint) / LN2 | 0) | 0;\n    }\n    var TotalLanes = 31;\n    var NoLanes = 0;\n    var NoLane = 0;\n    var SyncHydrationLane = 1;\n    var SyncLane = 2;\n    var SyncLaneIndex = 1;\n    var InputContinuousHydrationLane = 4;\n    var InputContinuousLane = 8;\n    var DefaultHydrationLane = 16;\n    var DefaultLane = 32;\n    var SyncUpdateLanes = SyncLane | InputContinuousLane | DefaultLane;\n    var TransitionHydrationLane = 64;\n    var TransitionLanes = 4194176;\n    var TransitionLane1 = 128;\n    var TransitionLane2 = 256;\n    var TransitionLane3 = 512;\n    var TransitionLane4 = 1024;\n    var TransitionLane5 = 2048;\n    var TransitionLane6 = 4096;\n    var TransitionLane7 = 8192;\n    var TransitionLane8 = 16384;\n    var TransitionLane9 = 32768;\n    var TransitionLane10 = 65536;\n    var TransitionLane11 = 131072;\n    var TransitionLane12 = 262144;\n    var TransitionLane13 = 524288;\n    var TransitionLane14 = 1048576;\n    var TransitionLane15 = 2097152;\n    var RetryLanes = 62914560;\n    var RetryLane1 = 4194304;\n    var RetryLane2 = 8388608;\n    var RetryLane3 = 16777216;\n    var RetryLane4 = 33554432;\n    var SomeRetryLane = RetryLane1;\n    var SelectiveHydrationLane = 67108864;\n    var NonIdleLanes = 134217727;\n    var IdleHydrationLane = 134217728;\n    var IdleLane = 268435456;\n    var OffscreenLane = 536870912;\n    var DeferredLane = 1073741824;\n    var UpdateLanes = SyncLane | InputContinuousLane | DefaultLane | TransitionLanes;\n    var NoTimestamp = -1;\n    var nextTransitionLane = TransitionLane1;\n    var nextRetryLane = RetryLane1;\n    function getHighestPriorityLanes(lanes) {\n      {\n        var pendingSyncLanes = lanes & SyncUpdateLanes;\n        if (pendingSyncLanes !== 0) {\n          return pendingSyncLanes;\n        }\n      }\n      switch (getHighestPriorityLane(lanes)) {\n        case SyncHydrationLane:\n          return SyncHydrationLane;\n        case SyncLane:\n          return SyncLane;\n        case InputContinuousHydrationLane:\n          return InputContinuousHydrationLane;\n        case InputContinuousLane:\n          return InputContinuousLane;\n        case DefaultHydrationLane:\n          return DefaultHydrationLane;\n        case DefaultLane:\n          return DefaultLane;\n        case TransitionHydrationLane:\n          return TransitionHydrationLane;\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n          return lanes & TransitionLanes;\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n          return lanes & RetryLanes;\n        case SelectiveHydrationLane:\n          return SelectiveHydrationLane;\n        case IdleHydrationLane:\n          return IdleHydrationLane;\n        case IdleLane:\n          return IdleLane;\n        case OffscreenLane:\n          return OffscreenLane;\n        case DeferredLane:\n          return NoLanes;\n        default:\n          {\n            error(\"Should have found matching lanes. This is a bug in React.\");\n          }\n          return lanes;\n      }\n    }\n    function getNextLanes(root, wipLanes) {\n      var pendingLanes = root.pendingLanes;\n      if (pendingLanes === NoLanes) {\n        return NoLanes;\n      }\n      var nextLanes = NoLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes;\n      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n      if (nonIdlePendingLanes !== NoLanes) {\n        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n        if (nonIdleUnblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        } else {\n          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n          if (nonIdlePingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          }\n        }\n      } else {\n        var unblockedLanes = pendingLanes & ~suspendedLanes;\n        if (unblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(unblockedLanes);\n        } else {\n          if (pingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(pingedLanes);\n          }\n        }\n      }\n      if (nextLanes === NoLanes) {\n        return NoLanes;\n      }\n      if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {\n        var nextLane = getHighestPriorityLane(nextLanes);\n        var wipLane = getHighestPriorityLane(wipLanes);\n        if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n          return wipLanes;\n        }\n      }\n      return nextLanes;\n    }\n    function getEntangledLanes(root, renderLanes) {\n      var entangledLanes = renderLanes;\n      if ((entangledLanes & InputContinuousLane) !== NoLanes) {\n        entangledLanes |= entangledLanes & DefaultLane;\n      }\n      var allEntangledLanes = root.entangledLanes;\n      if (allEntangledLanes !== NoLanes) {\n        var entanglements = root.entanglements;\n        var lanes = entangledLanes & allEntangledLanes;\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          entangledLanes |= entanglements[index];\n          lanes &= ~lane;\n        }\n      }\n      return entangledLanes;\n    }\n    function computeExpirationTime(lane, currentTime) {\n      switch (lane) {\n        case SyncHydrationLane:\n        case SyncLane:\n        case InputContinuousHydrationLane:\n        case InputContinuousLane:\n          return currentTime + syncLaneExpirationMs;\n        case DefaultHydrationLane:\n        case DefaultLane:\n        case TransitionHydrationLane:\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n          return currentTime + transitionLaneExpirationMs;\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n          return NoTimestamp;\n        case SelectiveHydrationLane:\n        case IdleHydrationLane:\n        case IdleLane:\n        case OffscreenLane:\n        case DeferredLane:\n          return NoTimestamp;\n        default:\n          {\n            error(\"Should have found matching lanes. This is a bug in React.\");\n          }\n          return NoTimestamp;\n      }\n    }\n    function markStarvedLanesAsExpired(root, currentTime) {\n      var pendingLanes = root.pendingLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes;\n      var expirationTimes = root.expirationTimes;\n      var lanes = pendingLanes & ~RetryLanes;\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        var expirationTime = expirationTimes[index];\n        if (expirationTime === NoTimestamp) {\n          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n            expirationTimes[index] = computeExpirationTime(lane, currentTime);\n          }\n        } else if (expirationTime <= currentTime) {\n          root.expiredLanes |= lane;\n        }\n        lanes &= ~lane;\n      }\n    }\n    function getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes) {\n      if (root.errorRecoveryDisabledLanes & originallyAttemptedLanes) {\n        return NoLanes;\n      }\n      var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n      if (everythingButOffscreen !== NoLanes) {\n        return everythingButOffscreen;\n      }\n      if (everythingButOffscreen & OffscreenLane) {\n        return OffscreenLane;\n      }\n      return NoLanes;\n    }\n    function includesSyncLane(lanes) {\n      return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;\n    }\n    function includesNonIdleWork(lanes) {\n      return (lanes & NonIdleLanes) !== NoLanes;\n    }\n    function includesOnlyRetries(lanes) {\n      return (lanes & RetryLanes) === lanes;\n    }\n    function includesOnlyNonUrgentLanes(lanes) {\n      var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n      return (lanes & UrgentLanes) === NoLanes;\n    }\n    function includesOnlyTransitions(lanes) {\n      return (lanes & TransitionLanes) === lanes;\n    }\n    function includesBlockingLane(root, lanes) {\n      var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n      return (lanes & SyncDefaultLanes) !== NoLanes;\n    }\n    function includesExpiredLane(root, lanes) {\n      return (lanes & root.expiredLanes) !== NoLanes;\n    }\n    function isTransitionLane(lane) {\n      return (lane & TransitionLanes) !== NoLanes;\n    }\n    function claimNextTransitionLane() {\n      var lane = nextTransitionLane;\n      nextTransitionLane <<= 1;\n      if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n        nextTransitionLane = TransitionLane1;\n      }\n      return lane;\n    }\n    function claimNextRetryLane() {\n      var lane = nextRetryLane;\n      nextRetryLane <<= 1;\n      if ((nextRetryLane & RetryLanes) === NoLanes) {\n        nextRetryLane = RetryLane1;\n      }\n      return lane;\n    }\n    function getHighestPriorityLane(lanes) {\n      return lanes & -lanes;\n    }\n    function pickArbitraryLane(lanes) {\n      return getHighestPriorityLane(lanes);\n    }\n    function pickArbitraryLaneIndex(lanes) {\n      return 31 - clz32(lanes);\n    }\n    function laneToIndex(lane) {\n      return pickArbitraryLaneIndex(lane);\n    }\n    function includesSomeLane(a, b) {\n      return (a & b) !== NoLanes;\n    }\n    function isSubsetOfLanes(set, subset) {\n      return (set & subset) === subset;\n    }\n    function mergeLanes(a, b) {\n      return a | b;\n    }\n    function removeLanes(set, subset) {\n      return set & ~subset;\n    }\n    function intersectLanes(a, b) {\n      return a & b;\n    }\n    function laneToLanes(lane) {\n      return lane;\n    }\n    function createLaneMap(initial) {\n      var laneMap = [];\n      for (var i = 0; i < TotalLanes; i++) {\n        laneMap.push(initial);\n      }\n      return laneMap;\n    }\n    function markRootUpdated$1(root, updateLane) {\n      root.pendingLanes |= updateLane;\n      if (updateLane !== IdleLane) {\n        root.suspendedLanes = NoLanes;\n        root.pingedLanes = NoLanes;\n      }\n    }\n    function markRootSuspended$1(root, suspendedLanes, spawnedLane) {\n      root.suspendedLanes |= suspendedLanes;\n      root.pingedLanes &= ~suspendedLanes;\n      var expirationTimes = root.expirationTimes;\n      var lanes = suspendedLanes;\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        expirationTimes[index] = NoTimestamp;\n        lanes &= ~lane;\n      }\n      if (spawnedLane !== NoLane) {\n        markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);\n      }\n    }\n    function markRootPinged$1(root, pingedLanes) {\n      root.pingedLanes |= root.suspendedLanes & pingedLanes;\n    }\n    function markRootFinished(root, remainingLanes, spawnedLane) {\n      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n      root.pendingLanes = remainingLanes;\n      root.suspendedLanes = NoLanes;\n      root.pingedLanes = NoLanes;\n      root.expiredLanes &= remainingLanes;\n      root.entangledLanes &= remainingLanes;\n      root.errorRecoveryDisabledLanes &= remainingLanes;\n      root.shellSuspendCounter = 0;\n      var entanglements = root.entanglements;\n      var expirationTimes = root.expirationTimes;\n      var hiddenUpdates = root.hiddenUpdates;\n      var lanes = noLongerPendingLanes;\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        entanglements[index] = NoLanes;\n        expirationTimes[index] = NoTimestamp;\n        var hiddenUpdatesForLane = hiddenUpdates[index];\n        if (hiddenUpdatesForLane !== null) {\n          hiddenUpdates[index] = null;\n          for (var i = 0; i < hiddenUpdatesForLane.length; i++) {\n            var update = hiddenUpdatesForLane[i];\n            if (update !== null) {\n              update.lane &= ~OffscreenLane;\n            }\n          }\n        }\n        lanes &= ~lane;\n      }\n      if (spawnedLane !== NoLane) {\n        markSpawnedDeferredLane(root, spawnedLane, NoLanes);\n      }\n    }\n    function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {\n      root.pendingLanes |= spawnedLane;\n      root.suspendedLanes &= ~spawnedLane;\n      var spawnedLaneIndex = laneToIndex(spawnedLane);\n      root.entangledLanes |= spawnedLane;\n      root.entanglements[spawnedLaneIndex] |= DeferredLane | entangledLanes & UpdateLanes;\n    }\n    function markRootEntangled(root, entangledLanes) {\n      var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n      var entanglements = root.entanglements;\n      var lanes = rootEntangledLanes;\n      while (lanes) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        if (lane & entangledLanes | entanglements[index] & entangledLanes) {\n          entanglements[index] |= entangledLanes;\n        }\n        lanes &= ~lane;\n      }\n    }\n    function upgradePendingLaneToSync(root, lane) {\n      root.pendingLanes |= SyncLane;\n      root.entangledLanes |= SyncLane;\n      root.entanglements[SyncLaneIndex] |= lane;\n    }\n    function markHiddenUpdate(root, update, lane) {\n      var index = laneToIndex(lane);\n      var hiddenUpdates = root.hiddenUpdates;\n      var hiddenUpdatesForLane = hiddenUpdates[index];\n      if (hiddenUpdatesForLane === null) {\n        hiddenUpdates[index] = [update];\n      } else {\n        hiddenUpdatesForLane.push(update);\n      }\n      update.lane = lane | OffscreenLane;\n    }\n    function getBumpedLaneForHydration(root, renderLanes) {\n      var renderLane = getHighestPriorityLane(renderLanes);\n      var lane;\n      if ((renderLane & SyncUpdateLanes) !== NoLane) {\n        lane = SyncHydrationLane;\n      } else {\n        switch (renderLane) {\n          case SyncLane:\n            lane = SyncHydrationLane;\n            break;\n          case InputContinuousLane:\n            lane = InputContinuousHydrationLane;\n            break;\n          case DefaultLane:\n            lane = DefaultHydrationLane;\n            break;\n          case TransitionLane1:\n          case TransitionLane2:\n          case TransitionLane3:\n          case TransitionLane4:\n          case TransitionLane5:\n          case TransitionLane6:\n          case TransitionLane7:\n          case TransitionLane8:\n          case TransitionLane9:\n          case TransitionLane10:\n          case TransitionLane11:\n          case TransitionLane12:\n          case TransitionLane13:\n          case TransitionLane14:\n          case TransitionLane15:\n          case RetryLane1:\n          case RetryLane2:\n          case RetryLane3:\n          case RetryLane4:\n            lane = TransitionHydrationLane;\n            break;\n          case IdleLane:\n            lane = IdleHydrationLane;\n            break;\n          default:\n            lane = NoLane;\n            break;\n        }\n      }\n      if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n        return NoLane;\n      }\n      return lane;\n    }\n    function addFiberToLanesMap(root, fiber, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n        updaters.add(fiber);\n        lanes &= ~lane;\n      }\n    }\n    function movePendingFibersToMemoized(root, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n      var memoizedUpdaters = root.memoizedUpdaters;\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n        if (updaters.size > 0) {\n          updaters.forEach(function (fiber) {\n            var alternate = fiber.alternate;\n            if (alternate === null || !memoizedUpdaters.has(alternate)) {\n              memoizedUpdaters.add(fiber);\n            }\n          });\n          updaters.clear();\n        }\n        lanes &= ~lane;\n      }\n    }\n    function getTransitionsForLanes(root, lanes) {\n      {\n        return null;\n      }\n    }\n    var DiscreteEventPriority = SyncLane;\n    var ContinuousEventPriority = InputContinuousLane;\n    var DefaultEventPriority = DefaultLane;\n    var IdleEventPriority = IdleLane;\n    var currentUpdatePriority = NoLane;\n    function getCurrentUpdatePriority() {\n      return currentUpdatePriority;\n    }\n    function setCurrentUpdatePriority(newPriority) {\n      currentUpdatePriority = newPriority;\n    }\n    function higherEventPriority(a, b) {\n      return a !== 0 && a < b ? a : b;\n    }\n    function lowerEventPriority(a, b) {\n      return a === 0 || a > b ? a : b;\n    }\n    function isHigherEventPriority(a, b) {\n      return a !== 0 && a < b;\n    }\n    function lanesToEventPriority(lanes) {\n      var lane = getHighestPriorityLane(lanes);\n      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n        return DiscreteEventPriority;\n      }\n      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n        return ContinuousEventPriority;\n      }\n      if (includesNonIdleWork(lane)) {\n        return DefaultEventPriority;\n      }\n      return IdleEventPriority;\n    }\n    function shim$2() {\n      throw new Error(\"The current renderer does not support mutation. \" + \"This error is likely caused by a bug in React. \" + \"Please file an issue.\");\n    }\n    var commitMount = shim$2;\n    function shim$1() {\n      throw new Error(\"The current renderer does not support hydration. \" + \"This error is likely caused by a bug in React. \" + \"Please file an issue.\");\n    }\n    var isSuspenseInstancePending = shim$1;\n    var isSuspenseInstanceFallback = shim$1;\n    var getSuspenseInstanceFallbackErrorDetails = shim$1;\n    var registerSuspenseInstanceRetry = shim$1;\n    var errorHydratingContainer = shim$1;\n    function shim() {\n      throw new Error(\"The current renderer does not support Resources. \" + \"This error is likely caused by a bug in React. \" + \"Please file an issue.\");\n    }\n    var suspendResource = shim;\n    var _nativeFabricUIManage = nativeFabricUIManager,\n      createNode = _nativeFabricUIManage.createNode,\n      cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren,\n      cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps,\n      cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps,\n      createChildNodeSet = _nativeFabricUIManage.createChildSet,\n      appendChildNode = _nativeFabricUIManage.appendChild,\n      appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet,\n      completeRoot = _nativeFabricUIManage.completeRoot,\n      registerEventHandler = _nativeFabricUIManage.registerEventHandler,\n      FabricDefaultPriority = _nativeFabricUIManage.unstable_DefaultEventPriority,\n      FabricDiscretePriority = _nativeFabricUIManage.unstable_DiscreteEventPriority,\n      fabricGetCurrentEventPriority = _nativeFabricUIManage.unstable_getCurrentEventPriority;\n    var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get;\n    var nextReactTag = 2;\n    if (registerEventHandler) {\n      registerEventHandler(dispatchEvent);\n    }\n    function appendInitialChild(parentInstance, child) {\n      appendChildNode(parentInstance.node, child.node);\n    }\n    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n      var tag = nextReactTag;\n      nextReactTag += 2;\n      var viewConfig = getViewConfigForType(type);\n      {\n        for (var key in viewConfig.validAttributes) {\n          if (props.hasOwnProperty(key)) {\n            ReactNativePrivateInterface.deepFreezeAndThrowOnMutationInDev(props[key]);\n          }\n        }\n      }\n      var updatePayload = create(props, viewConfig.validAttributes);\n      var node = createNode(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload, internalInstanceHandle);\n      var component = ReactNativePrivateInterface.createPublicInstance(tag, viewConfig, internalInstanceHandle);\n      return {\n        node: node,\n        canonical: {\n          nativeTag: tag,\n          viewConfig: viewConfig,\n          currentProps: props,\n          internalInstanceHandle: internalInstanceHandle,\n          publicInstance: component\n        }\n      };\n    }\n    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {\n      {\n        if (!hostContext.isInAParentText) {\n          error(\"Text strings must be rendered within a <Text> component.\");\n        }\n      }\n      var tag = nextReactTag;\n      nextReactTag += 2;\n      var node = createNode(tag, \"RCTRawText\", rootContainerInstance, {\n        text: text\n      }, internalInstanceHandle);\n      return {\n        node: node\n      };\n    }\n    function getRootHostContext(rootContainerInstance) {\n      return {\n        isInAParentText: false\n      };\n    }\n    function getChildHostContext(parentHostContext, type) {\n      var prevIsInAParentText = parentHostContext.isInAParentText;\n      var isInAParentText = type === \"AndroidTextInput\" || type === \"RCTMultilineTextInputView\" || type === \"RCTSinglelineTextInputView\" || type === \"RCTText\" || type === \"RCTVirtualText\";\n      if (prevIsInAParentText !== isInAParentText) {\n        return {\n          isInAParentText: isInAParentText\n        };\n      } else {\n        return parentHostContext;\n      }\n    }\n    function getPublicInstance(instance) {\n      if (instance.canonical != null && instance.canonical.publicInstance != null) {\n        return instance.canonical.publicInstance;\n      }\n      if (instance._nativeTag != null) {\n        return instance;\n      }\n      return null;\n    }\n    function getPublicTextInstance(textInstance, internalInstanceHandle) {\n      if (textInstance.publicInstance == null) {\n        textInstance.publicInstance = ReactNativePrivateInterface.createPublicTextInstance(internalInstanceHandle);\n      }\n      return textInstance.publicInstance;\n    }\n    function getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle) {\n      var instance = internalInstanceHandle.stateNode;\n      if (instance == null) {\n        return null;\n      }\n      if (internalInstanceHandle.tag === HostText) {\n        var textInstance = instance;\n        return getPublicTextInstance(textInstance, internalInstanceHandle);\n      }\n      var elementInstance = internalInstanceHandle.stateNode;\n      return getPublicInstance(elementInstance);\n    }\n    function shouldSetTextContent(type, props) {\n      return false;\n    }\n    function getCurrentEventPriority() {\n      var currentEventPriority = fabricGetCurrentEventPriority ? fabricGetCurrentEventPriority() : null;\n      if (currentEventPriority != null) {\n        switch (currentEventPriority) {\n          case FabricDiscretePriority:\n            return DiscreteEventPriority;\n          case FabricDefaultPriority:\n          default:\n            return DefaultEventPriority;\n        }\n      }\n      return DefaultEventPriority;\n    }\n    function shouldAttemptEagerTransition() {\n      return false;\n    }\n    var warnsIfNotActing = false;\n    var scheduleTimeout = setTimeout;\n    var cancelTimeout = clearTimeout;\n    var noTimeout = -1;\n    function cloneInstance(instance, type, oldProps, newProps, keepChildren, newChildSet) {\n      var viewConfig = instance.canonical.viewConfig;\n      var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);\n      instance.canonical.currentProps = newProps;\n      var node = instance.node;\n      var clone;\n      if (keepChildren) {\n        if (updatePayload !== null) {\n          clone = cloneNodeWithNewProps(node, updatePayload);\n        } else {\n          return instance;\n        }\n      } else {\n        if (newChildSet != null) {\n          if (updatePayload !== null) {\n            clone = cloneNodeWithNewChildrenAndProps(node, newChildSet, updatePayload);\n          } else {\n            clone = cloneNodeWithNewChildren(node, newChildSet);\n          }\n        } else {\n          if (updatePayload !== null) {\n            clone = cloneNodeWithNewChildrenAndProps(node, updatePayload);\n          } else {\n            clone = cloneNodeWithNewChildren(node);\n          }\n        }\n      }\n      return {\n        node: clone,\n        canonical: instance.canonical\n      };\n    }\n    function cloneHiddenInstance(instance, type, props) {\n      var viewConfig = instance.canonical.viewConfig;\n      var node = instance.node;\n      var updatePayload = create({\n        style: {\n          display: \"none\"\n        }\n      }, viewConfig.validAttributes);\n      return {\n        node: cloneNodeWithNewProps(node, updatePayload),\n        canonical: instance.canonical\n      };\n    }\n    function cloneHiddenTextInstance(instance, text) {\n      throw new Error(\"Not yet implemented.\");\n    }\n    function createContainerChildSet() {\n      {\n        return createChildNodeSet();\n      }\n    }\n    function appendChildToContainerChildSet(childSet, child) {\n      {\n        appendChildNodeToSet(childSet, child.node);\n      }\n    }\n    function finalizeContainerChildren(container, newChildren) {\n      completeRoot(container, newChildren);\n    }\n    function replaceContainerChildren(container, newChildren) {}\n    function preloadInstance(type, props) {\n      return true;\n    }\n    function waitForCommitToBeReady() {\n      return null;\n    }\n    var supportsMicrotasks = typeof RN$enableMicrotasksInReact !== \"undefined\" && !!RN$enableMicrotasksInReact;\n    var scheduleMicrotask = typeof queueMicrotask === \"function\" ? queueMicrotask : scheduleTimeout;\n    function getInstanceFromNode(node) {\n      var instance = node;\n      if (instance.canonical != null && instance.canonical.internalInstanceHandle != null) {\n        return instance.canonical.internalInstanceHandle;\n      }\n      return node;\n    }\n    function getNodeFromInstance(fiber) {\n      var publicInstance = getPublicInstance(fiber.stateNode);\n      if (publicInstance == null) {\n        throw new Error(\"Could not find host instance from fiber\");\n      }\n      return publicInstance;\n    }\n    function getFiberCurrentPropsFromNode(instance) {\n      return instance.canonical.currentProps;\n    }\n    var ReactFabricGlobalResponderHandler = {\n      onChange: function (from, to, blockNativeResponder) {\n        if (from && from.stateNode) {\n          nativeFabricUIManager.setIsJSResponder(from.stateNode.node, false, blockNativeResponder || false);\n        }\n        if (to && to.stateNode) {\n          nativeFabricUIManager.setIsJSResponder(to.stateNode.node, true, blockNativeResponder || false);\n        }\n      }\n    };\n    setComponentTree(getFiberCurrentPropsFromNode, getInstanceFromNode, getNodeFromInstance);\n    ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactFabricGlobalResponderHandler);\n    function get(key) {\n      return key._reactInternals;\n    }\n    function set(key, value) {\n      key._reactInternals = value;\n    }\n    var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n    var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n    var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n    var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n    var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\");\n    var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n    var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n    var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n    var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n    var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n    var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n    var REACT_SCOPE_TYPE = Symbol.for(\"react.scope\");\n    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\"react.debug_trace_mode\");\n    var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for(\"react.legacy_hidden\");\n    var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n    var REACT_TRACING_MARKER_TYPE = Symbol.for(\"react.tracing_marker\");\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n        return null;\n      }\n      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n      if (typeof maybeIterator === \"function\") {\n        return maybeIterator;\n      }\n      return null;\n    }\n    function getWrappedName$1(outerType, innerType, wrapperName) {\n      var displayName = outerType.displayName;\n      if (displayName) {\n        return displayName;\n      }\n      var functionName = innerType.displayName || innerType.name || \"\";\n      return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n    }\n    function getContextName$1(type) {\n      return type.displayName || \"Context\";\n    }\n    var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n    function getComponentNameFromType(type) {\n      if (type == null) {\n        return null;\n      }\n      if (typeof type === \"function\") {\n        if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n          return null;\n        }\n        return type.displayName || type.name || null;\n      }\n      if (typeof type === \"string\") {\n        return type;\n      }\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (typeof type === \"object\") {\n        {\n          if (typeof type.tag === \"number\") {\n            error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n          }\n        }\n        switch (type.$$typeof) {\n          case REACT_PROVIDER_TYPE:\n            {\n              var provider = type;\n              return getContextName$1(provider._context) + \".Provider\";\n            }\n          case REACT_CONTEXT_TYPE:\n            var context = type;\n            {\n              return getContextName$1(context) + \".Consumer\";\n            }\n          case REACT_CONSUMER_TYPE:\n            {\n              return null;\n            }\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName$1(type, type.render, \"ForwardRef\");\n          case REACT_MEMO_TYPE:\n            var outerName = type.displayName || null;\n            if (outerName !== null) {\n              return outerName;\n            }\n            return getComponentNameFromType(type.type) || \"Memo\";\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              try {\n                return getComponentNameFromType(init(payload));\n              } catch (x) {\n                return null;\n              }\n            }\n        }\n      }\n      return null;\n    }\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var functionName = innerType.displayName || innerType.name || \"\";\n      return outerType.displayName || (functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n    }\n    function getContextName(type) {\n      return type.displayName || \"Context\";\n    }\n    function getComponentNameFromFiber(fiber) {\n      var tag = fiber.tag,\n        type = fiber.type;\n      switch (tag) {\n        case CacheComponent:\n          return \"Cache\";\n        case ContextConsumer:\n          {\n            var context = type;\n            return getContextName(context) + \".Consumer\";\n          }\n        case ContextProvider:\n          {\n            var provider = type;\n            return getContextName(provider._context) + \".Provider\";\n          }\n        case DehydratedFragment:\n          return \"DehydratedFragment\";\n        case ForwardRef:\n          return getWrappedName(type, type.render, \"ForwardRef\");\n        case Fragment:\n          return \"Fragment\";\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          return type;\n        case HostPortal:\n          return \"Portal\";\n        case HostRoot:\n          return \"Root\";\n        case HostText:\n          return \"Text\";\n        case LazyComponent:\n          return getComponentNameFromType(type);\n        case Mode:\n          if (type === REACT_STRICT_MODE_TYPE) {\n            return \"StrictMode\";\n          }\n          return \"Mode\";\n        case OffscreenComponent:\n          return \"Offscreen\";\n        case Profiler:\n          return \"Profiler\";\n        case ScopeComponent:\n          return \"Scope\";\n        case SuspenseComponent:\n          return \"Suspense\";\n        case SuspenseListComponent:\n          return \"SuspenseList\";\n        case TracingMarkerComponent:\n          return \"TracingMarker\";\n        case ClassComponent:\n        case FunctionComponent:\n        case IncompleteClassComponent:\n        case IndeterminateComponent:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          if (typeof type === \"function\") {\n            return type.displayName || type.name || null;\n          }\n          if (typeof type === \"string\") {\n            return type;\n          }\n          break;\n      }\n      return null;\n    }\n    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;\n    function getNearestMountedFiber(fiber) {\n      var node = fiber;\n      var nearestMounted = fiber;\n      if (!fiber.alternate) {\n        var nextNode = node;\n        do {\n          node = nextNode;\n          if ((node.flags & (Placement | Hydrating)) !== NoFlags$1) {\n            nearestMounted = node.return;\n          }\n          nextNode = node.return;\n        } while (nextNode);\n      } else {\n        while (node.return) {\n          node = node.return;\n        }\n      }\n      if (node.tag === HostRoot) {\n        return nearestMounted;\n      }\n      return null;\n    }\n    function isMounted(component) {\n      {\n        var owner = ReactCurrentOwner$3.current;\n        if (owner !== null && owner.tag === ClassComponent) {\n          var ownerFiber = owner;\n          var instance = ownerFiber.stateNode;\n          if (!instance._warnedAboutRefsInRender) {\n            error(\"%s is accessing isMounted inside its render() function. \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", getComponentNameFromFiber(ownerFiber) || \"A component\");\n          }\n          instance._warnedAboutRefsInRender = true;\n        }\n      }\n      var fiber = get(component);\n      if (!fiber) {\n        return false;\n      }\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n    function assertIsMounted(fiber) {\n      if (getNearestMountedFiber(fiber) !== fiber) {\n        throw new Error(\"Unable to find node on an unmounted component.\");\n      }\n    }\n    function findCurrentFiberUsingSlowPath(fiber) {\n      var alternate = fiber.alternate;\n      if (!alternate) {\n        var nearestMounted = getNearestMountedFiber(fiber);\n        if (nearestMounted === null) {\n          throw new Error(\"Unable to find node on an unmounted component.\");\n        }\n        if (nearestMounted !== fiber) {\n          return null;\n        }\n        return fiber;\n      }\n      var a = fiber;\n      var b = alternate;\n      while (true) {\n        var parentA = a.return;\n        if (parentA === null) {\n          break;\n        }\n        var parentB = parentA.alternate;\n        if (parentB === null) {\n          var nextParent = parentA.return;\n          if (nextParent !== null) {\n            a = b = nextParent;\n            continue;\n          }\n          break;\n        }\n        if (parentA.child === parentB.child) {\n          var child = parentA.child;\n          while (child) {\n            if (child === a) {\n              assertIsMounted(parentA);\n              return fiber;\n            }\n            if (child === b) {\n              assertIsMounted(parentA);\n              return alternate;\n            }\n            child = child.sibling;\n          }\n          throw new Error(\"Unable to find node on an unmounted component.\");\n        }\n        if (a.return !== b.return) {\n          a = parentA;\n          b = parentB;\n        } else {\n          var didFindChild = false;\n          var _child = parentA.child;\n          while (_child) {\n            if (_child === a) {\n              didFindChild = true;\n              a = parentA;\n              b = parentB;\n              break;\n            }\n            if (_child === b) {\n              didFindChild = true;\n              b = parentA;\n              a = parentB;\n              break;\n            }\n            _child = _child.sibling;\n          }\n          if (!didFindChild) {\n            _child = parentB.child;\n            while (_child) {\n              if (_child === a) {\n                didFindChild = true;\n                a = parentB;\n                b = parentA;\n                break;\n              }\n              if (_child === b) {\n                didFindChild = true;\n                b = parentB;\n                a = parentA;\n                break;\n              }\n              _child = _child.sibling;\n            }\n            if (!didFindChild) {\n              throw new Error(\"Child was not found in either parent set. This indicates a bug \" + \"in React related to the return pointer. Please file an issue.\");\n            }\n          }\n        }\n        if (a.alternate !== b) {\n          throw new Error(\"Return fibers should always be each others' alternates. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n        }\n      }\n      if (a.tag !== HostRoot) {\n        throw new Error(\"Unable to find node on an unmounted component.\");\n      }\n      if (a.stateNode.current === a) {\n        return fiber;\n      }\n      return alternate;\n    }\n    function findCurrentHostFiber(parent) {\n      var currentParent = findCurrentFiberUsingSlowPath(parent);\n      return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n    }\n    function findCurrentHostFiberImpl(node) {\n      var tag = node.tag;\n      if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {\n        return node;\n      }\n      var child = node.child;\n      while (child !== null) {\n        var match = findCurrentHostFiberImpl(child);\n        if (match !== null) {\n          return match;\n        }\n        child = child.sibling;\n      }\n      return null;\n    }\n    function doesFiberContain(parentFiber, childFiber) {\n      var node = childFiber;\n      var parentFiberAlternate = parentFiber.alternate;\n      while (node !== null) {\n        if (node === parentFiber || node === parentFiberAlternate) {\n          return true;\n        }\n        node = node.return;\n      }\n      return false;\n    }\n    var valueStack = [];\n    var fiberStack;\n    {\n      fiberStack = [];\n    }\n    var index = -1;\n    function createCursor(defaultValue) {\n      return {\n        current: defaultValue\n      };\n    }\n    function pop(cursor, fiber) {\n      if (index < 0) {\n        {\n          error(\"Unexpected pop.\");\n        }\n        return;\n      }\n      {\n        if (fiber !== fiberStack[index]) {\n          error(\"Unexpected Fiber popped.\");\n        }\n      }\n      cursor.current = valueStack[index];\n      valueStack[index] = null;\n      {\n        fiberStack[index] = null;\n      }\n      index--;\n    }\n    function push(cursor, value, fiber) {\n      index++;\n      valueStack[index] = cursor.current;\n      {\n        fiberStack[index] = fiber;\n      }\n      cursor.current = value;\n    }\n    var emptyContextObject = {};\n    {\n      Object.freeze(emptyContextObject);\n    }\n    function hasContextChanged() {\n      {\n        return false;\n      }\n    }\n    function isContextProvider(type) {\n      {\n        return false;\n      }\n    }\n    function processChildContext(fiber, type, parentContext) {\n      {\n        return parentContext;\n      }\n    }\n    function findCurrentUnmaskedContext(fiber) {\n      {\n        return emptyContextObject;\n      }\n    }\n    var LegacyRoot = 0;\n    var ConcurrentRoot = 1;\n    var OffscreenVisible = 1;\n    var OffscreenDetached = 2;\n    var OffscreenPassiveEffectsConnected = 4;\n    function isOffscreenManual(offscreenFiber) {\n      return offscreenFiber.memoizedProps !== null && offscreenFiber.memoizedProps.mode === \"manual\";\n    }\n    function is(x, y) {\n      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;\n    }\n    var objectIs = typeof Object.is === \"function\" ? Object.is : is;\n    function isRootDehydrated(root) {\n      var currentState = root.current.memoizedState;\n      return currentState.isDehydrated;\n    }\n    var contextStackCursor = createCursor(null);\n    var contextFiberStackCursor = createCursor(null);\n    var rootInstanceStackCursor = createCursor(null);\n    function requiredContext(c) {\n      {\n        if (c === null) {\n          error(\"Expected host context to exist. This error is likely caused by a bug \" + \"in React. Please file an issue.\");\n        }\n      }\n      return c;\n    }\n    function getRootHostContainer() {\n      var rootInstance = requiredContext(rootInstanceStackCursor.current);\n      return rootInstance;\n    }\n    function pushHostContainer(fiber, nextRootInstance) {\n      push(rootInstanceStackCursor, nextRootInstance, fiber);\n      push(contextFiberStackCursor, fiber, fiber);\n      push(contextStackCursor, null, fiber);\n      var nextRootContext = getRootHostContext();\n      pop(contextStackCursor, fiber);\n      push(contextStackCursor, nextRootContext, fiber);\n    }\n    function popHostContainer(fiber) {\n      pop(contextStackCursor, fiber);\n      pop(contextFiberStackCursor, fiber);\n      pop(rootInstanceStackCursor, fiber);\n    }\n    function getHostContext() {\n      var context = requiredContext(contextStackCursor.current);\n      return context;\n    }\n    function pushHostContext(fiber) {\n      var context = requiredContext(contextStackCursor.current);\n      var nextContext = getChildHostContext(context, fiber.type);\n      if (context !== nextContext) {\n        push(contextFiberStackCursor, fiber, fiber);\n        push(contextStackCursor, nextContext, fiber);\n      }\n    }\n    function popHostContext(fiber) {\n      if (contextFiberStackCursor.current === fiber) {\n        pop(contextStackCursor, fiber);\n        pop(contextFiberStackCursor, fiber);\n      }\n    }\n    var isHydrating = false;\n    var hydrationErrors = null;\n    function prepareToHydrateHostInstance(fiber, hostContext) {\n      {\n        throw new Error(\"Expected prepareToHydrateHostInstance() to never be called. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n      }\n    }\n    function prepareToHydrateHostTextInstance(fiber) {\n      {\n        throw new Error(\"Expected prepareToHydrateHostTextInstance() to never be called. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n      }\n    }\n    function prepareToHydrateHostSuspenseInstance(fiber) {\n      {\n        throw new Error(\"Expected prepareToHydrateHostSuspenseInstance() to never be called. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n      }\n    }\n    function popHydrationState(fiber) {\n      {\n        return false;\n      }\n    }\n    function upgradeHydrationErrorsToRecoverable() {\n      if (hydrationErrors !== null) {\n        queueRecoverableErrors(hydrationErrors);\n        hydrationErrors = null;\n      }\n    }\n    function getIsHydrating() {\n      return isHydrating;\n    }\n    function queueHydrationError(error) {\n      if (hydrationErrors === null) {\n        hydrationErrors = [error];\n      } else {\n        hydrationErrors.push(error);\n      }\n    }\n    var concurrentQueues = [];\n    var concurrentQueuesIndex = 0;\n    var concurrentlyUpdatedLanes = NoLanes;\n    function finishQueueingConcurrentUpdates() {\n      var endIndex = concurrentQueuesIndex;\n      concurrentQueuesIndex = 0;\n      concurrentlyUpdatedLanes = NoLanes;\n      var i = 0;\n      while (i < endIndex) {\n        var fiber = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var queue = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var update = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var lane = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        if (queue !== null && update !== null) {\n          var pending = queue.pending;\n          if (pending === null) {\n            update.next = update;\n          } else {\n            update.next = pending.next;\n            pending.next = update;\n          }\n          queue.pending = update;\n        }\n        if (lane !== NoLane) {\n          markUpdateLaneFromFiberToRoot(fiber, update, lane);\n        }\n      }\n    }\n    function getConcurrentlyUpdatedLanes() {\n      return concurrentlyUpdatedLanes;\n    }\n    function enqueueUpdate$1(fiber, queue, update, lane) {\n      concurrentQueues[concurrentQueuesIndex++] = fiber;\n      concurrentQueues[concurrentQueuesIndex++] = queue;\n      concurrentQueues[concurrentQueuesIndex++] = update;\n      concurrentQueues[concurrentQueuesIndex++] = lane;\n      concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane);\n      fiber.lanes = mergeLanes(fiber.lanes, lane);\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      }\n    }\n    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update) {\n      var lane = NoLane;\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n      var isConcurrentlyRendering = getWorkInProgressRoot() !== null;\n      if (!isConcurrentlyRendering) {\n        finishQueueingConcurrentUpdates();\n      }\n    }\n    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function enqueueConcurrentRenderForLane(fiber, lane) {\n      enqueueUpdate$1(fiber, null, null, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function unsafe_markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n      var root = getRootForUpdatedFiber(sourceFiber);\n      markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);\n      return root;\n    }\n    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n      var alternate = sourceFiber.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      }\n      var isHidden = false;\n      var parent = sourceFiber.return;\n      var node = sourceFiber;\n      while (parent !== null) {\n        parent.childLanes = mergeLanes(parent.childLanes, lane);\n        alternate = parent.alternate;\n        if (alternate !== null) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n        }\n        if (parent.tag === OffscreenComponent) {\n          var offscreenInstance = parent.stateNode;\n          if (offscreenInstance !== null && !(offscreenInstance._visibility & OffscreenVisible)) {\n            isHidden = true;\n          }\n        }\n        node = parent;\n        parent = parent.return;\n      }\n      if (isHidden && update !== null && node.tag === HostRoot) {\n        var root = node.stateNode;\n        markHiddenUpdate(root, update, lane);\n      }\n    }\n    function getRootForUpdatedFiber(sourceFiber) {\n      throwIfInfiniteUpdateLoopDetected();\n      detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);\n      var node = sourceFiber;\n      var parent = node.return;\n      while (parent !== null) {\n        detectUpdateOnUnmountedFiber(sourceFiber, node);\n        node = parent;\n        parent = node.return;\n      }\n      return node.tag === HostRoot ? node.stateNode : null;\n    }\n    function detectUpdateOnUnmountedFiber(sourceFiber, parent) {\n      {\n        var alternate = parent.alternate;\n        if (alternate === null && (parent.flags & (Placement | Hydrating)) !== NoFlags$1) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    var ReactCurrentActQueue$3 = ReactSharedInternals.ReactCurrentActQueue;\n    var firstScheduledRoot = null;\n    var lastScheduledRoot = null;\n    var didScheduleMicrotask = false;\n    var didScheduleMicrotask_act = false;\n    var mightHavePendingSyncWork = false;\n    var isFlushingWork = false;\n    var currentEventTransitionLane = NoLane;\n    function ensureRootIsScheduled(root) {\n      if (root === lastScheduledRoot || root.next !== null) ;else {\n        if (lastScheduledRoot === null) {\n          firstScheduledRoot = lastScheduledRoot = root;\n        } else {\n          lastScheduledRoot.next = root;\n          lastScheduledRoot = root;\n        }\n      }\n      mightHavePendingSyncWork = true;\n      if (ReactCurrentActQueue$3.current !== null) {\n        if (!didScheduleMicrotask_act) {\n          didScheduleMicrotask_act = true;\n          scheduleImmediateTask(processRootScheduleInMicrotask);\n        }\n      } else {\n        if (!didScheduleMicrotask) {\n          didScheduleMicrotask = true;\n          scheduleImmediateTask(processRootScheduleInMicrotask);\n        }\n      }\n      {\n        scheduleTaskForRootDuringMicrotask(root, now$1());\n      }\n      if (ReactCurrentActQueue$3.isBatchingLegacy && root.tag === LegacyRoot) {\n        ReactCurrentActQueue$3.didScheduleLegacyUpdate = true;\n      }\n    }\n    function flushSyncWorkOnAllRoots() {\n      flushSyncWorkAcrossRoots_impl(false);\n    }\n    function flushSyncWorkOnLegacyRootsOnly() {\n      flushSyncWorkAcrossRoots_impl(true);\n    }\n    function flushSyncWorkAcrossRoots_impl(onlyLegacy) {\n      if (isFlushingWork) {\n        return;\n      }\n      if (!mightHavePendingSyncWork) {\n        return;\n      }\n      var didPerformSomeWork;\n      var errors = null;\n      isFlushingWork = true;\n      do {\n        didPerformSomeWork = false;\n        var root = firstScheduledRoot;\n        while (root !== null) {\n          if (onlyLegacy && root.tag !== LegacyRoot) ;else {\n            var workInProgressRoot = getWorkInProgressRoot();\n            var workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n            var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n            if (includesSyncLane(nextLanes)) {\n              try {\n                didPerformSomeWork = true;\n                performSyncWorkOnRoot(root, nextLanes);\n              } catch (error) {\n                if (errors === null) {\n                  errors = [error];\n                } else {\n                  errors.push(error);\n                }\n              }\n            }\n          }\n          root = root.next;\n        }\n      } while (didPerformSomeWork);\n      isFlushingWork = false;\n      if (errors !== null) {\n        if (errors.length > 1) {\n          if (typeof AggregateError === \"function\") {\n            throw new AggregateError(errors);\n          } else {\n            for (var i = 1; i < errors.length; i++) {\n              scheduleImmediateTask(throwError.bind(null, errors[i]));\n            }\n            var firstError = errors[0];\n            throw firstError;\n          }\n        } else {\n          var error = errors[0];\n          throw error;\n        }\n      }\n    }\n    function throwError(error) {\n      throw error;\n    }\n    function processRootScheduleInMicrotask() {\n      didScheduleMicrotask = false;\n      {\n        didScheduleMicrotask_act = false;\n      }\n      mightHavePendingSyncWork = false;\n      var currentTime = now$1();\n      var prev = null;\n      var root = firstScheduledRoot;\n      while (root !== null) {\n        var next = root.next;\n        if (currentEventTransitionLane !== NoLane && shouldAttemptEagerTransition()) {\n          upgradePendingLaneToSync(root, currentEventTransitionLane);\n        }\n        var nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);\n        if (nextLanes === NoLane) {\n          root.next = null;\n          if (prev === null) {\n            firstScheduledRoot = next;\n          } else {\n            prev.next = next;\n          }\n          if (next === null) {\n            lastScheduledRoot = prev;\n          }\n        } else {\n          prev = root;\n          if (includesSyncLane(nextLanes)) {\n            mightHavePendingSyncWork = true;\n          }\n        }\n        root = next;\n      }\n      currentEventTransitionLane = NoLane;\n      flushSyncWorkOnAllRoots();\n    }\n    function scheduleTaskForRootDuringMicrotask(root, currentTime) {\n      markStarvedLanesAsExpired(root, currentTime);\n      var workInProgressRoot = getWorkInProgressRoot();\n      var workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n      var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n      var existingCallbackNode = root.callbackNode;\n      if (nextLanes === NoLanes || root === workInProgressRoot && isWorkLoopSuspendedOnData() || root.cancelPendingCommit !== null) {\n        if (existingCallbackNode !== null) {\n          cancelCallback(existingCallbackNode);\n        }\n        root.callbackNode = null;\n        root.callbackPriority = NoLane;\n        return NoLane;\n      }\n      if (includesSyncLane(nextLanes)) {\n        if (existingCallbackNode !== null) {\n          cancelCallback(existingCallbackNode);\n        }\n        root.callbackPriority = SyncLane;\n        root.callbackNode = null;\n        return SyncLane;\n      } else {\n        var existingCallbackPriority = root.callbackPriority;\n        var newCallbackPriority = getHighestPriorityLane(nextLanes);\n        if (newCallbackPriority === existingCallbackPriority && !(ReactCurrentActQueue$3.current !== null && existingCallbackNode !== fakeActCallbackNode$1)) {\n          return newCallbackPriority;\n        } else {\n          cancelCallback(existingCallbackNode);\n        }\n        var schedulerPriorityLevel;\n        switch (lanesToEventPriority(nextLanes)) {\n          case DiscreteEventPriority:\n            schedulerPriorityLevel = ImmediatePriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriorityLevel = UserBlockingPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriorityLevel = IdlePriority;\n            break;\n          default:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n        }\n        var newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n        root.callbackPriority = newCallbackPriority;\n        root.callbackNode = newCallbackNode;\n        return newCallbackPriority;\n      }\n    }\n    function getContinuationForRoot(root, originalCallbackNode) {\n      scheduleTaskForRootDuringMicrotask(root, now$1());\n      if (root.callbackNode === originalCallbackNode) {\n        return performConcurrentWorkOnRoot.bind(null, root);\n      }\n      return null;\n    }\n    var fakeActCallbackNode$1 = {};\n    function scheduleCallback$1(priorityLevel, callback) {\n      if (ReactCurrentActQueue$3.current !== null) {\n        ReactCurrentActQueue$3.current.push(callback);\n        return fakeActCallbackNode$1;\n      } else {\n        return scheduleCallback$2(priorityLevel, callback);\n      }\n    }\n    function cancelCallback(callbackNode) {\n      if (callbackNode === fakeActCallbackNode$1) ;else if (callbackNode !== null) {\n        cancelCallback$1(callbackNode);\n      }\n    }\n    function scheduleImmediateTask(cb) {\n      if (ReactCurrentActQueue$3.current !== null) {\n        ReactCurrentActQueue$3.current.push(function () {\n          cb();\n          return null;\n        });\n      }\n      if (supportsMicrotasks) {\n        scheduleMicrotask(function () {\n          var executionContext = getExecutionContext();\n          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n            scheduleCallback$2(ImmediatePriority, cb);\n            return;\n          }\n          cb();\n        });\n      } else {\n        scheduleCallback$2(ImmediatePriority, cb);\n      }\n    }\n    function requestTransitionLane(transition) {\n      if (currentEventTransitionLane === NoLane) {\n        currentEventTransitionLane = claimNextTransitionLane();\n      }\n      return currentEventTransitionLane;\n    }\n    var currentEntangledLane = NoLane;\n    var currentEntangledActionThenable = null;\n    function chainThenableValue(thenable, result) {\n      var listeners = [];\n      var thenableWithOverride = {\n        status: \"pending\",\n        value: null,\n        reason: null,\n        then: function (resolve) {\n          listeners.push(resolve);\n        }\n      };\n      thenable.then(function (value) {\n        var fulfilledThenable = thenableWithOverride;\n        fulfilledThenable.status = \"fulfilled\";\n        fulfilledThenable.value = result;\n        for (var i = 0; i < listeners.length; i++) {\n          var listener = listeners[i];\n          listener(result);\n        }\n      }, function (error) {\n        var rejectedThenable = thenableWithOverride;\n        rejectedThenable.status = \"rejected\";\n        rejectedThenable.reason = error;\n        for (var i = 0; i < listeners.length; i++) {\n          var listener = listeners[i];\n          listener(undefined);\n        }\n      });\n      return thenableWithOverride;\n    }\n    function peekEntangledActionLane() {\n      return currentEntangledLane;\n    }\n    function peekEntangledActionThenable() {\n      return currentEntangledActionThenable;\n    }\n    var UpdateState = 0;\n    var ReplaceState = 1;\n    var ForceUpdate = 2;\n    var CaptureUpdate = 3;\n    var hasForceUpdate = false;\n    var didWarnUpdateInsideUpdate;\n    var currentlyProcessingQueue;\n    {\n      didWarnUpdateInsideUpdate = false;\n      currentlyProcessingQueue = null;\n    }\n    function initializeUpdateQueue(fiber) {\n      var queue = {\n        baseState: fiber.memoizedState,\n        firstBaseUpdate: null,\n        lastBaseUpdate: null,\n        shared: {\n          pending: null,\n          lanes: NoLanes,\n          hiddenCallbacks: null\n        },\n        callbacks: null\n      };\n      fiber.updateQueue = queue;\n    }\n    function cloneUpdateQueue(current, workInProgress) {\n      var queue = workInProgress.updateQueue;\n      var currentQueue = current.updateQueue;\n      if (queue === currentQueue) {\n        var clone = {\n          baseState: currentQueue.baseState,\n          firstBaseUpdate: currentQueue.firstBaseUpdate,\n          lastBaseUpdate: currentQueue.lastBaseUpdate,\n          shared: currentQueue.shared,\n          callbacks: null\n        };\n        workInProgress.updateQueue = clone;\n      }\n    }\n    function createUpdate(lane) {\n      var update = {\n        lane: lane,\n        tag: UpdateState,\n        payload: null,\n        callback: null,\n        next: null\n      };\n      return update;\n    }\n    function enqueueUpdate(fiber, update, lane) {\n      var updateQueue = fiber.updateQueue;\n      if (updateQueue === null) {\n        return null;\n      }\n      var sharedQueue = updateQueue.shared;\n      {\n        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n          var componentName = getComponentNameFromFiber(fiber);\n          error(\"An update (setState, replaceState, or forceUpdate) was scheduled \" + \"from inside an update function. Update functions should be pure, \" + \"with zero side-effects. Consider using componentDidUpdate or a \" + \"callback.\\n\\nPlease update the following component: %s\", componentName);\n          didWarnUpdateInsideUpdate = true;\n        }\n      }\n      if (isUnsafeClassRenderPhaseUpdate()) {\n        var pending = sharedQueue.pending;\n        if (pending === null) {\n          update.next = update;\n        } else {\n          update.next = pending.next;\n          pending.next = update;\n        }\n        sharedQueue.pending = update;\n        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n      } else {\n        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n      }\n    }\n    function entangleTransitions(root, fiber, lane) {\n      var updateQueue = fiber.updateQueue;\n      if (updateQueue === null) {\n        return;\n      }\n      var sharedQueue = updateQueue.shared;\n      if (isTransitionLane(lane)) {\n        var queueLanes = sharedQueue.lanes;\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        sharedQueue.lanes = newQueueLanes;\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n      var queue = workInProgress.updateQueue;\n      var current = workInProgress.alternate;\n      if (current !== null) {\n        var currentQueue = current.updateQueue;\n        if (queue === currentQueue) {\n          var newFirst = null;\n          var newLast = null;\n          var firstBaseUpdate = queue.firstBaseUpdate;\n          if (firstBaseUpdate !== null) {\n            var update = firstBaseUpdate;\n            do {\n              var clone = {\n                lane: update.lane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: null,\n                next: null\n              };\n              if (newLast === null) {\n                newFirst = newLast = clone;\n              } else {\n                newLast.next = clone;\n                newLast = clone;\n              }\n              update = update.next;\n            } while (update !== null);\n            if (newLast === null) {\n              newFirst = newLast = capturedUpdate;\n            } else {\n              newLast.next = capturedUpdate;\n              newLast = capturedUpdate;\n            }\n          } else {\n            newFirst = newLast = capturedUpdate;\n          }\n          queue = {\n            baseState: currentQueue.baseState,\n            firstBaseUpdate: newFirst,\n            lastBaseUpdate: newLast,\n            shared: currentQueue.shared,\n            callbacks: currentQueue.callbacks\n          };\n          workInProgress.updateQueue = queue;\n          return;\n        }\n      }\n      var lastBaseUpdate = queue.lastBaseUpdate;\n      if (lastBaseUpdate === null) {\n        queue.firstBaseUpdate = capturedUpdate;\n      } else {\n        lastBaseUpdate.next = capturedUpdate;\n      }\n      queue.lastBaseUpdate = capturedUpdate;\n    }\n    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n      switch (update.tag) {\n        case ReplaceState:\n          {\n            var payload = update.payload;\n            if (typeof payload === \"function\") {\n              {\n                enterDisallowedContextReadInDEV();\n              }\n              var nextState = payload.call(instance, prevState, nextProps);\n              {\n                if (workInProgress.mode & StrictLegacyMode) {\n                  setIsStrictModeForDevtools(true);\n                  try {\n                    payload.call(instance, prevState, nextProps);\n                  } finally {\n                    setIsStrictModeForDevtools(false);\n                  }\n                }\n                exitDisallowedContextReadInDEV();\n              }\n              return nextState;\n            }\n            return payload;\n          }\n        case CaptureUpdate:\n          {\n            workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n          }\n        case UpdateState:\n          {\n            var _payload = update.payload;\n            var partialState;\n            if (typeof _payload === \"function\") {\n              {\n                enterDisallowedContextReadInDEV();\n              }\n              partialState = _payload.call(instance, prevState, nextProps);\n              {\n                if (workInProgress.mode & StrictLegacyMode) {\n                  setIsStrictModeForDevtools(true);\n                  try {\n                    _payload.call(instance, prevState, nextProps);\n                  } finally {\n                    setIsStrictModeForDevtools(false);\n                  }\n                }\n                exitDisallowedContextReadInDEV();\n              }\n            } else {\n              partialState = _payload;\n            }\n            if (partialState === null || partialState === undefined) {\n              return prevState;\n            }\n            return assign({}, prevState, partialState);\n          }\n        case ForceUpdate:\n          {\n            hasForceUpdate = true;\n            return prevState;\n          }\n      }\n      return prevState;\n    }\n    var didReadFromEntangledAsyncAction = false;\n    function suspendIfUpdateReadFromEntangledAsyncAction() {\n      if (didReadFromEntangledAsyncAction) {\n        var entangledActionThenable = peekEntangledActionThenable();\n        if (entangledActionThenable !== null) {\n          throw entangledActionThenable;\n        }\n      }\n    }\n    function processUpdateQueue(workInProgress, props, instance, renderLanes) {\n      didReadFromEntangledAsyncAction = false;\n      var queue = workInProgress.updateQueue;\n      hasForceUpdate = false;\n      {\n        currentlyProcessingQueue = queue.shared;\n      }\n      var firstBaseUpdate = queue.firstBaseUpdate;\n      var lastBaseUpdate = queue.lastBaseUpdate;\n      var pendingQueue = queue.shared.pending;\n      if (pendingQueue !== null) {\n        queue.shared.pending = null;\n        var lastPendingUpdate = pendingQueue;\n        var firstPendingUpdate = lastPendingUpdate.next;\n        lastPendingUpdate.next = null;\n        if (lastBaseUpdate === null) {\n          firstBaseUpdate = firstPendingUpdate;\n        } else {\n          lastBaseUpdate.next = firstPendingUpdate;\n        }\n        lastBaseUpdate = lastPendingUpdate;\n        var current = workInProgress.alternate;\n        if (current !== null) {\n          var currentQueue = current.updateQueue;\n          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n          if (currentLastBaseUpdate !== lastBaseUpdate) {\n            if (currentLastBaseUpdate === null) {\n              currentQueue.firstBaseUpdate = firstPendingUpdate;\n            } else {\n              currentLastBaseUpdate.next = firstPendingUpdate;\n            }\n            currentQueue.lastBaseUpdate = lastPendingUpdate;\n          }\n        }\n      }\n      if (firstBaseUpdate !== null) {\n        var newState = queue.baseState;\n        var newLanes = NoLanes;\n        var newBaseState = null;\n        var newFirstBaseUpdate = null;\n        var newLastBaseUpdate = null;\n        var update = firstBaseUpdate;\n        do {\n          var updateLane = removeLanes(update.lane, OffscreenLane);\n          var isHiddenUpdate = updateLane !== update.lane;\n          var shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes, updateLane);\n          if (shouldSkipUpdate) {\n            var clone = {\n              lane: updateLane,\n              tag: update.tag,\n              payload: update.payload,\n              callback: update.callback,\n              next: null\n            };\n            if (newLastBaseUpdate === null) {\n              newFirstBaseUpdate = newLastBaseUpdate = clone;\n              newBaseState = newState;\n            } else {\n              newLastBaseUpdate = newLastBaseUpdate.next = clone;\n            }\n            newLanes = mergeLanes(newLanes, updateLane);\n          } else {\n            if (updateLane !== NoLane && updateLane === peekEntangledActionLane()) {\n              didReadFromEntangledAsyncAction = true;\n            }\n            if (newLastBaseUpdate !== null) {\n              var _clone = {\n                lane: NoLane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: null,\n                next: null\n              };\n              newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n            }\n            newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n            var callback = update.callback;\n            if (callback !== null) {\n              workInProgress.flags |= Callback;\n              if (isHiddenUpdate) {\n                workInProgress.flags |= Visibility;\n              }\n              var callbacks = queue.callbacks;\n              if (callbacks === null) {\n                queue.callbacks = [callback];\n              } else {\n                callbacks.push(callback);\n              }\n            }\n          }\n          update = update.next;\n          if (update === null) {\n            pendingQueue = queue.shared.pending;\n            if (pendingQueue === null) {\n              break;\n            } else {\n              var _lastPendingUpdate = pendingQueue;\n              var _firstPendingUpdate = _lastPendingUpdate.next;\n              _lastPendingUpdate.next = null;\n              update = _firstPendingUpdate;\n              queue.lastBaseUpdate = _lastPendingUpdate;\n              queue.shared.pending = null;\n            }\n          }\n        } while (true);\n        if (newLastBaseUpdate === null) {\n          newBaseState = newState;\n        }\n        queue.baseState = newBaseState;\n        queue.firstBaseUpdate = newFirstBaseUpdate;\n        queue.lastBaseUpdate = newLastBaseUpdate;\n        if (firstBaseUpdate === null) {\n          queue.shared.lanes = NoLanes;\n        }\n        markSkippedUpdateLanes(newLanes);\n        workInProgress.lanes = newLanes;\n        workInProgress.memoizedState = newState;\n      }\n      {\n        currentlyProcessingQueue = null;\n      }\n    }\n    function callCallback(callback, context) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\"Invalid argument passed as callback. Expected a function. Instead \" + (\"received: \" + callback));\n      }\n      callback.call(context);\n    }\n    function resetHasForceUpdateBeforeProcessing() {\n      hasForceUpdate = false;\n    }\n    function checkHasForceUpdateAfterProcessing() {\n      return hasForceUpdate;\n    }\n    function deferHiddenCallbacks(updateQueue) {\n      var newHiddenCallbacks = updateQueue.callbacks;\n      if (newHiddenCallbacks !== null) {\n        var existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n        if (existingHiddenCallbacks === null) {\n          updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;\n        } else {\n          updateQueue.shared.hiddenCallbacks = existingHiddenCallbacks.concat(newHiddenCallbacks);\n        }\n      }\n    }\n    function commitHiddenCallbacks(updateQueue, context) {\n      var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n      if (hiddenCallbacks !== null) {\n        updateQueue.shared.hiddenCallbacks = null;\n        for (var i = 0; i < hiddenCallbacks.length; i++) {\n          var callback = hiddenCallbacks[i];\n          callCallback(callback, context);\n        }\n      }\n    }\n    function commitCallbacks(updateQueue, context) {\n      var callbacks = updateQueue.callbacks;\n      if (callbacks !== null) {\n        updateQueue.callbacks = null;\n        for (var i = 0; i < callbacks.length; i++) {\n          var callback = callbacks[i];\n          callCallback(callback, context);\n        }\n      }\n    }\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    function shallowEqual(objA, objB) {\n      if (objectIs(objA, objB)) {\n        return true;\n      }\n      if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n        return false;\n      }\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n      if (keysA.length !== keysB.length) {\n        return false;\n      }\n      for (var i = 0; i < keysA.length; i++) {\n        var currentKey = keysA[i];\n        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    function describeBuiltInComponentFrame(name, ownerFn) {\n      {\n        var ownerName = null;\n        if (ownerFn) {\n          ownerName = ownerFn.displayName || ownerFn.name || null;\n        }\n        return describeComponentFrame(name, ownerName);\n      }\n    }\n    function describeDebugInfoFrame(name, env) {\n      return describeBuiltInComponentFrame(name + (env ? \" (\" + env + \")\" : \"\"), null);\n    }\n    {\n      var PossiblyWeakMap$1 = typeof WeakMap === \"function\" ? WeakMap : Map;\n      new PossiblyWeakMap$1();\n    }\n    function describeComponentFrame(name, ownerName) {\n      var sourceInfo = \"\";\n      if (ownerName) {\n        sourceInfo = \" (created by \" + ownerName + \")\";\n      }\n      return \"\\n    in \" + (name || \"Unknown\") + sourceInfo;\n    }\n    function describeClassComponentFrame(ctor, ownerFn) {\n      {\n        return describeFunctionComponentFrame(ctor, ownerFn);\n      }\n    }\n    function describeFunctionComponentFrame(fn, ownerFn) {\n      {\n        if (!fn) {\n          return \"\";\n        }\n        var name = fn.displayName || fn.name || null;\n        var ownerName = null;\n        if (ownerFn) {\n          ownerName = ownerFn.displayName || ownerFn.name || null;\n        }\n        return describeComponentFrame(name, ownerName);\n      }\n    }\n    function describeFiber(fiber) {\n      var owner = fiber._debugOwner ? fiber._debugOwner.type : null;\n      switch (fiber.tag) {\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          return describeBuiltInComponentFrame(fiber.type, owner);\n        case LazyComponent:\n          return describeBuiltInComponentFrame(\"Lazy\", owner);\n        case SuspenseComponent:\n          return describeBuiltInComponentFrame(\"Suspense\", owner);\n        case SuspenseListComponent:\n          return describeBuiltInComponentFrame(\"SuspenseList\", owner);\n        case FunctionComponent:\n        case IndeterminateComponent:\n        case SimpleMemoComponent:\n          return describeFunctionComponentFrame(fiber.type, owner);\n        case ForwardRef:\n          return describeFunctionComponentFrame(fiber.type.render, owner);\n        case ClassComponent:\n          return describeClassComponentFrame(fiber.type, owner);\n        default:\n          return \"\";\n      }\n    }\n    function getStackByFiberInDevAndProd(workInProgress) {\n      try {\n        var info = \"\";\n        var node = workInProgress;\n        do {\n          info += describeFiber(node);\n          if (true) {\n            var debugInfo = node._debugInfo;\n            if (debugInfo) {\n              for (var i = debugInfo.length - 1; i >= 0; i--) {\n                var entry = debugInfo[i];\n                if (typeof entry.name === \"string\") {\n                  info += describeDebugInfoFrame(entry.name, entry.env);\n                }\n              }\n            }\n          }\n          node = node.return;\n        } while (node);\n        return info;\n      } catch (x) {\n        return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n      }\n    }\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var current = null;\n    var isRendering = false;\n    function getCurrentFiberOwnerNameInDevOrNull() {\n      {\n        if (current === null) {\n          return null;\n        }\n        var owner = current._debugOwner;\n        if (owner !== null && typeof owner !== \"undefined\") {\n          return getComponentNameFromFiber(owner);\n        }\n      }\n      return null;\n    }\n    function getCurrentFiberStackInDev() {\n      {\n        if (current === null) {\n          return \"\";\n        }\n        return getStackByFiberInDevAndProd(current);\n      }\n    }\n    function resetCurrentFiber() {\n      {\n        ReactDebugCurrentFrame.getCurrentStack = null;\n        current = null;\n        isRendering = false;\n      }\n    }\n    function setCurrentFiber(fiber) {\n      {\n        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n        current = fiber;\n        isRendering = false;\n      }\n    }\n    function getCurrentFiber() {\n      {\n        return current;\n      }\n    }\n    function setIsRendering(rendering) {\n      {\n        isRendering = rendering;\n      }\n    }\n    var ReactStrictModeWarnings = {\n      recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n      flushPendingUnsafeLifecycleWarnings: function () {},\n      recordLegacyContextWarning: function (fiber, instance) {},\n      flushLegacyContextWarning: function () {},\n      discardPendingWarnings: function () {}\n    };\n    {\n      var findStrictRoot = function (fiber) {\n        var maybeStrictRoot = null;\n        var node = fiber;\n        while (node !== null) {\n          if (node.mode & StrictLegacyMode) {\n            maybeStrictRoot = node;\n          }\n          node = node.return;\n        }\n        return maybeStrictRoot;\n      };\n      var setToSortedString = function (set) {\n        var array = [];\n        set.forEach(function (value) {\n          array.push(value);\n        });\n        return array.sort().join(\", \");\n      };\n      var pendingComponentWillMountWarnings = [];\n      var pendingUNSAFE_ComponentWillMountWarnings = [];\n      var pendingComponentWillReceivePropsWarnings = [];\n      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n      var pendingComponentWillUpdateWarnings = [];\n      var pendingUNSAFE_ComponentWillUpdateWarnings = [];\n      var didWarnAboutUnsafeLifecycles = new Set();\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n          return;\n        }\n        if (typeof instance.componentWillMount === \"function\" && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n          pendingComponentWillMountWarnings.push(fiber);\n        }\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === \"function\") {\n          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n        }\n        if (typeof instance.componentWillReceiveProps === \"function\" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n          pendingComponentWillReceivePropsWarnings.push(fiber);\n        }\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n        }\n        if (typeof instance.componentWillUpdate === \"function\" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n          pendingComponentWillUpdateWarnings.push(fiber);\n        }\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n        }\n      };\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n        var componentWillMountUniqueNames = new Set();\n        if (pendingComponentWillMountWarnings.length > 0) {\n          pendingComponentWillMountWarnings.forEach(function (fiber) {\n            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillMountWarnings = [];\n        }\n        var UNSAFE_componentWillMountUniqueNames = new Set();\n        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillMountWarnings = [];\n        }\n        var componentWillReceivePropsUniqueNames = new Set();\n        if (pendingComponentWillReceivePropsWarnings.length > 0) {\n          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillReceivePropsWarnings = [];\n        }\n        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        }\n        var componentWillUpdateUniqueNames = new Set();\n        if (pendingComponentWillUpdateWarnings.length > 0) {\n          pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillUpdateWarnings = [];\n        }\n        var UNSAFE_componentWillUpdateUniqueNames = new Set();\n        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        }\n        if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n          error(\"Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. \" + \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\" + \"\\nPlease update the following components: %s\", sortedNames);\n        }\n        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n          error(\"Using UNSAFE_componentWillReceiveProps in strict mode is not recommended \" + \"and may indicate bugs in your code. \" + \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"* If you're updating state whenever props change, \" + \"refactor your code to use memoization techniques or move it to \" + \"static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\\n\" + \"\\nPlease update the following components: %s\", _sortedNames);\n        }\n        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n          error(\"Using UNSAFE_componentWillUpdate in strict mode is not recommended \" + \"and may indicate bugs in your code. \" + \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames2);\n        }\n        if (componentWillMountUniqueNames.size > 0) {\n          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n          warn(\"componentWillMount has been renamed, and is not recommended for use. \" + \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\" + \"* Rename componentWillMount to UNSAFE_componentWillMount to suppress \" + \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" + \"To rename all deprecated lifecycles to their new names, you can run \" + \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames3);\n        }\n        if (componentWillReceivePropsUniqueNames.size > 0) {\n          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n          warn(\"componentWillReceiveProps has been renamed, and is not recommended for use. \" + \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"* If you're updating state whenever props change, refactor your \" + \"code to use memoization techniques or move it to \" + \"static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\\n\" + \"* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress \" + \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" + \"To rename all deprecated lifecycles to their new names, you can run \" + \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames4);\n        }\n        if (componentWillUpdateUniqueNames.size > 0) {\n          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n          warn(\"componentWillUpdate has been renamed, and is not recommended for use. \" + \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress \" + \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" + \"To rename all deprecated lifecycles to their new names, you can run \" + \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames5);\n        }\n      };\n      var pendingLegacyContextWarning = new Map();\n      var didWarnAboutLegacyContext = new Set();\n      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n        var strictRoot = findStrictRoot(fiber);\n        if (strictRoot === null) {\n          error(\"Expected to find a StrictMode component in a strict mode tree. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n          return;\n        }\n        if (didWarnAboutLegacyContext.has(fiber.type)) {\n          return;\n        }\n        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === \"function\") {\n          if (warningsForRoot === undefined) {\n            warningsForRoot = [];\n            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n          }\n          warningsForRoot.push(fiber);\n        }\n      };\n      ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n          if (fiberArray.length === 0) {\n            return;\n          }\n          var firstFiber = fiberArray[0];\n          var uniqueNames = new Set();\n          fiberArray.forEach(function (fiber) {\n            uniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutLegacyContext.add(fiber.type);\n          });\n          var sortedNames = setToSortedString(uniqueNames);\n          try {\n            setCurrentFiber(firstFiber);\n            error(\"Legacy context API has been detected within a strict-mode tree.\" + \"\\n\\nThe old API will be supported in all 16.x releases, but applications \" + \"using it should migrate to the new version.\" + \"\\n\\nPlease update the following components: %s\" + \"\\n\\nLearn more about this warning here: https://react.dev/link/legacy-context\", sortedNames);\n          } finally {\n            resetCurrentFiber();\n          }\n        });\n      };\n      ReactStrictModeWarnings.discardPendingWarnings = function () {\n        pendingComponentWillMountWarnings = [];\n        pendingUNSAFE_ComponentWillMountWarnings = [];\n        pendingComponentWillReceivePropsWarnings = [];\n        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        pendingComponentWillUpdateWarnings = [];\n        pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        pendingLegacyContextWarning = new Map();\n      };\n    }\n    function typeName(value) {\n      {\n        var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\";\n        return type;\n      }\n    }\n    function willCoercionThrow(value) {\n      {\n        try {\n          testStringCoercion(value);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      }\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      {\n        if (willCoercionThrow(value)) {\n          error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n          return testStringCoercion(value);\n        }\n      }\n    }\n    function checkPropStringCoercion(value, propName) {\n      {\n        if (willCoercionThrow(value)) {\n          error(\"The provided `%s` prop is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", propName, typeName(value));\n          return testStringCoercion(value);\n        }\n      }\n    }\n    var ReactCurrentActQueue$2 = ReactSharedInternals.ReactCurrentActQueue;\n    function getThenablesFromState(state) {\n      {\n        var devState = state;\n        return devState.thenables;\n      }\n    }\n    var SuspenseException = new Error(\"Suspense Exception: This is not a real error! It's an implementation \" + \"detail of `use` to interrupt the current render. You must either \" + \"rethrow it immediately, or move the `use` call outside of the \" + \"`try/catch` block. Capturing without rethrowing will lead to \" + \"unexpected behavior.\\n\\n\" + \"To handle async errors, wrap your component in an error boundary, or \" + \"call the promise's `.catch` method and pass the result to `use`\");\n    var SuspenseyCommitException = new Error(\"Suspense Exception: This is not a real error, and should not leak into \" + \"userspace. If you're seeing this, it's likely a bug in React.\");\n    var noopSuspenseyCommitThenable = {\n      then: function () {\n        {\n          error(\"Internal React error: A listener was unexpectedly attached to a \" + '\"noop\" thenable. This is a bug in React. Please file an issue.');\n        }\n      }\n    };\n    function createThenableState() {\n      {\n        return {\n          didWarnAboutUncachedPromise: false,\n          thenables: []\n        };\n      }\n    }\n    function isThenableResolved(thenable) {\n      var status = thenable.status;\n      return status === \"fulfilled\" || status === \"rejected\";\n    }\n    function noop() {}\n    function trackUsedThenable(thenableState, thenable, index) {\n      if (ReactCurrentActQueue$2.current !== null) {\n        ReactCurrentActQueue$2.didUsePromise = true;\n      }\n      var trackedThenables = getThenablesFromState(thenableState);\n      var previous = trackedThenables[index];\n      if (previous === undefined) {\n        trackedThenables.push(thenable);\n      } else {\n        if (previous !== thenable) {\n          {\n            var thenableStateDev = thenableState;\n            if (!thenableStateDev.didWarnAboutUncachedPromise) {\n              thenableStateDev.didWarnAboutUncachedPromise = true;\n              error(\"A component was suspended by an uncached promise. Creating \" + \"promises inside a Client Component or hook is not yet \" + \"supported, except via a Suspense-compatible library or framework.\");\n            }\n          }\n          thenable.then(noop, noop);\n          thenable = previous;\n        }\n      }\n      switch (thenable.status) {\n        case \"fulfilled\":\n          {\n            var fulfilledValue = thenable.value;\n            return fulfilledValue;\n          }\n        case \"rejected\":\n          {\n            var rejectedError = thenable.reason;\n            checkIfUseWrappedInAsyncCatch(rejectedError);\n            throw rejectedError;\n          }\n        default:\n          {\n            if (typeof thenable.status === \"string\") {\n              thenable.then(noop, noop);\n            } else {\n              var root = getWorkInProgressRoot();\n              if (root !== null && root.shellSuspendCounter > 100) {\n                throw new Error(\"async/await is not yet supported in Client Components, only \" + \"Server Components. This error is often caused by accidentally \" + \"adding `'use client'` to a module that was originally written \" + \"for the server.\");\n              }\n              var pendingThenable = thenable;\n              pendingThenable.status = \"pending\";\n              pendingThenable.then(function (fulfilledValue) {\n                if (thenable.status === \"pending\") {\n                  var fulfilledThenable = thenable;\n                  fulfilledThenable.status = \"fulfilled\";\n                  fulfilledThenable.value = fulfilledValue;\n                }\n              }, function (error) {\n                if (thenable.status === \"pending\") {\n                  var rejectedThenable = thenable;\n                  rejectedThenable.status = \"rejected\";\n                  rejectedThenable.reason = error;\n                }\n              });\n            }\n            switch (thenable.status) {\n              case \"fulfilled\":\n                {\n                  var fulfilledThenable = thenable;\n                  return fulfilledThenable.value;\n                }\n              case \"rejected\":\n                {\n                  var rejectedThenable = thenable;\n                  var _rejectedError = rejectedThenable.reason;\n                  checkIfUseWrappedInAsyncCatch(_rejectedError);\n                  throw _rejectedError;\n                }\n            }\n            suspendedThenable = thenable;\n            {\n              needsToResetSuspendedThenableDEV = true;\n            }\n            throw SuspenseException;\n          }\n      }\n    }\n    var suspendedThenable = null;\n    var needsToResetSuspendedThenableDEV = false;\n    function getSuspendedThenable() {\n      if (suspendedThenable === null) {\n        throw new Error(\"Expected a suspended thenable. This is a bug in React. Please file \" + \"an issue.\");\n      }\n      var thenable = suspendedThenable;\n      suspendedThenable = null;\n      {\n        needsToResetSuspendedThenableDEV = false;\n      }\n      return thenable;\n    }\n    function checkIfUseWrappedInTryCatch() {\n      {\n        if (needsToResetSuspendedThenableDEV) {\n          needsToResetSuspendedThenableDEV = false;\n          return true;\n        }\n      }\n      return false;\n    }\n    function checkIfUseWrappedInAsyncCatch(rejectedReason) {\n      if (rejectedReason === SuspenseException) {\n        throw new Error(\"Hooks are not supported inside an async component. This \" + \"error is often caused by accidentally adding `'use client'` \" + \"to a module that was originally written for the server.\");\n      }\n    }\n    var thenableState$1 = null;\n    var thenableIndexCounter$1 = 0;\n    function mergeDebugInfo(outer, inner) {\n      if (inner == null) {\n        return outer;\n      } else if (outer === null) {\n        return inner;\n      } else {\n        return outer.concat(inner);\n      }\n    }\n    var didWarnAboutMaps;\n    var didWarnAboutGenerators;\n    var didWarnAboutStringRefs;\n    var ownerHasKeyUseWarning;\n    var ownerHasFunctionTypeWarning;\n    var ownerHasSymbolTypeWarning;\n    var warnForMissingKey = function (child, returnFiber) {};\n    {\n      didWarnAboutMaps = false;\n      didWarnAboutGenerators = false;\n      didWarnAboutStringRefs = {};\n      ownerHasKeyUseWarning = {};\n      ownerHasFunctionTypeWarning = {};\n      ownerHasSymbolTypeWarning = {};\n      warnForMissingKey = function (child, returnFiber) {\n        if (child === null || typeof child !== \"object\") {\n          return;\n        }\n        if (!child._store || child._store.validated || child.key != null) {\n          return;\n        }\n        if (typeof child._store !== \"object\") {\n          throw new Error(\"React Component in warnForMissingKey should have a _store. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n        }\n        child._store.validated = true;\n        var componentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n        if (ownerHasKeyUseWarning[componentName]) {\n          return;\n        }\n        ownerHasKeyUseWarning[componentName] = true;\n        error(\"Each child in a list should have a unique \" + '\"key\" prop. See https://react.dev/link/warning-keys for ' + \"more information.\");\n      };\n    }\n    function isReactClass(type) {\n      return type.prototype && type.prototype.isReactComponent;\n    }\n    function unwrapThenable(thenable) {\n      var index = thenableIndexCounter$1;\n      thenableIndexCounter$1 += 1;\n      if (thenableState$1 === null) {\n        thenableState$1 = createThenableState();\n      }\n      return trackUsedThenable(thenableState$1, thenable, index);\n    }\n    function convertStringRefToCallbackRef(returnFiber, current, element, mixedRef) {\n      {\n        checkPropStringCoercion(mixedRef, \"ref\");\n      }\n      var stringRef = \"\" + mixedRef;\n      var owner = element._owner;\n      if (!owner) {\n        throw new Error(\"Element ref was specified as a string (\" + stringRef + \") but no owner was set. This could happen for one of\" + \" the following reasons:\\n\" + \"1. You may be adding a ref to a function component\\n\" + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + \"3. You have multiple copies of React loaded\\n\" + \"See https://react.dev/link/refs-must-have-owner for more information.\");\n      }\n      if (owner.tag !== ClassComponent) {\n        throw new Error(\"Function components cannot have string refs. \" + \"We recommend using useRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://react.dev/link/strict-mode-string-ref\");\n      }\n      {\n        if (!(typeof element.type === \"function\" && !isReactClass(element.type))) {\n          var componentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n          if (!didWarnAboutStringRefs[componentName]) {\n            error('Component \"%s\" contains the string ref \"%s\". Support for string refs ' + \"will be removed in a future major release. We recommend using \" + \"useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://react.dev/link/strict-mode-string-ref\", componentName, stringRef);\n            didWarnAboutStringRefs[componentName] = true;\n          }\n        }\n      }\n      var inst = owner.stateNode;\n      if (!inst) {\n        throw new Error(\"Missing owner for string ref \" + stringRef + \". This error is likely caused by a \" + \"bug in React. Please file an issue.\");\n      }\n      if (current !== null && current.ref !== null && typeof current.ref === \"function\" && current.ref._stringRef === stringRef) {\n        var currentRef = current.ref;\n        return currentRef;\n      }\n      var ref = function (value) {\n        var refs = inst.refs;\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    }\n    function coerceRef(returnFiber, current, workInProgress, element) {\n      var mixedRef;\n      {\n        mixedRef = element.ref;\n      }\n      var coercedRef;\n      if (typeof mixedRef === \"string\" || typeof mixedRef === \"number\" || typeof mixedRef === \"boolean\") {\n        coercedRef = convertStringRefToCallbackRef(returnFiber, current, element, mixedRef);\n      } else {\n        coercedRef = mixedRef;\n      }\n      workInProgress.ref = coercedRef;\n    }\n    function throwOnInvalidObjectType(returnFiber, newChild) {\n      var childString = Object.prototype.toString.call(newChild);\n      throw new Error(\"Objects are not valid as a React child (found: \" + (childString === \"[object Object]\" ? \"object with keys {\" + Object.keys(newChild).join(\", \") + \"}\" : childString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n    }\n    function warnOnFunctionType(returnFiber, invalidChild) {\n      {\n        var parentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n        if (ownerHasFunctionTypeWarning[parentName]) {\n          return;\n        }\n        ownerHasFunctionTypeWarning[parentName] = true;\n        var name = invalidChild.displayName || invalidChild.name || \"Component\";\n        if (returnFiber.tag === HostRoot) {\n          error(\"Functions are not valid as a React child. This may happen if \" + \"you return %s instead of <%s /> from render. \" + \"Or maybe you meant to call this function rather than return it.\\n\" + \"  root.render(%s)\", name, name, name);\n        } else {\n          error(\"Functions are not valid as a React child. This may happen if \" + \"you return %s instead of <%s /> from render. \" + \"Or maybe you meant to call this function rather than return it.\\n\" + \"  <%s>{%s}</%s>\", name, name, parentName, name, parentName);\n        }\n      }\n    }\n    function warnOnSymbolType(returnFiber, invalidChild) {\n      {\n        var parentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n        if (ownerHasSymbolTypeWarning[parentName]) {\n          return;\n        }\n        ownerHasSymbolTypeWarning[parentName] = true;\n        var name = String(invalidChild);\n        if (returnFiber.tag === HostRoot) {\n          error(\"Symbols are not valid as a React child.\\n\" + \"  root.render(%s)\", name);\n        } else {\n          error(\"Symbols are not valid as a React child.\\n\" + \"  <%s>%s</%s>\", parentName, name, parentName);\n        }\n      }\n    }\n    function resolveLazy(lazyType) {\n      var payload = lazyType._payload;\n      var init = lazyType._init;\n      return init(payload);\n    }\n    function createChildReconciler(shouldTrackSideEffects) {\n      function deleteChild(returnFiber, childToDelete) {\n        if (!shouldTrackSideEffects) {\n          return;\n        }\n        var deletions = returnFiber.deletions;\n        if (deletions === null) {\n          returnFiber.deletions = [childToDelete];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(childToDelete);\n        }\n      }\n      function deleteRemainingChildren(returnFiber, currentFirstChild) {\n        if (!shouldTrackSideEffects) {\n          return null;\n        }\n        var childToDelete = currentFirstChild;\n        while (childToDelete !== null) {\n          deleteChild(returnFiber, childToDelete);\n          childToDelete = childToDelete.sibling;\n        }\n        return null;\n      }\n      function mapRemainingChildren(currentFirstChild) {\n        var existingChildren = new Map();\n        var existingChild = currentFirstChild;\n        while (existingChild !== null) {\n          if (existingChild.key !== null) {\n            existingChildren.set(existingChild.key, existingChild);\n          } else {\n            existingChildren.set(existingChild.index, existingChild);\n          }\n          existingChild = existingChild.sibling;\n        }\n        return existingChildren;\n      }\n      function useFiber(fiber, pendingProps) {\n        var clone = createWorkInProgress(fiber, pendingProps);\n        clone.index = 0;\n        clone.sibling = null;\n        return clone;\n      }\n      function placeChild(newFiber, lastPlacedIndex, newIndex) {\n        newFiber.index = newIndex;\n        if (!shouldTrackSideEffects) {\n          newFiber.flags |= Forked;\n          return lastPlacedIndex;\n        }\n        var current = newFiber.alternate;\n        if (current !== null) {\n          var oldIndex = current.index;\n          if (oldIndex < lastPlacedIndex) {\n            newFiber.flags |= Placement | PlacementDEV;\n            return lastPlacedIndex;\n          } else {\n            return oldIndex;\n          }\n        } else {\n          newFiber.flags |= Placement | PlacementDEV;\n          return lastPlacedIndex;\n        }\n      }\n      function placeSingleChild(newFiber) {\n        if (shouldTrackSideEffects && newFiber.alternate === null) {\n          newFiber.flags |= Placement | PlacementDEV;\n        }\n        return newFiber;\n      }\n      function updateTextNode(returnFiber, current, textContent, lanes, debugInfo) {\n        if (current === null || current.tag !== HostText) {\n          var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          {\n            created._debugInfo = debugInfo;\n          }\n          return created;\n        } else {\n          var existing = useFiber(current, textContent);\n          existing.return = returnFiber;\n          {\n            existing._debugInfo = debugInfo;\n          }\n          return existing;\n        }\n      }\n      function updateElement(returnFiber, current, element, lanes, debugInfo) {\n        var elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          return updateFragment(returnFiber, current, element.props.children, lanes, element.key, debugInfo);\n        }\n        if (current !== null) {\n          if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || typeof elementType === \"object\" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n            var existing = useFiber(current, element.props);\n            coerceRef(returnFiber, current, existing, element);\n            existing.return = returnFiber;\n            {\n              existing._debugOwner = element._owner;\n              existing._debugInfo = debugInfo;\n            }\n            return existing;\n          }\n        }\n        var created = createFiberFromElement(element, returnFiber.mode, lanes);\n        coerceRef(returnFiber, current, created, element);\n        created.return = returnFiber;\n        {\n          created._debugInfo = debugInfo;\n        }\n        return created;\n      }\n      function updatePortal(returnFiber, current, portal, lanes, debugInfo) {\n        if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          {\n            created._debugInfo = debugInfo;\n          }\n          return created;\n        } else {\n          var existing = useFiber(current, portal.children || []);\n          existing.return = returnFiber;\n          {\n            existing._debugInfo = debugInfo;\n          }\n          return existing;\n        }\n      }\n      function updateFragment(returnFiber, current, fragment, lanes, key, debugInfo) {\n        if (current === null || current.tag !== Fragment) {\n          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n          created.return = returnFiber;\n          {\n            created._debugInfo = debugInfo;\n          }\n          return created;\n        } else {\n          var existing = useFiber(current, fragment);\n          existing.return = returnFiber;\n          {\n            existing._debugInfo = debugInfo;\n          }\n          return existing;\n        }\n      }\n      function createChild(returnFiber, newChild, lanes, debugInfo) {\n        if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\" || enableBigIntSupport) {\n          var created = createFiberFromText(\"\" + newChild, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          {\n            created._debugInfo = debugInfo;\n          }\n          return created;\n        }\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n                coerceRef(returnFiber, null, _created, newChild);\n                _created.return = returnFiber;\n                {\n                  _created._debugInfo = mergeDebugInfo(debugInfo, newChild._debugInfo);\n                }\n                return _created;\n              }\n            case REACT_PORTAL_TYPE:\n              {\n                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n                _created2.return = returnFiber;\n                {\n                  _created2._debugInfo = debugInfo;\n                }\n                return _created2;\n              }\n            case REACT_LAZY_TYPE:\n              {\n                var payload = newChild._payload;\n                var init = newChild._init;\n                return createChild(returnFiber, init(payload), lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n              }\n          }\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n            _created3.return = returnFiber;\n            {\n              _created3._debugInfo = mergeDebugInfo(debugInfo, newChild._debugInfo);\n            }\n            return _created3;\n          }\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return createChild(returnFiber, unwrapThenable(thenable), lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n          }\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return createChild(returnFiber, readContextDuringReconciliation(returnFiber, context, lanes), lanes, debugInfo);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber, newChild);\n          }\n          if (typeof newChild === \"symbol\") {\n            warnOnSymbolType(returnFiber, newChild);\n          }\n        }\n        return null;\n      }\n      function updateSlot(returnFiber, oldFiber, newChild, lanes, debugInfo) {\n        var key = oldFiber !== null ? oldFiber.key : null;\n        if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\" || enableBigIntSupport) {\n          if (key !== null) {\n            return null;\n          }\n          return updateTextNode(returnFiber, oldFiber, \"\" + newChild, lanes, debugInfo);\n        }\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                if (newChild.key === key) {\n                  return updateElement(returnFiber, oldFiber, newChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n                } else {\n                  return null;\n                }\n              }\n            case REACT_PORTAL_TYPE:\n              {\n                if (newChild.key === key) {\n                  return updatePortal(returnFiber, oldFiber, newChild, lanes, debugInfo);\n                } else {\n                  return null;\n                }\n              }\n            case REACT_LAZY_TYPE:\n              {\n                var payload = newChild._payload;\n                var init = newChild._init;\n                return updateSlot(returnFiber, oldFiber, init(payload), lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n              }\n          }\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            if (key !== null) {\n              return null;\n            }\n            return updateFragment(returnFiber, oldFiber, newChild, lanes, null, mergeDebugInfo(debugInfo, newChild._debugInfo));\n          }\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return updateSlot(returnFiber, oldFiber, unwrapThenable(thenable), lanes, debugInfo);\n          }\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, context, lanes), lanes, debugInfo);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber, newChild);\n          }\n          if (typeof newChild === \"symbol\") {\n            warnOnSymbolType(returnFiber, newChild);\n          }\n        }\n        return null;\n      }\n      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes, debugInfo) {\n        if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\" || enableBigIntSupport) {\n          var matchedFiber = existingChildren.get(newIdx) || null;\n          return updateTextNode(returnFiber, matchedFiber, \"\" + newChild, lanes, debugInfo);\n        }\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                return updateElement(returnFiber, _matchedFiber, newChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n              }\n            case REACT_PORTAL_TYPE:\n              {\n                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes, debugInfo);\n              }\n            case REACT_LAZY_TYPE:\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n          }\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _matchedFiber3 = existingChildren.get(newIdx) || null;\n            return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null, mergeDebugInfo(debugInfo, newChild._debugInfo));\n          }\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(thenable), lanes, debugInfo);\n          }\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, context, lanes), lanes, debugInfo);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber, newChild);\n          }\n          if (typeof newChild === \"symbol\") {\n            warnOnSymbolType(returnFiber, newChild);\n          }\n        }\n        return null;\n      }\n      function warnOnInvalidKey(child, knownKeys, returnFiber) {\n        {\n          if (typeof child !== \"object\" || child === null) {\n            return knownKeys;\n          }\n          switch (child.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n            case REACT_PORTAL_TYPE:\n              warnForMissingKey(child, returnFiber);\n              var key = child.key;\n              if (typeof key !== \"string\") {\n                break;\n              }\n              if (knownKeys === null) {\n                knownKeys = new Set();\n                knownKeys.add(key);\n                break;\n              }\n              if (!knownKeys.has(key)) {\n                knownKeys.add(key);\n                break;\n              }\n              error(\"Encountered two children with the same key, `%s`. \" + \"Keys should be unique so that components maintain their identity \" + \"across updates. Non-unique keys may cause children to be \" + \"duplicated and/or omitted — the behavior is unsupported and \" + \"could change in a future version.\", key);\n              break;\n            case REACT_LAZY_TYPE:\n              var payload = child._payload;\n              var init = child._init;\n              warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n              break;\n          }\n        }\n        return knownKeys;\n      }\n      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes, debugInfo) {\n        {\n          var knownKeys = null;\n          for (var i = 0; i < newChildren.length; i++) {\n            var child = newChildren[i];\n            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n          }\n        }\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes, debugInfo);\n          if (newFiber === null) {\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n            break;\n          }\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n          if (previousNewFiber === null) {\n            resultingFirstChild = newFiber;\n          } else {\n            previousNewFiber.sibling = newFiber;\n          }\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n        if (newIdx === newChildren.length) {\n          deleteRemainingChildren(returnFiber, oldFiber);\n          return resultingFirstChild;\n        }\n        if (oldFiber === null) {\n          for (; newIdx < newChildren.length; newIdx++) {\n            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes, debugInfo);\n            if (_newFiber === null) {\n              continue;\n            }\n            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber;\n            } else {\n              previousNewFiber.sibling = _newFiber;\n            }\n            previousNewFiber = _newFiber;\n          }\n          return resultingFirstChild;\n        }\n        var existingChildren = mapRemainingChildren(oldFiber);\n        for (; newIdx < newChildren.length; newIdx++) {\n          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes, debugInfo);\n          if (_newFiber2 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber2.alternate !== null) {\n                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n              }\n            }\n            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber2;\n            } else {\n              previousNewFiber.sibling = _newFiber2;\n            }\n            previousNewFiber = _newFiber2;\n          }\n        }\n        if (shouldTrackSideEffects) {\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n        return resultingFirstChild;\n      }\n      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes, debugInfo) {\n        var iteratorFn = getIteratorFn(newChildrenIterable);\n        if (typeof iteratorFn !== \"function\") {\n          throw new Error(\"An object is not an iterable. This error is likely caused by a bug in \" + \"React. Please file an issue.\");\n        }\n        {\n          if (typeof Symbol === \"function\" && newChildrenIterable[Symbol.toStringTag] === \"Generator\") {\n            if (!didWarnAboutGenerators) {\n              error(\"Using Generators as children is unsupported and will likely yield \" + \"unexpected results because enumerating a generator mutates it. \" + \"You may convert it to an array with `Array.from()` or the \" + \"`[...spread]` operator before rendering. Keep in mind \" + \"you might need to polyfill these features for older browsers.\");\n            }\n            didWarnAboutGenerators = true;\n          }\n          if (newChildrenIterable.entries === iteratorFn) {\n            if (!didWarnAboutMaps) {\n              error(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n            }\n            didWarnAboutMaps = true;\n          }\n          var _newChildren = iteratorFn.call(newChildrenIterable);\n          if (_newChildren) {\n            var knownKeys = null;\n            var _step = _newChildren.next();\n            for (; !_step.done; _step = _newChildren.next()) {\n              var child = _step.value;\n              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n            }\n          }\n        }\n        var newChildren = iteratorFn.call(newChildrenIterable);\n        if (newChildren == null) {\n          throw new Error(\"An iterable object provided no iterator.\");\n        }\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n        var step = newChildren.next();\n        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes, debugInfo);\n          if (newFiber === null) {\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n            break;\n          }\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n          if (previousNewFiber === null) {\n            resultingFirstChild = newFiber;\n          } else {\n            previousNewFiber.sibling = newFiber;\n          }\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n        if (step.done) {\n          deleteRemainingChildren(returnFiber, oldFiber);\n          return resultingFirstChild;\n        }\n        if (oldFiber === null) {\n          for (; !step.done; newIdx++, step = newChildren.next()) {\n            var _newFiber3 = createChild(returnFiber, step.value, lanes, debugInfo);\n            if (_newFiber3 === null) {\n              continue;\n            }\n            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber3;\n            } else {\n              previousNewFiber.sibling = _newFiber3;\n            }\n            previousNewFiber = _newFiber3;\n          }\n          return resultingFirstChild;\n        }\n        var existingChildren = mapRemainingChildren(oldFiber);\n        for (; !step.done; newIdx++, step = newChildren.next()) {\n          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes, debugInfo);\n          if (_newFiber4 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber4.alternate !== null) {\n                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n              }\n            }\n            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber4;\n            } else {\n              previousNewFiber.sibling = _newFiber4;\n            }\n            previousNewFiber = _newFiber4;\n          }\n        }\n        if (shouldTrackSideEffects) {\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n        return resultingFirstChild;\n      }\n      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n          var existing = useFiber(currentFirstChild, textContent);\n          existing.return = returnFiber;\n          return existing;\n        }\n        deleteRemainingChildren(returnFiber, currentFirstChild);\n        var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      }\n      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes, debugInfo) {\n        var key = element.key;\n        var child = currentFirstChild;\n        while (child !== null) {\n          if (child.key === key) {\n            var elementType = element.type;\n            if (elementType === REACT_FRAGMENT_TYPE) {\n              if (child.tag === Fragment) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, element.props.children);\n                existing.return = returnFiber;\n                {\n                  existing._debugOwner = element._owner;\n                  existing._debugInfo = debugInfo;\n                }\n                return existing;\n              }\n            } else {\n              if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === \"object\" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var _existing = useFiber(child, element.props);\n                coerceRef(returnFiber, child, _existing, element);\n                _existing.return = returnFiber;\n                {\n                  _existing._debugOwner = element._owner;\n                  _existing._debugInfo = debugInfo;\n                }\n                return _existing;\n              }\n            }\n            deleteRemainingChildren(returnFiber, child);\n            break;\n          } else {\n            deleteChild(returnFiber, child);\n          }\n          child = child.sibling;\n        }\n        if (element.type === REACT_FRAGMENT_TYPE) {\n          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n          created.return = returnFiber;\n          {\n            created._debugInfo = debugInfo;\n          }\n          return created;\n        } else {\n          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n          coerceRef(returnFiber, currentFirstChild, _created4, element);\n          _created4.return = returnFiber;\n          {\n            _created4._debugInfo = debugInfo;\n          }\n          return _created4;\n        }\n      }\n      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes, debugInfo) {\n        var key = portal.key;\n        var child = currentFirstChild;\n        while (child !== null) {\n          if (child.key === key) {\n            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              var existing = useFiber(child, portal.children || []);\n              existing.return = returnFiber;\n              return existing;\n            } else {\n              deleteRemainingChildren(returnFiber, child);\n              break;\n            }\n          } else {\n            deleteChild(returnFiber, child);\n          }\n          child = child.sibling;\n        }\n        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      }\n      function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes, debugInfo) {\n        var isUnkeyedTopLevelFragment = typeof newChild === \"object\" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n        if (isUnkeyedTopLevelFragment) {\n          newChild = newChild.props.children;\n        }\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo)));\n            case REACT_PORTAL_TYPE:\n              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n            case REACT_LAZY_TYPE:\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return reconcileChildFibersImpl(returnFiber, currentFirstChild, init(payload), lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n          }\n          if (isArray(newChild)) {\n            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n          }\n          if (getIteratorFn(newChild)) {\n            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes, mergeDebugInfo(debugInfo, newChild._debugInfo));\n          }\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(thenable), lanes, mergeDebugInfo(debugInfo, thenable._debugInfo));\n          }\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, context, lanes), lanes, debugInfo);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\" || enableBigIntSupport) {\n          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, \"\" + newChild, lanes));\n        }\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber, newChild);\n          }\n          if (typeof newChild === \"symbol\") {\n            warnOnSymbolType(returnFiber, newChild);\n          }\n        }\n        return deleteRemainingChildren(returnFiber, currentFirstChild);\n      }\n      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n        thenableIndexCounter$1 = 0;\n        var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes, null);\n        thenableState$1 = null;\n        return firstChildFiber;\n      }\n      return reconcileChildFibers;\n    }\n    var reconcileChildFibers = createChildReconciler(true);\n    var mountChildFibers = createChildReconciler(false);\n    function resetChildReconcilerOnUnwind() {\n      thenableState$1 = null;\n      thenableIndexCounter$1 = 0;\n    }\n    function cloneChildFibers(current, workInProgress) {\n      if (current !== null && workInProgress.child !== current.child) {\n        throw new Error(\"Resuming work not yet implemented.\");\n      }\n      if (workInProgress.child === null) {\n        return;\n      }\n      var currentChild = workInProgress.child;\n      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n      workInProgress.child = newChild;\n      newChild.return = workInProgress;\n      while (currentChild.sibling !== null) {\n        currentChild = currentChild.sibling;\n        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n        newChild.return = workInProgress;\n      }\n      newChild.sibling = null;\n    }\n    function resetChildFibers(workInProgress, lanes) {\n      var child = workInProgress.child;\n      while (child !== null) {\n        resetWorkInProgress(child, lanes);\n        child = child.sibling;\n      }\n    }\n    var currentTreeHiddenStackCursor = createCursor(null);\n    var prevEntangledRenderLanesCursor = createCursor(NoLanes);\n    function pushHiddenContext(fiber, context) {\n      var prevEntangledRenderLanes = getEntangledRenderLanes();\n      push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);\n      push(currentTreeHiddenStackCursor, context, fiber);\n      setEntangledRenderLanes(mergeLanes(prevEntangledRenderLanes, context.baseLanes));\n    }\n    function reuseHiddenContextOnStack(fiber) {\n      push(prevEntangledRenderLanesCursor, getEntangledRenderLanes(), fiber);\n      push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current, fiber);\n    }\n    function popHiddenContext(fiber) {\n      setEntangledRenderLanes(prevEntangledRenderLanesCursor.current);\n      pop(currentTreeHiddenStackCursor, fiber);\n      pop(prevEntangledRenderLanesCursor, fiber);\n    }\n    function isCurrentTreeHidden() {\n      return currentTreeHiddenStackCursor.current !== null;\n    }\n    var suspenseHandlerStackCursor = createCursor(null);\n    var shellBoundary = null;\n    function getShellBoundary() {\n      return shellBoundary;\n    }\n    function pushPrimaryTreeSuspenseHandler(handler) {\n      var current = handler.alternate;\n      pushSuspenseListContext(handler, setDefaultShallowSuspenseListContext(suspenseStackCursor.current));\n      push(suspenseHandlerStackCursor, handler, handler);\n      if (shellBoundary === null) {\n        if (current === null || isCurrentTreeHidden()) {\n          shellBoundary = handler;\n        } else {\n          var prevState = current.memoizedState;\n          if (prevState !== null) {\n            shellBoundary = handler;\n          }\n        }\n      }\n    }\n    function pushFallbackTreeSuspenseHandler(fiber) {\n      reuseSuspenseHandlerOnStack(fiber);\n    }\n    function pushOffscreenSuspenseHandler(fiber) {\n      if (fiber.tag === OffscreenComponent) {\n        pushSuspenseListContext(fiber, suspenseStackCursor.current);\n        push(suspenseHandlerStackCursor, fiber, fiber);\n        if (shellBoundary !== null) ;else {\n          var current = fiber.alternate;\n          if (current !== null) {\n            var prevState = current.memoizedState;\n            if (prevState !== null) {\n              shellBoundary = fiber;\n            }\n          }\n        }\n      } else {\n        reuseSuspenseHandlerOnStack(fiber);\n      }\n    }\n    function reuseSuspenseHandlerOnStack(fiber) {\n      pushSuspenseListContext(fiber, suspenseStackCursor.current);\n      push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);\n    }\n    function getSuspenseHandler() {\n      return suspenseHandlerStackCursor.current;\n    }\n    function popSuspenseHandler(fiber) {\n      pop(suspenseHandlerStackCursor, fiber);\n      if (shellBoundary === fiber) {\n        shellBoundary = null;\n      }\n      popSuspenseListContext(fiber);\n    }\n    var DefaultSuspenseContext = 0;\n    var SubtreeSuspenseContextMask = 1;\n    var ForceSuspenseFallback = 2;\n    var suspenseStackCursor = createCursor(DefaultSuspenseContext);\n    function hasSuspenseListContext(parentContext, flag) {\n      return (parentContext & flag) !== 0;\n    }\n    function setDefaultShallowSuspenseListContext(parentContext) {\n      return parentContext & SubtreeSuspenseContextMask;\n    }\n    function setShallowSuspenseListContext(parentContext, shallowContext) {\n      return parentContext & SubtreeSuspenseContextMask | shallowContext;\n    }\n    function pushSuspenseListContext(fiber, newContext) {\n      push(suspenseStackCursor, newContext, fiber);\n    }\n    function popSuspenseListContext(fiber) {\n      pop(suspenseStackCursor, fiber);\n    }\n    function findFirstSuspended(row) {\n      var node = row;\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n          if (state !== null) {\n            var dehydrated = state.dehydrated;\n            if (dehydrated === null || isSuspenseInstancePending() || isSuspenseInstanceFallback()) {\n              return node;\n            }\n          }\n        } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {\n          var didSuspend = (node.flags & DidCapture) !== NoFlags$1;\n          if (didSuspend) {\n            return node;\n          }\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n        if (node === row) {\n          return null;\n        }\n        while (node.sibling === null) {\n          if (node.return === null || node.return === row) {\n            return null;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n      return null;\n    }\n    var NoFlags = 0;\n    var HasEffect = 1;\n    var Insertion = 2;\n    var Layout = 4;\n    var Passive = 8;\n    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;\n    var didWarnAboutMismatchedHooksForComponent;\n    var didWarnUncachedGetSnapshot;\n    var didWarnAboutUseWrappedInTryCatch;\n    var didWarnAboutAsyncClientComponent;\n    {\n      didWarnAboutMismatchedHooksForComponent = new Set();\n      didWarnAboutUseWrappedInTryCatch = new Set();\n      didWarnAboutAsyncClientComponent = new Set();\n    }\n    var renderLanes = NoLanes;\n    var currentlyRenderingFiber$1 = null;\n    var currentHook = null;\n    var workInProgressHook = null;\n    var didScheduleRenderPhaseUpdate = false;\n    var didScheduleRenderPhaseUpdateDuringThisPass = false;\n    var shouldDoubleInvokeUserFnsInHooksDEV = false;\n    var thenableIndexCounter = 0;\n    var thenableState = null;\n    var globalClientIdCounter = 0;\n    var RE_RENDER_LIMIT = 25;\n    var currentHookNameInDev = null;\n    var hookTypesDev = null;\n    var hookTypesUpdateIndexDev = -1;\n    var ignorePreviousDependencies = false;\n    function mountHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n        if (hookTypesDev === null) {\n          hookTypesDev = [hookName];\n        } else {\n          hookTypesDev.push(hookName);\n        }\n      }\n    }\n    function updateHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n        if (hookTypesDev !== null) {\n          hookTypesUpdateIndexDev++;\n          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n            warnOnHookMismatchInDev(hookName);\n          }\n        }\n      }\n    }\n    function checkDepsAreArrayDev(deps) {\n      {\n        if (deps !== undefined && deps !== null && !isArray(deps)) {\n          error(\"%s received a final argument that is not an array (instead, received `%s`). When \" + \"specified, the final argument must be an array.\", currentHookNameInDev, typeof deps);\n        }\n      }\n    }\n    function warnOnHookMismatchInDev(currentHookName) {\n      {\n        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n          didWarnAboutMismatchedHooksForComponent.add(componentName);\n          if (hookTypesDev !== null) {\n            var table = \"\";\n            var secondColumnStart = 30;\n            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n              var oldHookName = hookTypesDev[i];\n              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n              var row = i + 1 + \". \" + oldHookName;\n              while (row.length < secondColumnStart) {\n                row += \" \";\n              }\n              row += newHookName + \"\\n\";\n              table += row;\n            }\n            error(\"React has detected a change in the order of Hooks called by %s. \" + \"This will lead to bugs and errors if not fixed. \" + \"For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\\n\\n\" + \"   Previous render            Next render\\n\" + \"   ------------------------------------------------------\\n\" + \"%s\" + \"   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\", componentName, table);\n          }\n        }\n      }\n    }\n    function warnIfAsyncClientComponent(Component) {\n      {\n        var isAsyncFunction = Object.prototype.toString.call(Component) === \"[object AsyncFunction]\";\n        if (isAsyncFunction) {\n          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n          if (!didWarnAboutAsyncClientComponent.has(componentName)) {\n            didWarnAboutAsyncClientComponent.add(componentName);\n            error(\"async/await is not yet supported in Client Components, only \" + \"Server Components. This error is often caused by accidentally \" + \"adding `'use client'` to a module that was originally written \" + \"for the server.\");\n          }\n        }\n      }\n    }\n    function throwInvalidHookError() {\n      throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n    }\n    function areHookInputsEqual(nextDeps, prevDeps) {\n      {\n        if (ignorePreviousDependencies) {\n          return false;\n        }\n      }\n      if (prevDeps === null) {\n        {\n          error(\"%s received a final argument during this render, but not during \" + \"the previous render. Even though the final argument is optional, \" + \"its type cannot change between renders.\", currentHookNameInDev);\n        }\n        return false;\n      }\n      {\n        if (nextDeps.length !== prevDeps.length) {\n          error(\"The final argument passed to %s changed size between renders. The \" + \"order and size of this array must remain constant.\\n\\n\" + \"Previous: %s\\n\" + \"Incoming: %s\", currentHookNameInDev, \"[\" + prevDeps.join(\", \") + \"]\", \"[\" + nextDeps.join(\", \") + \"]\");\n        }\n      }\n      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n        if (objectIs(nextDeps[i], prevDeps[i])) {\n          continue;\n        }\n        return false;\n      }\n      return true;\n    }\n    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n      renderLanes = nextRenderLanes;\n      currentlyRenderingFiber$1 = workInProgress;\n      {\n        hookTypesDev = current !== null ? current._debugHookTypes : null;\n        hookTypesUpdateIndexDev = -1;\n        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n        warnIfAsyncClientComponent(Component);\n      }\n      workInProgress.memoizedState = null;\n      workInProgress.updateQueue = null;\n      workInProgress.lanes = NoLanes;\n      {\n        if (current !== null && current.memoizedState !== null) {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n        } else if (hookTypesDev !== null) {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n        } else {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      }\n      var shouldDoubleRenderDEV = (workInProgress.mode & StrictLegacyMode) !== NoMode;\n      shouldDoubleInvokeUserFnsInHooksDEV = shouldDoubleRenderDEV;\n      var children = Component(props, secondArg);\n      shouldDoubleInvokeUserFnsInHooksDEV = false;\n      if (didScheduleRenderPhaseUpdateDuringThisPass) {\n        children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n      }\n      if (shouldDoubleRenderDEV) {\n        setIsStrictModeForDevtools(true);\n        try {\n          children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      finishRenderingHooks(current, workInProgress);\n      return children;\n    }\n    function finishRenderingHooks(current, workInProgress, Component) {\n      {\n        workInProgress._debugHookTypes = hookTypesDev;\n      }\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n      {\n        currentHookNameInDev = null;\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1;\n        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && (current.mode & ConcurrentMode) !== NoMode) {\n          error(\"Internal React error: Expected static flag was missing. Please \" + \"notify the React team.\");\n        }\n      }\n      didScheduleRenderPhaseUpdate = false;\n      thenableIndexCounter = 0;\n      thenableState = null;\n      if (didRenderTooFewHooks) {\n        throw new Error(\"Rendered fewer hooks than expected. This may be caused by an accidental \" + \"early return statement.\");\n      }\n      {\n        if (checkIfUseWrappedInTryCatch()) {\n          var componentName = getComponentNameFromFiber(workInProgress) || \"Unknown\";\n          if (!didWarnAboutUseWrappedInTryCatch.has(componentName) && !didWarnAboutAsyncClientComponent.has(componentName)) {\n            didWarnAboutUseWrappedInTryCatch.add(componentName);\n            error(\"`use` was called from inside a try/catch block. This is not allowed \" + \"and can lead to unexpected behavior. To handle errors triggered \" + \"by `use`, wrap your component in a error boundary.\");\n          }\n        }\n      }\n    }\n    function replaySuspendedComponentWithHooks(current, workInProgress, Component, props, secondArg) {\n      {\n        hookTypesUpdateIndexDev = -1;\n        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n      }\n      var children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n      finishRenderingHooks(current, workInProgress);\n      return children;\n    }\n    function renderWithHooksAgain(workInProgress, Component, props, secondArg) {\n      currentlyRenderingFiber$1 = workInProgress;\n      var numberOfReRenders = 0;\n      var children;\n      do {\n        if (didScheduleRenderPhaseUpdateDuringThisPass) {\n          thenableState = null;\n        }\n        thenableIndexCounter = 0;\n        didScheduleRenderPhaseUpdateDuringThisPass = false;\n        if (numberOfReRenders >= RE_RENDER_LIMIT) {\n          throw new Error(\"Too many re-renders. React limits the number of renders to prevent \" + \"an infinite loop.\");\n        }\n        numberOfReRenders += 1;\n        {\n          ignorePreviousDependencies = false;\n        }\n        currentHook = null;\n        workInProgressHook = null;\n        workInProgress.updateQueue = null;\n        {\n          hookTypesUpdateIndexDev = -1;\n        }\n        ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;\n        children = Component(props, secondArg);\n      } while (didScheduleRenderPhaseUpdateDuringThisPass);\n      return children;\n    }\n    function bailoutHooks(current, workInProgress, lanes) {\n      workInProgress.updateQueue = current.updateQueue;\n      if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive$1 | Update);\n      } else {\n        workInProgress.flags &= ~(Passive$1 | Update);\n      }\n      current.lanes = removeLanes(current.lanes, lanes);\n    }\n    function resetHooksAfterThrow() {\n      currentlyRenderingFiber$1 = null;\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n    }\n    function resetHooksOnUnwind(workInProgress) {\n      if (didScheduleRenderPhaseUpdate) {\n        var hook = workInProgress.memoizedState;\n        while (hook !== null) {\n          var queue = hook.queue;\n          if (queue !== null) {\n            queue.pending = null;\n          }\n          hook = hook.next;\n        }\n        didScheduleRenderPhaseUpdate = false;\n      }\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n      {\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1;\n        currentHookNameInDev = null;\n      }\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      thenableIndexCounter = 0;\n      thenableState = null;\n    }\n    function mountWorkInProgressHook() {\n      var hook = {\n        memoizedState: null,\n        baseState: null,\n        baseQueue: null,\n        queue: null,\n        next: null\n      };\n      if (workInProgressHook === null) {\n        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n      } else {\n        workInProgressHook = workInProgressHook.next = hook;\n      }\n      return workInProgressHook;\n    }\n    function updateWorkInProgressHook() {\n      var nextCurrentHook;\n      if (currentHook === null) {\n        var current = currentlyRenderingFiber$1.alternate;\n        if (current !== null) {\n          nextCurrentHook = current.memoizedState;\n        } else {\n          nextCurrentHook = null;\n        }\n      } else {\n        nextCurrentHook = currentHook.next;\n      }\n      var nextWorkInProgressHook;\n      if (workInProgressHook === null) {\n        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n      } else {\n        nextWorkInProgressHook = workInProgressHook.next;\n      }\n      if (nextWorkInProgressHook !== null) {\n        workInProgressHook = nextWorkInProgressHook;\n        nextWorkInProgressHook = workInProgressHook.next;\n        currentHook = nextCurrentHook;\n      } else {\n        if (nextCurrentHook === null) {\n          var currentFiber = currentlyRenderingFiber$1.alternate;\n          if (currentFiber === null) {\n            throw new Error(\"Update hook called on initial render. This is likely a bug in React. Please file an issue.\");\n          } else {\n            throw new Error(\"Rendered more hooks than during the previous render.\");\n          }\n        }\n        currentHook = nextCurrentHook;\n        var newHook = {\n          memoizedState: currentHook.memoizedState,\n          baseState: currentHook.baseState,\n          baseQueue: currentHook.baseQueue,\n          queue: currentHook.queue,\n          next: null\n        };\n        if (workInProgressHook === null) {\n          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n        } else {\n          workInProgressHook = workInProgressHook.next = newHook;\n        }\n      }\n      return workInProgressHook;\n    }\n    var createFunctionComponentUpdateQueue;\n    {\n      createFunctionComponentUpdateQueue = function () {\n        return {\n          lastEffect: null,\n          events: null,\n          stores: null\n        };\n      };\n    }\n    function useThenable(thenable) {\n      var index = thenableIndexCounter;\n      thenableIndexCounter += 1;\n      if (thenableState === null) {\n        thenableState = createThenableState();\n      }\n      var result = trackUsedThenable(thenableState, thenable, index);\n      if (currentlyRenderingFiber$1.alternate === null && (workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState === null : workInProgressHook.next === null)) {\n        {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      }\n      return result;\n    }\n    function use(usable) {\n      if (usable !== null && typeof usable === \"object\") {\n        if (typeof usable.then === \"function\") {\n          var thenable = usable;\n          return useThenable(thenable);\n        } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {\n          var context = usable;\n          return readContext(context);\n        }\n      }\n      throw new Error(\"An unsupported type was passed to use(): \" + String(usable));\n    }\n    function basicStateReducer(state, action) {\n      return typeof action === \"function\" ? action(state) : action;\n    }\n    function mountReducer(reducer, initialArg, init) {\n      var hook = mountWorkInProgressHook();\n      var initialState;\n      if (init !== undefined) {\n        initialState = init(initialArg);\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          setIsStrictModeForDevtools(true);\n          init(initialArg);\n          setIsStrictModeForDevtools(false);\n        }\n      } else {\n        initialState = initialArg;\n      }\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: reducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n      return [hook.memoizedState, dispatch];\n    }\n    function updateReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      return updateReducerImpl(hook, currentHook, reducer);\n    }\n    function updateReducerImpl(hook, current, reducer) {\n      var queue = hook.queue;\n      if (queue === null) {\n        throw new Error(\"Should have a queue. This is likely a bug in React. Please file an issue.\");\n      }\n      queue.lastRenderedReducer = reducer;\n      var baseQueue = hook.baseQueue;\n      var pendingQueue = queue.pending;\n      if (pendingQueue !== null) {\n        if (baseQueue !== null) {\n          var baseFirst = baseQueue.next;\n          var pendingFirst = pendingQueue.next;\n          baseQueue.next = pendingFirst;\n          pendingQueue.next = baseFirst;\n        }\n        {\n          if (current.baseQueue !== baseQueue) {\n            error(\"Internal error: Expected work-in-progress queue to be a clone. \" + \"This is a bug in React.\");\n          }\n        }\n        current.baseQueue = baseQueue = pendingQueue;\n        queue.pending = null;\n      }\n      var baseState = hook.baseState;\n      if (baseQueue === null) {\n        hook.memoizedState = baseState;\n      } else {\n        var first = baseQueue.next;\n        var newState = baseState;\n        var newBaseState = null;\n        var newBaseQueueFirst = null;\n        var newBaseQueueLast = null;\n        var update = first;\n        var didReadFromEntangledAsyncAction = false;\n        do {\n          var updateLane = removeLanes(update.lane, OffscreenLane);\n          var isHiddenUpdate = updateLane !== update.lane;\n          var shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes, updateLane);\n          if (shouldSkipUpdate) {\n            var clone = {\n              lane: updateLane,\n              revertLane: update.revertLane,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: null\n            };\n            if (newBaseQueueLast === null) {\n              newBaseQueueFirst = newBaseQueueLast = clone;\n              newBaseState = newState;\n            } else {\n              newBaseQueueLast = newBaseQueueLast.next = clone;\n            }\n            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n            markSkippedUpdateLanes(updateLane);\n          } else {\n            {\n              if (newBaseQueueLast !== null) {\n                var _clone = {\n                  lane: NoLane,\n                  revertLane: NoLane,\n                  action: update.action,\n                  hasEagerState: update.hasEagerState,\n                  eagerState: update.eagerState,\n                  next: null\n                };\n                newBaseQueueLast = newBaseQueueLast.next = _clone;\n              }\n              if (updateLane === peekEntangledActionLane()) {\n                didReadFromEntangledAsyncAction = true;\n              }\n            }\n            var action = update.action;\n            if (shouldDoubleInvokeUserFnsInHooksDEV) {\n              reducer(newState, action);\n            }\n            if (update.hasEagerState) {\n              newState = update.eagerState;\n            } else {\n              newState = reducer(newState, action);\n            }\n          }\n          update = update.next;\n        } while (update !== null && update !== first);\n        if (newBaseQueueLast === null) {\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast.next = newBaseQueueFirst;\n        }\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n          if (didReadFromEntangledAsyncAction) {\n            var entangledActionThenable = peekEntangledActionThenable();\n            if (entangledActionThenable !== null) {\n              throw entangledActionThenable;\n            }\n          }\n        }\n        hook.memoizedState = newState;\n        hook.baseState = newBaseState;\n        hook.baseQueue = newBaseQueueLast;\n        queue.lastRenderedState = newState;\n      }\n      if (baseQueue === null) {\n        queue.lanes = NoLanes;\n      }\n      var dispatch = queue.dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n    function rerenderReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      var queue = hook.queue;\n      if (queue === null) {\n        throw new Error(\"Should have a queue. This is likely a bug in React. Please file an issue.\");\n      }\n      queue.lastRenderedReducer = reducer;\n      var dispatch = queue.dispatch;\n      var lastRenderPhaseUpdate = queue.pending;\n      var newState = hook.memoizedState;\n      if (lastRenderPhaseUpdate !== null) {\n        queue.pending = null;\n        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n        var update = firstRenderPhaseUpdate;\n        do {\n          var action = update.action;\n          newState = reducer(newState, action);\n          update = update.next;\n        } while (update !== firstRenderPhaseUpdate);\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n        }\n        hook.memoizedState = newState;\n        if (hook.baseQueue === null) {\n          hook.baseState = newState;\n        }\n        queue.lastRenderedState = newState;\n      }\n      return [newState, dispatch];\n    }\n    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = mountWorkInProgressHook();\n      var nextSnapshot;\n      {\n        nextSnapshot = getSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error(\"The result of getSnapshot should be cached to avoid an infinite loop\");\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        }\n        var root = getWorkInProgressRoot();\n        if (root === null) {\n          throw new Error(\"Expected a work-in-progress root. This is a bug in React. Please file an issue.\");\n        }\n        var rootRenderLanes = getWorkInProgressRootRenderLanes();\n        if (!includesBlockingLane(root, rootRenderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      }\n      hook.memoizedState = nextSnapshot;\n      var inst = {\n        value: nextSnapshot,\n        getSnapshot: getSnapshot\n      };\n      hook.queue = inst;\n      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n      fiber.flags |= Passive$1;\n      pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null);\n      return nextSnapshot;\n    }\n    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = updateWorkInProgressHook();\n      var nextSnapshot;\n      {\n        nextSnapshot = getSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error(\"The result of getSnapshot should be cached to avoid an infinite loop\");\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        }\n      }\n      var prevSnapshot = (currentHook || hook).memoizedState;\n      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n      if (snapshotChanged) {\n        hook.memoizedState = nextSnapshot;\n        markWorkInProgressReceivedUpdate();\n      }\n      var inst = hook.queue;\n      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n      if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n        fiber.flags |= Passive$1;\n        pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null);\n        var root = getWorkInProgressRoot();\n        if (root === null) {\n          throw new Error(\"Expected a work-in-progress root. This is a bug in React. Please file an issue.\");\n        }\n        if (!includesBlockingLane(root, renderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      }\n      return nextSnapshot;\n    }\n    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n      fiber.flags |= StoreConsistency;\n      var check = {\n        getSnapshot: getSnapshot,\n        value: renderedSnapshot\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.stores = [check];\n      } else {\n        var stores = componentUpdateQueue.stores;\n        if (stores === null) {\n          componentUpdateQueue.stores = [check];\n        } else {\n          stores.push(check);\n        }\n      }\n    }\n    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n      inst.value = nextSnapshot;\n      inst.getSnapshot = getSnapshot;\n      if (checkIfSnapshotChanged(inst)) {\n        forceStoreRerender(fiber);\n      }\n    }\n    function subscribeToStore(fiber, inst, subscribe) {\n      var handleStoreChange = function () {\n        if (checkIfSnapshotChanged(inst)) {\n          forceStoreRerender(fiber);\n        }\n      };\n      return subscribe(handleStoreChange);\n    }\n    function checkIfSnapshotChanged(inst) {\n      var latestGetSnapshot = inst.getSnapshot;\n      var prevValue = inst.value;\n      try {\n        var nextValue = latestGetSnapshot();\n        return !objectIs(prevValue, nextValue);\n      } catch (error) {\n        return true;\n      }\n    }\n    function forceStoreRerender(fiber) {\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n    function mountStateImpl(initialState) {\n      var hook = mountWorkInProgressHook();\n      if (typeof initialState === \"function\") {\n        var initialStateInitializer = initialState;\n        initialState = initialStateInitializer();\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          setIsStrictModeForDevtools(true);\n          initialStateInitializer();\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: basicStateReducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      return hook;\n    }\n    function mountState(initialState) {\n      var hook = mountStateImpl(initialState);\n      var queue = hook.queue;\n      var dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n      queue.dispatch = dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n    function updateState(initialState) {\n      return updateReducer(basicStateReducer);\n    }\n    function rerenderState(initialState) {\n      return rerenderReducer(basicStateReducer);\n    }\n    function pushEffect(tag, create, inst, deps) {\n      var effect = {\n        tag: tag,\n        create: create,\n        inst: inst,\n        deps: deps,\n        next: null\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.lastEffect = effect.next = effect;\n      } else {\n        var lastEffect = componentUpdateQueue.lastEffect;\n        if (lastEffect === null) {\n          componentUpdateQueue.lastEffect = effect.next = effect;\n        } else {\n          var firstEffect = lastEffect.next;\n          lastEffect.next = effect;\n          effect.next = firstEffect;\n          componentUpdateQueue.lastEffect = effect;\n        }\n      }\n      return effect;\n    }\n    function createEffectInstance() {\n      return {\n        destroy: undefined\n      };\n    }\n    function mountRef(initialValue) {\n      var hook = mountWorkInProgressHook();\n      {\n        var _ref2 = {\n          current: initialValue\n        };\n        hook.memoizedState = _ref2;\n        return _ref2;\n      }\n    }\n    function updateRef(initialValue) {\n      var hook = updateWorkInProgressHook();\n      return hook.memoizedState;\n    }\n    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, createEffectInstance(), nextDeps);\n    }\n    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var effect = hook.memoizedState;\n      var inst = effect.inst;\n      if (currentHook !== null) {\n        if (nextDeps !== null) {\n          var prevEffect = currentHook.memoizedState;\n          var prevDeps = prevEffect.deps;\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            hook.memoizedState = pushEffect(hookFlags, create, inst, nextDeps);\n            return;\n          }\n        }\n      }\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, inst, nextDeps);\n    }\n    function mountEffect(create, deps) {\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (currentlyRenderingFiber$1.mode & NoStrictPassiveEffectsMode) === NoMode) {\n        mountEffectImpl(MountPassiveDev | Passive$1 | PassiveStatic, Passive, create, deps);\n      } else {\n        mountEffectImpl(Passive$1 | PassiveStatic, Passive, create, deps);\n      }\n    }\n    function updateEffect(create, deps) {\n      updateEffectImpl(Passive$1, Passive, create, deps);\n    }\n    function mountInsertionEffect(create, deps) {\n      mountEffectImpl(Update, Insertion, create, deps);\n    }\n    function updateInsertionEffect(create, deps) {\n      return updateEffectImpl(Update, Insertion, create, deps);\n    }\n    function mountLayoutEffect(create, deps) {\n      var fiberFlags = Update | LayoutStatic;\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n      return mountEffectImpl(fiberFlags, Layout, create, deps);\n    }\n    function updateLayoutEffect(create, deps) {\n      return updateEffectImpl(Update, Layout, create, deps);\n    }\n    function imperativeHandleEffect(create, ref) {\n      if (typeof ref === \"function\") {\n        var refCallback = ref;\n        var inst = create();\n        refCallback(inst);\n        return function () {\n          refCallback(null);\n        };\n      } else if (ref !== null && ref !== undefined) {\n        var refObject = ref;\n        {\n          if (!refObject.hasOwnProperty(\"current\")) {\n            error(\"Expected useImperativeHandle() first argument to either be a \" + \"ref callback or React.createRef() object. Instead received: %s.\", \"an object with keys {\" + Object.keys(refObject).join(\", \") + \"}\");\n          }\n        }\n        var _inst = create();\n        refObject.current = _inst;\n        return function () {\n          refObject.current = null;\n        };\n      }\n    }\n    function mountImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== \"function\") {\n          error(\"Expected useImperativeHandle() second argument to be a function \" + \"that creates a handle. Instead received: %s.\", create !== null ? typeof create : \"null\");\n        }\n      }\n      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      var fiberFlags = Update | LayoutStatic;\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n      mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n    }\n    function updateImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== \"function\") {\n          error(\"Expected useImperativeHandle() second argument to be a function \" + \"that creates a handle. Instead received: %s.\", create !== null ? typeof create : \"null\");\n        }\n      }\n      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n    }\n    function mountDebugValue(value, formatterFn) {}\n    var updateDebugValue = mountDebugValue;\n    function mountCallback(callback, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n    function updateCallback(callback, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n    function mountMemo(nextCreate, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var nextValue = nextCreate();\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(true);\n        nextCreate();\n        setIsStrictModeForDevtools(false);\n      }\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n    function updateMemo(nextCreate, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n      var nextValue = nextCreate();\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(true);\n        nextCreate();\n        setIsStrictModeForDevtools(false);\n      }\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n    function mountDeferredValue(value, initialValue) {\n      var hook = mountWorkInProgressHook();\n      return mountDeferredValueImpl(hook, value, initialValue);\n    }\n    function updateDeferredValue(value, initialValue) {\n      var hook = updateWorkInProgressHook();\n      var resolvedCurrentHook = currentHook;\n      var prevValue = resolvedCurrentHook.memoizedState;\n      return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n    }\n    function rerenderDeferredValue(value, initialValue) {\n      var hook = updateWorkInProgressHook();\n      if (currentHook === null) {\n        return mountDeferredValueImpl(hook, value, initialValue);\n      } else {\n        var prevValue = currentHook.memoizedState;\n        return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n      }\n    }\n    function mountDeferredValueImpl(hook, value, initialValue) {\n      if (initialValue !== undefined && !includesSomeLane(renderLanes, DeferredLane)) {\n        hook.memoizedState = initialValue;\n        var deferredLane = requestDeferredLane();\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n        markSkippedUpdateLanes(deferredLane);\n        return initialValue;\n      } else {\n        hook.memoizedState = value;\n        return value;\n      }\n    }\n    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {\n      if (objectIs(value, prevValue)) {\n        return value;\n      } else {\n        if (isCurrentTreeHidden()) {\n          var resultValue = mountDeferredValueImpl(hook, value, initialValue);\n          if (!objectIs(resultValue, prevValue)) {\n            markWorkInProgressReceivedUpdate();\n          }\n          return resultValue;\n        }\n        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n        if (shouldDeferValue) {\n          var deferredLane = requestDeferredLane();\n          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n          markSkippedUpdateLanes(deferredLane);\n          return prevValue;\n        } else {\n          markWorkInProgressReceivedUpdate();\n          hook.memoizedState = value;\n          return value;\n        }\n      }\n    }\n    function startTransition(fiber, queue, pendingState, finishedState, callback, options) {\n      var previousPriority = getCurrentUpdatePriority();\n      setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      var currentTransition = {\n        _callbacks: new Set()\n      };\n      {\n        ReactCurrentBatchConfig$2.transition = null;\n        dispatchSetState(fiber, queue, pendingState);\n        ReactCurrentBatchConfig$2.transition = currentTransition;\n      }\n      {\n        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();\n      }\n      try {\n        var returnValue, thenable, thenableForFinishedState;\n        if (enableAsyncActions) ;else {\n          dispatchSetState(fiber, queue, finishedState);\n          callback();\n        }\n      } catch (error) {\n        {\n          throw error;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        {\n          if (prevTransition === null && currentTransition._updatedFibers) {\n            var updatedFibersCount = currentTransition._updatedFibers.size;\n            currentTransition._updatedFibers.clear();\n            if (updatedFibersCount > 10) {\n              warn(\"Detected a large number of updates inside startTransition. \" + \"If this is due to a subscription please re-write it to use React provided hooks. \" + \"Otherwise concurrent mode guarantees are off the table.\");\n            }\n          }\n        }\n      }\n    }\n    function mountTransition() {\n      var stateHook = mountStateImpl(false);\n      var start = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, true, false);\n      var hook = mountWorkInProgressHook();\n      hook.memoizedState = start;\n      return [false, start];\n    }\n    function updateTransition() {\n      var _updateState2 = updateState(),\n        booleanOrThenable = _updateState2[0];\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      var isPending = typeof booleanOrThenable === \"boolean\" ? booleanOrThenable : useThenable(booleanOrThenable);\n      return [isPending, start];\n    }\n    function rerenderTransition() {\n      var _rerenderState = rerenderState(),\n        booleanOrThenable = _rerenderState[0];\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      var isPending = typeof booleanOrThenable === \"boolean\" ? booleanOrThenable : useThenable(booleanOrThenable);\n      return [isPending, start];\n    }\n    function mountId() {\n      var hook = mountWorkInProgressHook();\n      var root = getWorkInProgressRoot();\n      var identifierPrefix = root.identifierPrefix;\n      var id;\n      {\n        var globalClientId = globalClientIdCounter++;\n        id = \":\" + identifierPrefix + \"r\" + globalClientId.toString(32) + \":\";\n      }\n      hook.memoizedState = id;\n      return id;\n    }\n    function updateId() {\n      var hook = updateWorkInProgressHook();\n      var id = hook.memoizedState;\n      return id;\n    }\n    function dispatchReducerAction(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === \"function\") {\n          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + \"second callback argument. To execute a side effect after \" + \"rendering, declare it in the component body with useEffect().\");\n        }\n      }\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        revertLane: NoLane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n    }\n    function dispatchSetState(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === \"function\") {\n          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + \"second callback argument. To execute a side effect after \" + \"rendering, declare it in the component body with useEffect().\");\n        }\n      }\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        revertLane: NoLane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        var alternate = fiber.alternate;\n        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n          var lastRenderedReducer = queue.lastRenderedReducer;\n          if (lastRenderedReducer !== null) {\n            var prevDispatcher;\n            {\n              prevDispatcher = ReactCurrentDispatcher$1.current;\n              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            }\n            try {\n              var currentState = queue.lastRenderedState;\n              var eagerState = lastRenderedReducer(currentState, action);\n              update.hasEagerState = true;\n              update.eagerState = eagerState;\n              if (objectIs(eagerState, currentState)) {\n                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update);\n                return;\n              }\n            } catch (error) {} finally {\n              {\n                ReactCurrentDispatcher$1.current = prevDispatcher;\n              }\n            }\n          }\n        }\n        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n    }\n    function isRenderPhaseUpdate(fiber) {\n      var alternate = fiber.alternate;\n      return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n    }\n    function enqueueRenderPhaseUpdate(queue, update) {\n      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n      var pending = queue.pending;\n      if (pending === null) {\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    }\n    function entangleTransitionUpdate(root, queue, lane) {\n      if (isTransitionLane(lane)) {\n        var queueLanes = queue.lanes;\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        queue.lanes = newQueueLanes;\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n    var ContextOnlyDispatcher = {\n      readContext: readContext,\n      use: use,\n      useCallback: throwInvalidHookError,\n      useContext: throwInvalidHookError,\n      useEffect: throwInvalidHookError,\n      useImperativeHandle: throwInvalidHookError,\n      useInsertionEffect: throwInvalidHookError,\n      useLayoutEffect: throwInvalidHookError,\n      useMemo: throwInvalidHookError,\n      useReducer: throwInvalidHookError,\n      useRef: throwInvalidHookError,\n      useState: throwInvalidHookError,\n      useDebugValue: throwInvalidHookError,\n      useDeferredValue: throwInvalidHookError,\n      useTransition: throwInvalidHookError,\n      useSyncExternalStore: throwInvalidHookError,\n      useId: throwInvalidHookError\n    };\n    var HooksDispatcherOnMountInDEV = null;\n    var HooksDispatcherOnMountWithHookTypesInDEV = null;\n    var HooksDispatcherOnUpdateInDEV = null;\n    var HooksDispatcherOnRerenderInDEV = null;\n    var InvalidNestedHooksDispatcherOnMountInDEV = null;\n    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n    {\n      var warnInvalidContextAccess = function () {\n        error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n      };\n      var warnInvalidHookAccess = function () {\n        error(\"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. \" + \"You can only call Hooks at the top level of your React function. \" + \"For more information, see \" + \"https://react.dev/link/rules-of-hooks\");\n      };\n      HooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          mountHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          mountHookTypesDev();\n          return mountId();\n        }\n      };\n      HooksDispatcherOnMountWithHookTypesInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return mountId();\n        }\n      };\n      HooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return updateDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n      HooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return rerenderDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n      InvalidNestedHooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountId();\n        }\n      };\n      InvalidNestedHooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n      InvalidNestedHooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n    }\n    var now = Scheduler.unstable_now;\n    var commitTime = 0;\n    var layoutEffectStartTime = -1;\n    var profilerStartTime = -1;\n    var passiveEffectStartTime = -1;\n    var currentUpdateIsNested = false;\n    var nestedUpdateScheduled = false;\n    function isCurrentUpdateNested() {\n      return currentUpdateIsNested;\n    }\n    function markNestedUpdateScheduled() {\n      {\n        nestedUpdateScheduled = true;\n      }\n    }\n    function resetNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = false;\n        nestedUpdateScheduled = false;\n      }\n    }\n    function syncNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = nestedUpdateScheduled;\n        nestedUpdateScheduled = false;\n      }\n    }\n    function getCommitTime() {\n      return commitTime;\n    }\n    function recordCommitTime() {\n      commitTime = now();\n    }\n    function startProfilerTimer(fiber) {\n      profilerStartTime = now();\n      if (fiber.actualStartTime < 0) {\n        fiber.actualStartTime = now();\n      }\n    }\n    function stopProfilerTimerIfRunning(fiber) {\n      profilerStartTime = -1;\n    }\n    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n      if (profilerStartTime >= 0) {\n        var elapsedTime = now() - profilerStartTime;\n        fiber.actualDuration += elapsedTime;\n        if (overrideBaseTime) {\n          fiber.selfBaseDuration = elapsedTime;\n        }\n        profilerStartTime = -1;\n      }\n    }\n    function recordLayoutEffectDuration(fiber) {\n      if (layoutEffectStartTime >= 0) {\n        var elapsedTime = now() - layoutEffectStartTime;\n        layoutEffectStartTime = -1;\n        var parentFiber = fiber.return;\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n              root.effectDuration += elapsedTime;\n              return;\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += elapsedTime;\n              return;\n          }\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n    function recordPassiveEffectDuration(fiber) {\n      if (passiveEffectStartTime >= 0) {\n        var elapsedTime = now() - passiveEffectStartTime;\n        passiveEffectStartTime = -1;\n        var parentFiber = fiber.return;\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n              if (root !== null) {\n                root.passiveEffectDuration += elapsedTime;\n              }\n              return;\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n              if (parentStateNode !== null) {\n                parentStateNode.passiveEffectDuration += elapsedTime;\n              }\n              return;\n          }\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n    function startLayoutEffectTimer() {\n      layoutEffectStartTime = now();\n    }\n    function startPassiveEffectTimer() {\n      passiveEffectStartTime = now();\n    }\n    function transferActualDuration(fiber) {\n      var child = fiber.child;\n      while (child) {\n        fiber.actualDuration += child.actualDuration;\n        child = child.sibling;\n      }\n    }\n    function resolveDefaultProps(Component, baseProps) {\n      if (Component && Component.defaultProps) {\n        var props = assign({}, baseProps);\n        var defaultProps = Component.defaultProps;\n        for (var propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n        return props;\n      }\n      return baseProps;\n    }\n    var fakeInternalInstance = {};\n    var didWarnAboutStateAssignmentForComponent;\n    var didWarnAboutUninitializedState;\n    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n    var didWarnAboutLegacyLifecyclesAndDerivedState;\n    var didWarnAboutUndefinedDerivedState;\n    var didWarnAboutDirectlyAssigningPropsToState;\n    var didWarnAboutInvalidateContextType;\n    var didWarnOnInvalidCallback;\n    {\n      didWarnAboutStateAssignmentForComponent = new Set();\n      didWarnAboutUninitializedState = new Set();\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n      didWarnAboutDirectlyAssigningPropsToState = new Set();\n      didWarnAboutUndefinedDerivedState = new Set();\n      didWarnAboutInvalidateContextType = new Set();\n      didWarnOnInvalidCallback = new Set();\n      Object.defineProperty(fakeInternalInstance, \"_processChildContext\", {\n        enumerable: false,\n        value: function () {\n          throw new Error(\"_processChildContext is not available in React 16+. This likely \" + \"means you have multiple copies of React and are attempting to nest \" + \"a React 15 tree inside a React 16 tree using \" + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + \"to make sure you have only one copy of React (and ideally, switch \" + \"to ReactDOM.createPortal).\");\n        }\n      });\n      Object.freeze(fakeInternalInstance);\n    }\n    function warnOnInvalidCallback(callback) {\n      {\n        if (callback === null || typeof callback === \"function\") {\n          return;\n        }\n        var key = String(callback);\n        if (!didWarnOnInvalidCallback.has(key)) {\n          didWarnOnInvalidCallback.add(key);\n          error(\"Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callback);\n        }\n      }\n    }\n    function warnOnUndefinedDerivedState(type, partialState) {\n      {\n        if (partialState === undefined) {\n          var componentName = getComponentNameFromType(type) || \"Component\";\n          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n            didWarnAboutUndefinedDerivedState.add(componentName);\n            error(\"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. \" + \"You have returned undefined.\", componentName);\n          }\n        }\n      }\n    }\n    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n      var prevState = workInProgress.memoizedState;\n      var partialState = getDerivedStateFromProps(nextProps, prevState);\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n          try {\n            partialState = getDerivedStateFromProps(nextProps, prevState);\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n        warnOnUndefinedDerivedState(ctor, partialState);\n      }\n      var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n      workInProgress.memoizedState = memoizedState;\n      if (workInProgress.lanes === NoLanes) {\n        var updateQueue = workInProgress.updateQueue;\n        updateQueue.baseState = memoizedState;\n      }\n    }\n    var classComponentUpdater = {\n      isMounted: isMounted,\n      enqueueSetState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.payload = payload;\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback);\n          }\n          update.callback = callback;\n        }\n        var root = enqueueUpdate(fiber, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      },\n      enqueueReplaceState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.tag = ReplaceState;\n        update.payload = payload;\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback);\n          }\n          update.callback = callback;\n        }\n        var root = enqueueUpdate(fiber, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      },\n      enqueueForceUpdate: function (inst, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.tag = ForceUpdate;\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback);\n          }\n          update.callback = callback;\n        }\n        var root = enqueueUpdate(fiber, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      }\n    };\n    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n      var instance = workInProgress.stateNode;\n      if (typeof instance.shouldComponentUpdate === \"function\") {\n        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n        {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          if (shouldUpdate === undefined) {\n            error(\"%s.shouldComponentUpdate(): Returned undefined instead of a \" + \"boolean value. Make sure to return true or false.\", getComponentNameFromType(ctor) || \"Component\");\n          }\n        }\n        return shouldUpdate;\n      }\n      if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n      }\n      return true;\n    }\n    function checkClassInstance(workInProgress, ctor, newProps) {\n      var instance = workInProgress.stateNode;\n      {\n        var name = getComponentNameFromType(ctor) || \"Component\";\n        var renderPresent = instance.render;\n        if (!renderPresent) {\n          if (ctor.prototype && typeof ctor.prototype.render === \"function\") {\n            error(\"No `render` method found on the %s \" + \"instance: did you accidentally return an object from the constructor?\", name);\n          } else {\n            error(\"No `render` method found on the %s \" + \"instance: you may have forgotten to define `render`.\", name);\n          }\n        }\n        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n          error(\"getInitialState was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Did you mean to define a state property instead?\", name);\n        }\n        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n          error(\"getDefaultProps was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Use a static property to define defaultProps instead.\", name);\n        }\n        if (instance.propTypes) {\n          error(\"propTypes was defined as an instance property on %s. Use a static \" + \"property to define propTypes instead.\", name);\n        }\n        if (instance.contextType) {\n          error(\"contextType was defined as an instance property on %s. Use a static \" + \"property to define contextType instead.\", name);\n        }\n        {\n          if (ctor.childContextTypes) {\n            error(\"%s uses the legacy childContextTypes API which is no longer supported. \" + \"Use React.createContext() instead.\", name);\n          }\n          if (ctor.contextTypes) {\n            error(\"%s uses the legacy contextTypes API which is no longer supported. \" + \"Use React.createContext() with static contextType instead.\", name);\n          }\n        }\n        if (typeof instance.componentShouldUpdate === \"function\") {\n          error(\"%s has a method called \" + \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" + \"The name is phrased as a question because the function is \" + \"expected to return a value.\", name);\n        }\n        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== \"undefined\") {\n          error(\"%s has a method called shouldComponentUpdate(). \" + \"shouldComponentUpdate should not be used when extending React.PureComponent. \" + \"Please extend React.Component if shouldComponentUpdate is used.\", getComponentNameFromType(ctor) || \"A pure component\");\n        }\n        if (typeof instance.componentDidUnmount === \"function\") {\n          error(\"%s has a method called \" + \"componentDidUnmount(). But there is no such lifecycle method. \" + \"Did you mean componentWillUnmount()?\", name);\n        }\n        if (typeof instance.componentDidReceiveProps === \"function\") {\n          error(\"%s has a method called \" + \"componentDidReceiveProps(). But there is no such lifecycle method. \" + \"If you meant to update the state in response to changing props, \" + \"use componentWillReceiveProps(). If you meant to fetch data or \" + \"run side-effects or mutations after React has updated the UI, use componentDidUpdate().\", name);\n        }\n        if (typeof instance.componentWillRecieveProps === \"function\") {\n          error(\"%s has a method called \" + \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\", name);\n        }\n        if (typeof instance.UNSAFE_componentWillRecieveProps === \"function\") {\n          error(\"%s has a method called \" + \"UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\", name);\n        }\n        var hasMutatedProps = instance.props !== newProps;\n        if (instance.props !== undefined && hasMutatedProps) {\n          error(\"When calling super() in `%s`, make sure to pass \" + \"up the same props that your component's constructor was passed.\", name);\n        }\n        if (instance.defaultProps) {\n          error(\"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" + \" Instead, define defaultProps as a static property on %s.\", name, name);\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\" && typeof instance.componentDidUpdate !== \"function\" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n          error(\"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). \" + \"This component defines getSnapshotBeforeUpdate() only.\", getComponentNameFromType(ctor));\n        }\n        if (typeof instance.getDerivedStateFromProps === \"function\") {\n          error(\"%s: getDerivedStateFromProps() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n        }\n        if (typeof instance.getDerivedStateFromError === \"function\") {\n          error(\"%s: getDerivedStateFromError() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n        }\n        if (typeof ctor.getSnapshotBeforeUpdate === \"function\") {\n          error(\"%s: getSnapshotBeforeUpdate() is defined as a static method \" + \"and will be ignored. Instead, declare it as an instance method.\", name);\n        }\n        var state = instance.state;\n        if (state && (typeof state !== \"object\" || isArray(state))) {\n          error(\"%s.state: must be set to an object or null\", name);\n        }\n        if (typeof instance.getChildContext === \"function\" && typeof ctor.childContextTypes !== \"object\") {\n          error(\"%s.getChildContext(): childContextTypes must be defined in order to \" + \"use getChildContext().\", name);\n        }\n      }\n    }\n    function adoptClassInstance(workInProgress, instance) {\n      instance.updater = classComponentUpdater;\n      workInProgress.stateNode = instance;\n      set(instance, workInProgress);\n      {\n        instance._reactInternalInstance = fakeInternalInstance;\n      }\n    }\n    function constructClassInstance(workInProgress, ctor, props) {\n      var context = emptyContextObject;\n      var contextType = ctor.contextType;\n      {\n        if (\"contextType\" in ctor) {\n          var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE;\n          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n            didWarnAboutInvalidateContextType.add(ctor);\n            var addendum = \"\";\n            if (contextType === undefined) {\n              addendum = \" However, it is set to undefined. \" + \"This can be caused by a typo or by mixing up named and default imports. \" + \"This can also happen due to a circular dependency, so \" + \"try moving the createContext() call to a separate file.\";\n            } else if (typeof contextType !== \"object\") {\n              addendum = \" However, it is set to a \" + typeof contextType + \".\";\n            } else if (contextType.$$typeof === REACT_CONSUMER_TYPE) {\n              addendum = \" Did you accidentally pass the Context.Consumer instead?\";\n            } else {\n              addendum = \" However, it is set to an object with keys {\" + Object.keys(contextType).join(\", \") + \"}.\";\n            }\n            error(\"%s defines an invalid contextType. \" + \"contextType should point to the Context object returned by React.createContext().%s\", getComponentNameFromType(ctor) || \"Component\", addendum);\n          }\n        }\n      }\n      if (typeof contextType === \"object\" && contextType !== null) {\n        context = readContext(contextType);\n      }\n      var instance = new ctor(props, context);\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n          try {\n            instance = new ctor(props, context);\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n      }\n      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n      adoptClassInstance(workInProgress, instance);\n      {\n        if (typeof ctor.getDerivedStateFromProps === \"function\" && state === null) {\n          var componentName = getComponentNameFromType(ctor) || \"Component\";\n          if (!didWarnAboutUninitializedState.has(componentName)) {\n            didWarnAboutUninitializedState.add(componentName);\n            error(\"`%s` uses `getDerivedStateFromProps` but its initial state is \" + \"%s. This is not recommended. Instead, define the initial state by \" + \"assigning an object to `this.state` in the constructor of `%s`. \" + \"This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\", componentName, instance.state === null ? \"null\" : \"undefined\", componentName);\n          }\n        }\n        if (typeof ctor.getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          var foundWillMountName = null;\n          var foundWillReceivePropsName = null;\n          var foundWillUpdateName = null;\n          if (typeof instance.componentWillMount === \"function\" && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n            foundWillMountName = \"componentWillMount\";\n          } else if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n            foundWillMountName = \"UNSAFE_componentWillMount\";\n          }\n          if (typeof instance.componentWillReceiveProps === \"function\" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n            foundWillReceivePropsName = \"componentWillReceiveProps\";\n          } else if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n            foundWillReceivePropsName = \"UNSAFE_componentWillReceiveProps\";\n          }\n          if (typeof instance.componentWillUpdate === \"function\" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n            foundWillUpdateName = \"componentWillUpdate\";\n          } else if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n            foundWillUpdateName = \"UNSAFE_componentWillUpdate\";\n          }\n          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n            var _componentName = getComponentNameFromType(ctor) || \"Component\";\n            var newApiName = typeof ctor.getDerivedStateFromProps === \"function\" ? \"getDerivedStateFromProps()\" : \"getSnapshotBeforeUpdate()\";\n            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n              error(\"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\" + \"%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n\" + \"The above lifecycles should be removed. Learn more about this warning here:\\n\" + \"https://react.dev/link/unsafe-component-lifecycles\", _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : \"\", foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : \"\", foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : \"\");\n            }\n          }\n        }\n      }\n      return instance;\n    }\n    function callComponentWillMount(workInProgress, instance) {\n      var oldState = instance.state;\n      if (typeof instance.componentWillMount === \"function\") {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n        instance.UNSAFE_componentWillMount();\n      }\n      if (oldState !== instance.state) {\n        {\n          error(\"%s.componentWillMount(): Assigning directly to this.state is \" + \"deprecated (except inside a component's \" + \"constructor). Use setState instead.\", getComponentNameFromFiber(workInProgress) || \"Component\");\n        }\n        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n      }\n    }\n    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n      var oldState = instance.state;\n      if (typeof instance.componentWillReceiveProps === \"function\") {\n        instance.componentWillReceiveProps(newProps, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n      }\n      if (instance.state !== oldState) {\n        {\n          var componentName = getComponentNameFromFiber(workInProgress) || \"Component\";\n          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n            didWarnAboutStateAssignmentForComponent.add(componentName);\n            error(\"%s.componentWillReceiveProps(): Assigning directly to \" + \"this.state is deprecated (except inside a component's \" + \"constructor). Use setState instead.\", componentName);\n          }\n        }\n        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n      }\n    }\n    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      {\n        checkClassInstance(workInProgress, ctor, newProps);\n      }\n      var instance = workInProgress.stateNode;\n      instance.props = newProps;\n      instance.state = workInProgress.memoizedState;\n      instance.refs = {};\n      initializeUpdateQueue(workInProgress);\n      var contextType = ctor.contextType;\n      if (typeof contextType === \"object\" && contextType !== null) {\n        instance.context = readContext(contextType);\n      } else {\n        instance.context = emptyContextObject;\n      }\n      {\n        if (instance.state === newProps) {\n          var componentName = getComponentNameFromType(ctor) || \"Component\";\n          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n            didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n            error(\"%s: It is not recommended to assign props directly to state \" + \"because updates to props won't be reflected in state. \" + \"In most cases, it is better to use props directly.\", componentName);\n          }\n        }\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n        }\n        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n      }\n      instance.state = workInProgress.memoizedState;\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        instance.state = workInProgress.memoizedState;\n      }\n      if (typeof ctor.getDerivedStateFromProps !== \"function\" && typeof instance.getSnapshotBeforeUpdate !== \"function\" && (typeof instance.UNSAFE_componentWillMount === \"function\" || typeof instance.componentWillMount === \"function\")) {\n        callComponentWillMount(workInProgress, instance);\n        processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n        suspendIfUpdateReadFromEntangledAsyncAction();\n        instance.state = workInProgress.memoizedState;\n      }\n      if (typeof instance.componentDidMount === \"function\") {\n        workInProgress.flags |= Update | LayoutStatic;\n      }\n      if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        workInProgress.flags |= MountLayoutDev;\n      }\n    }\n    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      var instance = workInProgress.stateNode;\n      var oldProps = workInProgress.memoizedProps;\n      instance.props = oldProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n      if (typeof contextType === \"object\" && contextType !== null) {\n        nextContext = readContext(contextType);\n      }\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles = typeof getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\";\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === \"function\" || typeof instance.componentWillReceiveProps === \"function\")) {\n        if (oldProps !== newProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n        }\n      }\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = instance.state = oldState;\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      suspendIfUpdateReadFromEntangledAsyncAction();\n      newState = workInProgress.memoizedState;\n      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        }\n        return false;\n      }\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        newState = workInProgress.memoizedState;\n      }\n      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n      if (shouldUpdate) {\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === \"function\" || typeof instance.componentWillMount === \"function\")) {\n          if (typeof instance.componentWillMount === \"function\") {\n            instance.componentWillMount();\n          }\n          if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n            instance.UNSAFE_componentWillMount();\n          }\n        }\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        }\n      } else {\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        }\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      }\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    }\n    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n      var instance = workInProgress.stateNode;\n      cloneUpdateQueue(current, workInProgress);\n      var unresolvedOldProps = workInProgress.memoizedProps;\n      var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n      instance.props = oldProps;\n      var unresolvedNewProps = workInProgress.pendingProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n      if (typeof contextType === \"object\" && contextType !== null) {\n        nextContext = readContext(contextType);\n      }\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles = typeof getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\";\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === \"function\" || typeof instance.componentWillReceiveProps === \"function\")) {\n        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n        }\n      }\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = instance.state = oldState;\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      suspendIfUpdateReadFromEntangledAsyncAction();\n      newState = workInProgress.memoizedState;\n      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {\n        if (typeof instance.componentDidUpdate === \"function\") {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Update;\n          }\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Snapshot;\n          }\n        }\n        return false;\n      }\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        newState = workInProgress.memoizedState;\n      }\n      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;\n      if (shouldUpdate) {\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === \"function\" || typeof instance.componentWillUpdate === \"function\")) {\n          if (typeof instance.componentWillUpdate === \"function\") {\n            instance.componentWillUpdate(newProps, newState, nextContext);\n          }\n          if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n          }\n        }\n        if (typeof instance.componentDidUpdate === \"function\") {\n          workInProgress.flags |= Update;\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          workInProgress.flags |= Snapshot;\n        }\n      } else {\n        if (typeof instance.componentDidUpdate === \"function\") {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Update;\n          }\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Snapshot;\n          }\n        }\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      }\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    }\n    var CapturedStacks = new WeakMap();\n    function createCapturedValueAtFiber(value, source) {\n      var stack;\n      if (typeof value === \"object\" && value !== null) {\n        var capturedStack = CapturedStacks.get(value);\n        if (typeof capturedStack === \"string\") {\n          stack = capturedStack;\n        } else {\n          stack = getStackByFiberInDevAndProd(source);\n          CapturedStacks.set(value, stack);\n        }\n      } else {\n        stack = getStackByFiberInDevAndProd(source);\n      }\n      return {\n        value: value,\n        source: source,\n        stack: stack,\n        digest: null\n      };\n    }\n    function createCapturedValueFromError(value, digest, stack) {\n      if (typeof stack === \"string\") {\n        CapturedStacks.set(value, stack);\n      }\n      return {\n        value: value,\n        source: null,\n        stack: stack != null ? stack : null,\n        digest: digest != null ? digest : null\n      };\n    }\n    if (typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog !== \"function\") {\n      throw new Error(\"Expected ReactFiberErrorDialog.showErrorDialog to be a function.\");\n    }\n    function showErrorDialog(boundary, errorInfo) {\n      var capturedError = {\n        componentStack: errorInfo.stack !== null ? errorInfo.stack : \"\",\n        error: errorInfo.value,\n        errorBoundary: boundary !== null && boundary.tag === ClassComponent ? boundary.stateNode : null\n      };\n      return ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError);\n    }\n    function logCapturedError(boundary, errorInfo) {\n      try {\n        var logError = showErrorDialog(boundary, errorInfo);\n        if (logError === false) {\n          return;\n        }\n        var error = errorInfo.value;\n        if (true) {\n          var source = errorInfo.source;\n          var stack = errorInfo.stack;\n          var componentStack = stack !== null ? stack : \"\";\n          var componentName = source ? getComponentNameFromFiber(source) : null;\n          var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : \"The above error occurred in one of your React components:\";\n          var errorBoundaryMessage;\n          if (boundary.tag === HostRoot) {\n            errorBoundaryMessage = \"Consider adding an error boundary to your tree to customize error handling behavior.\\n\" + \"Visit https://react.dev/link/error-boundaries to learn more about error boundaries.\";\n          } else {\n            var errorBoundaryName = getComponentNameFromFiber(boundary) || \"Anonymous\";\n            errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n          }\n          console[\"error\"](\"%o\\n\\n%s\\n%s\\n\\n%s\", error, componentNameMessage, componentStack, errorBoundaryMessage);\n        }\n      } catch (e) {\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n    function createRootErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(lane);\n      update.tag = CaptureUpdate;\n      update.payload = {\n        element: null\n      };\n      var error = errorInfo.value;\n      update.callback = function () {\n        onUncaughtError(error);\n        logCapturedError(fiber, errorInfo);\n      };\n      return update;\n    }\n    function createClassErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(lane);\n      update.tag = CaptureUpdate;\n      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n      if (typeof getDerivedStateFromError === \"function\") {\n        var error$1 = errorInfo.value;\n        update.payload = function () {\n          return getDerivedStateFromError(error$1);\n        };\n        update.callback = function () {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n          logCapturedError(fiber, errorInfo);\n        };\n      }\n      var inst = fiber.stateNode;\n      if (inst !== null && typeof inst.componentDidCatch === \"function\") {\n        update.callback = function callback() {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n          logCapturedError(fiber, errorInfo);\n          if (typeof getDerivedStateFromError !== \"function\") {\n            markLegacyErrorBoundaryAsFailed(this);\n          }\n          var error$1 = errorInfo.value;\n          var stack = errorInfo.stack;\n          this.componentDidCatch(error$1, {\n            componentStack: stack !== null ? stack : \"\"\n          });\n          {\n            if (typeof getDerivedStateFromError !== \"function\") {\n              if (!includesSomeLane(fiber.lanes, SyncLane)) {\n                error(\"%s: Error boundaries should implement getDerivedStateFromError(). \" + \"In that method, return a state update to display an error message or fallback UI.\", getComponentNameFromFiber(fiber) || \"Unknown\");\n              }\n            }\n          }\n        };\n      }\n      return update;\n    }\n    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n      var tag = sourceFiber.tag;\n      if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n        var currentSource = sourceFiber.alternate;\n        if (currentSource) {\n          sourceFiber.updateQueue = currentSource.updateQueue;\n          sourceFiber.memoizedState = currentSource.memoizedState;\n          sourceFiber.lanes = currentSource.lanes;\n        } else {\n          sourceFiber.updateQueue = null;\n          sourceFiber.memoizedState = null;\n        }\n      }\n    }\n    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n        if (suspenseBoundary === returnFiber) {\n          suspenseBoundary.flags |= ShouldCapture;\n        } else {\n          suspenseBoundary.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense;\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n          if (sourceFiber.tag === ClassComponent) {\n            var currentSourceFiber = sourceFiber.alternate;\n            if (currentSourceFiber === null) {\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              var update = createUpdate(SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update, SyncLane);\n            }\n          }\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n        }\n        return suspenseBoundary;\n      }\n      suspenseBoundary.flags |= ShouldCapture;\n      suspenseBoundary.lanes = rootRenderLanes;\n      return suspenseBoundary;\n    }\n    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n      sourceFiber.flags |= Incomplete;\n      {\n        if (isDevToolsPresent) {\n          restorePendingUpdaters(root, rootRenderLanes);\n        }\n      }\n      if (value !== null && typeof value === \"object\") {\n        if (typeof value.then === \"function\") {\n          var wakeable = value;\n          resetSuspendedComponent(sourceFiber);\n          var suspenseBoundary = getSuspenseHandler();\n          if (suspenseBoundary !== null) {\n            switch (suspenseBoundary.tag) {\n              case SuspenseComponent:\n                {\n                  if (sourceFiber.mode & ConcurrentMode) {\n                    if (getShellBoundary() === null) {\n                      renderDidSuspendDelayIfPossible();\n                    } else {\n                      var current = suspenseBoundary.alternate;\n                      if (current === null) {\n                        renderDidSuspend();\n                      }\n                    }\n                  }\n                  suspenseBoundary.flags &= ~ForceClientRender;\n                  markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes);\n                  var isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;\n                  if (isSuspenseyResource) {\n                    suspenseBoundary.flags |= ScheduleRetry;\n                  } else {\n                    var retryQueue = suspenseBoundary.updateQueue;\n                    if (retryQueue === null) {\n                      suspenseBoundary.updateQueue = new Set([wakeable]);\n                    } else {\n                      retryQueue.add(wakeable);\n                    }\n                    if (suspenseBoundary.mode & ConcurrentMode) {\n                      attachPingListener(root, wakeable, rootRenderLanes);\n                    }\n                  }\n                  return false;\n                }\n              case OffscreenComponent:\n                {\n                  if (suspenseBoundary.mode & ConcurrentMode) {\n                    suspenseBoundary.flags |= ShouldCapture;\n                    var _isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;\n                    if (_isSuspenseyResource) {\n                      suspenseBoundary.flags |= ScheduleRetry;\n                    } else {\n                      var offscreenQueue = suspenseBoundary.updateQueue;\n                      if (offscreenQueue === null) {\n                        var newOffscreenQueue = {\n                          transitions: null,\n                          markerInstances: null,\n                          retryQueue: new Set([wakeable])\n                        };\n                        suspenseBoundary.updateQueue = newOffscreenQueue;\n                      } else {\n                        var _retryQueue = offscreenQueue.retryQueue;\n                        if (_retryQueue === null) {\n                          offscreenQueue.retryQueue = new Set([wakeable]);\n                        } else {\n                          _retryQueue.add(wakeable);\n                        }\n                      }\n                      attachPingListener(root, wakeable, rootRenderLanes);\n                    }\n                    return false;\n                  }\n                }\n            }\n            throw new Error(\"Unexpected Suspense handler tag (\" + suspenseBoundary.tag + \"). This \" + \"is a bug in React.\");\n          } else {\n            if (root.tag === ConcurrentRoot) {\n              attachPingListener(root, wakeable, rootRenderLanes);\n              renderDidSuspendDelayIfPossible();\n              return false;\n            } else {\n              var uncaughtSuspenseError = new Error(\"A component suspended while responding to synchronous input. This \" + \"will cause the UI to be replaced with a loading indicator. To \" + \"fix, updates that suspend should be wrapped \" + \"with startTransition.\");\n              value = uncaughtSuspenseError;\n            }\n          }\n        }\n      }\n      value = createCapturedValueAtFiber(value, sourceFiber);\n      renderDidError(value);\n      if (returnFiber === null) {\n        return true;\n      }\n      var workInProgress = returnFiber;\n      do {\n        switch (workInProgress.tag) {\n          case HostRoot:\n            {\n              var _errorInfo = value;\n              workInProgress.flags |= ShouldCapture;\n              var lane = pickArbitraryLane(rootRenderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n              var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n              enqueueCapturedUpdate(workInProgress, update);\n              return false;\n            }\n          case ClassComponent:\n            var errorInfo = value;\n            var ctor = workInProgress.type;\n            var instance = workInProgress.stateNode;\n            if ((workInProgress.flags & DidCapture) === NoFlags$1 && (typeof ctor.getDerivedStateFromError === \"function\" || instance !== null && typeof instance.componentDidCatch === \"function\" && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n              workInProgress.flags |= ShouldCapture;\n              var _lane = pickArbitraryLane(rootRenderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane);\n              var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n              enqueueCapturedUpdate(workInProgress, _update);\n              return false;\n            }\n            break;\n        }\n        workInProgress = workInProgress.return;\n      } while (workInProgress !== null);\n      return false;\n    }\n    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;\n    var SelectiveHydrationException = new Error(\"This is not a real error. It's an implementation detail of React's \" + \"selective hydration feature. If this leaks into userspace, it's a bug in \" + \"React. Please file an issue.\");\n    var didReceiveUpdate = false;\n    var didWarnAboutBadClass;\n    var didWarnAboutModulePatternComponent;\n    var didWarnAboutContextTypeOnFunctionComponent;\n    var didWarnAboutGetDerivedStateOnFunctionComponent;\n    var didWarnAboutFunctionRefs;\n    var didWarnAboutReassigningProps;\n    var didWarnAboutRevealOrder;\n    var didWarnAboutTailOptions;\n    var didWarnAboutDefaultPropsOnFunctionComponent;\n    {\n      didWarnAboutBadClass = {};\n      didWarnAboutModulePatternComponent = {};\n      didWarnAboutContextTypeOnFunctionComponent = {};\n      didWarnAboutGetDerivedStateOnFunctionComponent = {};\n      didWarnAboutFunctionRefs = {};\n      didWarnAboutReassigningProps = false;\n      didWarnAboutRevealOrder = {};\n      didWarnAboutTailOptions = {};\n      didWarnAboutDefaultPropsOnFunctionComponent = {};\n    }\n    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n      if (current === null) {\n        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n      } else {\n        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n      }\n    }\n    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n      workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n    }\n    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n      var render = Component.render;\n      var ref = workInProgress.ref;\n      var propsWithoutRef;\n      {\n        propsWithoutRef = nextProps;\n      }\n      var nextChildren;\n      prepareToReadContext(workInProgress, renderLanes);\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(current, workInProgress, render, propsWithoutRef, ref, renderLanes);\n        setIsRendering(false);\n      }\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      if (current === null) {\n        var type = Component.type;\n        if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {\n          var resolvedType = type;\n          {\n            resolvedType = resolveFunctionForHotReloading(type);\n          }\n          workInProgress.tag = SimpleMemoComponent;\n          workInProgress.type = resolvedType;\n          {\n            validateFunctionComponentInDev(workInProgress, type);\n          }\n          return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n        }\n        {\n          if (Component.defaultProps !== undefined) {\n            var componentName = getComponentNameFromType(type) || \"Unknown\";\n            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n              error(\"%s: Support for defaultProps will be removed from memo components \" + \"in a future major release. Use JavaScript default parameters instead.\", componentName);\n              didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n            }\n          }\n        }\n        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n        child.ref = workInProgress.ref;\n        child.return = workInProgress;\n        workInProgress.child = child;\n        return child;\n      }\n      var currentChild = current.child;\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n      if (!hasScheduledUpdateOrContext) {\n        var prevProps = currentChild.memoizedProps;\n        var compare = Component.compare;\n        compare = compare !== null ? compare : shallowEqual;\n        if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      }\n      workInProgress.flags |= PerformedWork;\n      var newChild = createWorkInProgress(currentChild, nextProps);\n      newChild.ref = workInProgress.ref;\n      newChild.return = workInProgress;\n      workInProgress.child = newChild;\n      return newChild;\n    }\n    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      if (current !== null) {\n        var prevProps = current.memoizedProps;\n        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {\n          didReceiveUpdate = false;\n          workInProgress.pendingProps = nextProps = prevProps;\n          if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n            workInProgress.lanes = current.lanes;\n            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n          } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {\n            didReceiveUpdate = true;\n          }\n        }\n      }\n      return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n    }\n    function updateOffscreenComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      var nextIsDetached = (workInProgress.stateNode._pendingVisibility & OffscreenDetached) !== 0;\n      var prevState = current !== null ? current.memoizedState : null;\n      markRef(current, workInProgress);\n      if (nextProps.mode === \"hidden\" || enableLegacyHidden || nextIsDetached) {\n        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n        if (didSuspend) {\n          var nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes) : renderLanes;\n          if (current !== null) {\n            var currentChild = workInProgress.child = current.child;\n            var currentChildLanes = NoLanes;\n            while (currentChild !== null) {\n              currentChildLanes = mergeLanes(mergeLanes(currentChildLanes, currentChild.lanes), currentChild.childLanes);\n              currentChild = currentChild.sibling;\n            }\n            var lanesWeJustAttempted = nextBaseLanes;\n            var remainingChildLanes = removeLanes(currentChildLanes, lanesWeJustAttempted);\n            workInProgress.childLanes = remainingChildLanes;\n          } else {\n            workInProgress.childLanes = NoLanes;\n            workInProgress.child = null;\n          }\n          return deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes);\n        }\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          var nextState = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = nextState;\n          reuseHiddenContextOnStack(workInProgress);\n          pushOffscreenSuspenseHandler(workInProgress);\n        } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n          workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n          var _nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes) : renderLanes;\n          return deferHiddenOffscreenComponent(current, workInProgress, _nextBaseLanes);\n        } else {\n          var _nextState = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = _nextState;\n          if (prevState !== null) {\n            pushHiddenContext(workInProgress, prevState);\n          } else {\n            reuseHiddenContextOnStack(workInProgress);\n          }\n          pushOffscreenSuspenseHandler(workInProgress);\n        }\n      } else {\n        if (prevState !== null) {\n          pushHiddenContext(workInProgress, prevState);\n          reuseSuspenseHandlerOnStack(workInProgress);\n          workInProgress.memoizedState = null;\n        } else {\n          reuseHiddenContextOnStack(workInProgress);\n          reuseSuspenseHandlerOnStack(workInProgress);\n        }\n      }\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {\n      var nextState = {\n        baseLanes: nextBaseLanes,\n        cachePool: null\n      };\n      workInProgress.memoizedState = nextState;\n      reuseHiddenContextOnStack(workInProgress);\n      pushOffscreenSuspenseHandler(workInProgress);\n      return null;\n    }\n    function updateFragment(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateMode(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateProfiler(current, workInProgress, renderLanes) {\n      {\n        workInProgress.flags |= Update;\n        {\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function markRef(current, workInProgress) {\n      var ref = workInProgress.ref;\n      if (ref === null) {\n        if (current !== null && current.ref !== null) {\n          workInProgress.flags |= Ref | RefStatic;\n        }\n      } else {\n        if (typeof ref !== \"function\" && typeof ref !== \"object\") {\n          throw new Error(\"Expected ref to be a function, an object returned by React.createRef(), or undefined/null.\");\n        }\n        if (current === null || current.ref !== ref) {\n          workInProgress.flags |= Ref | RefStatic;\n        }\n      }\n    }\n    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      var context;\n      var nextChildren;\n      prepareToReadContext(workInProgress, renderLanes);\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n        setIsRendering(false);\n      }\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {\n      prepareToReadContext(workInProgress, renderLanes);\n      var nextChildren = replaySuspendedComponentWithHooks(current, workInProgress, Component, nextProps, secondArg);\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        switch (shouldError(workInProgress)) {\n          case false:\n            {\n              var _instance = workInProgress.stateNode;\n              var ctor = workInProgress.type;\n              var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n              var state = tempInstance.state;\n              _instance.updater.enqueueSetState(_instance, state, null);\n              break;\n            }\n          case true:\n            {\n              workInProgress.flags |= DidCapture;\n              workInProgress.flags |= ShouldCapture;\n              var error$1 = new Error(\"Simulated error coming from DevTools\");\n              var lane = pickArbitraryLane(renderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n              var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);\n              enqueueCapturedUpdate(workInProgress, update);\n              break;\n            }\n        }\n      }\n      var hasContext;\n      if (isContextProvider()) {\n        hasContext = true;\n      } else {\n        hasContext = false;\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var instance = workInProgress.stateNode;\n      var shouldUpdate;\n      if (instance === null) {\n        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);\n        constructClassInstance(workInProgress, Component, nextProps);\n        mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n        shouldUpdate = true;\n      } else if (current === null) {\n        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      } else {\n        shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n      }\n      var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n      {\n        var inst = workInProgress.stateNode;\n        if (shouldUpdate && inst.props !== nextProps) {\n          if (!didWarnAboutReassigningProps) {\n            error(\"It looks like %s is reassigning its own `this.props` while rendering. \" + \"This is not supported and can lead to confusing bugs.\", getComponentNameFromFiber(workInProgress) || \"a component\");\n          }\n          didWarnAboutReassigningProps = true;\n        }\n      }\n      return nextUnitOfWork;\n    }\n    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n      markRef(current, workInProgress);\n      var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags$1;\n      if (!shouldUpdate && !didCaptureError) {\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      var instance = workInProgress.stateNode;\n      ReactCurrentOwner$2.current = workInProgress;\n      var nextChildren;\n      if (didCaptureError && typeof Component.getDerivedStateFromError !== \"function\") {\n        nextChildren = null;\n        {\n          stopProfilerTimerIfRunning();\n        }\n      } else {\n        {\n          setIsRendering(true);\n          nextChildren = instance.render();\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              instance.render();\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          setIsRendering(false);\n        }\n      }\n      workInProgress.flags |= PerformedWork;\n      if (current !== null && didCaptureError) {\n        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n      workInProgress.memoizedState = instance.state;\n      return workInProgress.child;\n    }\n    function pushHostRootContext(workInProgress) {\n      var root = workInProgress.stateNode;\n      pushHostContainer(workInProgress, root.containerInfo);\n    }\n    function updateHostRoot(current, workInProgress, renderLanes) {\n      pushHostRootContext(workInProgress);\n      if (current === null) {\n        throw new Error(\"Should have a current fiber. This is a bug in React.\");\n      }\n      var nextProps = workInProgress.pendingProps;\n      var prevState = workInProgress.memoizedState;\n      var prevChildren = prevState.element;\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n      var nextState = workInProgress.memoizedState;\n      suspendIfUpdateReadFromEntangledAsyncAction();\n      var nextChildren = nextState.element;\n      {\n        if (nextChildren === prevChildren) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n      return workInProgress.child;\n    }\n    function updateHostComponent$1(current, workInProgress, renderLanes) {\n      pushHostContext(workInProgress);\n      var nextProps = workInProgress.pendingProps;\n      var prevProps = current !== null ? current.memoizedProps : null;\n      var nextChildren = nextProps.children;\n      if (prevProps !== null && shouldSetTextContent()) {\n        workInProgress.flags |= ContentReset;\n      }\n      markRef(current, workInProgress);\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateHostText$1(current, workInProgress) {\n      return null;\n    }\n    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      var props = workInProgress.pendingProps;\n      var lazyComponent = elementType;\n      var payload = lazyComponent._payload;\n      var init = lazyComponent._init;\n      var Component = init(payload);\n      workInProgress.type = Component;\n      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n      var resolvedProps = resolveDefaultProps(Component, props);\n      var child;\n      switch (resolvedTag) {\n        case FunctionComponent:\n          {\n            {\n              validateFunctionComponentInDev(workInProgress, Component);\n              workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n            }\n            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n        case ClassComponent:\n          {\n            {\n              workInProgress.type = Component = resolveClassForHotReloading(Component);\n            }\n            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n        case ForwardRef:\n          {\n            {\n              workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n            }\n            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n        case MemoComponent:\n          {\n            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);\n            return child;\n          }\n      }\n      var hint = \"\";\n      {\n        if (Component !== null && typeof Component === \"object\" && Component.$$typeof === REACT_LAZY_TYPE) {\n          hint = \" Did you wrap a component in React.lazy() more than once?\";\n        }\n      }\n      throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n    }\n    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      workInProgress.tag = ClassComponent;\n      var hasContext;\n      if (isContextProvider()) {\n        hasContext = true;\n      } else {\n        hasContext = false;\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      constructClassInstance(workInProgress, Component, nextProps);\n      mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n    }\n    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      var props = workInProgress.pendingProps;\n      var context;\n      prepareToReadContext(workInProgress, renderLanes);\n      var value;\n      {\n        if (Component.prototype && typeof Component.prototype.render === \"function\") {\n          var componentName = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutBadClass[componentName]) {\n            error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + \"This is likely to cause errors. Change %s to extend React.Component instead.\", componentName, componentName);\n            didWarnAboutBadClass[componentName] = true;\n          }\n        }\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n        }\n        setIsRendering(true);\n        ReactCurrentOwner$2.current = workInProgress;\n        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n        setIsRendering(false);\n      }\n      workInProgress.flags |= PerformedWork;\n      {\n        if (typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n          var _componentName = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutModulePatternComponent[_componentName]) {\n            error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName, _componentName, _componentName);\n            didWarnAboutModulePatternComponent[_componentName] = true;\n          }\n        }\n      }\n      if (typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n        {\n          var _componentName2 = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutModulePatternComponent[_componentName2]) {\n            error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName2, _componentName2, _componentName2);\n            didWarnAboutModulePatternComponent[_componentName2] = true;\n          }\n        }\n        workInProgress.tag = ClassComponent;\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null;\n        var hasContext = false;\n        if (isContextProvider()) {\n          hasContext = true;\n        } else {\n          hasContext = false;\n        }\n        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n        initializeUpdateQueue(workInProgress);\n        adoptClassInstance(workInProgress, value);\n        mountClassInstance(workInProgress, Component, props, renderLanes);\n        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n      } else {\n        workInProgress.tag = FunctionComponent;\n        {\n          if (Component.contextTypes) {\n            error(\"%s uses the legacy contextTypes API which is no longer supported. \" + \"Use React.createContext() with React.useContext() instead.\", getComponentNameFromType(Component) || \"Unknown\");\n          }\n        }\n        reconcileChildren(null, workInProgress, value, renderLanes);\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n        }\n        return workInProgress.child;\n      }\n    }\n    function validateFunctionComponentInDev(workInProgress, Component) {\n      {\n        if (Component) {\n          if (Component.childContextTypes) {\n            error(\"childContextTypes cannot be defined on a function component.\\n\" + \"  %s.childContextTypes = ...\", Component.displayName || Component.name || \"Component\");\n          }\n        }\n        if (workInProgress.ref !== null) {\n          var info = \"\";\n          var componentName = getComponentNameFromType(Component) || \"Unknown\";\n          var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n          if (ownerName) {\n            info += \"\\n\\nCheck the render method of `\" + ownerName + \"`.\";\n          }\n          var warningKey = componentName + \"|\" + (ownerName || \"\");\n          if (!didWarnAboutFunctionRefs[warningKey]) {\n            didWarnAboutFunctionRefs[warningKey] = true;\n            error(\"Function components cannot be given refs. \" + \"Attempts to access this ref will fail. \" + \"Did you mean to use React.forwardRef()?%s\", info);\n          }\n        }\n        if (Component.defaultProps !== undefined) {\n          var _componentName3 = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutDefaultPropsOnFunctionComponent[_componentName3]) {\n            error(\"%s: Support for defaultProps will be removed from function components \" + \"in a future major release. Use JavaScript default parameters instead.\", _componentName3);\n            didWarnAboutDefaultPropsOnFunctionComponent[_componentName3] = true;\n          }\n        }\n        if (typeof Component.getDerivedStateFromProps === \"function\") {\n          var _componentName4 = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName4]) {\n            error(\"%s: Function components do not support getDerivedStateFromProps.\", _componentName4);\n            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName4] = true;\n          }\n        }\n        if (typeof Component.contextType === \"object\" && Component.contextType !== null) {\n          var _componentName5 = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName5]) {\n            error(\"%s: Function components do not support contextType.\", _componentName5);\n            didWarnAboutContextTypeOnFunctionComponent[_componentName5] = true;\n          }\n        }\n      }\n    }\n    var SUSPENDED_MARKER = {\n      dehydrated: null,\n      treeContext: null,\n      retryLane: NoLane\n    };\n    function mountSuspenseOffscreenState(renderLanes) {\n      return {\n        baseLanes: renderLanes,\n        cachePool: getSuspendedCache()\n      };\n    }\n    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n      var cachePool = null;\n      return {\n        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n        cachePool: cachePool\n      };\n    }\n    function shouldRemainOnFallback(current, workInProgress, renderLanes) {\n      if (current !== null) {\n        var suspenseState = current.memoizedState;\n        if (suspenseState === null) {\n          return false;\n        }\n      }\n      var suspenseContext = suspenseStackCursor.current;\n      return hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n    }\n    function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {\n      var remainingLanes = current !== null ? removeLanes(current.childLanes, renderLanes) : NoLanes;\n      if (primaryTreeDidDefer) {\n        remainingLanes = mergeLanes(remainingLanes, peekDeferredLane());\n      }\n      return remainingLanes;\n    }\n    function updateSuspenseComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      {\n        if (shouldSuspend(workInProgress)) {\n          workInProgress.flags |= DidCapture;\n        }\n      }\n      var showFallback = false;\n      var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n      if (didSuspend || shouldRemainOnFallback(current)) {\n        showFallback = true;\n        workInProgress.flags &= ~DidCapture;\n      }\n      var didPrimaryChildrenDefer = (workInProgress.flags & DidDefer) !== NoFlags$1;\n      workInProgress.flags &= ~DidDefer;\n      if (current === null) {\n        var nextPrimaryChildren = nextProps.children;\n        var nextFallbackChildren = nextProps.fallback;\n        if (showFallback) {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n          var primaryChildFragment = workInProgress.child;\n          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n          primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackFragment;\n        } else {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n        }\n      } else {\n        var prevState = current.memoizedState;\n        if (prevState !== null) {\n          var _dehydrated = prevState.dehydrated;\n          if (_dehydrated !== null) {\n            return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, didPrimaryChildrenDefer, nextProps, _dehydrated, prevState, renderLanes);\n          }\n        }\n        if (showFallback) {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var _nextFallbackChildren = nextProps.fallback;\n          var _nextPrimaryChildren = nextProps.children;\n          var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n          var _primaryChildFragment2 = workInProgress.child;\n          var prevOffscreenState = current.child.memoizedState;\n          _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n          _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackChildFragment;\n        } else {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          var _nextPrimaryChildren2 = nextProps.children;\n          var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);\n          workInProgress.memoizedState = null;\n          return _primaryChildFragment3;\n        }\n      }\n    }\n    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: \"visible\",\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n      primaryChildFragment.return = workInProgress;\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var progressedPrimaryFragment = workInProgress.child;\n      var primaryChildProps = {\n        mode: \"hidden\",\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n      var fallbackChildFragment;\n      if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n        if (workInProgress.mode & ProfileMode) {\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = 0;\n          primaryChildFragment.treeBaseDuration = 0;\n        }\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n      } else {\n        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n      }\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n    }\n    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n      return createWorkInProgress(current, offscreenProps);\n    }\n    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n        mode: \"visible\",\n        children: primaryChildren\n      });\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        primaryChildFragment.lanes = renderLanes;\n      }\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = null;\n      if (currentFallbackChildFragment !== null) {\n        var deletions = workInProgress.deletions;\n        if (deletions === null) {\n          workInProgress.deletions = [currentFallbackChildFragment];\n          workInProgress.flags |= ChildDeletion;\n        } else {\n          deletions.push(currentFallbackChildFragment);\n        }\n      }\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildProps = {\n        mode: \"hidden\",\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n      if ((mode & ConcurrentMode) === NoMode && workInProgress.child !== currentPrimaryChildFragment) {\n        var progressedPrimaryFragment = workInProgress.child;\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n        if (workInProgress.mode & ProfileMode) {\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n        }\n        workInProgress.deletions = null;\n      } else {\n        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);\n        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n      }\n      var fallbackChildFragment;\n      if (currentFallbackChildFragment !== null) {\n        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n      } else {\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n        fallbackChildFragment.flags |= Placement;\n      }\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n      if (recoverableError !== null) {\n        queueHydrationError(recoverableError);\n      }\n      reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      var nextProps = workInProgress.pendingProps;\n      var primaryChildren = nextProps.children;\n      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren);\n      primaryChildFragment.flags |= Placement;\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var fiberMode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: \"visible\",\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n      var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null);\n      fallbackChildFragment.flags |= Placement;\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n        reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      }\n      return fallbackChildFragment;\n    }\n    function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, didPrimaryChildrenDefer, nextProps, suspenseInstance, suspenseState, renderLanes) {\n      if (!didSuspend) {\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);\n        }\n        if (isSuspenseInstanceFallback()) {\n          var digest;\n          var message, stack;\n          {\n            var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails();\n            digest = _getSuspenseInstanceF.digest;\n            message = _getSuspenseInstanceF.message;\n            stack = _getSuspenseInstanceF.stack;\n          }\n          var capturedValue = null;\n          {\n            var error;\n            if (message) {\n              error = new Error(message);\n            } else {\n              error = new Error(\"The server could not finish this Suspense boundary, likely \" + \"due to an error during server rendering. Switched to \" + \"client rendering.\");\n            }\n            error.digest = digest;\n            capturedValue = createCapturedValueFromError(error, digest, stack);\n          }\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n        }\n        var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n        if (didReceiveUpdate || hasContextChanged) {\n          var root = getWorkInProgressRoot();\n          if (root !== null) {\n            var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n            if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n              suspenseState.retryLane = attemptHydrationAtLane;\n              enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n              scheduleUpdateOnFiber(root, current, attemptHydrationAtLane);\n              throw SelectiveHydrationException;\n            }\n          }\n          if (isSuspenseInstancePending()) ;else {\n            renderDidSuspendDelayIfPossible();\n          }\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);\n        } else if (isSuspenseInstancePending()) {\n          workInProgress.flags |= DidCapture;\n          workInProgress.child = current.child;\n          retryDehydratedSuspenseBoundary.bind(null, current);\n          registerSuspenseInstanceRetry();\n          return null;\n        } else {\n          var primaryChildren = nextProps.children;\n          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren);\n          primaryChildFragment.flags |= Hydrating;\n          return primaryChildFragment;\n        }\n      } else {\n        if (workInProgress.flags & ForceClientRender) {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          workInProgress.flags &= ~ForceClientRender;\n          var _capturedValue = createCapturedValueFromError(new Error(\"There was an error while hydrating this Suspense boundary. \" + \"Switched to client rendering.\"));\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);\n        } else if (workInProgress.memoizedState !== null) {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          workInProgress.child = current.child;\n          workInProgress.flags |= DidCapture;\n          return null;\n        } else {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var nextPrimaryChildren = nextProps.children;\n          var nextFallbackChildren = nextProps.fallback;\n          var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n          var _primaryChildFragment4 = workInProgress.child;\n          _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\n          _primaryChildFragment4.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackChildFragment;\n        }\n      }\n    }\n    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n      fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n    }\n    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n      var node = firstChild;\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n          if (state !== null) {\n            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n          }\n        } else if (node.tag === SuspenseListComponent) {\n          scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n        if (node === workInProgress) {\n          return;\n        }\n        while (node.sibling === null) {\n          if (node.return === null || node.return === workInProgress) {\n            return;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n    function findLastContentRow(firstChild) {\n      var row = firstChild;\n      var lastContentRow = null;\n      while (row !== null) {\n        var currentRow = row.alternate;\n        if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n          lastContentRow = row;\n        }\n        row = row.sibling;\n      }\n      return lastContentRow;\n    }\n    function validateRevealOrder(revealOrder) {\n      {\n        if (revealOrder !== undefined && revealOrder !== \"forwards\" && revealOrder !== \"backwards\" && revealOrder !== \"together\" && !didWarnAboutRevealOrder[revealOrder]) {\n          didWarnAboutRevealOrder[revealOrder] = true;\n          if (typeof revealOrder === \"string\") {\n            switch (revealOrder.toLowerCase()) {\n              case \"together\":\n              case \"forwards\":\n              case \"backwards\":\n                {\n                  error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n                  break;\n                }\n              case \"forward\":\n              case \"backward\":\n                {\n                  error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n                  break;\n                }\n              default:\n                error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n                break;\n            }\n          } else {\n            error(\"%s is not a supported value for revealOrder on <SuspenseList />. \" + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n          }\n        }\n      }\n    }\n    function validateTailOptions(tailMode, revealOrder) {\n      {\n        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n          if (tailMode !== \"collapsed\" && tailMode !== \"hidden\") {\n            didWarnAboutTailOptions[tailMode] = true;\n            error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n          } else if (revealOrder !== \"forwards\" && revealOrder !== \"backwards\") {\n            didWarnAboutTailOptions[tailMode] = true;\n            error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n          }\n        }\n      }\n    }\n    function validateSuspenseListNestedChild(childSlot, index) {\n      {\n        var isAnArray = isArray(childSlot);\n        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === \"function\";\n        if (isAnArray || isIterable) {\n          var type = isAnArray ? \"array\" : \"iterable\";\n          error(\"A nested %s was passed to row #%s in <SuspenseList />. Wrap it in \" + \"an additional SuspenseList to configure its revealOrder: \" + \"<SuspenseList revealOrder=...> ... \" + \"<SuspenseList revealOrder=...>{%s}</SuspenseList> ... \" + \"</SuspenseList>\", type, index, type);\n          return false;\n        }\n      }\n      return true;\n    }\n    function validateSuspenseListChildren(children, revealOrder) {\n      {\n        if ((revealOrder === \"forwards\" || revealOrder === \"backwards\") && children !== undefined && children !== null && children !== false) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              if (!validateSuspenseListNestedChild(children[i], i)) {\n                return;\n              }\n            }\n          } else {\n            var iteratorFn = getIteratorFn(children);\n            if (typeof iteratorFn === \"function\") {\n              var childrenIterator = iteratorFn.call(children);\n              if (childrenIterator) {\n                var step = childrenIterator.next();\n                var _i = 0;\n                for (; !step.done; step = childrenIterator.next()) {\n                  if (!validateSuspenseListNestedChild(step.value, _i)) {\n                    return;\n                  }\n                  _i++;\n                }\n              }\n            } else {\n              error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + \"This is not useful since it needs multiple rows. \" + \"Did you mean to pass multiple children or an array?\", revealOrder);\n            }\n          }\n        }\n      }\n    }\n    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n      var renderState = workInProgress.memoizedState;\n      if (renderState === null) {\n        workInProgress.memoizedState = {\n          isBackwards: isBackwards,\n          rendering: null,\n          renderingStartTime: 0,\n          last: lastContentRow,\n          tail: tail,\n          tailMode: tailMode\n        };\n      } else {\n        renderState.isBackwards = isBackwards;\n        renderState.rendering = null;\n        renderState.renderingStartTime = 0;\n        renderState.last = lastContentRow;\n        renderState.tail = tail;\n        renderState.tailMode = tailMode;\n      }\n    }\n    function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var revealOrder = nextProps.revealOrder;\n      var tailMode = nextProps.tail;\n      var newChildren = nextProps.children;\n      validateRevealOrder(revealOrder);\n      validateTailOptions(tailMode, revealOrder);\n      validateSuspenseListChildren(newChildren, revealOrder);\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      var suspenseContext = suspenseStackCursor.current;\n      var shouldForceFallback = hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n      if (shouldForceFallback) {\n        suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n        workInProgress.flags |= DidCapture;\n      } else {\n        var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags$1;\n        if (didSuspendBefore) {\n          propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n        }\n        suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n      }\n      pushSuspenseListContext(workInProgress, suspenseContext);\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        workInProgress.memoizedState = null;\n      } else {\n        switch (revealOrder) {\n          case \"forwards\":\n            {\n              var lastContentRow = findLastContentRow(workInProgress.child);\n              var tail;\n              if (lastContentRow === null) {\n                tail = workInProgress.child;\n                workInProgress.child = null;\n              } else {\n                tail = lastContentRow.sibling;\n                lastContentRow.sibling = null;\n              }\n              initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);\n              break;\n            }\n          case \"backwards\":\n            {\n              var _tail = null;\n              var row = workInProgress.child;\n              workInProgress.child = null;\n              while (row !== null) {\n                var currentRow = row.alternate;\n                if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n                  workInProgress.child = row;\n                  break;\n                }\n                var nextRow = row.sibling;\n                row.sibling = _tail;\n                _tail = row;\n                row = nextRow;\n              }\n              initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);\n              break;\n            }\n          case \"together\":\n            {\n              initSuspenseListRenderState(workInProgress, false, null, null, undefined);\n              break;\n            }\n          default:\n            {\n              workInProgress.memoizedState = null;\n            }\n        }\n      }\n      return workInProgress.child;\n    }\n    function updatePortalComponent(current, workInProgress, renderLanes) {\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      var nextChildren = workInProgress.pendingProps;\n      if (current === null) {\n        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n      return workInProgress.child;\n    }\n    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n    function updateContextProvider(current, workInProgress, renderLanes) {\n      var context;\n      {\n        context = workInProgress.type._context;\n      }\n      var newProps = workInProgress.pendingProps;\n      var oldProps = workInProgress.memoizedProps;\n      var newValue = newProps.value;\n      {\n        if (!(\"value\" in newProps)) {\n          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n            hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n            error(\"The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?\");\n          }\n        }\n      }\n      pushProvider(workInProgress, context, newValue);\n      {\n        if (oldProps !== null) {\n          var oldValue = oldProps.value;\n          if (objectIs(oldValue, newValue)) {\n            if (oldProps.children === newProps.children && !hasContextChanged()) {\n              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n          } else {\n            propagateContextChange(workInProgress, context, renderLanes);\n          }\n        }\n      }\n      var newChildren = newProps.children;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateContextConsumer(current, workInProgress, renderLanes) {\n      var context;\n      {\n        context = workInProgress.type;\n        {\n          if (context._context !== undefined) {\n            context = context._context;\n          }\n        }\n      }\n      var newProps = workInProgress.pendingProps;\n      var render = newProps.children;\n      {\n        if (typeof render !== \"function\") {\n          error(\"A context consumer was rendered with multiple children, or a child \" + \"that isn't a function. A context consumer expects a single child \" + \"that is a function. If you did pass a function, make sure there \" + \"is no trailing or leading whitespace around it.\");\n        }\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var newValue = readContext(context);\n      var newChildren;\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        newChildren = render(newValue);\n        setIsRendering(false);\n      }\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function markWorkInProgressReceivedUpdate() {\n      didReceiveUpdate = true;\n    }\n    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        if (current !== null) {\n          current.alternate = null;\n          workInProgress.alternate = null;\n          workInProgress.flags |= Placement;\n        }\n      }\n    }\n    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n      if (current !== null) {\n        workInProgress.dependencies = current.dependencies;\n      }\n      {\n        stopProfilerTimerIfRunning();\n      }\n      markSkippedUpdateLanes(workInProgress.lanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        {\n          return null;\n        }\n      }\n      cloneChildFibers(current, workInProgress);\n      return workInProgress.child;\n    }\n    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n      {\n        var returnFiber = oldWorkInProgress.return;\n        if (returnFiber === null) {\n          throw new Error(\"Cannot swap the root fiber.\");\n        }\n        current.alternate = null;\n        oldWorkInProgress.alternate = null;\n        newWorkInProgress.index = oldWorkInProgress.index;\n        newWorkInProgress.sibling = oldWorkInProgress.sibling;\n        newWorkInProgress.return = oldWorkInProgress.return;\n        newWorkInProgress.ref = oldWorkInProgress.ref;\n        {\n          newWorkInProgress._debugInfo = oldWorkInProgress._debugInfo;\n        }\n        if (oldWorkInProgress === returnFiber.child) {\n          returnFiber.child = newWorkInProgress;\n        } else {\n          var prevSibling = returnFiber.child;\n          if (prevSibling === null) {\n            throw new Error(\"Expected parent to have a child.\");\n          }\n          while (prevSibling.sibling !== oldWorkInProgress) {\n            prevSibling = prevSibling.sibling;\n            if (prevSibling === null) {\n              throw new Error(\"Expected to find the previous sibling.\");\n            }\n          }\n          prevSibling.sibling = newWorkInProgress;\n        }\n        var deletions = returnFiber.deletions;\n        if (deletions === null) {\n          returnFiber.deletions = [current];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(current);\n        }\n        newWorkInProgress.flags |= Placement;\n        return newWorkInProgress;\n      }\n    }\n    function checkScheduledUpdateOrContext(current, renderLanes) {\n      var updateLanes = current.lanes;\n      if (includesSomeLane(updateLanes, renderLanes)) {\n        return true;\n      }\n      return false;\n    }\n    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          break;\n        case HostSingleton:\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n        case ClassComponent:\n          {\n            break;\n          }\n        case HostPortal:\n          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n          break;\n        case ContextProvider:\n          {\n            var newValue = workInProgress.memoizedProps.value;\n            var context;\n            {\n              context = workInProgress.type._context;\n            }\n            pushProvider(workInProgress, context, newValue);\n            break;\n          }\n        case Profiler:\n          {\n            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n            {\n              var stateNode = workInProgress.stateNode;\n              stateNode.effectDuration = 0;\n              stateNode.passiveEffectDuration = 0;\n            }\n          }\n          break;\n        case SuspenseComponent:\n          {\n            var state = workInProgress.memoizedState;\n            if (state !== null) {\n              if (state.dehydrated !== null) {\n                pushPrimaryTreeSuspenseHandler(workInProgress);\n                workInProgress.flags |= DidCapture;\n                return null;\n              }\n              var primaryChildFragment = workInProgress.child;\n              var primaryChildLanes = primaryChildFragment.childLanes;\n              if (includesSomeLane(renderLanes, primaryChildLanes)) {\n                return updateSuspenseComponent(current, workInProgress, renderLanes);\n              } else {\n                pushPrimaryTreeSuspenseHandler(workInProgress);\n                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                if (child !== null) {\n                  return child.sibling;\n                } else {\n                  return null;\n                }\n              }\n            } else {\n              pushPrimaryTreeSuspenseHandler(workInProgress);\n            }\n            break;\n          }\n        case SuspenseListComponent:\n          {\n            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags$1;\n            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n            if (didSuspendBefore) {\n              if (_hasChildWork) {\n                return updateSuspenseListComponent(current, workInProgress, renderLanes);\n              }\n              workInProgress.flags |= DidCapture;\n            }\n            var renderState = workInProgress.memoizedState;\n            if (renderState !== null) {\n              renderState.rendering = null;\n              renderState.tail = null;\n              renderState.lastEffect = null;\n            }\n            pushSuspenseListContext(workInProgress, suspenseStackCursor.current);\n            if (_hasChildWork) {\n              break;\n            } else {\n              return null;\n            }\n          }\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            workInProgress.lanes = NoLanes;\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n    function beginWork(current, workInProgress, renderLanes) {\n      {\n        if (workInProgress._debugNeedsRemount && current !== null) {\n          return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n        }\n      }\n      if (current !== null) {\n        var oldProps = current.memoizedProps;\n        var newProps = workInProgress.pendingProps;\n        if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) {\n          didReceiveUpdate = true;\n        } else {\n          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n          if (!hasScheduledUpdateOrContext && (workInProgress.flags & DidCapture) === NoFlags$1) {\n            didReceiveUpdate = false;\n            return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n          }\n          if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {\n            didReceiveUpdate = true;\n          } else {\n            didReceiveUpdate = false;\n          }\n        }\n      } else {\n        didReceiveUpdate = false;\n      }\n      workInProgress.lanes = NoLanes;\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n          {\n            return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n          }\n        case LazyComponent:\n          {\n            var elementType = workInProgress.elementType;\n            return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n          }\n        case FunctionComponent:\n          {\n            var Component = workInProgress.type;\n            var unresolvedProps = workInProgress.pendingProps;\n            var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n            return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n          }\n        case ClassComponent:\n          {\n            var _Component = workInProgress.type;\n            var _unresolvedProps = workInProgress.pendingProps;\n            var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n            return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n          }\n        case HostRoot:\n          return updateHostRoot(current, workInProgress, renderLanes);\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          return updateHostComponent$1(current, workInProgress, renderLanes);\n        case HostText:\n          return updateHostText$1();\n        case SuspenseComponent:\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        case HostPortal:\n          return updatePortalComponent(current, workInProgress, renderLanes);\n        case ForwardRef:\n          {\n            var type = workInProgress.type;\n            var _unresolvedProps2 = workInProgress.pendingProps;\n            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n            return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n          }\n        case Fragment:\n          return updateFragment(current, workInProgress, renderLanes);\n        case Mode:\n          return updateMode(current, workInProgress, renderLanes);\n        case Profiler:\n          return updateProfiler(current, workInProgress, renderLanes);\n        case ContextProvider:\n          return updateContextProvider(current, workInProgress, renderLanes);\n        case ContextConsumer:\n          return updateContextConsumer(current, workInProgress, renderLanes);\n        case MemoComponent:\n          {\n            var _type = workInProgress.type;\n            var _unresolvedProps3 = workInProgress.pendingProps;\n            var _resolvedProps3 = resolveDefaultProps(_type, _unresolvedProps3);\n            _resolvedProps3 = resolveDefaultProps(_type.type, _resolvedProps3);\n            return updateMemoComponent(current, workInProgress, _type, _resolvedProps3, renderLanes);\n          }\n        case SimpleMemoComponent:\n          {\n            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n          }\n        case IncompleteClassComponent:\n          {\n            var _Component2 = workInProgress.type;\n            var _unresolvedProps4 = workInProgress.pendingProps;\n            var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n            return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n          }\n        case SuspenseListComponent:\n          {\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          }\n        case ScopeComponent:\n          {\n            break;\n          }\n        case OffscreenComponent:\n          {\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n      throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + \"React. Please file an issue.\");\n    }\n    var valueCursor = createCursor(null);\n    var renderer2CursorDEV;\n    {\n      renderer2CursorDEV = createCursor(null);\n    }\n    var rendererSigil;\n    {\n      rendererSigil = {};\n    }\n    var currentlyRenderingFiber = null;\n    var lastContextDependency = null;\n    var lastFullyObservedContext = null;\n    var isDisallowedContextReadInDEV = false;\n    function resetContextDependencies() {\n      currentlyRenderingFiber = null;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n    function enterDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = true;\n      }\n    }\n    function exitDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n    function pushProvider(providerFiber, context, nextValue) {\n      {\n        push(valueCursor, context._currentValue2, providerFiber);\n        context._currentValue2 = nextValue;\n        {\n          push(renderer2CursorDEV, context._currentRenderer2, providerFiber);\n          if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n            error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n          }\n          context._currentRenderer2 = rendererSigil;\n        }\n      }\n    }\n    function popProvider(context, providerFiber) {\n      var currentValue = valueCursor.current;\n      {\n        context._currentValue2 = currentValue;\n        {\n          var currentRenderer2 = renderer2CursorDEV.current;\n          pop(renderer2CursorDEV, providerFiber);\n          context._currentRenderer2 = currentRenderer2;\n        }\n      }\n      pop(valueCursor, providerFiber);\n    }\n    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n      var node = parent;\n      while (node !== null) {\n        var alternate = node.alternate;\n        if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n          node.childLanes = mergeLanes(node.childLanes, renderLanes);\n          if (alternate !== null) {\n            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n          }\n        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n        } else ;\n        if (node === propagationRoot) {\n          break;\n        }\n        node = node.return;\n      }\n      {\n        if (node !== propagationRoot) {\n          error(\"Expected to find the propagation root when scheduling context work. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n        }\n      }\n    }\n    function propagateContextChange(workInProgress, context, renderLanes) {\n      {\n        propagateContextChange_eager(workInProgress, context, renderLanes);\n      }\n    }\n    function propagateContextChange_eager(workInProgress, context, renderLanes) {\n      var fiber = workInProgress.child;\n      if (fiber !== null) {\n        fiber.return = workInProgress;\n      }\n      while (fiber !== null) {\n        var nextFiber = void 0;\n        var list = fiber.dependencies;\n        if (list !== null) {\n          nextFiber = fiber.child;\n          var dependency = list.firstContext;\n          while (dependency !== null) {\n            if (dependency.context === context) {\n              if (fiber.tag === ClassComponent) {\n                var lane = pickArbitraryLane(renderLanes);\n                var update = createUpdate(lane);\n                update.tag = ForceUpdate;\n                var updateQueue = fiber.updateQueue;\n                if (updateQueue === null) ;else {\n                  var sharedQueue = updateQueue.shared;\n                  var pending = sharedQueue.pending;\n                  if (pending === null) {\n                    update.next = update;\n                  } else {\n                    update.next = pending.next;\n                    pending.next = update;\n                  }\n                  sharedQueue.pending = update;\n                }\n              }\n              fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n              var alternate = fiber.alternate;\n              if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n              }\n              scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress);\n              list.lanes = mergeLanes(list.lanes, renderLanes);\n              break;\n            }\n            dependency = dependency.next;\n          }\n        } else if (fiber.tag === ContextProvider) {\n          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n        } else if (fiber.tag === DehydratedFragment) {\n          var parentSuspense = fiber.return;\n          if (parentSuspense === null) {\n            throw new Error(\"We just came from a parent so we must have had a parent. This is a bug in React.\");\n          }\n          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n          var _alternate = parentSuspense.alternate;\n          if (_alternate !== null) {\n            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n          }\n          scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n          nextFiber = fiber.sibling;\n        } else {\n          nextFiber = fiber.child;\n        }\n        if (nextFiber !== null) {\n          nextFiber.return = fiber;\n        } else {\n          nextFiber = fiber;\n          while (nextFiber !== null) {\n            if (nextFiber === workInProgress) {\n              nextFiber = null;\n              break;\n            }\n            var sibling = nextFiber.sibling;\n            if (sibling !== null) {\n              sibling.return = nextFiber.return;\n              nextFiber = sibling;\n              break;\n            }\n            nextFiber = nextFiber.return;\n          }\n        }\n        fiber = nextFiber;\n      }\n    }\n    function prepareToReadContext(workInProgress, renderLanes) {\n      currentlyRenderingFiber = workInProgress;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      var dependencies = workInProgress.dependencies;\n      if (dependencies !== null) {\n        {\n          var firstContext = dependencies.firstContext;\n          if (firstContext !== null) {\n            if (includesSomeLane(dependencies.lanes, renderLanes)) {\n              markWorkInProgressReceivedUpdate();\n            }\n            dependencies.firstContext = null;\n          }\n        }\n      }\n    }\n    function readContext(context) {\n      {\n        if (isDisallowedContextReadInDEV) {\n          error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n        }\n      }\n      return readContextForConsumer(currentlyRenderingFiber, context);\n    }\n    function readContextDuringReconciliation(consumer, context, renderLanes) {\n      if (currentlyRenderingFiber === null) {\n        prepareToReadContext(consumer, renderLanes);\n      }\n      return readContextForConsumer(consumer, context);\n    }\n    function readContextForConsumer(consumer, context) {\n      var value = context._currentValue2;\n      if (lastFullyObservedContext === context) ;else {\n        var contextItem = {\n          context: context,\n          memoizedValue: value,\n          next: null\n        };\n        if (lastContextDependency === null) {\n          if (consumer === null) {\n            throw new Error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n          }\n          lastContextDependency = contextItem;\n          consumer.dependencies = {\n            lanes: NoLanes,\n            firstContext: contextItem\n          };\n        } else {\n          lastContextDependency = lastContextDependency.next = contextItem;\n        }\n      }\n      return value;\n    }\n    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\n    function requestCurrentTransition() {\n      var transition = ReactCurrentBatchConfig$1.transition;\n      if (transition !== null) {\n        transition._callbacks.add(handleAsyncAction);\n      }\n      return transition;\n    }\n    function handleAsyncAction(transition, thenable) {}\n    function notifyTransitionCallbacks(transition, returnValue) {\n      var callbacks = transition._callbacks;\n      callbacks.forEach(function (callback) {\n        return callback(transition, returnValue);\n      });\n    }\n    function getSuspendedCache() {\n      {\n        return null;\n      }\n    }\n    function markUpdate(workInProgress) {\n      workInProgress.flags |= Update;\n    }\n    function doesRequireClone(current, completedWork) {\n      var didBailout = current !== null && current.child === completedWork.child;\n      if (didBailout) {\n        return false;\n      }\n      if ((completedWork.flags & ChildDeletion) !== NoFlags$1) {\n        return true;\n      }\n      var child = completedWork.child;\n      while (child !== null) {\n        if ((child.flags & MutationMask) !== NoFlags$1 || (child.subtreeFlags & MutationMask) !== NoFlags$1) {\n          return true;\n        }\n        child = child.sibling;\n      }\n      return false;\n    }\n    function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {\n      {\n        var _node = workInProgress.child;\n        while (_node !== null) {\n          if (_node.tag === HostComponent) {\n            var instance = _node.stateNode;\n            if (needsVisibilityToggle && isHidden) {\n              instance = cloneHiddenInstance(instance);\n            }\n            appendInitialChild(parent, instance);\n          } else if (_node.tag === HostText) {\n            var _instance = _node.stateNode;\n            if (needsVisibilityToggle && isHidden) {\n              _instance = cloneHiddenTextInstance();\n            }\n            appendInitialChild(parent, _instance);\n          } else if (_node.tag === HostPortal) ;else if (_node.tag === OffscreenComponent && _node.memoizedState !== null) {\n            var child = _node.child;\n            if (child !== null) {\n              child.return = _node;\n            }\n            appendAllChildren(parent, _node, true, true);\n          } else if (_node.child !== null) {\n            _node.child.return = _node;\n            _node = _node.child;\n            continue;\n          }\n          if (_node === workInProgress) {\n            return;\n          }\n          while (_node.sibling === null) {\n            if (_node.return === null || _node.return === workInProgress) {\n              return;\n            }\n            _node = _node.return;\n          }\n          _node.sibling.return = _node.return;\n          _node = _node.sibling;\n        }\n      }\n    }\n    function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n      {\n        var node = workInProgress.child;\n        while (node !== null) {\n          if (node.tag === HostComponent) {\n            var instance = node.stateNode;\n            if (needsVisibilityToggle && isHidden) {\n              instance = cloneHiddenInstance(instance);\n            }\n            appendChildToContainerChildSet(containerChildSet, instance);\n          } else if (node.tag === HostText) {\n            var _instance2 = node.stateNode;\n            if (needsVisibilityToggle && isHidden) {\n              _instance2 = cloneHiddenTextInstance();\n            }\n            appendChildToContainerChildSet(containerChildSet, _instance2);\n          } else if (node.tag === HostPortal) ;else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n            var child = node.child;\n            if (child !== null) {\n              child.return = node;\n            }\n            var _needsVisibilityToggle = !isOffscreenManual(node);\n            appendAllChildrenToContainer(containerChildSet, node, _needsVisibilityToggle, true);\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          node = node;\n          if (node === workInProgress) {\n            return;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n    }\n    function updateHostContainer(current, workInProgress) {\n      {\n        if (doesRequireClone(current, workInProgress)) {\n          var portalOrRoot = workInProgress.stateNode;\n          var container = portalOrRoot.containerInfo;\n          var newChildSet = createContainerChildSet();\n          appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n          portalOrRoot.pendingChildren = newChildSet;\n          markUpdate(workInProgress);\n          finalizeContainerChildren(container, newChildSet);\n        }\n      }\n    }\n    function updateHostComponent(current, workInProgress, type, newProps, renderLanes) {\n      {\n        var currentInstance = current.stateNode;\n        var _oldProps = current.memoizedProps;\n        var requiresClone = doesRequireClone(current, workInProgress);\n        if (!requiresClone && _oldProps === newProps) {\n          workInProgress.stateNode = currentInstance;\n          return;\n        }\n        getHostContext();\n        var newChildSet = null;\n        if (requiresClone && passChildrenWhenCloningPersistedNodes) {\n          newChildSet = createContainerChildSet();\n          appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n        }\n        var newInstance = cloneInstance(currentInstance, type, _oldProps, newProps, !requiresClone, newChildSet);\n        if (newInstance === currentInstance) {\n          workInProgress.stateNode = currentInstance;\n          return;\n        }\n        workInProgress.stateNode = newInstance;\n        if (!requiresClone) {\n          markUpdate(workInProgress);\n        } else {\n          appendAllChildren(newInstance, workInProgress, false, false);\n        }\n      }\n    }\n    function preloadInstanceAndSuspendIfNeeded(workInProgress, type, props, renderLanes) {\n      {\n        workInProgress.flags &= ~MaySuspendCommit;\n        return;\n      }\n    }\n    function scheduleRetryEffect(workInProgress, retryQueue) {\n      var wakeables = retryQueue;\n      if (wakeables !== null) {\n        workInProgress.flags |= Update;\n      } else {\n        if (workInProgress.flags & ScheduleRetry) {\n          var retryLane = workInProgress.tag !== OffscreenComponent ? claimNextRetryLane() : OffscreenLane;\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, retryLane);\n        }\n      }\n    }\n    function updateHostText(current, workInProgress, oldText, newText) {\n      {\n        if (oldText !== newText) {\n          var rootContainerInstance = getRootHostContainer();\n          var currentHostContext = getHostContext();\n          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);\n          markUpdate(workInProgress);\n        } else {\n          workInProgress.stateNode = current.stateNode;\n        }\n      }\n    }\n    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n      switch (renderState.tailMode) {\n        case \"hidden\":\n          {\n            var tailNode = renderState.tail;\n            var lastTailNode = null;\n            while (tailNode !== null) {\n              if (tailNode.alternate !== null) {\n                lastTailNode = tailNode;\n              }\n              tailNode = tailNode.sibling;\n            }\n            if (lastTailNode === null) {\n              renderState.tail = null;\n            } else {\n              lastTailNode.sibling = null;\n            }\n            break;\n          }\n        case \"collapsed\":\n          {\n            var _tailNode = renderState.tail;\n            var _lastTailNode = null;\n            while (_tailNode !== null) {\n              if (_tailNode.alternate !== null) {\n                _lastTailNode = _tailNode;\n              }\n              _tailNode = _tailNode.sibling;\n            }\n            if (_lastTailNode === null) {\n              if (!hasRenderedATailFallback && renderState.tail !== null) {\n                renderState.tail.sibling = null;\n              } else {\n                renderState.tail = null;\n              }\n            } else {\n              _lastTailNode.sibling = null;\n            }\n            break;\n          }\n      }\n    }\n    function bubbleProperties(completedWork) {\n      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n      var newChildLanes = NoLanes;\n      var subtreeFlags = NoFlags$1;\n      if (!didBailout) {\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          var actualDuration = completedWork.actualDuration;\n          var treeBaseDuration = completedWork.selfBaseDuration;\n          var child = completedWork.child;\n          while (child !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n            subtreeFlags |= child.subtreeFlags;\n            subtreeFlags |= child.flags;\n            actualDuration += child.actualDuration;\n            treeBaseDuration += child.treeBaseDuration;\n            child = child.sibling;\n          }\n          completedWork.actualDuration = actualDuration;\n          completedWork.treeBaseDuration = treeBaseDuration;\n        } else {\n          var _child = completedWork.child;\n          while (_child !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n            subtreeFlags |= _child.subtreeFlags;\n            subtreeFlags |= _child.flags;\n            _child.return = completedWork;\n            _child = _child.sibling;\n          }\n        }\n        completedWork.subtreeFlags |= subtreeFlags;\n      } else {\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          var _treeBaseDuration = completedWork.selfBaseDuration;\n          var _child2 = completedWork.child;\n          while (_child2 !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));\n            subtreeFlags |= _child2.subtreeFlags & StaticMask;\n            subtreeFlags |= _child2.flags & StaticMask;\n            _treeBaseDuration += _child2.treeBaseDuration;\n            _child2 = _child2.sibling;\n          }\n          completedWork.treeBaseDuration = _treeBaseDuration;\n        } else {\n          var _child3 = completedWork.child;\n          while (_child3 !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));\n            subtreeFlags |= _child3.subtreeFlags & StaticMask;\n            subtreeFlags |= _child3.flags & StaticMask;\n            _child3.return = completedWork;\n            _child3 = _child3.sibling;\n          }\n        }\n        completedWork.subtreeFlags |= subtreeFlags;\n      }\n      completedWork.childLanes = newChildLanes;\n      return didBailout;\n    }\n    function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n      var wasHydrated = popHydrationState();\n      if (nextState !== null && nextState.dehydrated !== null) {\n        if (current === null) {\n          if (!wasHydrated) {\n            throw new Error(\"A dehydrated suspense component was completed without a hydrated node. \" + \"This is probably a bug in React.\");\n          }\n          prepareToHydrateHostSuspenseInstance();\n          bubbleProperties(workInProgress);\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              var isTimedOutSuspense = nextState !== null;\n              if (isTimedOutSuspense) {\n                var primaryChildFragment = workInProgress.child;\n                if (primaryChildFragment !== null) {\n                  workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n          return false;\n        } else {\n          if ((workInProgress.flags & DidCapture) === NoFlags$1) {\n            workInProgress.memoizedState = null;\n          }\n          workInProgress.flags |= Update;\n          bubbleProperties(workInProgress);\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              var _isTimedOutSuspense = nextState !== null;\n              if (_isTimedOutSuspense) {\n                var _primaryChildFragment = workInProgress.child;\n                if (_primaryChildFragment !== null) {\n                  workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n          return false;\n        }\n      } else {\n        upgradeHydrationErrorsToRecoverable();\n        return true;\n      }\n    }\n    function completeWork(current, workInProgress, renderLanes) {\n      var newProps = workInProgress.pendingProps;\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n        case LazyComponent:\n        case SimpleMemoComponent:\n        case FunctionComponent:\n        case ForwardRef:\n        case Fragment:\n        case Mode:\n        case Profiler:\n        case ContextConsumer:\n        case MemoComponent:\n          bubbleProperties(workInProgress);\n          return null;\n        case ClassComponent:\n          {\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case HostRoot:\n          {\n            var fiberRoot = workInProgress.stateNode;\n            popHostContainer(workInProgress);\n            if (fiberRoot.pendingContext) {\n              fiberRoot.context = fiberRoot.pendingContext;\n              fiberRoot.pendingContext = null;\n            }\n            if (current === null || current.child === null) {\n              var wasHydrated = popHydrationState();\n              if (wasHydrated) {\n                markUpdate(workInProgress);\n              } else {\n                if (current !== null) {\n                  var prevState = current.memoizedState;\n                  if (!prevState.isDehydrated || (workInProgress.flags & ForceClientRender) !== NoFlags$1) {\n                    workInProgress.flags |= Snapshot;\n                    upgradeHydrationErrorsToRecoverable();\n                  }\n                }\n              }\n            }\n            updateHostContainer(current, workInProgress);\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            popHostContext(workInProgress);\n            var _type2 = workInProgress.type;\n            if (current !== null && workInProgress.stateNode != null) {\n              updateHostComponent(current, workInProgress, _type2, newProps);\n            } else {\n              if (!newProps) {\n                if (workInProgress.stateNode === null) {\n                  throw new Error(\"We must have new props for new mounts. This error is likely \" + \"caused by a bug in React. Please file an issue.\");\n                }\n                bubbleProperties(workInProgress);\n                return null;\n              }\n              var _currentHostContext = getHostContext();\n              var _wasHydrated2 = popHydrationState();\n              if (_wasHydrated2) {\n                prepareToHydrateHostInstance();\n              } else {\n                var _rootContainerInstance = getRootHostContainer();\n                var _instance3 = createInstance(_type2, newProps, _rootContainerInstance, _currentHostContext, workInProgress);\n                appendAllChildren(_instance3, workInProgress, false, false);\n                workInProgress.stateNode = _instance3;\n              }\n            }\n            bubbleProperties(workInProgress);\n            preloadInstanceAndSuspendIfNeeded(workInProgress);\n            return null;\n          }\n        case HostText:\n          {\n            var newText = newProps;\n            if (current && workInProgress.stateNode != null) {\n              var oldText = current.memoizedProps;\n              updateHostText(current, workInProgress, oldText, newText);\n            } else {\n              if (typeof newText !== \"string\") {\n                if (workInProgress.stateNode === null) {\n                  throw new Error(\"We must have new props for new mounts. This error is likely \" + \"caused by a bug in React. Please file an issue.\");\n                }\n              }\n              var _rootContainerInstance2 = getRootHostContainer();\n              var _currentHostContext2 = getHostContext();\n              var _wasHydrated3 = popHydrationState();\n              if (_wasHydrated3) {\n                if (prepareToHydrateHostTextInstance()) {\n                  markUpdate(workInProgress);\n                }\n              } else {\n                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance2, _currentHostContext2, workInProgress);\n              }\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case SuspenseComponent:\n          {\n            var nextState = workInProgress.memoizedState;\n            if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n              if (!fallthroughToNormalSuspensePath) {\n                if (workInProgress.flags & ForceClientRender) {\n                  popSuspenseHandler(workInProgress);\n                  return workInProgress;\n                } else {\n                  popSuspenseHandler(workInProgress);\n                  return null;\n                }\n              }\n            }\n            popSuspenseHandler(workInProgress);\n            if ((workInProgress.flags & DidCapture) !== NoFlags$1) {\n              workInProgress.lanes = renderLanes;\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n              return workInProgress;\n            }\n            var nextDidTimeout = nextState !== null;\n            var prevDidTimeout = current !== null && current.memoizedState !== null;\n            if (nextDidTimeout !== prevDidTimeout) {\n              if (nextDidTimeout) {\n                var _offscreenFiber2 = workInProgress.child;\n                _offscreenFiber2.flags |= Visibility;\n              }\n            }\n            var retryQueue = workInProgress.updateQueue;\n            scheduleRetryEffect(workInProgress, retryQueue);\n            bubbleProperties(workInProgress);\n            {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                if (nextDidTimeout) {\n                  var primaryChildFragment = workInProgress.child;\n                  if (primaryChildFragment !== null) {\n                    workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                  }\n                }\n              }\n            }\n            return null;\n          }\n        case HostPortal:\n          popHostContainer(workInProgress);\n          updateHostContainer(current, workInProgress);\n          bubbleProperties(workInProgress);\n          return null;\n        case ContextProvider:\n          var context;\n          {\n            context = workInProgress.type._context;\n          }\n          popProvider(context, workInProgress);\n          bubbleProperties(workInProgress);\n          return null;\n        case IncompleteClassComponent:\n          {\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case SuspenseListComponent:\n          {\n            popSuspenseListContext(workInProgress);\n            var renderState = workInProgress.memoizedState;\n            if (renderState === null) {\n              bubbleProperties(workInProgress);\n              return null;\n            }\n            var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags$1;\n            var renderedTail = renderState.rendering;\n            if (renderedTail === null) {\n              if (!didSuspendAlready) {\n                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags$1);\n                if (!cannotBeSuspended) {\n                  var row = workInProgress.child;\n                  while (row !== null) {\n                    var suspended = findFirstSuspended(row);\n                    if (suspended !== null) {\n                      didSuspendAlready = true;\n                      workInProgress.flags |= DidCapture;\n                      cutOffTailIfNeeded(renderState, false);\n                      var _retryQueue = suspended.updateQueue;\n                      workInProgress.updateQueue = _retryQueue;\n                      scheduleRetryEffect(workInProgress, _retryQueue);\n                      workInProgress.subtreeFlags = NoFlags$1;\n                      resetChildFibers(workInProgress, renderLanes);\n                      pushSuspenseListContext(workInProgress, setShallowSuspenseListContext(suspenseStackCursor.current, ForceSuspenseFallback));\n                      return workInProgress.child;\n                    }\n                    row = row.sibling;\n                  }\n                }\n                if (renderState.tail !== null && now$1() > getRenderTargetTime()) {\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  cutOffTailIfNeeded(renderState, false);\n                  workInProgress.lanes = SomeRetryLane;\n                }\n              } else {\n                cutOffTailIfNeeded(renderState, false);\n              }\n            } else {\n              if (!didSuspendAlready) {\n                var _suspended = findFirstSuspended(renderedTail);\n                if (_suspended !== null) {\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  var _retryQueue2 = _suspended.updateQueue;\n                  workInProgress.updateQueue = _retryQueue2;\n                  scheduleRetryEffect(workInProgress, _retryQueue2);\n                  cutOffTailIfNeeded(renderState, true);\n                  if (renderState.tail === null && renderState.tailMode === \"hidden\" && !renderedTail.alternate && !getIsHydrating()) {\n                    bubbleProperties(workInProgress);\n                    return null;\n                  }\n                } else if (now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  cutOffTailIfNeeded(renderState, false);\n                  workInProgress.lanes = SomeRetryLane;\n                }\n              }\n              if (renderState.isBackwards) {\n                renderedTail.sibling = workInProgress.child;\n                workInProgress.child = renderedTail;\n              } else {\n                var previousSibling = renderState.last;\n                if (previousSibling !== null) {\n                  previousSibling.sibling = renderedTail;\n                } else {\n                  workInProgress.child = renderedTail;\n                }\n                renderState.last = renderedTail;\n              }\n            }\n            if (renderState.tail !== null) {\n              var next = renderState.tail;\n              renderState.rendering = next;\n              renderState.tail = next.sibling;\n              renderState.renderingStartTime = now$1();\n              next.sibling = null;\n              var suspenseContext = suspenseStackCursor.current;\n              if (didSuspendAlready) {\n                suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n              } else {\n                suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n              }\n              pushSuspenseListContext(workInProgress, suspenseContext);\n              return next;\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case ScopeComponent:\n          {\n            break;\n          }\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            popSuspenseHandler(workInProgress);\n            popHiddenContext(workInProgress);\n            var _nextState = workInProgress.memoizedState;\n            var nextIsHidden = _nextState !== null;\n            {\n              if (current !== null) {\n                var _prevState = current.memoizedState;\n                var prevIsHidden = _prevState !== null;\n                if (prevIsHidden !== nextIsHidden) {\n                  workInProgress.flags |= Visibility;\n                }\n              } else {\n                if (nextIsHidden) {\n                  workInProgress.flags |= Visibility;\n                }\n              }\n            }\n            if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n              bubbleProperties(workInProgress);\n            } else {\n              if (includesSomeLane(renderLanes, OffscreenLane) && (workInProgress.flags & DidCapture) === NoLanes) {\n                bubbleProperties(workInProgress);\n                if (workInProgress.subtreeFlags & (Placement | Update)) {\n                  workInProgress.flags |= Visibility;\n                }\n              }\n            }\n            var offscreenQueue = workInProgress.updateQueue;\n            if (offscreenQueue !== null) {\n              var _retryQueue3 = offscreenQueue.retryQueue;\n              scheduleRetryEffect(workInProgress, _retryQueue3);\n            }\n            return null;\n          }\n        case CacheComponent:\n          {\n            return null;\n          }\n        case TracingMarkerComponent:\n          {\n            return null;\n          }\n      }\n      throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + \"React. Please file an issue.\");\n    }\n    function unwindWork(current, workInProgress, renderLanes) {\n      switch (workInProgress.tag) {\n        case ClassComponent:\n          {\n            var flags = workInProgress.flags;\n            if (flags & ShouldCapture) {\n              workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n              return workInProgress;\n            }\n            return null;\n          }\n        case HostRoot:\n          {\n            popHostContainer(workInProgress);\n            var _flags = workInProgress.flags;\n            if ((_flags & ShouldCapture) !== NoFlags$1 && (_flags & DidCapture) === NoFlags$1) {\n              workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n              return workInProgress;\n            }\n            return null;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            popHostContext(workInProgress);\n            return null;\n          }\n        case SuspenseComponent:\n          {\n            popSuspenseHandler(workInProgress);\n            var suspenseState = workInProgress.memoizedState;\n            if (suspenseState !== null && suspenseState.dehydrated !== null) {\n              if (workInProgress.alternate === null) {\n                throw new Error(\"Threw in newly mounted dehydrated component. This is likely a bug in \" + \"React. Please file an issue.\");\n              }\n            }\n            var _flags2 = workInProgress.flags;\n            if (_flags2 & ShouldCapture) {\n              workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture;\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n              return workInProgress;\n            }\n            return null;\n          }\n        case SuspenseListComponent:\n          {\n            popSuspenseListContext(workInProgress);\n            return null;\n          }\n        case HostPortal:\n          popHostContainer(workInProgress);\n          return null;\n        case ContextProvider:\n          var context;\n          {\n            context = workInProgress.type._context;\n          }\n          popProvider(context, workInProgress);\n          return null;\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            popSuspenseHandler(workInProgress);\n            popHiddenContext(workInProgress);\n            var _flags3 = workInProgress.flags;\n            if (_flags3 & ShouldCapture) {\n              workInProgress.flags = _flags3 & ~ShouldCapture | DidCapture;\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n              return workInProgress;\n            }\n            return null;\n          }\n        case CacheComponent:\n          return null;\n        case TracingMarkerComponent:\n          return null;\n        default:\n          return null;\n      }\n    }\n    function unwindInterruptedWork(current, interruptedWork, renderLanes) {\n      switch (interruptedWork.tag) {\n        case ClassComponent:\n          {\n            break;\n          }\n        case HostRoot:\n          {\n            popHostContainer(interruptedWork);\n            break;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            popHostContext(interruptedWork);\n            break;\n          }\n        case HostPortal:\n          popHostContainer(interruptedWork);\n          break;\n        case SuspenseComponent:\n          popSuspenseHandler(interruptedWork);\n          break;\n        case SuspenseListComponent:\n          popSuspenseListContext(interruptedWork);\n          break;\n        case ContextProvider:\n          var context;\n          {\n            context = interruptedWork.type._context;\n          }\n          popProvider(context, interruptedWork);\n          break;\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          popSuspenseHandler(interruptedWork);\n          popHiddenContext(interruptedWork);\n          break;\n      }\n    }\n    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n    {\n      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n    }\n    var offscreenSubtreeIsHidden = false;\n    var offscreenSubtreeWasHidden = false;\n    var PossiblyWeakSet = typeof WeakSet === \"function\" ? WeakSet : Set;\n    var nextEffect = null;\n    var inProgressLanes = null;\n    var inProgressRoot = null;\n    function shouldProfile(current) {\n      return (current.mode & ProfileMode) !== NoMode && (getExecutionContext() & CommitContext) !== NoContext;\n    }\n    function callComponentWillUnmountWithTimer(current, instance) {\n      instance.props = current.memoizedProps;\n      instance.state = current.memoizedState;\n      if (shouldProfile(current)) {\n        try {\n          startLayoutEffectTimer();\n          instance.componentWillUnmount();\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        instance.componentWillUnmount();\n      }\n    }\n    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n      try {\n        callComponentWillUnmountWithTimer(current, instance);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    function safelyAttachRef(current, nearestMountedAncestor) {\n      try {\n        commitAttachRef(current);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    function safelyDetachRef(current, nearestMountedAncestor) {\n      var ref = current.ref;\n      var refCleanup = current.refCleanup;\n      if (ref !== null) {\n        if (typeof refCleanup === \"function\") {\n          try {\n            if (shouldProfile(current)) {\n              try {\n                startLayoutEffectTimer();\n                refCleanup();\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              refCleanup();\n            }\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          } finally {\n            current.refCleanup = null;\n            var finishedWork = current.alternate;\n            if (finishedWork != null) {\n              finishedWork.refCleanup = null;\n            }\n          }\n        } else if (typeof ref === \"function\") {\n          var retVal;\n          try {\n            if (shouldProfile(current)) {\n              try {\n                startLayoutEffectTimer();\n                retVal = ref(null);\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              retVal = ref(null);\n            }\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          }\n          {\n            if (typeof retVal === \"function\") {\n              error(\"Unexpected return value from a callback ref in %s. \" + \"A callback ref should not return a function.\", getComponentNameFromFiber(current));\n            }\n          }\n        } else {\n          ref.current = null;\n        }\n      }\n    }\n    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n      try {\n        destroy();\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    var shouldFireAfterActiveInstanceBlur = false;\n    function commitBeforeMutationEffects(root, firstChild) {\n      nextEffect = firstChild;\n      commitBeforeMutationEffects_begin();\n      var shouldFire = shouldFireAfterActiveInstanceBlur;\n      shouldFireAfterActiveInstanceBlur = false;\n      return shouldFire;\n    }\n    function commitBeforeMutationEffects_begin() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var child = fiber.child;\n        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags$1 && child !== null) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitBeforeMutationEffects_complete();\n        }\n      }\n    }\n    function commitBeforeMutationEffects_complete() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n        try {\n          commitBeforeMutationEffectsOnFiber(fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        resetCurrentFiber();\n        var sibling = fiber.sibling;\n        if (sibling !== null) {\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = fiber.return;\n      }\n    }\n    function commitBeforeMutationEffectsOnFiber(finishedWork) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags;\n      if ((flags & Snapshot) !== NoFlags$1) {\n        setCurrentFiber(finishedWork);\n      }\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n          {\n            break;\n          }\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            break;\n          }\n        case ClassComponent:\n          {\n            if ((flags & Snapshot) !== NoFlags$1) {\n              if (current !== null) {\n                var prevProps = current.memoizedProps;\n                var prevState = current.memoizedState;\n                var instance = finishedWork.stateNode;\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error(\"Expected %s props to match memoized props before \" + \"getSnapshotBeforeUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                    }\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error(\"Expected %s state to match memoized state before \" + \"getSnapshotBeforeUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                    }\n                  }\n                }\n                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n                {\n                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                    didWarnSet.add(finishedWork.type);\n                    error(\"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) \" + \"must be returned. You have returned undefined.\", getComponentNameFromFiber(finishedWork));\n                  }\n                }\n                instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n              }\n            }\n            break;\n          }\n        case HostRoot:\n          {\n            break;\n          }\n        case HostComponent:\n        case HostHoistable:\n        case HostSingleton:\n        case HostText:\n        case HostPortal:\n        case IncompleteClassComponent:\n          break;\n        default:\n          {\n            if ((flags & Snapshot) !== NoFlags$1) {\n              throw new Error(\"This unit of work tag should not have side-effects. This error is \" + \"likely caused by a bug in React. Please file an issue.\");\n            }\n          }\n      }\n      if ((flags & Snapshot) !== NoFlags$1) {\n        resetCurrentFiber();\n      }\n    }\n    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n        do {\n          if ((effect.tag & flags) === flags) {\n            var inst = effect.inst;\n            var destroy = inst.destroy;\n            if (destroy !== undefined) {\n              inst.destroy = undefined;\n              {\n                if ((flags & Insertion) !== NoFlags) {\n                  setIsRunningInsertionEffect(true);\n                }\n              }\n              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n              {\n                if ((flags & Insertion) !== NoFlags) {\n                  setIsRunningInsertionEffect(false);\n                }\n              }\n            }\n          }\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n    function commitHookEffectListMount(flags, finishedWork) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n        do {\n          if ((effect.tag & flags) === flags) {\n            var create = effect.create;\n            {\n              if ((flags & Insertion) !== NoFlags) {\n                setIsRunningInsertionEffect(true);\n              }\n            }\n            var inst = effect.inst;\n            var destroy = create();\n            inst.destroy = destroy;\n            {\n              if ((flags & Insertion) !== NoFlags) {\n                setIsRunningInsertionEffect(false);\n              }\n            }\n            {\n              if (destroy !== undefined && typeof destroy !== \"function\") {\n                var hookName = void 0;\n                if ((effect.tag & Layout) !== NoFlags$1) {\n                  hookName = \"useLayoutEffect\";\n                } else if ((effect.tag & Insertion) !== NoFlags$1) {\n                  hookName = \"useInsertionEffect\";\n                } else {\n                  hookName = \"useEffect\";\n                }\n                var addendum = void 0;\n                if (destroy === null) {\n                  addendum = \" You returned null. If your effect does not require clean \" + \"up, return undefined (or nothing).\";\n                } else if (typeof destroy.then === \"function\") {\n                  addendum = \"\\n\\nIt looks like you wrote \" + hookName + \"(async () => ...) or returned a Promise. \" + \"Instead, write the async function inside your effect \" + \"and call it immediately:\\n\\n\" + hookName + \"(() => {\\n\" + \"  async function fetchData() {\\n\" + \"    // You can await here\\n\" + \"    const response = await MyAPI.getData(someId);\\n\" + \"    // ...\\n\" + \"  }\\n\" + \"  fetchData();\\n\" + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + \"Learn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching\";\n                } else {\n                  addendum = \" You returned: \" + destroy;\n                }\n                error(\"%s must not return anything besides a function, \" + \"which is used for clean-up.%s\", hookName, addendum);\n              }\n            }\n          }\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n    function commitPassiveEffectDurations(finishedRoot, finishedWork) {\n      if (getExecutionContext() & CommitContext) {\n        if ((finishedWork.flags & Update) !== NoFlags$1) {\n          switch (finishedWork.tag) {\n            case Profiler:\n              {\n                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n                var _finishedWork$memoize = finishedWork.memoizedProps,\n                  id = _finishedWork$memoize.id,\n                  onPostCommit = _finishedWork$memoize.onPostCommit;\n                var commitTime = getCommitTime();\n                var phase = finishedWork.alternate === null ? \"mount\" : \"update\";\n                {\n                  if (isCurrentUpdateNested()) {\n                    phase = \"nested-update\";\n                  }\n                }\n                if (typeof onPostCommit === \"function\") {\n                  onPostCommit(id, phase, passiveEffectDuration, commitTime);\n                }\n                var parentFiber = finishedWork.return;\n                outer: while (parentFiber !== null) {\n                  switch (parentFiber.tag) {\n                    case HostRoot:\n                      var root = parentFiber.stateNode;\n                      root.passiveEffectDuration += passiveEffectDuration;\n                      break outer;\n                    case Profiler:\n                      var parentStateNode = parentFiber.stateNode;\n                      parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                      break outer;\n                  }\n                  parentFiber = parentFiber.return;\n                }\n                break;\n              }\n          }\n        }\n      }\n    }\n    function commitHookLayoutEffects(finishedWork, hookFlags) {\n      if (shouldProfile(finishedWork)) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        recordLayoutEffectDuration(finishedWork);\n      } else {\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n    function commitClassLayoutLifecycles(finishedWork, current) {\n      var instance = finishedWork.stateNode;\n      if (current === null) {\n        {\n          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\"Expected %s props to match memoized props before \" + \"componentDidMount. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\"Expected %s state to match memoized state before \" + \"componentDidMount. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n          }\n        }\n        if (shouldProfile(finishedWork)) {\n          try {\n            startLayoutEffectTimer();\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else {\n        var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n        var prevState = current.memoizedState;\n        {\n          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\"Expected %s props to match memoized props before \" + \"componentDidUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\"Expected %s state to match memoized state before \" + \"componentDidUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n          }\n        }\n        if (shouldProfile(finishedWork)) {\n          try {\n            startLayoutEffectTimer();\n            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n    }\n    function commitClassCallbacks(finishedWork) {\n      var updateQueue = finishedWork.updateQueue;\n      if (updateQueue !== null) {\n        var instance = finishedWork.stateNode;\n        {\n          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\"Expected %s props to match memoized props before \" + \"processing the update queue. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\"Expected %s state to match memoized state before \" + \"processing the update queue. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n          }\n        }\n        try {\n          commitCallbacks(updateQueue, instance);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n    function commitHostComponentMount(finishedWork) {\n      var type = finishedWork.type;\n      var props = finishedWork.memoizedProps;\n      var instance = finishedWork.stateNode;\n      try {\n        commitMount(instance, type, props, finishedWork);\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n    function commitProfilerUpdate(finishedWork, current) {\n      if (getExecutionContext() & CommitContext) {\n        try {\n          var _finishedWork$memoize2 = finishedWork.memoizedProps,\n            onCommit = _finishedWork$memoize2.onCommit,\n            onRender = _finishedWork$memoize2.onRender;\n          var effectDuration = finishedWork.stateNode.effectDuration;\n          var commitTime = getCommitTime();\n          var phase = current === null ? \"mount\" : \"update\";\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = \"nested-update\";\n            }\n          }\n          if (typeof onRender === \"function\") {\n            onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n          }\n          if (enableProfilerCommitHooks) {\n            if (typeof onCommit === \"function\") {\n              onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n            }\n            enqueuePendingPassiveProfilerEffect(finishedWork);\n            var parentFiber = finishedWork.return;\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  var root = parentFiber.stateNode;\n                  root.effectDuration += effectDuration;\n                  break outer;\n                case Profiler:\n                  var parentStateNode = parentFiber.stateNode;\n                  parentStateNode.effectDuration += effectDuration;\n                  break outer;\n              }\n              parentFiber = parentFiber.return;\n            }\n          }\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            if (flags & Update) {\n              commitHookLayoutEffects(finishedWork, Layout | HasEffect);\n            }\n            break;\n          }\n        case ClassComponent:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            if (flags & Update) {\n              commitClassLayoutLifecycles(finishedWork, current);\n            }\n            if (flags & Callback) {\n              commitClassCallbacks(finishedWork);\n            }\n            if (flags & Ref) {\n              safelyAttachRef(finishedWork, finishedWork.return);\n            }\n            break;\n          }\n        case HostRoot:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            if (flags & Callback) {\n              var updateQueue = finishedWork.updateQueue;\n              if (updateQueue !== null) {\n                var instance = null;\n                if (finishedWork.child !== null) {\n                  switch (finishedWork.child.tag) {\n                    case HostSingleton:\n                    case HostComponent:\n                      instance = getPublicInstance(finishedWork.child.stateNode);\n                      break;\n                    case ClassComponent:\n                      instance = finishedWork.child.stateNode;\n                      break;\n                  }\n                }\n                try {\n                  commitCallbacks(updateQueue, instance);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            break;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            if (current === null && flags & Update) {\n              commitHostComponentMount(finishedWork);\n            }\n            if (flags & Ref) {\n              safelyAttachRef(finishedWork, finishedWork.return);\n            }\n            break;\n          }\n        case Profiler:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            if (flags & Update) {\n              commitProfilerUpdate(finishedWork, current);\n            }\n            break;\n          }\n        case SuspenseComponent:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var isModernRoot = (finishedWork.mode & ConcurrentMode) !== NoMode;\n            if (isModernRoot) {\n              var isHidden = finishedWork.memoizedState !== null;\n              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n              if (newOffscreenSubtreeIsHidden) ;else {\n                var wasHidden = current !== null && current.memoizedState !== null;\n                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n                  var includeWorkInProgressEffects = (finishedWork.subtreeFlags & LayoutMask) !== NoFlags$1;\n                  recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n                } else {\n                  recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n                }\n                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n              }\n            } else {\n              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            }\n            if (flags & Ref) {\n              var props = finishedWork.memoizedProps;\n              if (props.mode === \"manual\") {\n                safelyAttachRef(finishedWork, finishedWork.return);\n              } else {\n                safelyDetachRef(finishedWork, finishedWork.return);\n              }\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            break;\n          }\n      }\n    }\n    function commitAttachRef(finishedWork) {\n      var ref = finishedWork.ref;\n      if (ref !== null) {\n        var instance = finishedWork.stateNode;\n        var instanceToUse;\n        switch (finishedWork.tag) {\n          case HostHoistable:\n          case HostSingleton:\n          case HostComponent:\n            instanceToUse = getPublicInstance(instance);\n            break;\n          default:\n            instanceToUse = instance;\n        }\n        if (typeof ref === \"function\") {\n          if (shouldProfile(finishedWork)) {\n            try {\n              startLayoutEffectTimer();\n              finishedWork.refCleanup = ref(instanceToUse);\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            finishedWork.refCleanup = ref(instanceToUse);\n          }\n        } else {\n          {\n            if (!ref.hasOwnProperty(\"current\")) {\n              error(\"Unexpected ref object provided for %s. \" + \"Use either a ref-setter function or React.createRef().\", getComponentNameFromFiber(finishedWork));\n            }\n          }\n          ref.current = instanceToUse;\n        }\n      }\n    }\n    function detachFiberMutation(fiber) {\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.return = null;\n      }\n      fiber.return = null;\n    }\n    function detachFiberAfterEffects(fiber) {\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        fiber.alternate = null;\n        detachFiberAfterEffects(alternate);\n      }\n      fiber.child = null;\n      fiber.deletions = null;\n      fiber.sibling = null;\n      fiber.stateNode = null;\n      {\n        fiber._debugOwner = null;\n      }\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      fiber.updateQueue = null;\n    }\n    function emptyPortalContainer(current) {\n      createContainerChildSet();\n    }\n    function commitPlacement(finishedWork) {\n      {\n        return;\n      }\n    }\n    function commitDeletionEffects(root, returnFiber, deletedFiber) {\n      {\n        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n      }\n      detachFiberMutation(deletedFiber);\n    }\n    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n      var child = parent.child;\n      while (child !== null) {\n        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n        child = child.sibling;\n      }\n    }\n    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n      onCommitUnmount(deletedFiber);\n      switch (deletedFiber.tag) {\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            if (!offscreenSubtreeWasHidden) {\n              safelyDetachRef(deletedFiber, nearestMountedAncestor);\n            }\n          }\n        case HostText:\n          {\n            {\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            }\n            return;\n          }\n        case DehydratedFragment:\n          {\n            return;\n          }\n        case HostPortal:\n          {\n            {\n              emptyPortalContainer();\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            }\n            return;\n          }\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            if (!offscreenSubtreeWasHidden) {\n              var updateQueue = deletedFiber.updateQueue;\n              if (updateQueue !== null) {\n                var lastEffect = updateQueue.lastEffect;\n                if (lastEffect !== null) {\n                  var firstEffect = lastEffect.next;\n                  var effect = firstEffect;\n                  do {\n                    var tag = effect.tag;\n                    var inst = effect.inst;\n                    var destroy = inst.destroy;\n                    if (destroy !== undefined) {\n                      if ((tag & Insertion) !== NoFlags) {\n                        inst.destroy = undefined;\n                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                      } else if ((tag & Layout) !== NoFlags) {\n                        if (shouldProfile(deletedFiber)) {\n                          startLayoutEffectTimer();\n                          inst.destroy = undefined;\n                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                          recordLayoutEffectDuration(deletedFiber);\n                        } else {\n                          inst.destroy = undefined;\n                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                        }\n                      }\n                    }\n                    effect = effect.next;\n                  } while (effect !== firstEffect);\n                }\n              }\n            }\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n        case ClassComponent:\n          {\n            if (!offscreenSubtreeWasHidden) {\n              safelyDetachRef(deletedFiber, nearestMountedAncestor);\n              var instance = deletedFiber.stateNode;\n              if (typeof instance.componentWillUnmount === \"function\") {\n                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n              }\n            }\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n        case ScopeComponent:\n          {\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n        case OffscreenComponent:\n          {\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n            if (deletedFiber.mode & ConcurrentMode) {\n              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n            } else {\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n      }\n    }\n    function commitSuspenseCallback(finishedWork) {}\n    function getRetryCache(finishedWork) {\n      switch (finishedWork.tag) {\n        case SuspenseComponent:\n        case SuspenseListComponent:\n          {\n            var retryCache = finishedWork.stateNode;\n            if (retryCache === null) {\n              retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n            }\n            return retryCache;\n          }\n        case OffscreenComponent:\n          {\n            var instance = finishedWork.stateNode;\n            var _retryCache = instance._retryCache;\n            if (_retryCache === null) {\n              _retryCache = instance._retryCache = new PossiblyWeakSet();\n            }\n            return _retryCache;\n          }\n        default:\n          {\n            throw new Error(\"Unexpected Suspense handler tag (\" + finishedWork.tag + \"). This is a \" + \"bug in React.\");\n          }\n      }\n    }\n    function detachOffscreenInstance(instance) {\n      var fiber = instance._current;\n      if (fiber === null) {\n        throw new Error(\"Calling Offscreen.detach before instance handle has been set.\");\n      }\n      if ((instance._pendingVisibility & OffscreenDetached) !== NoFlags$1) {\n        return;\n      }\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        instance._pendingVisibility |= OffscreenDetached;\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n    function attachOffscreenInstance(instance) {\n      var fiber = instance._current;\n      if (fiber === null) {\n        throw new Error(\"Calling Offscreen.detach before instance handle has been set.\");\n      }\n      if ((instance._pendingVisibility & OffscreenDetached) === NoFlags$1) {\n        return;\n      }\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        instance._pendingVisibility &= ~OffscreenDetached;\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n    function attachSuspenseRetryListeners(finishedWork, wakeables) {\n      var retryCache = getRetryCache(finishedWork);\n      wakeables.forEach(function (wakeable) {\n        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n        if (!retryCache.has(wakeable)) {\n          retryCache.add(wakeable);\n          {\n            if (isDevToolsPresent) {\n              if (inProgressLanes !== null && inProgressRoot !== null) {\n                restorePendingUpdaters(inProgressRoot, inProgressLanes);\n              } else {\n                throw Error(\"Expected finished root and lanes to be set. This is a bug in React.\");\n              }\n            }\n          }\n          wakeable.then(retry, retry);\n        }\n      });\n    }\n    function commitMutationEffects(root, finishedWork, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      setCurrentFiber(finishedWork);\n      commitMutationEffectsOnFiber(finishedWork, root);\n      setCurrentFiber(finishedWork);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n    function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n      var deletions = parentFiber.deletions;\n      if (deletions !== null) {\n        for (var i = 0; i < deletions.length; i++) {\n          var childToDelete = deletions[i];\n          try {\n            commitDeletionEffects(root, parentFiber, childToDelete);\n          } catch (error) {\n            captureCommitPhaseError(childToDelete, parentFiber, error);\n          }\n        }\n      }\n      var prevDebugFiber = getCurrentFiber();\n      if (parentFiber.subtreeFlags & MutationMask) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitMutationEffectsOnFiber(child, root);\n          child = child.sibling;\n        }\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Update) {\n              try {\n                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n                commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n              if (shouldProfile(finishedWork)) {\n                try {\n                  startLayoutEffectTimer();\n                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n                recordLayoutEffectDuration(finishedWork);\n              } else {\n                try {\n                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            return;\n          }\n        case ClassComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Ref) {\n              if (current !== null) {\n                safelyDetachRef(current, current.return);\n              }\n            }\n            if (flags & Callback && offscreenSubtreeIsHidden) {\n              var updateQueue = finishedWork.updateQueue;\n              if (updateQueue !== null) {\n                deferHiddenCallbacks(updateQueue);\n              }\n            }\n            return;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Ref) {\n              if (current !== null) {\n                safelyDetachRef(current, current.return);\n              }\n            }\n            return;\n          }\n        case HostText:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            return;\n          }\n        case HostRoot:\n          {\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n            }\n            if (flags & Update) {\n              {\n                var containerInfo = root.containerInfo;\n                var pendingChildren = root.pendingChildren;\n                try {\n                  replaceContainerChildren(containerInfo, pendingChildren);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            return;\n          }\n        case HostPortal:\n          {\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n            }\n            if (flags & Update) {\n              {\n                var portal = finishedWork.stateNode;\n                var _containerInfo = portal.containerInfo;\n                var _pendingChildren = portal.pendingChildren;\n                try {\n                  replaceContainerChildren(_containerInfo, _pendingChildren);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            return;\n          }\n        case SuspenseComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            var offscreenFiber = finishedWork.child;\n            if (offscreenFiber.flags & Visibility) {\n              var isShowingFallback = finishedWork.memoizedState !== null;\n              var wasShowingFallback = current !== null && current.memoizedState !== null;\n              {\n                if (isShowingFallback && !wasShowingFallback) {\n                  markCommitTimeOfFallback();\n                }\n              }\n            }\n            if (flags & Update) {\n              try {\n                commitSuspenseCallback(finishedWork);\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n              var retryQueue = finishedWork.updateQueue;\n              if (retryQueue !== null) {\n                finishedWork.updateQueue = null;\n                attachSuspenseRetryListeners(finishedWork, retryQueue);\n              }\n            }\n            return;\n          }\n        case OffscreenComponent:\n          {\n            if (flags & Ref) {\n              if (current !== null) {\n                safelyDetachRef(current, current.return);\n              }\n            }\n            var newState = finishedWork.memoizedState;\n            var isHidden = newState !== null;\n            var wasHidden = current !== null && current.memoizedState !== null;\n            if (finishedWork.mode & ConcurrentMode) {\n              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n            } else {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n            }\n            commitReconciliationEffects(finishedWork);\n            var offscreenInstance = finishedWork.stateNode;\n            offscreenInstance._current = finishedWork;\n            offscreenInstance._visibility &= ~OffscreenDetached;\n            offscreenInstance._visibility |= offscreenInstance._pendingVisibility & OffscreenDetached;\n            if (flags & Visibility) {\n              if (isHidden) {\n                offscreenInstance._visibility &= ~OffscreenVisible;\n              } else {\n                offscreenInstance._visibility |= OffscreenVisible;\n              }\n              if (isHidden) {\n                var isUpdate = current !== null;\n                var wasHiddenByAncestorOffscreen = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden;\n                if (isUpdate && !wasHidden && !wasHiddenByAncestorOffscreen) {\n                  if ((finishedWork.mode & ConcurrentMode) !== NoMode) {\n                    recursivelyTraverseDisappearLayoutEffects(finishedWork);\n                  }\n                }\n              }\n            }\n            if (flags & Update) {\n              var offscreenQueue = finishedWork.updateQueue;\n              if (offscreenQueue !== null) {\n                var _retryQueue = offscreenQueue.retryQueue;\n                if (_retryQueue !== null) {\n                  offscreenQueue.retryQueue = null;\n                  attachSuspenseRetryListeners(finishedWork, _retryQueue);\n                }\n              }\n            }\n            return;\n          }\n        case SuspenseListComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Update) {\n              var _retryQueue2 = finishedWork.updateQueue;\n              if (_retryQueue2 !== null) {\n                finishedWork.updateQueue = null;\n                attachSuspenseRetryListeners(finishedWork, _retryQueue2);\n              }\n            }\n            return;\n          }\n        case ScopeComponent:\n          {\n            return;\n          }\n        default:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            return;\n          }\n      }\n    }\n    function commitReconciliationEffects(finishedWork) {\n      var flags = finishedWork.flags;\n      if (flags & Placement) {\n        try {\n          commitPlacement(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        finishedWork.flags &= ~Placement;\n      }\n      if (flags & Hydrating) {\n        finishedWork.flags &= ~Hydrating;\n      }\n    }\n    function commitLayoutEffects(finishedWork, root, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      var current = finishedWork.alternate;\n      commitLayoutEffectOnFiber(root, current, finishedWork);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n    function recursivelyTraverseLayoutEffects(root, parentFiber, lanes) {\n      var prevDebugFiber = getCurrentFiber();\n      if (parentFiber.subtreeFlags & LayoutMask) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          setCurrentFiber(child);\n          var current = child.alternate;\n          commitLayoutEffectOnFiber(root, current, child);\n          child = child.sibling;\n        }\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function disappearLayoutEffects(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            if (shouldProfile(finishedWork)) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);\n              } finally {\n                recordLayoutEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);\n            }\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n            break;\n          }\n        case ClassComponent:\n          {\n            safelyDetachRef(finishedWork, finishedWork.return);\n            var instance = finishedWork.stateNode;\n            if (typeof instance.componentWillUnmount === \"function\") {\n              safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);\n            }\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n            break;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            safelyDetachRef(finishedWork, finishedWork.return);\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n            break;\n          }\n        case OffscreenComponent:\n          {\n            safelyDetachRef(finishedWork, finishedWork.return);\n            var isHidden = finishedWork.memoizedState !== null;\n            if (isHidden) ;else {\n              recursivelyTraverseDisappearLayoutEffects(finishedWork);\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n            break;\n          }\n      }\n    }\n    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {\n      var child = parentFiber.child;\n      while (child !== null) {\n        disappearLayoutEffects(child);\n        child = child.sibling;\n      }\n    }\n    function reappearLayoutEffects(finishedRoot, current, finishedWork, includeWorkInProgressEffects) {\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            commitHookLayoutEffects(finishedWork, Layout);\n            break;\n          }\n        case ClassComponent:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            var instance = finishedWork.stateNode;\n            if (typeof instance.componentDidMount === \"function\") {\n              try {\n                instance.componentDidMount();\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n            }\n            var updateQueue = finishedWork.updateQueue;\n            if (updateQueue !== null) {\n              commitHiddenCallbacks(updateQueue, instance);\n            }\n            if (includeWorkInProgressEffects && flags & Callback) {\n              commitClassCallbacks(finishedWork);\n            }\n            safelyAttachRef(finishedWork, finishedWork.return);\n            break;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            if (includeWorkInProgressEffects && current === null && flags & Update) {\n              commitHostComponentMount(finishedWork);\n            }\n            safelyAttachRef(finishedWork, finishedWork.return);\n            break;\n          }\n        case Profiler:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            if (includeWorkInProgressEffects && flags & Update) {\n              commitProfilerUpdate(finishedWork, current);\n            }\n            break;\n          }\n        case SuspenseComponent:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var offscreenState = finishedWork.memoizedState;\n            var isHidden = offscreenState !== null;\n            if (isHidden) ;else {\n              recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            }\n            safelyAttachRef(finishedWork, finishedWork.return);\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            break;\n          }\n      }\n    }\n    function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {\n      var childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & LayoutMask) !== NoFlags$1;\n      var prevDebugFiber = getCurrentFiber();\n      var child = parentFiber.child;\n      while (child !== null) {\n        var current = child.alternate;\n        reappearLayoutEffects(finishedRoot, current, child, childShouldIncludeWorkInProgressEffects);\n        child = child.sibling;\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function commitHookPassiveMountEffects(finishedWork, hookFlags) {\n      if (shouldProfile(finishedWork)) {\n        startPassiveEffectTimer();\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n    function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n      setCurrentFiber(finishedWork);\n      commitPassiveMountOnFiber(root, finishedWork);\n      resetCurrentFiber();\n    }\n    function recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {\n      var prevDebugFiber = getCurrentFiber();\n      if (parentFiber.subtreeFlags & PassiveMask) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitPassiveMountOnFiber(root, child);\n          child = child.sibling;\n        }\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n            if (flags & Passive$1) {\n              commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);\n            }\n            break;\n          }\n        case HostRoot:\n          {\n            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n            break;\n          }\n        case LegacyHiddenComponent:\n          {\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var _instance3 = finishedWork.stateNode;\n            var nextState = finishedWork.memoizedState;\n            var isHidden = nextState !== null;\n            if (isHidden) {\n              if (_instance3._visibility & OffscreenPassiveEffectsConnected) {\n                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n              } else {\n                if (finishedWork.mode & ConcurrentMode) ;else {\n                  _instance3._visibility |= OffscreenPassiveEffectsConnected;\n                  recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n                }\n              }\n            } else {\n              if (_instance3._visibility & OffscreenPassiveEffectsConnected) {\n                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n              } else {\n                _instance3._visibility |= OffscreenPassiveEffectsConnected;\n                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n              }\n            }\n            break;\n          }\n        case CacheComponent:\n          {\n            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n            break;\n          }\n        case TracingMarkerComponent:\n        default:\n          {\n            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n            break;\n          }\n      }\n    }\n    function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {\n      var prevDebugFiber = getCurrentFiber();\n      var child = parentFiber.child;\n      while (child !== null) {\n        reconnectPassiveEffects(finishedRoot, child);\n        child = child.sibling;\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n            commitHookPassiveMountEffects(finishedWork, Passive);\n            break;\n          }\n        case LegacyHiddenComponent:\n          {\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var _instance4 = finishedWork.stateNode;\n            var nextState = finishedWork.memoizedState;\n            var isHidden = nextState !== null;\n            if (isHidden) {\n              if (_instance4._visibility & OffscreenPassiveEffectsConnected) {\n                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n              } else {\n                if (finishedWork.mode & ConcurrentMode) ;else {\n                  _instance4._visibility |= OffscreenPassiveEffectsConnected;\n                  recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n                }\n              }\n            } else {\n              _instance4._visibility |= OffscreenPassiveEffectsConnected;\n              recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n            }\n            break;\n          }\n        case CacheComponent:\n          {\n            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n            break;\n          }\n        case TracingMarkerComponent:\n        default:\n          {\n            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n            break;\n          }\n      }\n    }\n    function commitPassiveUnmountEffects(finishedWork) {\n      setCurrentFiber(finishedWork);\n      commitPassiveUnmountOnFiber(finishedWork);\n      resetCurrentFiber();\n    }\n    var suspenseyCommitFlag = ShouldSuspendCommit;\n    function accumulateSuspenseyCommit(finishedWork) {\n      accumulateSuspenseyCommitOnFiber(finishedWork);\n    }\n    function recursivelyAccumulateSuspenseyCommit(parentFiber) {\n      if (parentFiber.subtreeFlags & suspenseyCommitFlag) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          accumulateSuspenseyCommitOnFiber(child);\n          child = child.sibling;\n        }\n      }\n    }\n    function accumulateSuspenseyCommitOnFiber(fiber) {\n      switch (fiber.tag) {\n        case HostHoistable:\n          {\n            recursivelyAccumulateSuspenseyCommit(fiber);\n            if (fiber.flags & suspenseyCommitFlag) {\n              if (fiber.memoizedState !== null) {\n                suspendResource();\n              }\n            }\n            break;\n          }\n        case HostComponent:\n          {\n            recursivelyAccumulateSuspenseyCommit(fiber);\n            break;\n          }\n        case HostRoot:\n        case HostPortal:\n          {\n            {\n              recursivelyAccumulateSuspenseyCommit(fiber);\n            }\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var isHidden = fiber.memoizedState !== null;\n            if (isHidden) ;else {\n              var current = fiber.alternate;\n              var wasHidden = current !== null && current.memoizedState !== null;\n              if (wasHidden) {\n                var prevFlags = suspenseyCommitFlag;\n                suspenseyCommitFlag = MaySuspendCommit;\n                recursivelyAccumulateSuspenseyCommit(fiber);\n                suspenseyCommitFlag = prevFlags;\n              } else {\n                recursivelyAccumulateSuspenseyCommit(fiber);\n              }\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyAccumulateSuspenseyCommit(fiber);\n          }\n      }\n    }\n    function detachAlternateSiblings(parentFiber) {\n      var previousFiber = parentFiber.alternate;\n      if (previousFiber !== null) {\n        var detachedChild = previousFiber.child;\n        if (detachedChild !== null) {\n          previousFiber.child = null;\n          do {\n            var detachedSibling = detachedChild.sibling;\n            detachedChild.sibling = null;\n            detachedChild = detachedSibling;\n          } while (detachedChild !== null);\n        }\n      }\n    }\n    function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {\n      if (shouldProfile(finishedWork)) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);\n      }\n    }\n    function recursivelyTraversePassiveUnmountEffects(parentFiber) {\n      var deletions = parentFiber.deletions;\n      if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i];\n            nextEffect = childToDelete;\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);\n          }\n        }\n        detachAlternateSiblings(parentFiber);\n      }\n      var prevDebugFiber = getCurrentFiber();\n      if (parentFiber.subtreeFlags & PassiveMask) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitPassiveUnmountOnFiber(child);\n          child = child.sibling;\n        }\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function commitPassiveUnmountOnFiber(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraversePassiveUnmountEffects(finishedWork);\n            if (finishedWork.flags & Passive$1) {\n              commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive | HasEffect);\n            }\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var instance = finishedWork.stateNode;\n            var nextState = finishedWork.memoizedState;\n            var isHidden = nextState !== null;\n            if (isHidden && instance._visibility & OffscreenPassiveEffectsConnected && (finishedWork.return === null || finishedWork.return.tag !== SuspenseComponent)) {\n              instance._visibility &= ~OffscreenPassiveEffectsConnected;\n              recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n            } else {\n              recursivelyTraversePassiveUnmountEffects(finishedWork);\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraversePassiveUnmountEffects(finishedWork);\n            break;\n          }\n      }\n    }\n    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {\n      var deletions = parentFiber.deletions;\n      if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i];\n            nextEffect = childToDelete;\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);\n          }\n        }\n        detachAlternateSiblings(parentFiber);\n      }\n      var prevDebugFiber = getCurrentFiber();\n      var child = parentFiber.child;\n      while (child !== null) {\n        setCurrentFiber(child);\n        disconnectPassiveEffect(child);\n        child = child.sibling;\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function disconnectPassiveEffect(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive);\n            recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var instance = finishedWork.stateNode;\n            if (instance._visibility & OffscreenPassiveEffectsConnected) {\n              instance._visibility &= ~OffscreenPassiveEffectsConnected;\n              recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n            break;\n          }\n      }\n    }\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n        resetCurrentFiber();\n        var child = fiber.child;\n        if (child !== null) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n        }\n      }\n    }\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var sibling = fiber.sibling;\n        var returnFiber = fiber.return;\n        detachFiberAfterEffects(fiber);\n        if (fiber === deletedSubtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n        if (sibling !== null) {\n          sibling.return = returnFiber;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = returnFiber;\n      }\n    }\n    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n      switch (current.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            commitHookPassiveUnmountEffects(current, nearestMountedAncestor, Passive);\n            break;\n          }\n      }\n    }\n    function invokeLayoutEffectMountInDEV(fiber) {\n      {\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListMount(Layout | HasEffect, fiber);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n              break;\n            }\n          case ClassComponent:\n            {\n              var instance = fiber.stateNode;\n              if (typeof instance.componentDidMount === \"function\") {\n                try {\n                  instance.componentDidMount();\n                } catch (error) {\n                  captureCommitPhaseError(fiber, fiber.return, error);\n                }\n              }\n              break;\n            }\n        }\n      }\n    }\n    function invokePassiveEffectMountInDEV(fiber) {\n      {\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListMount(Passive | HasEffect, fiber);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n              break;\n            }\n        }\n      }\n    }\n    function invokeLayoutEffectUnmountInDEV(fiber) {\n      {\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n              break;\n            }\n          case ClassComponent:\n            {\n              var instance = fiber.stateNode;\n              if (typeof instance.componentWillUnmount === \"function\") {\n                safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n              }\n              break;\n            }\n        }\n      }\n    }\n    function invokePassiveEffectUnmountInDEV(fiber) {\n      {\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListUnmount(Passive | HasEffect, fiber, fiber.return);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n            }\n        }\n      }\n    }\n    if (typeof Symbol === \"function\" && Symbol.for) {\n      var symbolFor = Symbol.for;\n      symbolFor(\"selector.component\");\n      symbolFor(\"selector.has_pseudo_class\");\n      symbolFor(\"selector.role\");\n      symbolFor(\"selector.test_id\");\n      symbolFor(\"selector.text\");\n    }\n    var ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n    function isLegacyActEnvironment(fiber) {\n      {\n        typeof IS_REACT_ACT_ENVIRONMENT !== \"undefined\" ? IS_REACT_ACT_ENVIRONMENT : undefined;\n        return warnsIfNotActing;\n      }\n    }\n    function isConcurrentActEnvironment() {\n      {\n        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== \"undefined\" ? IS_REACT_ACT_ENVIRONMENT : undefined;\n        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue$1.current !== null) {\n          error(\"The current testing environment is not configured to support \" + \"act(...)\");\n        }\n        return isReactActEnvironmentGlobal;\n      }\n    }\n    var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,\n      ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,\n      ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n    var NoContext = 0;\n    var BatchedContext = 1;\n    var RenderContext = 2;\n    var CommitContext = 4;\n    var RootInProgress = 0;\n    var RootFatalErrored = 1;\n    var RootErrored = 2;\n    var RootSuspended = 3;\n    var RootSuspendedWithDelay = 4;\n    var RootCompleted = 5;\n    var RootDidNotComplete = 6;\n    var executionContext = NoContext;\n    var workInProgressRoot = null;\n    var workInProgress = null;\n    var workInProgressRootRenderLanes = NoLanes;\n    var NotSuspended = 0;\n    var SuspendedOnError = 1;\n    var SuspendedOnData = 2;\n    var SuspendedOnImmediate = 3;\n    var SuspendedOnInstance = 4;\n    var SuspendedOnInstanceAndReadyToContinue = 5;\n    var SuspendedOnDeprecatedThrowPromise = 6;\n    var SuspendedAndReadyToContinue = 7;\n    var SuspendedOnHydration = 8;\n    var workInProgressSuspendedReason = NotSuspended;\n    var workInProgressThrownValue = null;\n    var workInProgressRootDidAttachPingListener = false;\n    var entangledRenderLanes = NoLanes;\n    var workInProgressRootExitStatus = RootInProgress;\n    var workInProgressRootFatalError = null;\n    var workInProgressRootSkippedLanes = NoLanes;\n    var workInProgressRootInterleavedUpdatedLanes = NoLanes;\n    var workInProgressRootPingedLanes = NoLanes;\n    var workInProgressDeferredLane = NoLane;\n    var workInProgressRootConcurrentErrors = null;\n    var workInProgressRootRecoverableErrors = null;\n    var workInProgressRootDidIncludeRecursiveRenderUpdate = false;\n    var globalMostRecentFallbackTime = 0;\n    var FALLBACK_THROTTLE_MS = 300;\n    var workInProgressRootRenderTargetTime = Infinity;\n    var RENDER_TIMEOUT_MS = 500;\n    var workInProgressTransitions = null;\n    function resetRenderTimer() {\n      workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;\n    }\n    function getRenderTargetTime() {\n      return workInProgressRootRenderTargetTime;\n    }\n    var hasUncaughtError = false;\n    var firstUncaughtError = null;\n    var legacyErrorBoundariesThatAlreadyFailed = null;\n    var rootDoesHavePassiveEffects = false;\n    var rootWithPendingPassiveEffects = null;\n    var pendingPassiveEffectsLanes = NoLanes;\n    var pendingPassiveProfilerEffects = [];\n    var NESTED_UPDATE_LIMIT = 50;\n    var nestedUpdateCount = 0;\n    var rootWithNestedUpdates = null;\n    var isFlushingPassiveEffects = false;\n    var didScheduleUpdateDuringPassiveEffects = false;\n    var NESTED_PASSIVE_UPDATE_LIMIT = 50;\n    var nestedPassiveUpdateCount = 0;\n    var rootWithPassiveNestedUpdates = null;\n    var isRunningInsertionEffect = false;\n    function getWorkInProgressRoot() {\n      return workInProgressRoot;\n    }\n    function getWorkInProgressRootRenderLanes() {\n      return workInProgressRootRenderLanes;\n    }\n    function isWorkLoopSuspendedOnData() {\n      return workInProgressSuspendedReason === SuspendedOnData;\n    }\n    function requestUpdateLane(fiber) {\n      var mode = fiber.mode;\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n        return pickArbitraryLane(workInProgressRootRenderLanes);\n      }\n      var transition = requestCurrentTransition();\n      if (transition !== null) {\n        {\n          var batchConfigTransition = ReactCurrentBatchConfig.transition;\n          if (!batchConfigTransition._updatedFibers) {\n            batchConfigTransition._updatedFibers = new Set();\n          }\n          batchConfigTransition._updatedFibers.add(fiber);\n        }\n        var actionScopeLane = peekEntangledActionLane();\n        return actionScopeLane !== NoLane ? actionScopeLane : requestTransitionLane();\n      }\n      var updateLane = getCurrentUpdatePriority();\n      if (updateLane !== NoLane) {\n        return updateLane;\n      }\n      var eventLane = getCurrentEventPriority();\n      return eventLane;\n    }\n    function requestRetryLane(fiber) {\n      var mode = fiber.mode;\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      }\n      return claimNextRetryLane();\n    }\n    function requestDeferredLane() {\n      if (workInProgressDeferredLane === NoLane) {\n        var isPrerendering = includesSomeLane(workInProgressRootRenderLanes, OffscreenLane) && !getIsHydrating();\n        if (isPrerendering) {\n          workInProgressDeferredLane = OffscreenLane;\n        } else {\n          workInProgressDeferredLane = claimNextTransitionLane();\n        }\n      }\n      var suspenseHandler = getSuspenseHandler();\n      if (suspenseHandler !== null) {\n        suspenseHandler.flags |= DidDefer;\n      }\n      return workInProgressDeferredLane;\n    }\n    function peekDeferredLane() {\n      return workInProgressDeferredLane;\n    }\n    function scheduleUpdateOnFiber(root, fiber, lane) {\n      {\n        if (isRunningInsertionEffect) {\n          error(\"useInsertionEffect must not schedule updates.\");\n        }\n      }\n      {\n        if (isFlushingPassiveEffects) {\n          didScheduleUpdateDuringPassiveEffects = true;\n        }\n      }\n      if (root === workInProgressRoot && workInProgressSuspendedReason === SuspendedOnData || root.cancelPendingCommit !== null) {\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane);\n      }\n      markRootUpdated(root, lane);\n      if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n        warnAboutRenderPhaseUpdatesInDEV(fiber);\n      } else {\n        {\n          if (isDevToolsPresent) {\n            addFiberToLanesMap(root, fiber, lane);\n          }\n        }\n        warnIfUpdatesNotWrappedWithActDEV(fiber);\n        if (root === workInProgressRoot) {\n          if ((executionContext & RenderContext) === NoContext) {\n            workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n          }\n          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n            markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane);\n          }\n        }\n        ensureRootIsScheduled(root);\n        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode) {\n          if (ReactCurrentActQueue.isBatchingLegacy) ;else {\n            resetRenderTimer();\n            flushSyncWorkOnLegacyRootsOnly();\n          }\n        }\n      }\n    }\n    function isUnsafeClassRenderPhaseUpdate(fiber) {\n      return (executionContext & RenderContext) !== NoContext;\n    }\n    function performConcurrentWorkOnRoot(root, didTimeout) {\n      {\n        resetNestedUpdateFlag();\n      }\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      }\n      var originalCallbackNode = root.callbackNode;\n      var didFlushPassiveEffects = flushPassiveEffects();\n      if (didFlushPassiveEffects) {\n        if (root.callbackNode !== originalCallbackNode) {\n          return null;\n        }\n      }\n      var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n      if (lanes === NoLanes) {\n        return null;\n      }\n      var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;\n      var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n      if (exitStatus !== RootInProgress) {\n        var renderWasConcurrent = shouldTimeSlice;\n        do {\n          if (exitStatus === RootDidNotComplete) {\n            markRootSuspended(root, lanes, NoLane);\n          } else {\n            var finishedWork = root.current.alternate;\n            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n              exitStatus = renderRootSync(root, lanes);\n              renderWasConcurrent = false;\n              continue;\n            }\n            if (exitStatus === RootErrored) {\n              var originallyAttemptedLanes = lanes;\n              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes);\n              if (errorRetryLanes !== NoLanes) {\n                lanes = errorRetryLanes;\n                exitStatus = recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes);\n                renderWasConcurrent = false;\n              }\n            }\n            if (exitStatus === RootFatalErrored) {\n              var fatalError = workInProgressRootFatalError;\n              prepareFreshStack(root, NoLanes);\n              markRootSuspended(root, lanes, NoLane);\n              ensureRootIsScheduled(root);\n              throw fatalError;\n            }\n            root.finishedWork = finishedWork;\n            root.finishedLanes = lanes;\n            finishConcurrentRender(root, exitStatus, finishedWork, lanes);\n          }\n          break;\n        } while (true);\n      }\n      ensureRootIsScheduled(root);\n      return getContinuationForRoot(root, originalCallbackNode);\n    }\n    function recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes) {\n      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n      var wasRootDehydrated = isRootDehydrated(root);\n      if (wasRootDehydrated) {\n        var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n        rootWorkInProgress.flags |= ForceClientRender;\n        {\n          errorHydratingContainer();\n        }\n      }\n      var exitStatus = renderRootSync(root, errorRetryLanes);\n      if (exitStatus !== RootErrored) {\n        if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {\n          root.errorRecoveryDisabledLanes = mergeLanes(root.errorRecoveryDisabledLanes, originallyAttemptedLanes);\n          workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes;\n          return RootSuspendedWithDelay;\n        }\n        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n        workInProgressRootRecoverableErrors = errorsFromFirstAttempt;\n        if (errorsFromSecondAttempt !== null) {\n          queueRecoverableErrors(errorsFromSecondAttempt);\n        }\n      }\n      return exitStatus;\n    }\n    function queueRecoverableErrors(errors) {\n      if (workInProgressRootRecoverableErrors === null) {\n        workInProgressRootRecoverableErrors = errors;\n      } else {\n        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n      }\n    }\n    function finishConcurrentRender(root, exitStatus, finishedWork, lanes) {\n      switch (exitStatus) {\n        case RootInProgress:\n        case RootFatalErrored:\n          {\n            throw new Error(\"Root did not complete. This is a bug in React.\");\n          }\n        case RootSuspendedWithDelay:\n          {\n            if (includesOnlyTransitions(lanes)) {\n              markRootSuspended(root, lanes, workInProgressDeferredLane);\n              return;\n            }\n            break;\n          }\n        case RootErrored:\n        case RootSuspended:\n        case RootCompleted:\n          {\n            break;\n          }\n        default:\n          {\n            throw new Error(\"Unknown root exit status.\");\n          }\n      }\n      if (shouldForceFlushFallbacksInDEV()) {\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, workInProgressDeferredLane);\n      } else {\n        if (includesOnlyRetries(lanes) && exitStatus === RootSuspended) {\n          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1();\n          if (msUntilTimeout > 10) {\n            markRootSuspended(root, lanes, workInProgressDeferredLane);\n            var nextLanes = getNextLanes(root, NoLanes);\n            if (nextLanes !== NoLanes) {\n              return;\n            }\n            root.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, root, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane), msUntilTimeout);\n            return;\n          }\n        }\n        commitRootWhenReady(root, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane);\n      }\n    }\n    function commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane) {\n      if (includesOnlyNonUrgentLanes(lanes)) {\n        accumulateSuspenseyCommit(finishedWork);\n        var schedulePendingCommit = waitForCommitToBeReady();\n        if (schedulePendingCommit !== null) {\n          root.cancelPendingCommit = schedulePendingCommit(commitRoot.bind(null, root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate));\n          markRootSuspended(root, lanes, spawnedLane);\n          return;\n        }\n      }\n      commitRoot(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane);\n    }\n    function isRenderConsistentWithExternalStores(finishedWork) {\n      var node = finishedWork;\n      while (true) {\n        if (node.flags & StoreConsistency) {\n          var updateQueue = node.updateQueue;\n          if (updateQueue !== null) {\n            var checks = updateQueue.stores;\n            if (checks !== null) {\n              for (var i = 0; i < checks.length; i++) {\n                var check = checks[i];\n                var getSnapshot = check.getSnapshot;\n                var renderedValue = check.value;\n                try {\n                  if (!objectIs(getSnapshot(), renderedValue)) {\n                    return false;\n                  }\n                } catch (error) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n        var child = node.child;\n        if (node.subtreeFlags & StoreConsistency && child !== null) {\n          child.return = node;\n          node = child;\n          continue;\n        }\n        if (node === finishedWork) {\n          return true;\n        }\n        while (node.sibling === null) {\n          if (node.return === null || node.return === finishedWork) {\n            return true;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n      return true;\n    }\n    function markRootUpdated(root, updatedLanes) {\n      markRootUpdated$1(root, updatedLanes);\n    }\n    function markRootPinged(root, pingedLanes) {\n      markRootPinged$1(root, pingedLanes);\n    }\n    function markRootSuspended(root, suspendedLanes, spawnedLane) {\n      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n      markRootSuspended$1(root, suspendedLanes, spawnedLane);\n    }\n    function performSyncWorkOnRoot(root, lanes) {\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      }\n      var didFlushPassiveEffects = flushPassiveEffects();\n      if (didFlushPassiveEffects) {\n        ensureRootIsScheduled(root);\n        return null;\n      }\n      {\n        syncNestedUpdateFlag();\n      }\n      var exitStatus = renderRootSync(root, lanes);\n      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n        var originallyAttemptedLanes = lanes;\n        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes);\n        if (errorRetryLanes !== NoLanes) {\n          lanes = errorRetryLanes;\n          exitStatus = recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes);\n        }\n      }\n      if (exitStatus === RootFatalErrored) {\n        var fatalError = workInProgressRootFatalError;\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended(root, lanes, NoLane);\n        ensureRootIsScheduled(root);\n        throw fatalError;\n      }\n      if (exitStatus === RootDidNotComplete) {\n        markRootSuspended(root, lanes, workInProgressDeferredLane);\n        ensureRootIsScheduled(root);\n        return null;\n      }\n      var finishedWork = root.current.alternate;\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, workInProgressDeferredLane);\n      ensureRootIsScheduled(root);\n      return null;\n    }\n    function getExecutionContext() {\n      return executionContext;\n    }\n    function batchedUpdates(fn, a) {\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      try {\n        return fn(a);\n      } finally {\n        executionContext = prevExecutionContext;\n        if (executionContext === NoContext && !ReactCurrentActQueue.isBatchingLegacy) {\n          resetRenderTimer();\n          flushSyncWorkOnLegacyRootsOnly();\n        }\n      }\n    }\n    function flushSync(fn) {\n      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n        flushPassiveEffects();\n      }\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      var prevTransition = ReactCurrentBatchConfig.transition;\n      var previousPriority = getCurrentUpdatePriority();\n      try {\n        ReactCurrentBatchConfig.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        if (fn) {\n          return fn();\n        } else {\n          return undefined;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig.transition = prevTransition;\n        executionContext = prevExecutionContext;\n        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n          flushSyncWorkOnAllRoots();\n        }\n      }\n    }\n    function setEntangledRenderLanes(newEntangledRenderLanes) {\n      entangledRenderLanes = newEntangledRenderLanes;\n    }\n    function getEntangledRenderLanes() {\n      return entangledRenderLanes;\n    }\n    function resetWorkInProgressStack() {\n      if (workInProgress === null) return;\n      var interruptedWork;\n      if (workInProgressSuspendedReason === NotSuspended) {\n        interruptedWork = workInProgress.return;\n      } else {\n        resetSuspendedWorkLoopOnUnwind(workInProgress);\n        interruptedWork = workInProgress;\n      }\n      while (interruptedWork !== null) {\n        var current = interruptedWork.alternate;\n        unwindInterruptedWork(current, interruptedWork);\n        interruptedWork = interruptedWork.return;\n      }\n      workInProgress = null;\n    }\n    function prepareFreshStack(root, lanes) {\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n      var timeoutHandle = root.timeoutHandle;\n      if (timeoutHandle !== noTimeout) {\n        root.timeoutHandle = noTimeout;\n        cancelTimeout(timeoutHandle);\n      }\n      var cancelPendingCommit = root.cancelPendingCommit;\n      if (cancelPendingCommit !== null) {\n        root.cancelPendingCommit = null;\n        cancelPendingCommit();\n      }\n      resetWorkInProgressStack();\n      workInProgressRoot = root;\n      var rootWorkInProgress = createWorkInProgress(root.current, null);\n      workInProgress = rootWorkInProgress;\n      workInProgressRootRenderLanes = lanes;\n      workInProgressSuspendedReason = NotSuspended;\n      workInProgressThrownValue = null;\n      workInProgressRootDidAttachPingListener = false;\n      workInProgressRootExitStatus = RootInProgress;\n      workInProgressRootFatalError = null;\n      workInProgressRootSkippedLanes = NoLanes;\n      workInProgressRootInterleavedUpdatedLanes = NoLanes;\n      workInProgressRootPingedLanes = NoLanes;\n      workInProgressDeferredLane = NoLane;\n      workInProgressRootConcurrentErrors = null;\n      workInProgressRootRecoverableErrors = null;\n      workInProgressRootDidIncludeRecursiveRenderUpdate = false;\n      entangledRenderLanes = getEntangledLanes(root, lanes);\n      finishQueueingConcurrentUpdates();\n      {\n        ReactStrictModeWarnings.discardPendingWarnings();\n      }\n      return rootWorkInProgress;\n    }\n    function resetSuspendedWorkLoopOnUnwind(fiber) {\n      resetContextDependencies();\n      resetHooksOnUnwind(fiber);\n      resetChildReconcilerOnUnwind();\n    }\n    function handleThrow(root, thrownValue) {\n      resetHooksAfterThrow();\n      resetCurrentFiber();\n      ReactCurrentOwner$1.current = null;\n      if (thrownValue === SuspenseException) {\n        thrownValue = getSuspendedThenable();\n        workInProgressSuspendedReason = shouldRemainOnPreviousScreen() && !includesNonIdleWork(workInProgressRootSkippedLanes) && !includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes) ? SuspendedOnData : SuspendedOnImmediate;\n      } else if (thrownValue === SuspenseyCommitException) {\n        thrownValue = getSuspendedThenable();\n        workInProgressSuspendedReason = SuspendedOnInstance;\n      } else if (thrownValue === SelectiveHydrationException) {\n        workInProgressSuspendedReason = SuspendedOnHydration;\n      } else {\n        var isWakeable = thrownValue !== null && typeof thrownValue === \"object\" && typeof thrownValue.then === \"function\";\n        workInProgressSuspendedReason = isWakeable ? SuspendedOnDeprecatedThrowPromise : SuspendedOnError;\n      }\n      workInProgressThrownValue = thrownValue;\n      var erroredWork = workInProgress;\n      if (erroredWork === null) {\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        return;\n      }\n      if (erroredWork.mode & ProfileMode) {\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n    }\n    function shouldRemainOnPreviousScreen() {\n      var handler = getSuspenseHandler();\n      if (handler === null) {\n        return true;\n      }\n      if (includesOnlyTransitions(workInProgressRootRenderLanes)) {\n        if (getShellBoundary() === null) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      if (includesOnlyRetries(workInProgressRootRenderLanes) || includesSomeLane(workInProgressRootRenderLanes, OffscreenLane)) {\n        return handler === getShellBoundary();\n      }\n      return false;\n    }\n    function pushDispatcher(container) {\n      var prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n      if (prevDispatcher === null) {\n        return ContextOnlyDispatcher;\n      } else {\n        return prevDispatcher;\n      }\n    }\n    function popDispatcher(prevDispatcher) {\n      ReactCurrentDispatcher.current = prevDispatcher;\n    }\n    function markCommitTimeOfFallback() {\n      globalMostRecentFallbackTime = now$1();\n    }\n    function markSkippedUpdateLanes(lane) {\n      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n    }\n    function renderDidSuspend() {\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootSuspended;\n      }\n    }\n    function renderDidSuspendDelayIfPossible() {\n      workInProgressRootExitStatus = RootSuspendedWithDelay;\n      if ((includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) && workInProgressRoot !== null) {\n        markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane);\n      }\n    }\n    function renderDidError(error) {\n      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n        workInProgressRootExitStatus = RootErrored;\n      }\n      if (workInProgressRootConcurrentErrors === null) {\n        workInProgressRootConcurrentErrors = [error];\n      } else {\n        workInProgressRootConcurrentErrors.push(error);\n      }\n    }\n    function renderHasNotSuspendedYet() {\n      return workInProgressRootExitStatus === RootInProgress;\n    }\n    function renderRootSync(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher();\n      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            }\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n        workInProgressTransitions = getTransitionsForLanes();\n        prepareFreshStack(root, lanes);\n      }\n      var didSuspendInShell = false;\n      outer: do {\n        try {\n          if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {\n            var unitOfWork = workInProgress;\n            var thrownValue = workInProgressThrownValue;\n            switch (workInProgressSuspendedReason) {\n              case SuspendedOnHydration:\n                {\n                  resetWorkInProgressStack();\n                  workInProgressRootExitStatus = RootDidNotComplete;\n                  break outer;\n                }\n              case SuspendedOnImmediate:\n              case SuspendedOnData:\n                {\n                  if (!didSuspendInShell && getSuspenseHandler() === null) {\n                    didSuspendInShell = true;\n                  }\n                }\n              default:\n                {\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                  break;\n                }\n            }\n          }\n          workLoopSync();\n          break;\n        } catch (thrownValue) {\n          handleThrow(root, thrownValue);\n        }\n      } while (true);\n      if (didSuspendInShell) {\n        root.shellSuspendCounter++;\n      }\n      resetContextDependencies();\n      executionContext = prevExecutionContext;\n      popDispatcher(prevDispatcher);\n      if (workInProgress !== null) {\n        throw new Error(\"Cannot commit an incomplete root. This error is likely caused by a \" + \"bug in React. Please file an issue.\");\n      }\n      workInProgressRoot = null;\n      workInProgressRootRenderLanes = NoLanes;\n      finishQueueingConcurrentUpdates();\n      return workInProgressRootExitStatus;\n    }\n    function workLoopSync() {\n      while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n    function renderRootConcurrent(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher();\n      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            }\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n        workInProgressTransitions = getTransitionsForLanes();\n        resetRenderTimer();\n        prepareFreshStack(root, lanes);\n      }\n      outer: do {\n        try {\n          if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {\n            var unitOfWork = workInProgress;\n            var thrownValue = workInProgressThrownValue;\n            resumeOrUnwind: switch (workInProgressSuspendedReason) {\n              case SuspendedOnError:\n                {\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                  break;\n                }\n              case SuspendedOnData:\n                {\n                  var thenable = thrownValue;\n                  if (isThenableResolved(thenable)) {\n                    workInProgressSuspendedReason = NotSuspended;\n                    workInProgressThrownValue = null;\n                    replaySuspendedUnitOfWork(unitOfWork);\n                    break;\n                  }\n                  var onResolution = function () {\n                    if (workInProgressSuspendedReason === SuspendedOnData && workInProgressRoot === root) {\n                      workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                    }\n                    ensureRootIsScheduled(root);\n                  };\n                  thenable.then(onResolution, onResolution);\n                  break outer;\n                }\n              case SuspendedOnImmediate:\n                {\n                  workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                  break outer;\n                }\n              case SuspendedOnInstance:\n                {\n                  workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;\n                  break outer;\n                }\n              case SuspendedAndReadyToContinue:\n                {\n                  var _thenable = thrownValue;\n                  if (isThenableResolved(_thenable)) {\n                    workInProgressSuspendedReason = NotSuspended;\n                    workInProgressThrownValue = null;\n                    replaySuspendedUnitOfWork(unitOfWork);\n                  } else {\n                    workInProgressSuspendedReason = NotSuspended;\n                    workInProgressThrownValue = null;\n                    throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                  }\n                  break;\n                }\n              case SuspendedOnInstanceAndReadyToContinue:\n                {\n                  switch (workInProgress.tag) {\n                    case HostComponent:\n                    case HostHoistable:\n                    case HostSingleton:\n                      {\n                        var hostFiber = workInProgress;\n                        var type = hostFiber.type;\n                        var props = hostFiber.pendingProps;\n                        var isReady = preloadInstance(type, props);\n                        if (isReady) {\n                          workInProgressSuspendedReason = NotSuspended;\n                          workInProgressThrownValue = null;\n                          var sibling = hostFiber.sibling;\n                          if (sibling !== null) {\n                            workInProgress = sibling;\n                          } else {\n                            var returnFiber = hostFiber.return;\n                            if (returnFiber !== null) {\n                              workInProgress = returnFiber;\n                              completeUnitOfWork(returnFiber);\n                            } else {\n                              workInProgress = null;\n                            }\n                          }\n                          break resumeOrUnwind;\n                        }\n                        break;\n                      }\n                    default:\n                      {\n                        if (true) {\n                          error(\"Unexpected type of fiber triggered a suspensey commit. \" + \"This is a bug in React.\");\n                        }\n                        break;\n                      }\n                  }\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                  break;\n                }\n              case SuspendedOnDeprecatedThrowPromise:\n                {\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                  break;\n                }\n              case SuspendedOnHydration:\n                {\n                  resetWorkInProgressStack();\n                  workInProgressRootExitStatus = RootDidNotComplete;\n                  break outer;\n                }\n              default:\n                {\n                  throw new Error(\"Unexpected SuspendedReason. This is a bug in React.\");\n                }\n            }\n          }\n          if (true && ReactCurrentActQueue.current !== null) {\n            workLoopSync();\n          } else {\n            workLoopConcurrent();\n          }\n          break;\n        } catch (thrownValue) {\n          handleThrow(root, thrownValue);\n        }\n      } while (true);\n      resetContextDependencies();\n      popDispatcher(prevDispatcher);\n      executionContext = prevExecutionContext;\n      if (workInProgress !== null) {\n        return RootInProgress;\n      } else {\n        workInProgressRoot = null;\n        workInProgressRootRenderLanes = NoLanes;\n        finishQueueingConcurrentUpdates();\n        return workInProgressRootExitStatus;\n      }\n    }\n    function workLoopConcurrent() {\n      while (workInProgress !== null && !shouldYield()) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n    function performUnitOfWork(unitOfWork) {\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n      if ((unitOfWork.mode & ProfileMode) !== NoMode) {\n        startProfilerTimer(unitOfWork);\n        next = beginWork(current, unitOfWork, entangledRenderLanes);\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      } else {\n        next = beginWork(current, unitOfWork, entangledRenderLanes);\n      }\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n      if (next === null) {\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n      ReactCurrentOwner$1.current = null;\n    }\n    function replaySuspendedUnitOfWork(unitOfWork) {\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n      setCurrentFiber(unitOfWork);\n      var isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;\n      if (isProfilingMode) {\n        startProfilerTimer(unitOfWork);\n      }\n      switch (unitOfWork.tag) {\n        case IndeterminateComponent:\n          {\n            unitOfWork.tag = FunctionComponent;\n          }\n        case SimpleMemoComponent:\n        case FunctionComponent:\n          {\n            var Component = unitOfWork.type;\n            var unresolvedProps = unitOfWork.pendingProps;\n            var resolvedProps = unitOfWork.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n            var context;\n            next = replayFunctionComponent(current, unitOfWork, resolvedProps, Component, context, workInProgressRootRenderLanes);\n            break;\n          }\n        case ForwardRef:\n          {\n            var _Component = unitOfWork.type.render;\n            var _unresolvedProps = unitOfWork.pendingProps;\n            var _resolvedProps = unitOfWork.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n            next = replayFunctionComponent(current, unitOfWork, _resolvedProps, _Component, unitOfWork.ref, workInProgressRootRenderLanes);\n            break;\n          }\n        case HostComponent:\n          {\n            resetHooksOnUnwind(unitOfWork);\n          }\n        default:\n          {\n            unwindInterruptedWork(current, unitOfWork);\n            unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes);\n            next = beginWork(current, unitOfWork, entangledRenderLanes);\n            break;\n          }\n      }\n      if (isProfilingMode) {\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      }\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n      if (next === null) {\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n      ReactCurrentOwner$1.current = null;\n    }\n    function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue) {\n      resetSuspendedWorkLoopOnUnwind(unitOfWork);\n      var returnFiber = unitOfWork.return;\n      try {\n        var didFatal = throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes);\n        if (didFatal) {\n          panicOnRootError(thrownValue);\n          return;\n        }\n      } catch (error) {\n        if (returnFiber !== null) {\n          workInProgress = returnFiber;\n          throw error;\n        } else {\n          panicOnRootError(thrownValue);\n          return;\n        }\n      }\n      if (unitOfWork.flags & Incomplete) {\n        unwindUnitOfWork(unitOfWork);\n      } else {\n        completeUnitOfWork(unitOfWork);\n      }\n    }\n    function panicOnRootError(error) {\n      workInProgressRootExitStatus = RootFatalErrored;\n      workInProgressRootFatalError = error;\n      workInProgress = null;\n    }\n    function completeUnitOfWork(unitOfWork) {\n      var completedWork = unitOfWork;\n      do {\n        {\n          if ((completedWork.flags & Incomplete) !== NoFlags$1) {\n            error(\"Internal React error: Expected this fiber to be complete, but \" + \"it isn't. It should have been unwound. This is a bug in React.\");\n          }\n        }\n        var current = completedWork.alternate;\n        var returnFiber = completedWork.return;\n        setCurrentFiber(completedWork);\n        var next = void 0;\n        if ((completedWork.mode & ProfileMode) === NoMode) {\n          next = completeWork(current, completedWork, entangledRenderLanes);\n        } else {\n          startProfilerTimer(completedWork);\n          next = completeWork(current, completedWork, entangledRenderLanes);\n          stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n        }\n        resetCurrentFiber();\n        if (next !== null) {\n          workInProgress = next;\n          return;\n        }\n        var siblingFiber = completedWork.sibling;\n        if (siblingFiber !== null) {\n          workInProgress = siblingFiber;\n          return;\n        }\n        completedWork = returnFiber;\n        workInProgress = completedWork;\n      } while (completedWork !== null);\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootCompleted;\n      }\n    }\n    function unwindUnitOfWork(unitOfWork) {\n      var incompleteWork = unitOfWork;\n      do {\n        var current = incompleteWork.alternate;\n        var next = unwindWork(current, incompleteWork);\n        if (next !== null) {\n          next.flags &= HostEffectMask;\n          workInProgress = next;\n          return;\n        }\n        if ((incompleteWork.mode & ProfileMode) !== NoMode) {\n          stopProfilerTimerIfRunningAndRecordDelta(incompleteWork, false);\n          var actualDuration = incompleteWork.actualDuration;\n          var child = incompleteWork.child;\n          while (child !== null) {\n            actualDuration += child.actualDuration;\n            child = child.sibling;\n          }\n          incompleteWork.actualDuration = actualDuration;\n        }\n        var returnFiber = incompleteWork.return;\n        if (returnFiber !== null) {\n          returnFiber.flags |= Incomplete;\n          returnFiber.subtreeFlags = NoFlags$1;\n          returnFiber.deletions = null;\n        }\n        incompleteWork = returnFiber;\n        workInProgress = incompleteWork;\n      } while (incompleteWork !== null);\n      workInProgressRootExitStatus = RootDidNotComplete;\n      workInProgress = null;\n    }\n    function commitRoot(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane) {\n      var previousUpdateLanePriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig.transition;\n      try {\n        ReactCurrentBatchConfig.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, previousUpdateLanePriority, spawnedLane);\n      } finally {\n        ReactCurrentBatchConfig.transition = prevTransition;\n        setCurrentUpdatePriority(previousUpdateLanePriority);\n      }\n      return null;\n    }\n    function commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane) {\n      do {\n        flushPassiveEffects();\n      } while (rootWithPendingPassiveEffects !== null);\n      flushRenderPhaseStrictModeWarningsInDEV();\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      }\n      var finishedWork = root.finishedWork;\n      var lanes = root.finishedLanes;\n      if (finishedWork === null) {\n        return null;\n      } else {\n        {\n          if (lanes === NoLanes) {\n            error(\"root.finishedLanes should not be empty during a commit. This is a \" + \"bug in React.\");\n          }\n        }\n      }\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n      if (finishedWork === root.current) {\n        throw new Error(\"Cannot commit the same tree as before. This error is likely caused by \" + \"a bug in React. Please file an issue.\");\n      }\n      root.callbackNode = null;\n      root.callbackPriority = NoLane;\n      root.cancelPendingCommit = null;\n      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n      var concurrentlyUpdatedLanes = getConcurrentlyUpdatedLanes();\n      remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes);\n      markRootFinished(root, remainingLanes, spawnedLane);\n      if (root === workInProgressRoot) {\n        workInProgressRoot = null;\n        workInProgress = null;\n        workInProgressRootRenderLanes = NoLanes;\n      }\n      if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1 || (finishedWork.flags & PassiveMask) !== NoFlags$1) {\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback(NormalPriority, function () {\n            flushPassiveEffects();\n            return null;\n          });\n        }\n      }\n      var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;\n      var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;\n      if (subtreeHasEffects || rootHasEffect) {\n        var prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = null;\n        var previousPriority = getCurrentUpdatePriority();\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        var prevExecutionContext = executionContext;\n        executionContext |= CommitContext;\n        ReactCurrentOwner$1.current = null;\n        commitBeforeMutationEffects(root, finishedWork);\n        {\n          recordCommitTime();\n        }\n        commitMutationEffects(root, finishedWork, lanes);\n        root.current = finishedWork;\n        commitLayoutEffects(finishedWork, root, lanes);\n        requestPaint();\n        executionContext = prevExecutionContext;\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig.transition = prevTransition;\n      } else {\n        root.current = finishedWork;\n        {\n          recordCommitTime();\n        }\n      }\n      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n      if (rootDoesHavePassiveEffects) {\n        rootDoesHavePassiveEffects = false;\n        rootWithPendingPassiveEffects = root;\n        pendingPassiveEffectsLanes = lanes;\n      } else {\n        {\n          nestedPassiveUpdateCount = 0;\n          rootWithPassiveNestedUpdates = null;\n        }\n      }\n      remainingLanes = root.pendingLanes;\n      if (remainingLanes === NoLanes) {\n        legacyErrorBoundariesThatAlreadyFailed = null;\n      }\n      {\n        if (!rootDidHavePassiveEffects) {\n          commitDoubleInvokeEffectsInDEV(root, false);\n        }\n      }\n      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n      {\n        if (isDevToolsPresent) {\n          root.memoizedUpdaters.clear();\n        }\n      }\n      ensureRootIsScheduled(root);\n      if (recoverableErrors !== null) {\n        var onRecoverableError = root.onRecoverableError;\n        for (var i = 0; i < recoverableErrors.length; i++) {\n          var recoverableError = recoverableErrors[i];\n          var errorInfo = makeErrorInfo(recoverableError.digest, recoverableError.stack);\n          onRecoverableError(recoverableError.value, errorInfo);\n        }\n      }\n      if (hasUncaughtError) {\n        hasUncaughtError = false;\n        var error$1 = firstUncaughtError;\n        firstUncaughtError = null;\n        throw error$1;\n      }\n      if (includesSyncLane(pendingPassiveEffectsLanes) && root.tag !== LegacyRoot) {\n        flushPassiveEffects();\n      }\n      remainingLanes = root.pendingLanes;\n      if (includesSomeLane(lanes, UpdateLanes) && includesSomeLane(remainingLanes, SyncUpdateLanes)) {\n        {\n          markNestedUpdateScheduled();\n        }\n        if (root === rootWithNestedUpdates) {\n          nestedUpdateCount++;\n        } else {\n          nestedUpdateCount = 0;\n          rootWithNestedUpdates = root;\n        }\n      } else {\n        nestedUpdateCount = 0;\n      }\n      flushSyncWorkOnAllRoots();\n      return null;\n    }\n    function makeErrorInfo(digest, componentStack) {\n      {\n        var errorInfo = {\n          componentStack: componentStack,\n          digest: digest\n        };\n        Object.defineProperty(errorInfo, \"digest\", {\n          configurable: false,\n          enumerable: true,\n          get: function () {\n            error('You are accessing \"digest\" from the errorInfo object passed to onRecoverableError.' + \" This property is deprecated and will be removed in a future version of React.\" + \" To access the digest of an Error look for this property on the Error instance itself.\");\n            return digest;\n          }\n        });\n        return errorInfo;\n      }\n    }\n    function flushPassiveEffects() {\n      if (rootWithPendingPassiveEffects !== null) {\n        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n        var prevTransition = ReactCurrentBatchConfig.transition;\n        var previousPriority = getCurrentUpdatePriority();\n        try {\n          ReactCurrentBatchConfig.transition = null;\n          setCurrentUpdatePriority(priority);\n          return flushPassiveEffectsImpl();\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig.transition = prevTransition;\n        }\n      }\n      return false;\n    }\n    function enqueuePendingPassiveProfilerEffect(fiber) {\n      {\n        pendingPassiveProfilerEffects.push(fiber);\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback(NormalPriority, function () {\n            flushPassiveEffects();\n            return null;\n          });\n        }\n      }\n    }\n    function flushPassiveEffectsImpl() {\n      if (rootWithPendingPassiveEffects === null) {\n        return false;\n      }\n      var root = rootWithPendingPassiveEffects;\n      rootWithPendingPassiveEffects = null;\n      pendingPassiveEffectsLanes = NoLanes;\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Cannot flush passive effects while already rendering.\");\n      }\n      {\n        isFlushingPassiveEffects = true;\n        didScheduleUpdateDuringPassiveEffects = false;\n      }\n      var prevExecutionContext = executionContext;\n      executionContext |= CommitContext;\n      commitPassiveUnmountEffects(root.current);\n      commitPassiveMountEffects(root, root.current);\n      {\n        var profilerEffects = pendingPassiveProfilerEffects;\n        pendingPassiveProfilerEffects = [];\n        for (var i = 0; i < profilerEffects.length; i++) {\n          var fiber = profilerEffects[i];\n          commitPassiveEffectDurations(root, fiber);\n        }\n      }\n      {\n        commitDoubleInvokeEffectsInDEV(root, true);\n      }\n      executionContext = prevExecutionContext;\n      flushSyncWorkOnAllRoots();\n      {\n        if (didScheduleUpdateDuringPassiveEffects) {\n          if (root === rootWithPassiveNestedUpdates) {\n            nestedPassiveUpdateCount++;\n          } else {\n            nestedPassiveUpdateCount = 0;\n            rootWithPassiveNestedUpdates = root;\n          }\n        } else {\n          nestedPassiveUpdateCount = 0;\n        }\n        isFlushingPassiveEffects = false;\n        didScheduleUpdateDuringPassiveEffects = false;\n      }\n      onPostCommitRoot(root);\n      {\n        var stateNode = root.current.stateNode;\n        stateNode.effectDuration = 0;\n        stateNode.passiveEffectDuration = 0;\n      }\n      return true;\n    }\n    function isAlreadyFailedLegacyErrorBoundary(instance) {\n      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n    }\n    function markLegacyErrorBoundaryAsFailed(instance) {\n      if (legacyErrorBoundariesThatAlreadyFailed === null) {\n        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n      } else {\n        legacyErrorBoundariesThatAlreadyFailed.add(instance);\n      }\n    }\n    function prepareToThrowUncaughtError(error) {\n      if (!hasUncaughtError) {\n        hasUncaughtError = true;\n        firstUncaughtError = error;\n      }\n    }\n    var onUncaughtError = prepareToThrowUncaughtError;\n    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n      var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n      var root = enqueueUpdate(rootFiber, update, SyncLane);\n      if (root !== null) {\n        markRootUpdated(root, SyncLane);\n        ensureRootIsScheduled(root);\n      }\n    }\n    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n      {\n        setIsRunningInsertionEffect(false);\n      }\n      if (sourceFiber.tag === HostRoot) {\n        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n        return;\n      }\n      var fiber = nearestMountedAncestor;\n      while (fiber !== null) {\n        if (fiber.tag === HostRoot) {\n          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n          return;\n        } else if (fiber.tag === ClassComponent) {\n          var ctor = fiber.type;\n          var instance = fiber.stateNode;\n          if (typeof ctor.getDerivedStateFromError === \"function\" || typeof instance.componentDidCatch === \"function\" && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n            var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n            var root = enqueueUpdate(fiber, update, SyncLane);\n            if (root !== null) {\n              markRootUpdated(root, SyncLane);\n              ensureRootIsScheduled(root);\n            }\n            return;\n          }\n        }\n        fiber = fiber.return;\n      }\n      {\n        error(\"Internal React error: Attempted to capture a commit phase error \" + \"inside a detached tree. This indicates a bug in React. Potential \" + \"causes include deleting the same fiber more than once, committing an \" + \"already-finished tree, or an inconsistent return pointer.\\n\\n\" + \"Error message:\\n\\n%s\", error$1);\n      }\n    }\n    function attachPingListener(root, wakeable, lanes) {\n      var pingCache = root.pingCache;\n      var threadIDs;\n      if (pingCache === null) {\n        pingCache = root.pingCache = new PossiblyWeakMap();\n        threadIDs = new Set();\n        pingCache.set(wakeable, threadIDs);\n      } else {\n        threadIDs = pingCache.get(wakeable);\n        if (threadIDs === undefined) {\n          threadIDs = new Set();\n          pingCache.set(wakeable, threadIDs);\n        }\n      }\n      if (!threadIDs.has(lanes)) {\n        workInProgressRootDidAttachPingListener = true;\n        threadIDs.add(lanes);\n        var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n        {\n          if (isDevToolsPresent) {\n            restorePendingUpdaters(root, lanes);\n          }\n        }\n        wakeable.then(ping, ping);\n      }\n    }\n    function pingSuspendedRoot(root, wakeable, pingedLanes) {\n      var pingCache = root.pingCache;\n      if (pingCache !== null) {\n        pingCache.delete(wakeable);\n      }\n      markRootPinged(root, pingedLanes);\n      warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n      if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n          if ((executionContext & RenderContext) === NoContext) {\n            prepareFreshStack(root, NoLanes);\n          }\n        } else {\n          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n        }\n      }\n      ensureRootIsScheduled(root);\n    }\n    function retryTimedOutBoundary(boundaryFiber, retryLane) {\n      if (retryLane === NoLane) {\n        retryLane = requestRetryLane(boundaryFiber);\n      }\n      var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n      if (root !== null) {\n        markRootUpdated(root, retryLane);\n        ensureRootIsScheduled(root);\n      }\n    }\n    function retryDehydratedSuspenseBoundary(boundaryFiber) {\n      var suspenseState = boundaryFiber.memoizedState;\n      var retryLane = NoLane;\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function resolveRetryWakeable(boundaryFiber, wakeable) {\n      var retryLane = NoLane;\n      var retryCache;\n      switch (boundaryFiber.tag) {\n        case SuspenseComponent:\n          retryCache = boundaryFiber.stateNode;\n          var suspenseState = boundaryFiber.memoizedState;\n          if (suspenseState !== null) {\n            retryLane = suspenseState.retryLane;\n          }\n          break;\n        case SuspenseListComponent:\n          retryCache = boundaryFiber.stateNode;\n          break;\n        case OffscreenComponent:\n          {\n            var instance = boundaryFiber.stateNode;\n            retryCache = instance._retryCache;\n            break;\n          }\n        default:\n          throw new Error(\"Pinged unknown suspense boundary type. \" + \"This is probably a bug in React.\");\n      }\n      if (retryCache !== null) {\n        retryCache.delete(wakeable);\n      }\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function throwIfInfiniteUpdateLoopDetected() {\n      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n        nestedUpdateCount = 0;\n        nestedPassiveUpdateCount = 0;\n        rootWithNestedUpdates = null;\n        rootWithPassiveNestedUpdates = null;\n        throw new Error(\"Maximum update depth exceeded. This can happen when a component \" + \"repeatedly calls setState inside componentWillUpdate or \" + \"componentDidUpdate. React limits the number of nested updates to \" + \"prevent infinite loops.\");\n      }\n      {\n        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n          nestedPassiveUpdateCount = 0;\n          rootWithPassiveNestedUpdates = null;\n          error(\"Maximum update depth exceeded. This can happen when a component \" + \"calls setState inside useEffect, but useEffect either doesn't \" + \"have a dependency array, or one of the dependencies changes on \" + \"every render.\");\n        }\n      }\n    }\n    function flushRenderPhaseStrictModeWarningsInDEV() {\n      {\n        ReactStrictModeWarnings.flushLegacyContextWarning();\n        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n      }\n    }\n    function commitDoubleInvokeEffectsInDEV(root, hasPassiveEffects) {\n      {\n        {\n          legacyCommitDoubleInvokeEffectsInDEV(root.current, hasPassiveEffects);\n        }\n      }\n    }\n    function legacyCommitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n      setCurrentFiber(fiber);\n      invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n      if (hasPassiveEffects) {\n        invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n      }\n      invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n      if (hasPassiveEffects) {\n        invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n      }\n      resetCurrentFiber();\n    }\n    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n      var current = firstChild;\n      var subtreeRoot = null;\n      while (current != null) {\n        var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n        if (current !== subtreeRoot && current.child != null && primarySubtreeFlag !== NoFlags$1) {\n          current = current.child;\n        } else {\n          if ((current.flags & fiberFlags) !== NoFlags$1) {\n            invokeEffectFn(current);\n          }\n          if (current.sibling !== null) {\n            current = current.sibling;\n          } else {\n            current = subtreeRoot = current.return;\n          }\n        }\n      }\n    }\n    var didWarnStateUpdateForNotYetMountedComponent = null;\n    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n      {\n        if ((executionContext & RenderContext) !== NoContext) {\n          return;\n        }\n        if (!(fiber.mode & ConcurrentMode)) {\n          return;\n        }\n        var tag = fiber.tag;\n        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n          return;\n        }\n        var componentName = getComponentNameFromFiber(fiber) || \"ReactComponent\";\n        if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n            return;\n          }\n          didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n        } else {\n          didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n        }\n        var previousFiber = current;\n        try {\n          setCurrentFiber(fiber);\n          error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + \"This indicates that you have a side-effect in your render function that \" + \"asynchronously later calls tries to update the component. Move this work to \" + \"useEffect instead.\");\n        } finally {\n          if (previousFiber) {\n            setCurrentFiber(fiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n    var didWarnAboutUpdateInRender = false;\n    var didWarnAboutUpdateInRenderForAnotherComponent;\n    {\n      didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n    }\n    function warnAboutRenderPhaseUpdatesInDEV(fiber) {\n      {\n        if (isRendering) {\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || \"Unknown\";\n                var dedupeKey = renderingComponentName;\n                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n                  var setStateComponentName = getComponentNameFromFiber(fiber) || \"Unknown\";\n                  error(\"Cannot update a component (`%s`) while rendering a \" + \"different component (`%s`). To locate the bad setState() call inside `%s`, \" + \"follow the stack trace as described in https://react.dev/link/setstate-in-render\", setStateComponentName, renderingComponentName, renderingComponentName);\n                }\n                break;\n              }\n            case ClassComponent:\n              {\n                if (!didWarnAboutUpdateInRender) {\n                  error(\"Cannot update during an existing state transition (such as \" + \"within `render`). Render methods should be a pure \" + \"function of props and state.\");\n                  didWarnAboutUpdateInRender = true;\n                }\n                break;\n              }\n          }\n        }\n      }\n    }\n    function restorePendingUpdaters(root, lanes) {\n      {\n        if (isDevToolsPresent) {\n          var memoizedUpdaters = root.memoizedUpdaters;\n          memoizedUpdaters.forEach(function (schedulingFiber) {\n            addFiberToLanesMap(root, schedulingFiber, lanes);\n          });\n        }\n      }\n    }\n    var fakeActCallbackNode = {};\n    function scheduleCallback(priorityLevel, callback) {\n      {\n        var actQueue = ReactCurrentActQueue.current;\n        if (actQueue !== null) {\n          actQueue.push(callback);\n          return fakeActCallbackNode;\n        } else {\n          return scheduleCallback$2(priorityLevel, callback);\n        }\n      }\n    }\n    function shouldForceFlushFallbacksInDEV() {\n      return ReactCurrentActQueue.current !== null;\n    }\n    function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n      {\n        if (fiber.mode & ConcurrentMode) {\n          if (!isConcurrentActEnvironment()) {\n            return;\n          }\n        } else {\n          if (!isLegacyActEnvironment()) {\n            return;\n          }\n          if (executionContext !== NoContext) {\n            return;\n          }\n          if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n            return;\n          }\n        }\n        if (ReactCurrentActQueue.current === null) {\n          var previousFiber = current;\n          try {\n            setCurrentFiber(fiber);\n            error(\"An update to %s inside a test was not wrapped in act(...).\\n\\n\" + \"When testing, code that causes React state updates should be \" + \"wrapped into act(...):\\n\\n\" + \"act(() => {\\n\" + \"  /* fire events that update state */\\n\" + \"});\\n\" + \"/* assert on the output */\\n\\n\" + \"This ensures that you're testing the behavior the user would see \" + \"in the browser.\" + \" Learn more at https://react.dev/link/wrap-tests-with-act\", getComponentNameFromFiber(fiber));\n          } finally {\n            if (previousFiber) {\n              setCurrentFiber(fiber);\n            } else {\n              resetCurrentFiber();\n            }\n          }\n        }\n      }\n    }\n    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n      {\n        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue.current === null) {\n          error(\"A suspended resource finished loading inside a test, but the event \" + \"was not wrapped in act(...).\\n\\n\" + \"When testing, code that resolves suspended data should be wrapped \" + \"into act(...):\\n\\n\" + \"act(() => {\\n\" + \"  /* finish loading suspended data */\\n\" + \"});\\n\" + \"/* assert on the output */\\n\\n\" + \"This ensures that you're testing the behavior the user would see \" + \"in the browser.\" + \" Learn more at https://react.dev/link/wrap-tests-with-act\");\n        }\n      }\n    }\n    function setIsRunningInsertionEffect(isRunning) {\n      {\n        isRunningInsertionEffect = isRunning;\n      }\n    }\n    var resolveFamily = null;\n    var failedBoundaries = null;\n    var setRefreshHandler = function (handler) {\n      {\n        resolveFamily = handler;\n      }\n    };\n    function resolveFunctionForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          return type;\n        }\n        var family = resolveFamily(type);\n        if (family === undefined) {\n          return type;\n        }\n        return family.current;\n      }\n    }\n    function resolveClassForHotReloading(type) {\n      return resolveFunctionForHotReloading(type);\n    }\n    function resolveForwardRefForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          return type;\n        }\n        var family = resolveFamily(type);\n        if (family === undefined) {\n          if (type !== null && type !== undefined && typeof type.render === \"function\") {\n            var currentRender = resolveFunctionForHotReloading(type.render);\n            if (type.render !== currentRender) {\n              var syntheticType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: currentRender\n              };\n              if (type.displayName !== undefined) {\n                syntheticType.displayName = type.displayName;\n              }\n              return syntheticType;\n            }\n          }\n          return type;\n        }\n        return family.current;\n      }\n    }\n    function isCompatibleFamilyForHotReloading(fiber, element) {\n      {\n        if (resolveFamily === null) {\n          return false;\n        }\n        var prevType = fiber.elementType;\n        var nextType = element.type;\n        var needsCompareFamilies = false;\n        var $$typeofNextType = typeof nextType === \"object\" && nextType !== null ? nextType.$$typeof : null;\n        switch (fiber.tag) {\n          case ClassComponent:\n            {\n              if (typeof nextType === \"function\") {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          case FunctionComponent:\n            {\n              if (typeof nextType === \"function\") {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          case ForwardRef:\n            {\n              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              if ($$typeofNextType === REACT_MEMO_TYPE) {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          default:\n            return false;\n        }\n        if (needsCompareFamilies) {\n          var prevFamily = resolveFamily(prevType);\n          if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n    function markFailedErrorBoundaryForHotReloading(fiber) {\n      {\n        if (resolveFamily === null) {\n          return;\n        }\n        if (typeof WeakSet !== \"function\") {\n          return;\n        }\n        if (failedBoundaries === null) {\n          failedBoundaries = new WeakSet();\n        }\n        failedBoundaries.add(fiber);\n      }\n    }\n    var scheduleRefresh = function (root, update) {\n      {\n        if (resolveFamily === null) {\n          return;\n        }\n        var staleFamilies = update.staleFamilies,\n          updatedFamilies = update.updatedFamilies;\n        flushPassiveEffects();\n        flushSync(function () {\n          scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n        });\n      }\n    };\n    var scheduleRoot = function (root, element) {\n      {\n        if (root.context !== emptyContextObject) {\n          return;\n        }\n        flushPassiveEffects();\n        flushSync(function () {\n          updateContainer(element, root, null, null);\n        });\n      }\n    };\n    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n      {\n        var alternate = fiber.alternate,\n          child = fiber.child,\n          sibling = fiber.sibling,\n          tag = fiber.tag,\n          type = fiber.type;\n        var candidateType = null;\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n        if (resolveFamily === null) {\n          throw new Error(\"Expected resolveFamily to be set during hot reload.\");\n        }\n        var needsRender = false;\n        var needsRemount = false;\n        if (candidateType !== null) {\n          var family = resolveFamily(candidateType);\n          if (family !== undefined) {\n            if (staleFamilies.has(family)) {\n              needsRemount = true;\n            } else if (updatedFamilies.has(family)) {\n              if (tag === ClassComponent) {\n                needsRemount = true;\n              } else {\n                needsRender = true;\n              }\n            }\n          }\n        }\n        if (failedBoundaries !== null) {\n          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n            needsRemount = true;\n          }\n        }\n        if (needsRemount) {\n          fiber._debugNeedsRemount = true;\n        }\n        if (needsRemount || needsRender) {\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n        if (child !== null && !needsRemount) {\n          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n        }\n        if (sibling !== null) {\n          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n        }\n      }\n    }\n    var findHostInstancesForRefresh = function (root, families) {\n      {\n        var hostInstances = new Set();\n        var types = new Set(families.map(function (family) {\n          return family.current;\n        }));\n        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n        return hostInstances;\n      }\n    };\n    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n      {\n        var child = fiber.child,\n          sibling = fiber.sibling,\n          tag = fiber.tag,\n          type = fiber.type;\n        var candidateType = null;\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n        var didMatch = false;\n        if (candidateType !== null) {\n          if (types.has(candidateType)) {\n            didMatch = true;\n          }\n        }\n        if (didMatch) {\n          findHostInstancesForFiberShallowly(fiber, hostInstances);\n        } else {\n          if (child !== null) {\n            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n          }\n        }\n        if (sibling !== null) {\n          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n        }\n      }\n    }\n    function findHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n        if (foundHostInstances) {\n          return;\n        }\n        var node = fiber;\n        while (true) {\n          switch (node.tag) {\n            case HostSingleton:\n            case HostComponent:\n              hostInstances.add(node.stateNode);\n              return;\n            case HostPortal:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n            case HostRoot:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n          }\n          if (node.return === null) {\n            throw new Error(\"Expected to reach root first.\");\n          }\n          node = node.return;\n        }\n      }\n    }\n    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var node = fiber;\n        var foundHostInstances = false;\n        while (true) {\n          if (node.tag === HostComponent || node.tag === HostHoistable || false) {\n            foundHostInstances = true;\n            hostInstances.add(node.stateNode);\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          if (node === fiber) {\n            return foundHostInstances;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === fiber) {\n              return foundHostInstances;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n      return false;\n    }\n    var hasBadMapPolyfill;\n    {\n      hasBadMapPolyfill = false;\n      try {\n        var nonExtensibleObject = Object.preventExtensions({});\n        new Map([[nonExtensibleObject, null]]);\n        new Set([nonExtensibleObject]);\n      } catch (e) {\n        hasBadMapPolyfill = true;\n      }\n    }\n    function FiberNode(tag, pendingProps, key, mode) {\n      this.tag = tag;\n      this.key = key;\n      this.elementType = null;\n      this.type = null;\n      this.stateNode = null;\n      this.return = null;\n      this.child = null;\n      this.sibling = null;\n      this.index = 0;\n      this.ref = null;\n      this.refCleanup = null;\n      this.pendingProps = pendingProps;\n      this.memoizedProps = null;\n      this.updateQueue = null;\n      this.memoizedState = null;\n      this.dependencies = null;\n      this.mode = mode;\n      this.flags = NoFlags$1;\n      this.subtreeFlags = NoFlags$1;\n      this.deletions = null;\n      this.lanes = NoLanes;\n      this.childLanes = NoLanes;\n      this.alternate = null;\n      {\n        this.actualDuration = Number.NaN;\n        this.actualStartTime = Number.NaN;\n        this.selfBaseDuration = Number.NaN;\n        this.treeBaseDuration = Number.NaN;\n        this.actualDuration = 0;\n        this.actualStartTime = -1;\n        this.selfBaseDuration = 0;\n        this.treeBaseDuration = 0;\n      }\n      {\n        this._debugInfo = null;\n        this._debugOwner = null;\n        this._debugNeedsRemount = false;\n        this._debugHookTypes = null;\n        if (!hasBadMapPolyfill && typeof Object.preventExtensions === \"function\") {\n          Object.preventExtensions(this);\n        }\n      }\n    }\n    function createFiber(tag, pendingProps, key, mode) {\n      return new FiberNode(tag, pendingProps, key, mode);\n    }\n    function shouldConstruct(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n    function isSimpleFunctionComponent(type) {\n      return typeof type === \"function\" && !shouldConstruct(type) && type.defaultProps === undefined;\n    }\n    function resolveLazyComponentTag(Component) {\n      if (typeof Component === \"function\") {\n        return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n      } else if (Component !== undefined && Component !== null) {\n        var $$typeof = Component.$$typeof;\n        if ($$typeof === REACT_FORWARD_REF_TYPE) {\n          return ForwardRef;\n        }\n        if ($$typeof === REACT_MEMO_TYPE) {\n          return MemoComponent;\n        }\n      }\n      return IndeterminateComponent;\n    }\n    function createWorkInProgress(current, pendingProps) {\n      var workInProgress = current.alternate;\n      if (workInProgress === null) {\n        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n        workInProgress.elementType = current.elementType;\n        workInProgress.type = current.type;\n        workInProgress.stateNode = current.stateNode;\n        {\n          workInProgress._debugOwner = current._debugOwner;\n          workInProgress._debugHookTypes = current._debugHookTypes;\n        }\n        workInProgress.alternate = current;\n        current.alternate = workInProgress;\n      } else {\n        workInProgress.pendingProps = pendingProps;\n        workInProgress.type = current.type;\n        workInProgress.flags = NoFlags$1;\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.deletions = null;\n        {\n          workInProgress.actualDuration = 0;\n          workInProgress.actualStartTime = -1;\n        }\n      }\n      workInProgress.flags = current.flags & StaticMask;\n      workInProgress.childLanes = current.childLanes;\n      workInProgress.lanes = current.lanes;\n      workInProgress.child = current.child;\n      workInProgress.memoizedProps = current.memoizedProps;\n      workInProgress.memoizedState = current.memoizedState;\n      workInProgress.updateQueue = current.updateQueue;\n      var currentDependencies = current.dependencies;\n      workInProgress.dependencies = currentDependencies === null ? null : {\n        lanes: currentDependencies.lanes,\n        firstContext: currentDependencies.firstContext\n      };\n      workInProgress.sibling = current.sibling;\n      workInProgress.index = current.index;\n      workInProgress.ref = current.ref;\n      workInProgress.refCleanup = current.refCleanup;\n      {\n        workInProgress.selfBaseDuration = current.selfBaseDuration;\n        workInProgress.treeBaseDuration = current.treeBaseDuration;\n      }\n      {\n        workInProgress._debugInfo = current._debugInfo;\n        workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n          case FunctionComponent:\n          case SimpleMemoComponent:\n            workInProgress.type = resolveFunctionForHotReloading(current.type);\n            break;\n          case ClassComponent:\n            workInProgress.type = resolveClassForHotReloading(current.type);\n            break;\n          case ForwardRef:\n            workInProgress.type = resolveForwardRefForHotReloading(current.type);\n            break;\n        }\n      }\n      return workInProgress;\n    }\n    function resetWorkInProgress(workInProgress, renderLanes) {\n      workInProgress.flags &= StaticMask | Placement;\n      var current = workInProgress.alternate;\n      if (current === null) {\n        workInProgress.childLanes = NoLanes;\n        workInProgress.lanes = renderLanes;\n        workInProgress.child = null;\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.memoizedProps = null;\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null;\n        workInProgress.dependencies = null;\n        workInProgress.stateNode = null;\n        {\n          workInProgress.selfBaseDuration = 0;\n          workInProgress.treeBaseDuration = 0;\n        }\n      } else {\n        workInProgress.childLanes = current.childLanes;\n        workInProgress.lanes = current.lanes;\n        workInProgress.child = current.child;\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.deletions = null;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue;\n        workInProgress.type = current.type;\n        var currentDependencies = current.dependencies;\n        workInProgress.dependencies = currentDependencies === null ? null : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext\n        };\n        {\n          workInProgress.selfBaseDuration = current.selfBaseDuration;\n          workInProgress.treeBaseDuration = current.treeBaseDuration;\n        }\n      }\n      return workInProgress;\n    }\n    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n      var mode;\n      if (tag === ConcurrentRoot) {\n        mode = ConcurrentMode;\n        if (isStrictMode === true) {\n          mode |= StrictLegacyMode | StrictEffectsMode;\n        }\n      } else {\n        mode = NoMode;\n      }\n      if (isDevToolsPresent) {\n        mode |= ProfileMode;\n      }\n      return createFiber(HostRoot, null, null, mode);\n    }\n    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {\n      var fiberTag = IndeterminateComponent;\n      var resolvedType = type;\n      if (typeof type === \"function\") {\n        if (shouldConstruct(type)) {\n          fiberTag = ClassComponent;\n          {\n            resolvedType = resolveClassForHotReloading(resolvedType);\n          }\n        } else {\n          {\n            resolvedType = resolveFunctionForHotReloading(resolvedType);\n          }\n        }\n      } else if (typeof type === \"string\") {\n        {\n          fiberTag = HostComponent;\n        }\n      } else {\n        getTag: switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n          case REACT_STRICT_MODE_TYPE:\n            fiberTag = Mode;\n            mode |= StrictLegacyMode;\n            if ((mode & ConcurrentMode) !== NoMode) {\n              mode |= StrictEffectsMode;\n            }\n            break;\n          case REACT_PROFILER_TYPE:\n            return createFiberFromProfiler(pendingProps, mode, lanes, key);\n          case REACT_SUSPENSE_TYPE:\n            return createFiberFromSuspense(pendingProps, mode, lanes, key);\n          case REACT_SUSPENSE_LIST_TYPE:\n            return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n          case REACT_OFFSCREEN_TYPE:\n            return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n          case REACT_LEGACY_HIDDEN_TYPE:\n          case REACT_SCOPE_TYPE:\n          case REACT_CACHE_TYPE:\n          case REACT_TRACING_MARKER_TYPE:\n          case REACT_DEBUG_TRACING_MODE_TYPE:\n          default:\n            {\n              if (typeof type === \"object\" && type !== null) {\n                switch (type.$$typeof) {\n                  case REACT_PROVIDER_TYPE:\n                    {\n                      fiberTag = ContextProvider;\n                      break getTag;\n                    }\n                  case REACT_CONTEXT_TYPE:\n                    {\n                      fiberTag = ContextConsumer;\n                      break getTag;\n                    }\n                  case REACT_CONSUMER_TYPE:\n                  case REACT_FORWARD_REF_TYPE:\n                    fiberTag = ForwardRef;\n                    {\n                      resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                    }\n                    break getTag;\n                  case REACT_MEMO_TYPE:\n                    fiberTag = MemoComponent;\n                    break getTag;\n                  case REACT_LAZY_TYPE:\n                    fiberTag = LazyComponent;\n                    resolvedType = null;\n                    break getTag;\n                }\n              }\n              var info = \"\";\n              {\n                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                  info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and \" + \"named imports.\";\n                }\n                var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n                if (ownerName) {\n                  info += \"\\n\\nCheck the render method of `\" + ownerName + \"`.\";\n                }\n              }\n              throw new Error(\"Element type is invalid: expected a string (for built-in \" + \"components) or a class/function (for composite components) \" + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n            }\n        }\n      }\n      var fiber = createFiber(fiberTag, pendingProps, key, mode);\n      fiber.elementType = type;\n      fiber.type = resolvedType;\n      fiber.lanes = lanes;\n      {\n        fiber._debugOwner = owner;\n      }\n      return fiber;\n    }\n    function createFiberFromElement(element, mode, lanes) {\n      var owner = null;\n      {\n        owner = element._owner;\n      }\n      var type = element.type;\n      var key = element.key;\n      var pendingProps = element.props;\n      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n      {\n        fiber._debugOwner = element._owner;\n      }\n      return fiber;\n    }\n    function createFiberFromFragment(elements, mode, lanes, key) {\n      var fiber = createFiber(Fragment, elements, key, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromProfiler(pendingProps, mode, lanes, key) {\n      {\n        if (typeof pendingProps.id !== \"string\") {\n          error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n        }\n      }\n      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n      fiber.elementType = REACT_PROFILER_TYPE;\n      fiber.lanes = lanes;\n      {\n        fiber.stateNode = {\n          effectDuration: 0,\n          passiveEffectDuration: 0\n        };\n      }\n      return fiber;\n    }\n    function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_OFFSCREEN_TYPE;\n      fiber.lanes = lanes;\n      var primaryChildInstance = {\n        _visibility: OffscreenVisible,\n        _pendingVisibility: OffscreenVisible,\n        _pendingMarkers: null,\n        _retryCache: null,\n        _transitions: null,\n        _current: null,\n        detach: function () {\n          return detachOffscreenInstance(primaryChildInstance);\n        },\n        attach: function () {\n          return attachOffscreenInstance(primaryChildInstance);\n        }\n      };\n      fiber.stateNode = primaryChildInstance;\n      return fiber;\n    }\n    function createFiberFromText(content, mode, lanes) {\n      var fiber = createFiber(HostText, content, null, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromPortal(portal, mode, lanes) {\n      var pendingProps = portal.children !== null ? portal.children : [];\n      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n      fiber.lanes = lanes;\n      fiber.stateNode = {\n        containerInfo: portal.containerInfo,\n        pendingChildren: null,\n        implementation: portal.implementation\n      };\n      return fiber;\n    }\n    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError, formState) {\n      this.tag = tag;\n      this.containerInfo = containerInfo;\n      this.pendingChildren = null;\n      this.current = null;\n      this.pingCache = null;\n      this.finishedWork = null;\n      this.timeoutHandle = noTimeout;\n      this.cancelPendingCommit = null;\n      this.context = null;\n      this.pendingContext = null;\n      this.next = null;\n      this.callbackNode = null;\n      this.callbackPriority = NoLane;\n      this.expirationTimes = createLaneMap(NoTimestamp);\n      this.pendingLanes = NoLanes;\n      this.suspendedLanes = NoLanes;\n      this.pingedLanes = NoLanes;\n      this.expiredLanes = NoLanes;\n      this.finishedLanes = NoLanes;\n      this.errorRecoveryDisabledLanes = NoLanes;\n      this.shellSuspendCounter = 0;\n      this.entangledLanes = NoLanes;\n      this.entanglements = createLaneMap(NoLanes);\n      this.hiddenUpdates = createLaneMap(null);\n      this.identifierPrefix = identifierPrefix;\n      this.onRecoverableError = onRecoverableError;\n      this.formState = formState;\n      this.incompleteTransitions = new Map();\n      {\n        this.effectDuration = 0;\n        this.passiveEffectDuration = 0;\n      }\n      {\n        this.memoizedUpdaters = new Set();\n        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n        for (var _i = 0; _i < TotalLanes; _i++) {\n          pendingUpdatersLaneMap.push(new Set());\n        }\n      }\n      {\n        switch (tag) {\n          case ConcurrentRoot:\n            this._debugRootType = hydrate ? \"hydrateRoot()\" : \"createRoot()\";\n            break;\n          case LegacyRoot:\n            this._debugRootType = hydrate ? \"hydrate()\" : \"render()\";\n            break;\n        }\n      }\n    }\n    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks, formState) {\n      var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError, formState);\n      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n      root.current = uninitializedFiber;\n      uninitializedFiber.stateNode = root;\n      {\n        var _initialState = {\n          element: initialChildren,\n          isDehydrated: hydrate,\n          cache: null\n        };\n        uninitializedFiber.memoizedState = _initialState;\n      }\n      initializeUpdateQueue(uninitializedFiber);\n      return root;\n    }\n    var ReactVersion = \"18.3.0-canary-9372c6311-20240315\";\n    function createPortal$1(children, containerInfo, implementation) {\n      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      {\n        checkKeyStringCoercion(key);\n      }\n      return {\n        $$typeof: REACT_PORTAL_TYPE,\n        key: key == null ? null : \"\" + key,\n        children: children,\n        containerInfo: containerInfo,\n        implementation: implementation\n      };\n    }\n    var didWarnAboutNestedUpdates;\n    var didWarnAboutFindNodeInStrictMode;\n    {\n      didWarnAboutNestedUpdates = false;\n      didWarnAboutFindNodeInStrictMode = {};\n    }\n    function getContextForSubtree(parentComponent) {\n      if (!parentComponent) {\n        return emptyContextObject;\n      }\n      var fiber = get(parentComponent);\n      var parentContext = findCurrentUnmaskedContext();\n      if (fiber.tag === ClassComponent) {\n        var Component = fiber.type;\n        if (isContextProvider()) {\n          return processChildContext(fiber, Component, parentContext);\n        }\n      }\n      return parentContext;\n    }\n    function findHostInstanceWithWarning(component, methodName) {\n      {\n        var fiber = get(component);\n        if (fiber === undefined) {\n          if (typeof component.render === \"function\") {\n            throw new Error(\"Unable to find node on an unmounted component.\");\n          } else {\n            var keys = Object.keys(component).join(\",\");\n            throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n          }\n        }\n        var hostFiber = findCurrentHostFiber(fiber);\n        if (hostFiber === null) {\n          return null;\n        }\n        if (hostFiber.mode & StrictLegacyMode) {\n          var componentName = getComponentNameFromFiber(fiber) || \"Component\";\n          if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n            didWarnAboutFindNodeInStrictMode[componentName] = true;\n            var previousFiber = current;\n            try {\n              setCurrentFiber(hostFiber);\n              if (fiber.mode & StrictLegacyMode) {\n                error(\"%s is deprecated in StrictMode. \" + \"%s was passed an instance of %s which is inside StrictMode. \" + \"Instead, add a ref directly to the element you want to reference. \" + \"Learn more about using refs safely here: \" + \"https://react.dev/link/strict-mode-find-node\", methodName, methodName, componentName);\n              } else {\n                error(\"%s is deprecated in StrictMode. \" + \"%s was passed an instance of %s which renders StrictMode children. \" + \"Instead, add a ref directly to the element you want to reference. \" + \"Learn more about using refs safely here: \" + \"https://react.dev/link/strict-mode-find-node\", methodName, methodName, componentName);\n              }\n            } finally {\n              if (previousFiber) {\n                setCurrentFiber(previousFiber);\n              } else {\n                resetCurrentFiber();\n              }\n            }\n          }\n        }\n        return getPublicInstance(hostFiber.stateNode);\n      }\n    }\n    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n      var hydrate = false;\n      var initialChildren = null;\n      return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks, null);\n    }\n    function updateContainer(element, container, parentComponent, callback) {\n      {\n        onScheduleRoot(container, element);\n      }\n      var current$1 = container.current;\n      var lane = requestUpdateLane(current$1);\n      var context = getContextForSubtree(parentComponent);\n      if (container.context === null) {\n        container.context = context;\n      } else {\n        container.pendingContext = context;\n      }\n      {\n        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n          didWarnAboutNestedUpdates = true;\n          error(\"Render methods should be a pure function of props and state; \" + \"triggering nested component updates from render is not allowed. \" + \"If necessary, trigger nested updates in componentDidUpdate.\\n\\n\" + \"Check the render method of %s.\", getComponentNameFromFiber(current) || \"Unknown\");\n        }\n      }\n      var update = createUpdate(lane);\n      update.payload = {\n        element: element\n      };\n      callback = callback === undefined ? null : callback;\n      if (callback !== null) {\n        {\n          if (typeof callback !== \"function\") {\n            error(\"Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callback);\n          }\n        }\n        update.callback = callback;\n      }\n      var root = enqueueUpdate(current$1, update, lane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, current$1, lane);\n        entangleTransitions(root, current$1, lane);\n      }\n      return lane;\n    }\n    function getPublicRootInstance(container) {\n      var containerFiber = container.current;\n      if (!containerFiber.child) {\n        return null;\n      }\n      switch (containerFiber.child.tag) {\n        case HostSingleton:\n        case HostComponent:\n          return getPublicInstance(containerFiber.child.stateNode);\n        default:\n          return containerFiber.child.stateNode;\n      }\n    }\n    var shouldErrorImpl = function (fiber) {\n      return null;\n    };\n    function shouldError(fiber) {\n      return shouldErrorImpl(fiber);\n    }\n    var shouldSuspendImpl = function (fiber) {\n      return false;\n    };\n    function shouldSuspend(fiber) {\n      return shouldSuspendImpl(fiber);\n    }\n    var overrideHookState = null;\n    var overrideHookStateDeletePath = null;\n    var overrideHookStateRenamePath = null;\n    var overrideProps = null;\n    var overridePropsDeletePath = null;\n    var overridePropsRenamePath = null;\n    var scheduleUpdate = null;\n    var setErrorHandler = null;\n    var setSuspenseHandler = null;\n    {\n      var copyWithDeleteImpl = function (obj, path, index) {\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n        if (index + 1 === path.length) {\n          if (isArray(updated)) {\n            updated.splice(key, 1);\n          } else {\n            delete updated[key];\n          }\n          return updated;\n        }\n        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n        return updated;\n      };\n      var copyWithDelete = function (obj, path) {\n        return copyWithDeleteImpl(obj, path, 0);\n      };\n      var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n        var oldKey = oldPath[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n        if (index + 1 === oldPath.length) {\n          var newKey = newPath[index];\n          updated[newKey] = updated[oldKey];\n          if (isArray(updated)) {\n            updated.splice(oldKey, 1);\n          } else {\n            delete updated[oldKey];\n          }\n        } else {\n          updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);\n        }\n        return updated;\n      };\n      var copyWithRename = function (obj, oldPath, newPath) {\n        if (oldPath.length !== newPath.length) {\n          warn(\"copyWithRename() expects paths of the same length\");\n          return;\n        } else {\n          for (var i = 0; i < newPath.length - 1; i++) {\n            if (oldPath[i] !== newPath[i]) {\n              warn(\"copyWithRename() expects paths to be the same except for the deepest key\");\n              return;\n            }\n          }\n        }\n        return copyWithRenameImpl(obj, oldPath, newPath, 0);\n      };\n      var copyWithSetImpl = function (obj, path, index, value) {\n        if (index >= path.length) {\n          return value;\n        }\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n        return updated;\n      };\n      var copyWithSet = function (obj, path, value) {\n        return copyWithSetImpl(obj, path, 0, value);\n      };\n      var findHook = function (fiber, id) {\n        var currentHook = fiber.memoizedState;\n        while (currentHook !== null && id > 0) {\n          currentHook = currentHook.next;\n          id--;\n        }\n        return currentHook;\n      };\n      overrideHookState = function (fiber, id, path, value) {\n        var hook = findHook(fiber, id);\n        if (hook !== null) {\n          var newState = copyWithSet(hook.memoizedState, path, value);\n          hook.memoizedState = newState;\n          hook.baseState = newState;\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      };\n      overrideHookStateDeletePath = function (fiber, id, path) {\n        var hook = findHook(fiber, id);\n        if (hook !== null) {\n          var newState = copyWithDelete(hook.memoizedState, path);\n          hook.memoizedState = newState;\n          hook.baseState = newState;\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      };\n      overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n        var hook = findHook(fiber, id);\n        if (hook !== null) {\n          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n          hook.memoizedState = newState;\n          hook.baseState = newState;\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      };\n      overrideProps = function (fiber, path, value) {\n        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n      overridePropsDeletePath = function (fiber, path) {\n        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n      overridePropsRenamePath = function (fiber, oldPath, newPath) {\n        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n      scheduleUpdate = function (fiber) {\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n      setErrorHandler = function (newShouldErrorImpl) {\n        shouldErrorImpl = newShouldErrorImpl;\n      };\n      setSuspenseHandler = function (newShouldSuspendImpl) {\n        shouldSuspendImpl = newShouldSuspendImpl;\n      };\n    }\n    function findHostInstanceByFiber(fiber) {\n      var hostFiber = findCurrentHostFiber(fiber);\n      if (hostFiber === null) {\n        return null;\n      }\n      return hostFiber.stateNode;\n    }\n    function emptyFindFiberByHostInstance(instance) {\n      return null;\n    }\n    function getCurrentFiberForDevTools() {\n      return current;\n    }\n    function injectIntoDevTools(devToolsConfig) {\n      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n      return injectInternals({\n        bundleType: devToolsConfig.bundleType,\n        version: devToolsConfig.version,\n        rendererPackageName: devToolsConfig.rendererPackageName,\n        rendererConfig: devToolsConfig.rendererConfig,\n        overrideHookState: overrideHookState,\n        overrideHookStateDeletePath: overrideHookStateDeletePath,\n        overrideHookStateRenamePath: overrideHookStateRenamePath,\n        overrideProps: overrideProps,\n        overridePropsDeletePath: overridePropsDeletePath,\n        overridePropsRenamePath: overridePropsRenamePath,\n        setErrorHandler: setErrorHandler,\n        setSuspenseHandler: setSuspenseHandler,\n        scheduleUpdate: scheduleUpdate,\n        currentDispatcherRef: ReactCurrentDispatcher,\n        findHostInstanceByFiber: findHostInstanceByFiber,\n        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n        findHostInstancesForRefresh: findHostInstancesForRefresh,\n        scheduleRefresh: scheduleRefresh,\n        scheduleRoot: scheduleRoot,\n        setRefreshHandler: setRefreshHandler,\n        getCurrentFiber: getCurrentFiberForDevTools,\n        reconcilerVersion: ReactVersion\n      });\n    }\n    var instanceCache = new Map();\n    function getInstanceFromTag(tag) {\n      return instanceCache.get(tag) || null;\n    }\n    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n    function findHostInstance_DEPRECATED(componentOrHandle) {\n      {\n        var owner = ReactCurrentOwner.current;\n        if (owner !== null && owner.stateNode !== null) {\n          if (!owner.stateNode._warnedAboutRefsInRender) {\n            error(\"%s is accessing findNodeHandle inside its render(). \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", getComponentNameFromType(owner.type) || \"A component\");\n          }\n          owner.stateNode._warnedAboutRefsInRender = true;\n        }\n      }\n      if (componentOrHandle == null) {\n        return null;\n      }\n      if (componentOrHandle.canonical && componentOrHandle.canonical.publicInstance) {\n        return componentOrHandle.canonical.publicInstance;\n      }\n      if (componentOrHandle._nativeTag) {\n        return componentOrHandle;\n      }\n      var hostInstance;\n      {\n        hostInstance = findHostInstanceWithWarning(componentOrHandle, \"findHostInstance_DEPRECATED\");\n      }\n      return hostInstance;\n    }\n    function findNodeHandle(componentOrHandle) {\n      {\n        var owner = ReactCurrentOwner.current;\n        if (owner !== null && owner.stateNode !== null) {\n          if (!owner.stateNode._warnedAboutRefsInRender) {\n            error(\"%s is accessing findNodeHandle inside its render(). \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", getComponentNameFromType(owner.type) || \"A component\");\n          }\n          owner.stateNode._warnedAboutRefsInRender = true;\n        }\n      }\n      if (componentOrHandle == null) {\n        return null;\n      }\n      if (typeof componentOrHandle === \"number\") {\n        return componentOrHandle;\n      }\n      if (componentOrHandle._nativeTag) {\n        return componentOrHandle._nativeTag;\n      }\n      if (componentOrHandle.canonical != null && componentOrHandle.canonical.nativeTag != null) {\n        return componentOrHandle.canonical.nativeTag;\n      }\n      var nativeTag = ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);\n      if (nativeTag) {\n        return nativeTag;\n      }\n      var hostInstance;\n      {\n        hostInstance = findHostInstanceWithWarning(componentOrHandle, \"findNodeHandle\");\n      }\n      if (hostInstance == null) {\n        return hostInstance;\n      }\n      if (hostInstance._nativeTag != null) {\n        return hostInstance._nativeTag;\n      }\n      return ReactNativePrivateInterface.getNativeTagFromPublicInstance(hostInstance);\n    }\n    function dispatchCommand(handle, command, args) {\n      var nativeTag = handle._nativeTag != null ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);\n      if (nativeTag == null) {\n        {\n          error(\"dispatchCommand was called with a ref that isn't a \" + \"native component. Use React.forwardRef to get access to the underlying native component\");\n        }\n        return;\n      }\n      var node = ReactNativePrivateInterface.getNodeFromPublicInstance(handle);\n      if (node != null) {\n        nativeFabricUIManager.dispatchCommand(node, command, args);\n      } else {\n        ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(nativeTag, command, args);\n      }\n    }\n    function sendAccessibilityEvent(handle, eventType) {\n      var nativeTag = handle._nativeTag != null ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);\n      if (nativeTag == null) {\n        {\n          error(\"sendAccessibilityEvent was called with a ref that isn't a \" + \"native component. Use React.forwardRef to get access to the underlying native component\");\n        }\n        return;\n      }\n      var node = ReactNativePrivateInterface.getNodeFromPublicInstance(handle);\n      if (node != null) {\n        nativeFabricUIManager.sendAccessibilityEvent(node, eventType);\n      } else {\n        ReactNativePrivateInterface.legacySendAccessibilityEvent(nativeTag, eventType);\n      }\n    }\n    function getNodeFromInternalInstanceHandle(internalInstanceHandle) {\n      return internalInstanceHandle && internalInstanceHandle.stateNode && internalInstanceHandle.stateNode.node;\n    }\n    function isChildPublicInstance(parentInstance, childInstance) {\n      {\n        if (parentInstance._internalFiberInstanceHandleDEV && childInstance._internalFiberInstanceHandleDEV) {\n          return doesFiberContain(parentInstance._internalFiberInstanceHandleDEV, childInstance._internalFiberInstanceHandleDEV);\n        }\n        var parentInternalInstanceHandle = ReactNativePrivateInterface.getInternalInstanceHandleFromPublicInstance(parentInstance);\n        var childInternalInstanceHandle = ReactNativePrivateInterface.getInternalInstanceHandleFromPublicInstance(childInstance);\n        if (parentInternalInstanceHandle != null && childInternalInstanceHandle != null) {\n          return doesFiberContain(parentInternalInstanceHandle, childInternalInstanceHandle);\n        }\n        return false;\n      }\n    }\n    var emptyObject = {};\n    {\n      Object.freeze(emptyObject);\n    }\n    function createHierarchy(fiberHierarchy) {\n      return fiberHierarchy.map(function (fiber) {\n        return {\n          name: getComponentNameFromType(fiber.type),\n          getInspectorData: function (findNodeHandle) {\n            return {\n              props: getHostProps(fiber),\n              measure: function (callback) {\n                var hostFiber = findCurrentHostFiber(fiber);\n                var node = hostFiber != null && hostFiber.stateNode !== null && hostFiber.stateNode.node;\n                if (node) {\n                  nativeFabricUIManager.measure(node, callback);\n                } else {\n                  return ReactNativePrivateInterface.UIManager.measure(getHostNode(fiber, findNodeHandle), callback);\n                }\n              }\n            };\n          }\n        };\n      });\n    }\n    function getHostNode(fiber, findNodeHandle) {\n      {\n        var hostNode;\n        while (fiber) {\n          if (fiber.stateNode !== null && fiber.tag === HostComponent) {\n            hostNode = findNodeHandle(fiber.stateNode);\n          }\n          if (hostNode) {\n            return hostNode;\n          }\n          fiber = fiber.child;\n        }\n        return null;\n      }\n    }\n    function getHostProps(fiber) {\n      var host = findCurrentHostFiber(fiber);\n      if (host) {\n        return host.memoizedProps || emptyObject;\n      }\n      return emptyObject;\n    }\n    function getInspectorDataForInstance(closestInstance) {\n      {\n        if (!closestInstance) {\n          return {\n            hierarchy: [],\n            props: emptyObject,\n            selectedIndex: null,\n            componentStack: \"\"\n          };\n        }\n        var fiber = findCurrentFiberUsingSlowPath(closestInstance);\n        var fiberHierarchy = getOwnerHierarchy(fiber);\n        var instance = lastNonHostInstance(fiberHierarchy);\n        var hierarchy = createHierarchy(fiberHierarchy);\n        var props = getHostProps(instance);\n        var selectedIndex = fiberHierarchy.indexOf(instance);\n        var componentStack = fiber !== null ? getStackByFiberInDevAndProd(fiber) : \"\";\n        return {\n          closestInstance: instance,\n          hierarchy: hierarchy,\n          props: props,\n          selectedIndex: selectedIndex,\n          componentStack: componentStack\n        };\n      }\n    }\n    function getOwnerHierarchy(instance) {\n      var hierarchy = [];\n      traverseOwnerTreeUp(hierarchy, instance);\n      return hierarchy;\n    }\n    function lastNonHostInstance(hierarchy) {\n      for (var i = hierarchy.length - 1; i > 1; i--) {\n        var instance = hierarchy[i];\n        if (instance.tag !== HostComponent) {\n          return instance;\n        }\n      }\n      return hierarchy[0];\n    }\n    function traverseOwnerTreeUp(hierarchy, instance) {\n      {\n        if (instance) {\n          hierarchy.unshift(instance);\n          traverseOwnerTreeUp(hierarchy, instance._debugOwner);\n        }\n      }\n    }\n    function getInspectorDataForViewTag(viewTag) {\n      {\n        var closestInstance = getInstanceFromTag(viewTag);\n        return getInspectorDataForInstance(closestInstance);\n      }\n    }\n    function getInspectorDataForViewAtPoint(findNodeHandle, inspectedView, locationX, locationY, callback) {\n      {\n        var closestInstance = null;\n        var fabricNode = ReactNativePrivateInterface.getNodeFromPublicInstance(inspectedView);\n        if (fabricNode) {\n          nativeFabricUIManager.findNodeAtPoint(fabricNode, locationX, locationY, function (internalInstanceHandle) {\n            var node = internalInstanceHandle != null ? getNodeFromInternalInstanceHandle(internalInstanceHandle) : null;\n            if (internalInstanceHandle == null || node == null) {\n              callback(assign({\n                pointerY: locationY,\n                frame: {\n                  left: 0,\n                  top: 0,\n                  width: 0,\n                  height: 0\n                }\n              }, getInspectorDataForInstance(closestInstance)));\n              return;\n            }\n            closestInstance = internalInstanceHandle.stateNode.canonical.internalInstanceHandle;\n            var nativeViewTag = internalInstanceHandle.stateNode.canonical.nativeTag;\n            nativeFabricUIManager.measure(node, function (x, y, width, height, pageX, pageY) {\n              var inspectorData = getInspectorDataForInstance(closestInstance);\n              callback(assign({}, inspectorData, {\n                pointerY: locationY,\n                frame: {\n                  left: pageX,\n                  top: pageY,\n                  width: width,\n                  height: height\n                },\n                touchedViewTag: nativeViewTag\n              }));\n            });\n          });\n        } else if (inspectedView._internalFiberInstanceHandleDEV != null) {\n          ReactNativePrivateInterface.UIManager.findSubviewIn(findNodeHandle(inspectedView), [locationX, locationY], function (nativeViewTag, left, top, width, height) {\n            var inspectorData = getInspectorDataForInstance(getInstanceFromTag(nativeViewTag));\n            callback(assign({}, inspectorData, {\n              pointerY: locationY,\n              frame: {\n                left: left,\n                top: top,\n                width: width,\n                height: height\n              },\n              touchedViewTag: nativeViewTag\n            }));\n          });\n        } else {\n          error(\"getInspectorDataForViewAtPoint expects to receive a host component\");\n          return;\n        }\n      }\n    }\n    function onRecoverableError(error$1) {\n      error(error$1);\n    }\n    function render(element, containerTag, callback, concurrentRoot) {\n      var root = roots.get(containerTag);\n      if (!root) {\n        root = createContainer(containerTag, concurrentRoot ? ConcurrentRoot : LegacyRoot, null, false, null, \"\", onRecoverableError, null);\n        roots.set(containerTag, root);\n      }\n      updateContainer(element, root, null, callback);\n      return getPublicRootInstance(root);\n    }\n    function unmountComponentAtNode(containerTag) {\n      this.stopSurface(containerTag);\n    }\n    function stopSurface(containerTag) {\n      var root = roots.get(containerTag);\n      if (root) {\n        updateContainer(null, root, null, function () {\n          roots.delete(containerTag);\n        });\n      }\n    }\n    function createPortal(children, containerTag) {\n      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return createPortal$1(children, containerTag, null, key);\n    }\n    setBatchingImplementation(batchedUpdates);\n    var roots = new Map();\n    injectIntoDevTools({\n      findFiberByHostInstance: getInstanceFromNode,\n      bundleType: 1,\n      version: ReactVersion,\n      rendererPackageName: \"react-native-renderer\",\n      rendererConfig: {\n        getInspectorDataForInstance: getInspectorDataForInstance,\n        getInspectorDataForViewTag: getInspectorDataForViewTag,\n        getInspectorDataForViewAtPoint: getInspectorDataForViewAtPoint.bind(null, findNodeHandle)\n      }\n    });\n    exports.createPortal = createPortal;\n    exports.dispatchCommand = dispatchCommand;\n    exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;\n    exports.findNodeHandle = findNodeHandle;\n    exports.getInspectorDataForInstance = getInspectorDataForInstance;\n    exports.getNodeFromInternalInstanceHandle = getNodeFromInternalInstanceHandle;\n    exports.getPublicInstanceFromInternalInstanceHandle = getPublicInstanceFromInternalInstanceHandle;\n    exports.isChildPublicInstance = isChildPublicInstance;\n    exports.render = render;\n    exports.sendAccessibilityEvent = sendAccessibilityEvent;\n    exports.stopSurface = stopSurface;\n    exports.unmountComponentAtNode = unmountComponentAtNode;\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === \"function\") {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n    }\n  })();\n}","map":{"version":3,"names":["__DEV__","__REACT_DEVTOOLS_GLOBAL_HOOK__","registerInternalModuleStart","Error","React","require","ReactNativePrivateInterface","Scheduler","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","warn","format","_len","arguments","length","args","Array","_key","printWarning","error","_len2","_key2","level","ReactDebugCurrentFrame","stack","getStackAddendum","concat","argsWithFormat","map","item","String","unshift","Function","prototype","apply","call","console","isArrayImpl","isArray","a","hasError","caughtError","getFiberCurrentPropsFromNode$1","getInstanceFromNode$1","getNodeFromInstance$1","setComponentTree","getFiberCurrentPropsFromNodeImpl","getInstanceFromNodeImpl","getNodeFromInstanceImpl","validateEventDispatches","event","dispatchListeners","_dispatchListeners","dispatchInstances","_dispatchInstances","listenersIsArr","listenersLen","instancesIsArr","instancesLen","executeDispatch","listener","inst","currentTarget","executeDispatchesInOrder","i","isPropagationStopped","executeDispatchesInOrderStopAtTrueImpl","executeDispatchesInOrderStopAtTrue","ret","executeDirectDispatch","dispatchListener","dispatchInstance","res","hasDispatches","rethrowCaughtError","assign","Object","EVENT_POOL_SIZE","EventInterface","type","target","eventPhase","bubbles","cancelable","timeStamp","Date","now","defaultPrevented","isTrusted","functionThatReturnsTrue","functionThatReturnsFalse","SyntheticEvent","dispatchConfig","targetInst","nativeEvent","nativeEventTarget","preventDefault","stopPropagation","isDefaultPrevented","_targetInst","Interface","constructor","propName","hasOwnProperty","normalize","returnValue","cancelBubble","persist","isPersistent","destructor","defineProperty","getPooledWarningPropertyDefinition","extend","Super","E","Class","addEventPoolingTo","getVal","set","val","action","isFunction","get","result","configurable","createOrGetPooledEvent","nativeInst","EventConstructor","eventPool","instance","pop","releasePooledEvent","push","getPooled","release","ResponderSyntheticEvent","touchHistory","TOP_TOUCH_START","TOP_TOUCH_MOVE","TOP_TOUCH_END","TOP_TOUCH_CANCEL","TOP_SCROLL","TOP_SELECTION_CHANGE","isStartish","topLevelType","isMoveish","isEndish","startDependencies","moveDependencies","endDependencies","MAX_TOUCH_BANK","touchBank","numberActiveTouches","indexOfSingleActiveTouch","mostRecentTimeStamp","timestampForTouch","touch","timestamp","createTouchRecord","touchActive","startPageX","pageX","startPageY","pageY","startTimeStamp","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","resetTouchRecord","touchRecord","getTouchIdentifier","_ref","identifier","recordTouchStart","recordTouchMove","printTouch","printTouchBank","recordTouchEnd","JSON","stringify","printed","slice","instrumentationCallback","ResponderTouchHistoryStore","instrument","callback","recordTouchTrack","changedTouches","forEach","touches","touchTrackToCheck","activeRecord","accumulate","current","next","accumulateInto","forEachAccumulated","arr","cb","scope","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","HostHoistable","HostSingleton","responderInst","trackedTouchCount","changeResponder","nextResponderInst","blockHostResponder","oldResponderInst","ResponderEventPlugin","GlobalResponderHandler","onChange","eventTypes","startShouldSetResponder","phasedRegistrationNames","bubbled","captured","dependencies","scrollShouldSetResponder","selectionChangeShouldSetResponder","moveShouldSetResponder","responderStart","registrationName","responderMove","responderEnd","responderRelease","responderTerminationRequest","responderGrant","responderReject","responderTerminate","getParent$1","return","tag","getLowestCommonAncestor","instA","instB","depthA","tempA","depthB","tempB","depth","alternate","isAncestor","traverseTwoPhase$1","fn","arg","path","getListener$1","stateNode","props","listenerAtPhase$1","propagationPhase","accumulateDirectionalDispatches$1","phase","accumulateDispatches$1","ignoredDirection","accumulateDirectDispatchesSingle$1","accumulateDirectDispatches$1","events","accumulateTwoPhaseDispatchesSingleSkipTarget","parentInst","accumulateTwoPhaseDispatchesSkipTarget","accumulateTwoPhaseDispatchesSingle$1","accumulateTwoPhaseDispatches$1","setResponderAndExtractTransfer","shouldSetEventType","bubbleShouldSetFrom","skipOverBubbleShouldSetFrom","shouldSetEvent","wantsResponderInst","extracted","grantEvent","terminationRequestEvent","shouldSwitch","terminateEvent","rejectEvent","canTriggerTransfer","topLevelInst","responderIgnoreScroll","noResponderTouches","activeTouch","undefined","_getResponder","extractEvents","eventSystemFlags","isResponderTouchStart","isResponderTouchMove","isResponderTouchEnd","incrementalTouch","gesture","isResponderTerminate","isResponderRelease","finalTouch","finalEvent","injection","injectGlobalResponderHandler","eventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","pluginModule","pluginIndex","indexOf","plugins","publishedEvents","eventName","publishEventForPlugin","eventNameDispatchConfigs","phaseName","phasedRegistrationName","publishRegistrationName","registrationNameModules","toLowerCase","injectEventPluginOrder","injectedEventPluginOrder","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","getListener","customBubblingEventTypes","ReactNativeViewConfigRegistry","customDirectEventTypes","listenerAtPhase","accumulateDirectionalDispatches","getParent","traverseTwoPhase","skipBubbling","accumulateTwoPhaseDispatchesSingle","accumulateTwoPhaseDispatches","accumulateCapturePhaseDispatches","accumulateDispatches","accumulateDirectDispatchesSingle","accumulateDirectDispatches","ReactNativeBridgeEventPlugin","bubbleDispatchConfig","directDispatchConfig","ReactNativeEventPluginOrder","emptyObject$1","removedKeys","removedKeyCount","deepDifferOptions","unsafelyIgnoreFunctions","defaultDiffer","prevProp","nextProp","deepDiffer","restoreDeletedValuesInNestedArray","updatePayload","node","validAttributes","obj","propKey","attributeConfig","diff","process","nextValue","diffNestedArrayProperty","prevArray","nextArray","minLength","diffNestedProperty","clearNestedProperty","addNestedProperty","diffProperties","flattenStyle","addProperties","clearProperties","prevProps","nextProps","shouldUpdate","_nextValue","_propKey","create","batchedUpdatesImpl","bookkeeping","isInsideEventHandler","batchedUpdates$1","setBatchingImplementation","_batchedUpdatesImpl","_discreteUpdatesImpl","eventQueue","executeDispatchesAndRelease","executeDispatchesAndReleaseTopLevel","e","runEventsInBatch","processingEventQueue","extractPluginEvents","legacyPlugins","possiblePlugin","extractedEvents","runExtractedPluginEventsInBatch","dispatchEvent","targetFiber","eventTarget","getPublicInstance","RawEventEmitter","emit","enableSchedulingProfiler","enableProfilerTimer","enableProfilerCommitHooks","enableProfilerNestedUpdatePhase","syncLaneExpirationMs","transitionLaneExpirationMs","enableLazyContextPropagation","enableLegacyHidden","enableAsyncActions","passChildrenWhenCloningPersistedNodes","enableBigIntSupport","NoFlags$1","PerformedWork","Placement","DidCapture","Hydrating","Update","ChildDeletion","ContentReset","Callback","ForceClientRender","Ref","Snapshot","Passive$1","Visibility","StoreConsistency","ScheduleRetry","ShouldSuspendCommit","DidDefer","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","MaySuspendCommit","PlacementDEV","MountLayoutDev","MountPassiveDev","BeforeMutationMask","MutationMask","LayoutMask","PassiveMask","StaticMask","scheduleCallback$2","unstable_scheduleCallback","cancelCallback$1","unstable_cancelCallback","shouldYield","unstable_shouldYield","requestPaint","unstable_requestPaint","now$1","unstable_now","ImmediatePriority","unstable_ImmediatePriority","UserBlockingPriority","unstable_UserBlockingPriority","NormalPriority","unstable_NormalPriority","IdlePriority","unstable_IdlePriority","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","__reactDisabledLog","disableLogs","log","info","group","groupCollapsed","groupEnd","enumerable","value","writable","defineProperties","reenableLogs","rendererID","injectedHook","hasLoggedError","isDevToolsPresent","injectInternals","internals","hook","isDisabled","supportsFiber","inject","err","checkDCE","onScheduleRoot","root","children","onScheduleFiberRoot","onCommitRoot","eventPriority","onCommitFiberRoot","didError","flags","schedulerPriority","DiscreteEventPriority","ContinuousEventPriority","DefaultEventPriority","IdleEventPriority","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","fiber","onCommitFiberUnmount","setIsStrictModeForDevtools","newIsStrictMode","injectProfilingHooks","profilingHooks","getLaneLabelMap","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","StrictEffectsMode","NoStrictPassiveEffectsMode","clz32","Math","clz32Fallback","LN2","x","asUint","TotalLanes","NoLanes","NoLane","SyncHydrationLane","SyncLane","SyncLaneIndex","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","SyncUpdateLanes","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","DeferredLane","UpdateLanes","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","pendingSyncLanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","getEntangledLanes","renderLanes","entangledLanes","allEntangledLanes","entanglements","index","pickArbitraryLaneIndex","lane","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getLanesToRetrySynchronouslyOnError","originallyAttemptedLanes","errorRecoveryDisabledLanes","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyNonUrgentLanes","UrgentLanes","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","b","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","createLaneMap","initial","laneMap","markRootUpdated$1","updateLane","markRootSuspended$1","spawnedLane","markSpawnedDeferredLane","markRootPinged$1","markRootFinished","remainingLanes","noLongerPendingLanes","shellSuspendCounter","hiddenUpdates","hiddenUpdatesForLane","update","spawnedLaneIndex","markRootEntangled","rootEntangledLanes","upgradePendingLaneToSync","markHiddenUpdate","getBumpedLaneForHydration","renderLane","addFiberToLanesMap","pendingUpdatersLaneMap","updaters","add","movePendingFibersToMemoized","memoizedUpdaters","size","has","clear","getTransitionsForLanes","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","shim$2","commitMount","shim$1","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","errorHydratingContainer","shim","suspendResource","_nativeFabricUIManage","nativeFabricUIManager","createNode","cloneNodeWithNewChildren","cloneNodeWithNewChildrenAndProps","cloneNodeWithNewProps","createChildNodeSet","createChildSet","appendChildNode","appendChild","appendChildNodeToSet","appendChildToSet","completeRoot","registerEventHandler","FabricDefaultPriority","unstable_DefaultEventPriority","FabricDiscretePriority","unstable_DiscreteEventPriority","fabricGetCurrentEventPriority","unstable_getCurrentEventPriority","getViewConfigForType","nextReactTag","appendInitialChild","parentInstance","child","createInstance","rootContainerInstance","hostContext","internalInstanceHandle","viewConfig","key","deepFreezeAndThrowOnMutationInDev","uiViewClassName","component","createPublicInstance","canonical","nativeTag","currentProps","publicInstance","createTextInstance","text","isInAParentText","getRootHostContext","getChildHostContext","parentHostContext","prevIsInAParentText","_nativeTag","getPublicTextInstance","textInstance","createPublicTextInstance","getPublicInstanceFromInternalInstanceHandle","elementInstance","shouldSetTextContent","getCurrentEventPriority","currentEventPriority","shouldAttemptEagerTransition","warnsIfNotActing","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","cloneInstance","oldProps","newProps","keepChildren","newChildSet","clone","cloneHiddenInstance","style","display","cloneHiddenTextInstance","createContainerChildSet","appendChildToContainerChildSet","childSet","finalizeContainerChildren","container","newChildren","replaceContainerChildren","preloadInstance","waitForCommitToBeReady","supportsMicrotasks","RN$enableMicrotasksInReact","scheduleMicrotask","queueMicrotask","getInstanceFromNode","getNodeFromInstance","getFiberCurrentPropsFromNode","ReactFabricGlobalResponderHandler","from","to","blockNativeResponder","setIsJSResponder","_reactInternals","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONSUMER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName$1","outerType","innerType","wrapperName","displayName","functionName","name","getContextName$1","REACT_CLIENT_REFERENCE","getComponentNameFromType","$$typeof","provider","_context","context","render","outerName","lazyComponent","payload","_payload","init","_init","getWrappedName","getContextName","getComponentNameFromFiber","ReactCurrentOwner$3","ReactCurrentOwner","getNearestMountedFiber","nearestMounted","nextNode","isMounted","owner","ownerFiber","_warnedAboutRefsInRender","assertIsMounted","findCurrentFiberUsingSlowPath","parentA","parentB","nextParent","sibling","didFindChild","_child","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","doesFiberContain","parentFiber","childFiber","parentFiberAlternate","valueStack","fiberStack","createCursor","defaultValue","cursor","emptyContextObject","freeze","hasContextChanged","isContextProvider","processChildContext","parentContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","OffscreenVisible","OffscreenDetached","OffscreenPassiveEffectsConnected","isOffscreenManual","offscreenFiber","memoizedProps","mode","is","y","objectIs","isRootDehydrated","currentState","memoizedState","isDehydrated","contextStackCursor","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","c","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","nextContext","popHostContext","isHydrating","hydrationErrors","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","prepareToHydrateHostSuspenseInstance","popHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","getIsHydrating","queueHydrationError","concurrentQueues","concurrentQueuesIndex","concurrentlyUpdatedLanes","finishQueueingConcurrentUpdates","endIndex","queue","pending","markUpdateLaneFromFiberToRoot","getConcurrentlyUpdatedLanes","enqueueUpdate$1","enqueueConcurrentHookUpdate","concurrentQueue","concurrentUpdate","getRootForUpdatedFiber","enqueueConcurrentHookUpdateAndEagerlyBailout","isConcurrentlyRendering","getWorkInProgressRoot","enqueueConcurrentClassUpdate","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","isHidden","childLanes","offscreenInstance","_visibility","throwIfInfiniteUpdateLoopDetected","detectUpdateOnUnmountedFiber","warnAboutUpdateOnNotYetMountedFiberInDEV","ReactCurrentActQueue$3","ReactCurrentActQueue","firstScheduledRoot","lastScheduledRoot","didScheduleMicrotask","didScheduleMicrotask_act","mightHavePendingSyncWork","isFlushingWork","currentEventTransitionLane","ensureRootIsScheduled","scheduleImmediateTask","processRootScheduleInMicrotask","scheduleTaskForRootDuringMicrotask","isBatchingLegacy","didScheduleLegacyUpdate","flushSyncWorkOnAllRoots","flushSyncWorkAcrossRoots_impl","flushSyncWorkOnLegacyRootsOnly","onlyLegacy","didPerformSomeWork","errors","workInProgressRoot","workInProgressRootRenderLanes","getWorkInProgressRootRenderLanes","performSyncWorkOnRoot","AggregateError","throwError","bind","firstError","prev","existingCallbackNode","callbackNode","isWorkLoopSuspendedOnData","cancelPendingCommit","cancelCallback","callbackPriority","existingCallbackPriority","newCallbackPriority","fakeActCallbackNode$1","schedulerPriorityLevel","newCallbackNode","scheduleCallback$1","performConcurrentWorkOnRoot","getContinuationForRoot","originalCallbackNode","priorityLevel","executionContext","getExecutionContext","RenderContext","CommitContext","NoContext","requestTransitionLane","transition","currentEntangledLane","currentEntangledActionThenable","chainThenableValue","thenable","listeners","thenableWithOverride","status","reason","then","resolve","fulfilledThenable","rejectedThenable","peekEntangledActionLane","peekEntangledActionThenable","UpdateState","ReplaceState","ForceUpdate","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","hiddenCallbacks","callbacks","updateQueue","cloneUpdateQueue","workInProgress","currentQueue","createUpdate","enqueueUpdate","sharedQueue","componentName","isUnsafeClassRenderPhaseUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","enterDisallowedContextReadInDEV","nextState","exitDisallowedContextReadInDEV","partialState","didReadFromEntangledAsyncAction","suspendIfUpdateReadFromEntangledAsyncAction","entangledActionThenable","processUpdateQueue","pendingQueue","lastPendingUpdate","firstPendingUpdate","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","isHiddenUpdate","shouldSkipUpdate","_clone","_lastPendingUpdate","_firstPendingUpdate","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","deferHiddenCallbacks","newHiddenCallbacks","existingHiddenCallbacks","commitHiddenCallbacks","commitCallbacks","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","describeBuiltInComponentFrame","ownerFn","ownerName","describeComponentFrame","describeDebugInfoFrame","env","PossiblyWeakMap$1","WeakMap","Map","sourceInfo","describeClassComponentFrame","ctor","describeFunctionComponentFrame","describeFiber","_debugOwner","getStackByFiberInDevAndProd","debugInfo","_debugInfo","entry","message","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","getCurrentFiber","setIsRendering","rendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","setToSortedString","array","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","sortedNames","_sortedNames","_sortedNames2","_sortedNames3","_sortedNames4","_sortedNames5","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","contextTypes","childContextTypes","getChildContext","fiberArray","firstFiber","uniqueNames","typeName","hasToStringTag","toStringTag","willCoercionThrow","testStringCoercion","checkKeyStringCoercion","checkPropStringCoercion","ReactCurrentActQueue$2","getThenablesFromState","state","devState","thenables","SuspenseException","SuspenseyCommitException","noopSuspenseyCommitThenable","createThenableState","didWarnAboutUncachedPromise","isThenableResolved","noop","trackUsedThenable","thenableState","didUsePromise","trackedThenables","previous","thenableStateDev","fulfilledValue","rejectedError","checkIfUseWrappedInAsyncCatch","pendingThenable","_rejectedError","suspendedThenable","needsToResetSuspendedThenableDEV","getSuspendedThenable","checkIfUseWrappedInTryCatch","rejectedReason","thenableState$1","thenableIndexCounter$1","mergeDebugInfo","outer","inner","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","ownerHasSymbolTypeWarning","warnForMissingKey","returnFiber","_store","validated","isReactClass","isReactComponent","unwrapThenable","convertStringRefToCallbackRef","element","mixedRef","stringRef","_owner","ref","_stringRef","currentRef","refs","coerceRef","coercedRef","throwOnInvalidObjectType","newChild","childString","toString","warnOnFunctionType","invalidChild","parentName","warnOnSymbolType","resolveLazy","lazyType","createChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","pendingProps","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","elementType","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","containerInfo","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","_created","_created2","_created3","readContextDuringReconciliation","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","_matchedFiber","_matchedFiber2","_matchedFiber3","warnOnInvalidKey","knownKeys","reconcileChildrenArray","resultingFirstChild","previousNewFiber","nextOldFiber","_newFiber","_newFiber2","delete","reconcileChildrenIterator","newChildrenIterable","iteratorFn","entries","_newChildren","_step","done","step","_newFiber3","_newFiber4","reconcileSingleTextNode","reconcileSingleElement","_existing","_created4","reconcileSinglePortal","reconcileChildFibersImpl","isUnkeyedTopLevelFragment","reconcileChildFibers","firstChildFiber","mountChildFibers","resetChildReconcilerOnUnwind","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","currentTreeHiddenStackCursor","prevEntangledRenderLanesCursor","pushHiddenContext","prevEntangledRenderLanes","getEntangledRenderLanes","setEntangledRenderLanes","baseLanes","reuseHiddenContextOnStack","popHiddenContext","isCurrentTreeHidden","suspenseHandlerStackCursor","shellBoundary","getShellBoundary","pushPrimaryTreeSuspenseHandler","handler","pushSuspenseListContext","setDefaultShallowSuspenseListContext","suspenseStackCursor","pushFallbackTreeSuspenseHandler","reuseSuspenseHandlerOnStack","pushOffscreenSuspenseHandler","getSuspenseHandler","popSuspenseHandler","popSuspenseListContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","ForceSuspenseFallback","hasSuspenseListContext","flag","setShallowSuspenseListContext","shallowContext","newContext","findFirstSuspended","row","dehydrated","revealOrder","didSuspend","NoFlags","HasEffect","Insertion","Layout","Passive","ReactCurrentDispatcher$1","ReactCurrentDispatcher","ReactCurrentBatchConfig$2","ReactCurrentBatchConfig","didWarnAboutMismatchedHooksForComponent","didWarnUncachedGetSnapshot","didWarnAboutUseWrappedInTryCatch","didWarnAboutAsyncClientComponent","currentlyRenderingFiber$1","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","shouldDoubleInvokeUserFnsInHooksDEV","thenableIndexCounter","globalClientIdCounter","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","warnIfAsyncClientComponent","Component","isAsyncFunction","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","shouldDoubleRenderDEV","renderWithHooksAgain","finishRenderingHooks","ContextOnlyDispatcher","didRenderTooFewHooks","replaySuspendedComponentWithHooks","numberOfReRenders","HooksDispatcherOnRerenderInDEV","bailoutHooks","resetHooksAfterThrow","resetHooksOnUnwind","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","currentFiber","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","useThenable","use","usable","readContext","basicStateReducer","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","updateReducer","updateReducerImpl","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","revertLane","hasEagerState","eagerState","markWorkInProgressReceivedUpdate","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","nextSnapshot","cachedSnapshot","rootRenderLanes","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","updateStoreInstance","createEffectInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","scheduleUpdateOnFiber","mountStateImpl","initialStateInitializer","mountState","dispatchSetState","updateState","rerenderState","effect","firstEffect","destroy","mountRef","initialValue","_ref2","updateRef","mountEffectImpl","fiberFlags","hookFlags","updateEffectImpl","prevEffect","mountInsertionEffect","updateInsertionEffect","mountLayoutEffect","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","_inst","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","mountDeferredValueImpl","updateDeferredValue","resolvedCurrentHook","updateDeferredValueImpl","rerenderDeferredValue","deferredLane","requestDeferredLane","resultValue","shouldDeferValue","startTransition","pendingState","finishedState","options","previousPriority","prevTransition","currentTransition","_callbacks","_updatedFibers","thenableForFinishedState","updatedFibersCount","mountTransition","stateHook","start","updateTransition","_updateState2","booleanOrThenable","isPending","rerenderTransition","_rerenderState","mountId","identifierPrefix","id","globalClientId","updateId","requestUpdateLane","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useSyncExternalStore","useId","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","resolveDefaultProps","baseProps","defaultProps","fakeInternalInstance","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","warnOnInvalidCallback","warnOnUndefinedDerivedState","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","shouldComponentUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","adoptClassInstance","updater","_reactInternalInstance","constructClassInstance","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","_componentName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","resumeMountClassInstance","oldContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","unresolvedNewProps","CapturedStacks","createCapturedValueAtFiber","source","capturedStack","digest","createCapturedValueFromError","ReactFiberErrorDialog","showErrorDialog","boundary","errorInfo","capturedError","componentStack","errorBoundary","logCapturedError","logError","componentNameMessage","errorBoundaryMessage","errorBoundaryName","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","error$1","markFailedErrorBoundaryForHotReloading","componentDidCatch","markLegacyErrorBoundaryAsFailed","resetSuspendedComponent","currentSource","markSuspenseBoundaryShouldCapture","suspenseBoundary","currentSourceFiber","throwException","restorePendingUpdaters","wakeable","renderDidSuspendDelayIfPossible","renderDidSuspend","isSuspenseyResource","retryQueue","attachPingListener","_isSuspenseyResource","offscreenQueue","newOffscreenQueue","transitions","markerInstances","_retryQueue","uncaughtSuspenseError","renderDidError","_errorInfo","isAlreadyFailedLegacyErrorBoundary","_lane","_update","ReactCurrentOwner$2","SelectiveHydrationException","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","didWarnAboutDefaultPropsOnFunctionComponent","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","propsWithoutRef","prepareToReadContext","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","updateFunctionComponent","updateOffscreenComponent","nextIsDetached","_pendingVisibility","markRef","nextBaseLanes","currentChildLanes","lanesWeJustAttempted","remainingChildLanes","deferHiddenOffscreenComponent","cachePool","_nextBaseLanes","_nextState","updateMode","updateProfiler","replayFunctionComponent","updateClassComponent","shouldError","_instance","tempInstance","hasContext","resetSuspendedCurrentOnMountInLegacyMode","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","updateHostRoot","prevChildren","updateHostComponent$1","updateHostText$1","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","_componentName2","warningKey","_componentName3","_componentName4","_componentName5","SUSPENDED_MARKER","treeContext","retryLane","mountSuspenseOffscreenState","getSuspendedCache","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseState","suspenseContext","getRemainingWorkInPrimaryTree","primaryTreeDidDefer","peekDeferredLane","updateSuspenseComponent","shouldSuspend","showFallback","didPrimaryChildrenDefer","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","mountSuspensePrimaryChildren","_dehydrated","updateDehydratedSuspenseComponent","_nextFallbackChildren","_nextPrimaryChildren","fallbackChildFragment","updateSuspenseFallbackChildren","_primaryChildFragment2","_nextPrimaryChildren2","_primaryChildFragment3","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","treeBaseDuration","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","subtreeFlags","retrySuspenseComponentWithoutHydrating","recoverableError","mountSuspenseFallbackAfterRetryWithoutHydrating","fiberMode","suspenseInstance","_getSuspenseInstanceF","capturedValue","attemptHydrationAtLane","retryDehydratedSuspenseBoundary","_capturedValue","_primaryChildFragment4","scheduleSuspenseWorkOnFiber","propagationRoot","scheduleContextWorkOnParentPath","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","validateTailOptions","tailMode","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","validateSuspenseListChildren","childrenIterator","_i","initSuspenseListRenderState","isBackwards","tail","renderState","renderingStartTime","last","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","_tail","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","newValue","pushProvider","oldValue","propagateContextChange","updateContextConsumer","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","_hasChildWork","beginWork","_debugNeedsRemount","unresolvedProps","_Component","_unresolvedProps","_resolvedProps","_unresolvedProps2","_resolvedProps2","_type","_unresolvedProps3","_resolvedProps3","_Component2","_unresolvedProps4","_resolvedProps4","valueCursor","renderer2CursorDEV","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","providerFiber","_currentValue2","_currentRenderer2","popProvider","currentValue","currentRenderer2","propagateContextChange_eager","nextFiber","list","dependency","firstContext","parentSuspense","_alternate","readContextForConsumer","consumer","contextItem","memoizedValue","ReactCurrentBatchConfig$1","requestCurrentTransition","handleAsyncAction","notifyTransitionCallbacks","markUpdate","doesRequireClone","completedWork","didBailout","appendAllChildren","needsVisibilityToggle","_node","appendAllChildrenToContainer","containerChildSet","_instance2","_needsVisibilityToggle","updateHostContainer","portalOrRoot","pendingChildren","updateHostComponent","currentInstance","_oldProps","requiresClone","newInstance","preloadInstanceAndSuspendIfNeeded","scheduleRetryEffect","wakeables","updateHostText","oldText","newText","currentHostContext","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","_tailNode","_lastTailNode","bubbleProperties","newChildLanes","_treeBaseDuration","_child2","_child3","completeDehydratedSuspenseBoundary","wasHydrated","isTimedOutSuspense","_isTimedOutSuspense","_primaryChildFragment","completeWork","fiberRoot","pendingContext","_type2","_currentHostContext","_wasHydrated2","_rootContainerInstance","_instance3","_rootContainerInstance2","_currentHostContext2","_wasHydrated3","fallthroughToNormalSuspensePath","nextDidTimeout","prevDidTimeout","_offscreenFiber2","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","getRenderTargetTime","_suspended","_retryQueue2","previousSibling","nextIsHidden","_prevState","prevIsHidden","_retryQueue3","unwindWork","_flags","_flags2","_flags3","unwindInterruptedWork","interruptedWork","didWarnAboutUndefinedSnapshotBeforeUpdate","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","inProgressLanes","inProgressRoot","shouldProfile","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","nearestMountedAncestor","captureCommitPhaseError","safelyAttachRef","commitAttachRef","safelyDetachRef","refCleanup","finishedWork","retVal","safelyCallDestroy","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","commitBeforeMutationEffects_complete","commitBeforeMutationEffectsOnFiber","snapshot","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","setIsRunningInsertionEffect","commitHookEffectListMount","commitPassiveEffectDurations","finishedRoot","_finishedWork$memoize","onPostCommit","commitHookLayoutEffects","commitClassLayoutLifecycles","commitClassCallbacks","commitHostComponentMount","commitProfilerUpdate","_finishedWork$memoize2","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitLayoutEffectOnFiber","committedLanes","recursivelyTraverseLayoutEffects","isModernRoot","newOffscreenSubtreeIsHidden","wasHidden","newOffscreenSubtreeWasHidden","prevOffscreenSubtreeIsHidden","prevOffscreenSubtreeWasHidden","includeWorkInProgressEffects","recursivelyTraverseReappearLayoutEffects","instanceToUse","detachFiberMutation","detachFiberAfterEffects","emptyPortalContainer","commitPlacement","commitDeletionEffects","deletedFiber","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","commitSuspenseCallback","getRetryCache","retryCache","_retryCache","detachOffscreenInstance","attachOffscreenInstance","attachSuspenseRetryListeners","retry","resolveRetryWakeable","commitMutationEffects","commitMutationEffectsOnFiber","recursivelyTraverseMutationEffects","prevDebugFiber","commitReconciliationEffects","_containerInfo","_pendingChildren","isShowingFallback","wasShowingFallback","markCommitTimeOfFallback","isUpdate","wasHiddenByAncestorOffscreen","recursivelyTraverseDisappearLayoutEffects","commitLayoutEffects","disappearLayoutEffects","reappearLayoutEffects","offscreenState","childShouldIncludeWorkInProgressEffects","commitHookPassiveMountEffects","commitPassiveMountEffects","committedTransitions","commitPassiveMountOnFiber","recursivelyTraversePassiveMountEffects","recursivelyTraverseReconnectPassiveEffects","reconnectPassiveEffects","_instance4","commitPassiveUnmountEffects","commitPassiveUnmountOnFiber","suspenseyCommitFlag","accumulateSuspenseyCommit","accumulateSuspenseyCommitOnFiber","recursivelyAccumulateSuspenseyCommit","prevFlags","detachAlternateSiblings","previousFiber","detachedChild","detachedSibling","commitHookPassiveUnmountEffects","recursivelyTraversePassiveUnmountEffects","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","recursivelyTraverseDisconnectPassiveEffects","disconnectPassiveEffect","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","invokeLayoutEffectMountInDEV","invokePassiveEffectMountInDEV","invokeLayoutEffectUnmountInDEV","invokePassiveEffectUnmountInDEV","symbolFor","ReactCurrentActQueue$1","isLegacyActEnvironment","IS_REACT_ACT_ENVIRONMENT","isConcurrentActEnvironment","isReactActEnvironmentGlobal","PossiblyWeakMap","ReactCurrentOwner$1","BatchedContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","NotSuspended","SuspendedOnError","SuspendedOnData","SuspendedOnImmediate","SuspendedOnInstance","SuspendedOnInstanceAndReadyToContinue","SuspendedOnDeprecatedThrowPromise","SuspendedAndReadyToContinue","SuspendedOnHydration","workInProgressSuspendedReason","workInProgressThrownValue","workInProgressRootDidAttachPingListener","entangledRenderLanes","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressDeferredLane","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","workInProgressRootDidIncludeRecursiveRenderUpdate","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","isFlushingPassiveEffects","didScheduleUpdateDuringPassiveEffects","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","rootWithPassiveNestedUpdates","isRunningInsertionEffect","batchConfigTransition","actionScopeLane","eventLane","requestRetryLane","isPrerendering","suspenseHandler","prepareFreshStack","markRootSuspended","markRootUpdated","warnAboutRenderPhaseUpdatesInDEV","warnIfUpdatesNotWrappedWithActDEV","didTimeout","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","exitStatus","renderRootConcurrent","renderRootSync","renderWasConcurrent","isRenderConsistentWithExternalStores","errorRetryLanes","recoverFromConcurrentError","fatalError","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","wasRootDehydrated","rootWorkInProgress","errorsFromSecondAttempt","shouldForceFlushFallbacksInDEV","commitRoot","msUntilTimeout","timeoutHandle","commitRootWhenReady","recoverableErrors","didIncludeRenderPhaseUpdate","schedulePendingCommit","checks","renderedValue","updatedLanes","markRootPinged","batchedUpdates","prevExecutionContext","flushSync","newEntangledRenderLanes","resetWorkInProgressStack","resetSuspendedWorkLoopOnUnwind","handleThrow","thrownValue","shouldRemainOnPreviousScreen","isWakeable","erroredWork","pushDispatcher","popDispatcher","didSuspendInShell","unitOfWork","throwAndUnwindWorkLoop","workLoopSync","performUnitOfWork","resumeOrUnwind","replaySuspendedUnitOfWork","onResolution","_thenable","hostFiber","isReady","completeUnitOfWork","workLoopConcurrent","isProfilingMode","didFatal","panicOnRootError","unwindUnitOfWork","siblingFiber","incompleteWork","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","scheduleCallback","subtreeHasEffects","rootHasEffect","rootDidHavePassiveEffects","commitDoubleInvokeEffectsInDEV","onRecoverableError","makeErrorInfo","renderPriority","priority","flushPassiveEffectsImpl","profilerEffects","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","pingCache","threadIDs","ping","pingSuspendedRoot","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","hasPassiveEffects","legacyCommitDoubleInvokeEffectsInDEV","invokeEffectsInDev","invokeEffectFn","subtreeRoot","primarySubtreeFlag","didWarnStateUpdateForNotYetMountedComponent","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","renderingComponentName","dedupeKey","setStateComponentName","schedulingFiber","fakeActCallbackNode","actQueue","isRunning","resolveFamily","failedBoundaries","setRefreshHandler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","findHostInstancesForRefresh","families","hostInstances","types","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","FiberNode","Number","NaN","createFiber","shouldConstruct","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","elements","primaryChildInstance","_pendingMarkers","_transitions","detach","attach","content","FiberRootNode","hydrate","formState","incompleteTransitions","_debugRootType","createFiberRoot","initialChildren","hydrationCallbacks","transitionCallbacks","uninitializedFiber","_initialState","cache","ReactVersion","createPortal$1","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","findHostInstanceWithWarning","methodName","createContainer","current$1","getPublicRootInstance","containerFiber","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","updated","splice","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldErrorImpl","newShouldSuspendImpl","findHostInstanceByFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","version","rendererPackageName","rendererConfig","currentDispatcherRef","reconcilerVersion","instanceCache","getInstanceFromTag","findHostInstance_DEPRECATED","componentOrHandle","hostInstance","findNodeHandle","getNativeTagFromPublicInstance","dispatchCommand","handle","command","getNodeFromPublicInstance","UIManager","dispatchViewManagerCommand","sendAccessibilityEvent","eventType","legacySendAccessibilityEvent","getNodeFromInternalInstanceHandle","isChildPublicInstance","childInstance","_internalFiberInstanceHandleDEV","parentInternalInstanceHandle","getInternalInstanceHandleFromPublicInstance","childInternalInstanceHandle","emptyObject","createHierarchy","fiberHierarchy","getInspectorData","getHostProps","measure","getHostNode","hostNode","host","getInspectorDataForInstance","closestInstance","hierarchy","selectedIndex","getOwnerHierarchy","lastNonHostInstance","traverseOwnerTreeUp","getInspectorDataForViewTag","viewTag","getInspectorDataForViewAtPoint","inspectedView","locationX","locationY","fabricNode","findNodeAtPoint","pointerY","frame","left","top","width","height","nativeViewTag","inspectorData","touchedViewTag","findSubviewIn","containerTag","concurrentRoot","roots","unmountComponentAtNode","stopSurface","createPortal","exports","registerInternalModuleStop"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Renderer/implementations/ReactFabric-dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n * @nolint\n * @providesModule ReactFabric-dev\n * @preventMunge\n * @generated SignedSource<<b2518f8fc782ae207960d73af4bbc7b4>>\n */\n\n\"use strict\";\n\nif (__DEV__) {\n  (function () {\n    \"use strict\";\n\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n    if (\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" &&\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n        \"function\"\n    ) {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n    }\n    var React = require(\"react\");\n    require(\"react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore\");\n    var ReactNativePrivateInterface = require(\"react-native/Libraries/ReactPrivate/ReactNativePrivateInterface\");\n    var Scheduler = require(\"scheduler\");\n\n    var ReactSharedInternals =\n      React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n    // by calls to these methods by a Babel plugin.\n    //\n    // In PROD (or in packages without access to React internals),\n    // they are left as they are instead.\n\n    function warn(format) {\n      {\n        {\n          for (\n            var _len = arguments.length,\n              args = new Array(_len > 1 ? _len - 1 : 0),\n              _key = 1;\n            _key < _len;\n            _key++\n          ) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          printWarning(\"warn\", format, args);\n        }\n      }\n    }\n    function error(format) {\n      {\n        {\n          for (\n            var _len2 = arguments.length,\n              args = new Array(_len2 > 1 ? _len2 - 1 : 0),\n              _key2 = 1;\n            _key2 < _len2;\n            _key2++\n          ) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          printWarning(\"error\", format, args);\n        }\n      }\n    }\n\n    function printWarning(level, format, args) {\n      // When changing this logic, you might want to also\n      // update consoleWithStackDev.www.js as well.\n      {\n        var ReactDebugCurrentFrame =\n          ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n        if (stack !== \"\") {\n          format += \"%s\";\n          args = args.concat([stack]);\n        } // eslint-disable-next-line react-internal/safe-string-coercion\n\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        }); // Careful: RN currently depends on this prefix\n\n        argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n        // breaks IE9: https://github.com/facebook/react/issues/13610\n        // eslint-disable-next-line react-internal/no-production-logging\n\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n\n    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n    function isArray(a) {\n      return isArrayImpl(a);\n    }\n\n    var hasError = false;\n    var caughtError = null;\n    var getFiberCurrentPropsFromNode$1 = null;\n    var getInstanceFromNode$1 = null;\n    var getNodeFromInstance$1 = null;\n    function setComponentTree(\n      getFiberCurrentPropsFromNodeImpl,\n      getInstanceFromNodeImpl,\n      getNodeFromInstanceImpl\n    ) {\n      getFiberCurrentPropsFromNode$1 = getFiberCurrentPropsFromNodeImpl;\n      getInstanceFromNode$1 = getInstanceFromNodeImpl;\n      getNodeFromInstance$1 = getNodeFromInstanceImpl;\n\n      {\n        if (!getNodeFromInstance$1 || !getInstanceFromNode$1) {\n          error(\n            \"Injected \" +\n              \"module is missing getNodeFromInstance or getInstanceFromNode.\"\n          );\n        }\n      }\n    }\n\n    function validateEventDispatches(event) {\n      {\n        var dispatchListeners = event._dispatchListeners;\n        var dispatchInstances = event._dispatchInstances;\n        var listenersIsArr = isArray(dispatchListeners);\n        var listenersLen = listenersIsArr\n          ? dispatchListeners.length\n          : dispatchListeners\n          ? 1\n          : 0;\n        var instancesIsArr = isArray(dispatchInstances);\n        var instancesLen = instancesIsArr\n          ? dispatchInstances.length\n          : dispatchInstances\n          ? 1\n          : 0;\n\n        if (\n          instancesIsArr !== listenersIsArr ||\n          instancesLen !== listenersLen\n        ) {\n          error(\"EventPluginUtils: Invalid `event`.\");\n        }\n      }\n    }\n    /**\n     * Dispatch the event to the listener.\n     * @param {SyntheticEvent} event SyntheticEvent to handle\n     * @param {function} listener Application-level callback\n     * @param {*} inst Internal component instance\n     */\n\n    function executeDispatch(event, listener, inst) {\n      event.currentTarget = getNodeFromInstance$1(inst);\n\n      try {\n        listener(event);\n      } catch (error) {\n        if (!hasError) {\n          hasError = true;\n          caughtError = error;\n        }\n      }\n\n      event.currentTarget = null;\n    }\n    /**\n     * Standard/simple iteration through an event's collected dispatches.\n     */\n\n    function executeDispatchesInOrder(event) {\n      var dispatchListeners = event._dispatchListeners;\n      var dispatchInstances = event._dispatchInstances;\n\n      {\n        validateEventDispatches(event);\n      }\n\n      if (isArray(dispatchListeners)) {\n        for (var i = 0; i < dispatchListeners.length; i++) {\n          if (event.isPropagationStopped()) {\n            break;\n          } // Listeners and Instances are two parallel arrays that are always in sync.\n\n          executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);\n        }\n      } else if (dispatchListeners) {\n        executeDispatch(event, dispatchListeners, dispatchInstances);\n      }\n\n      event._dispatchListeners = null;\n      event._dispatchInstances = null;\n    }\n    /**\n     * Standard/simple iteration through an event's collected dispatches, but stops\n     * at the first dispatch execution returning true, and returns that id.\n     *\n     * @return {?string} id of the first dispatch execution who's listener returns\n     * true, or null if no listener returned true.\n     */\n\n    function executeDispatchesInOrderStopAtTrueImpl(event) {\n      var dispatchListeners = event._dispatchListeners;\n      var dispatchInstances = event._dispatchInstances;\n\n      {\n        validateEventDispatches(event);\n      }\n\n      if (isArray(dispatchListeners)) {\n        for (var i = 0; i < dispatchListeners.length; i++) {\n          if (event.isPropagationStopped()) {\n            break;\n          } // Listeners and Instances are two parallel arrays that are always in sync.\n\n          if (dispatchListeners[i](event, dispatchInstances[i])) {\n            return dispatchInstances[i];\n          }\n        }\n      } else if (dispatchListeners) {\n        if (dispatchListeners(event, dispatchInstances)) {\n          return dispatchInstances;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * @see executeDispatchesInOrderStopAtTrueImpl\n     */\n\n    function executeDispatchesInOrderStopAtTrue(event) {\n      var ret = executeDispatchesInOrderStopAtTrueImpl(event);\n      event._dispatchInstances = null;\n      event._dispatchListeners = null;\n      return ret;\n    }\n    /**\n     * Execution of a \"direct\" dispatch - there must be at most one dispatch\n     * accumulated on the event or it is considered an error. It doesn't really make\n     * sense for an event with multiple dispatches (bubbled) to keep track of the\n     * return values at each dispatch execution, but it does tend to make sense when\n     * dealing with \"direct\" dispatches.\n     *\n     * @return {*} The return value of executing the single dispatch.\n     */\n\n    function executeDirectDispatch(event) {\n      {\n        validateEventDispatches(event);\n      }\n\n      var dispatchListener = event._dispatchListeners;\n      var dispatchInstance = event._dispatchInstances;\n\n      if (isArray(dispatchListener)) {\n        throw new Error(\"Invalid `event`.\");\n      }\n\n      event.currentTarget = dispatchListener\n        ? getNodeFromInstance$1(dispatchInstance)\n        : null;\n      var res = dispatchListener ? dispatchListener(event) : null;\n      event.currentTarget = null;\n      event._dispatchListeners = null;\n      event._dispatchInstances = null;\n      return res;\n    }\n    /**\n     * @param {SyntheticEvent} event\n     * @return {boolean} True iff number of dispatches accumulated is greater than 0.\n     */\n\n    function hasDispatches(event) {\n      return !!event._dispatchListeners;\n    }\n    function rethrowCaughtError() {\n      if (hasError) {\n        var error = caughtError;\n        hasError = false;\n        caughtError = null;\n        throw error;\n      }\n    }\n\n    var assign = Object.assign;\n\n    var EVENT_POOL_SIZE = 10;\n    /**\n     * @interface Event\n     * @see http://www.w3.org/TR/DOM-Level-3-Events/\n     */\n\n    var EventInterface = {\n      type: null,\n      target: null,\n      // currentTarget is set when dispatching; no use in copying it here\n      currentTarget: function () {\n        return null;\n      },\n      eventPhase: null,\n      bubbles: null,\n      cancelable: null,\n      timeStamp: function (event) {\n        return event.timeStamp || Date.now();\n      },\n      defaultPrevented: null,\n      isTrusted: null\n    };\n\n    function functionThatReturnsTrue() {\n      return true;\n    }\n\n    function functionThatReturnsFalse() {\n      return false;\n    }\n    /**\n     * Synthetic events are dispatched by event plugins, typically in response to a\n     * top-level event delegation handler.\n     *\n     * These systems should generally use pooling to reduce the frequency of garbage\n     * collection. The system should check `isPersistent` to determine whether the\n     * event should be released into the pool after being dispatched. Users that\n     * need a persisted event should invoke `persist`.\n     *\n     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n     * normalizing browser quirks. Subclasses do not necessarily have to implement a\n     * DOM interface; custom application-specific events can also subclass this.\n     *\n     * @param {object} dispatchConfig Configuration used to dispatch this event.\n     * @param {*} targetInst Marker identifying the event target.\n     * @param {object} nativeEvent Native browser event.\n     * @param {DOMEventTarget} nativeEventTarget Target node.\n     */\n\n    function SyntheticEvent(\n      dispatchConfig,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget\n    ) {\n      {\n        // these have a getter/setter for warnings\n        delete this.nativeEvent;\n        delete this.preventDefault;\n        delete this.stopPropagation;\n        delete this.isDefaultPrevented;\n        delete this.isPropagationStopped;\n      }\n\n      this.dispatchConfig = dispatchConfig;\n      this._targetInst = targetInst;\n      this.nativeEvent = nativeEvent;\n      this._dispatchListeners = null;\n      this._dispatchInstances = null;\n      var Interface = this.constructor.Interface;\n\n      for (var propName in Interface) {\n        if (!Interface.hasOwnProperty(propName)) {\n          continue;\n        }\n\n        {\n          delete this[propName]; // this has a getter/setter for warnings\n        }\n\n        var normalize = Interface[propName];\n\n        if (normalize) {\n          this[propName] = normalize(nativeEvent);\n        } else {\n          if (propName === \"target\") {\n            this.target = nativeEventTarget;\n          } else {\n            this[propName] = nativeEvent[propName];\n          }\n        }\n      }\n\n      var defaultPrevented =\n        nativeEvent.defaultPrevented != null\n          ? nativeEvent.defaultPrevented\n          : nativeEvent.returnValue === false;\n\n      if (defaultPrevented) {\n        this.isDefaultPrevented = functionThatReturnsTrue;\n      } else {\n        this.isDefaultPrevented = functionThatReturnsFalse;\n      }\n\n      this.isPropagationStopped = functionThatReturnsFalse;\n      return this;\n    }\n\n    assign(SyntheticEvent.prototype, {\n      preventDefault: function () {\n        this.defaultPrevented = true;\n        var event = this.nativeEvent;\n\n        if (!event) {\n          return;\n        }\n\n        if (event.preventDefault) {\n          event.preventDefault();\n        } else if (typeof event.returnValue !== \"unknown\") {\n          event.returnValue = false;\n        }\n\n        this.isDefaultPrevented = functionThatReturnsTrue;\n      },\n      stopPropagation: function () {\n        var event = this.nativeEvent;\n\n        if (!event) {\n          return;\n        }\n\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        } else if (typeof event.cancelBubble !== \"unknown\") {\n          // The ChangeEventPlugin registers a \"propertychange\" event for\n          // IE. This event does not support bubbling or cancelling, and\n          // any references to cancelBubble throw \"Member not found\".  A\n          // typeof check of \"unknown\" circumvents this issue (and is also\n          // IE specific).\n          event.cancelBubble = true;\n        }\n\n        this.isPropagationStopped = functionThatReturnsTrue;\n      },\n\n      /**\n       * We release all dispatched `SyntheticEvent`s after each event loop, adding\n       * them back into the pool. This allows a way to hold onto a reference that\n       * won't be added back into the pool.\n       */\n      persist: function () {\n        this.isPersistent = functionThatReturnsTrue;\n      },\n\n      /**\n       * Checks if this event should be released back into the pool.\n       *\n       * @return {boolean} True if this should not be released, false otherwise.\n       */\n      isPersistent: functionThatReturnsFalse,\n\n      /**\n       * `PooledClass` looks for `destructor` on each instance it releases.\n       */\n      destructor: function () {\n        var Interface = this.constructor.Interface;\n\n        for (var propName in Interface) {\n          {\n            Object.defineProperty(\n              this,\n              propName,\n              getPooledWarningPropertyDefinition(propName, Interface[propName])\n            );\n          }\n        }\n\n        this.dispatchConfig = null;\n        this._targetInst = null;\n        this.nativeEvent = null;\n        this.isDefaultPrevented = functionThatReturnsFalse;\n        this.isPropagationStopped = functionThatReturnsFalse;\n        this._dispatchListeners = null;\n        this._dispatchInstances = null;\n\n        {\n          Object.defineProperty(\n            this,\n            \"nativeEvent\",\n            getPooledWarningPropertyDefinition(\"nativeEvent\", null)\n          );\n          Object.defineProperty(\n            this,\n            \"isDefaultPrevented\",\n            getPooledWarningPropertyDefinition(\n              \"isDefaultPrevented\",\n              functionThatReturnsFalse\n            )\n          );\n          Object.defineProperty(\n            this,\n            \"isPropagationStopped\",\n            getPooledWarningPropertyDefinition(\n              \"isPropagationStopped\",\n              functionThatReturnsFalse\n            )\n          );\n          Object.defineProperty(\n            this,\n            \"preventDefault\",\n            getPooledWarningPropertyDefinition(\"preventDefault\", function () {})\n          );\n          Object.defineProperty(\n            this,\n            \"stopPropagation\",\n            getPooledWarningPropertyDefinition(\n              \"stopPropagation\",\n              function () {}\n            )\n          );\n        }\n      }\n    });\n    SyntheticEvent.Interface = EventInterface;\n    /**\n     * Helper to reduce boilerplate when creating subclasses.\n     */\n\n    SyntheticEvent.extend = function (Interface) {\n      var Super = this;\n\n      var E = function () {};\n\n      E.prototype = Super.prototype;\n      var prototype = new E();\n\n      function Class() {\n        return Super.apply(this, arguments);\n      }\n\n      assign(prototype, Class.prototype);\n      Class.prototype = prototype;\n      Class.prototype.constructor = Class;\n      Class.Interface = assign({}, Super.Interface, Interface);\n      Class.extend = Super.extend;\n      addEventPoolingTo(Class);\n      return Class;\n    };\n\n    addEventPoolingTo(SyntheticEvent);\n    /**\n     * Helper to nullify syntheticEvent instance properties when destructing\n     *\n     * @param {String} propName\n     * @param {?object} getVal\n     * @return {object} defineProperty object\n     */\n\n    function getPooledWarningPropertyDefinition(propName, getVal) {\n      function set(val) {\n        var action = isFunction ? \"setting the method\" : \"setting the property\";\n        warn(action, \"This is effectively a no-op\");\n        return val;\n      }\n\n      function get() {\n        var action = isFunction\n          ? \"accessing the method\"\n          : \"accessing the property\";\n        var result = isFunction\n          ? \"This is a no-op function\"\n          : \"This is set to null\";\n        warn(action, result);\n        return getVal;\n      }\n\n      function warn(action, result) {\n        {\n          error(\n            \"This synthetic event is reused for performance reasons. If you're seeing this, \" +\n              \"you're %s `%s` on a released/nullified synthetic event. %s. \" +\n              \"If you must keep the original synthetic event around, use event.persist(). \" +\n              \"See https://react.dev/link/event-pooling for more information.\",\n            action,\n            propName,\n            result\n          );\n        }\n      }\n\n      var isFunction = typeof getVal === \"function\";\n      return {\n        configurable: true,\n        set: set,\n        get: get\n      };\n    }\n\n    function createOrGetPooledEvent(\n      dispatchConfig,\n      targetInst,\n      nativeEvent,\n      nativeInst\n    ) {\n      var EventConstructor = this;\n\n      if (EventConstructor.eventPool.length) {\n        var instance = EventConstructor.eventPool.pop();\n        EventConstructor.call(\n          instance,\n          dispatchConfig,\n          targetInst,\n          nativeEvent,\n          nativeInst\n        );\n        return instance;\n      }\n\n      return new EventConstructor(\n        dispatchConfig,\n        targetInst,\n        nativeEvent,\n        nativeInst\n      );\n    }\n\n    function releasePooledEvent(event) {\n      var EventConstructor = this;\n\n      if (!(event instanceof EventConstructor)) {\n        throw new Error(\n          \"Trying to release an event instance into a pool of a different type.\"\n        );\n      }\n\n      event.destructor();\n\n      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {\n        EventConstructor.eventPool.push(event);\n      }\n    }\n\n    function addEventPoolingTo(EventConstructor) {\n      EventConstructor.getPooled = createOrGetPooledEvent;\n      EventConstructor.eventPool = [];\n      EventConstructor.release = releasePooledEvent;\n    }\n\n    /**\n     * `touchHistory` isn't actually on the native event, but putting it in the\n     * interface will ensure that it is cleaned up when pooled/destroyed. The\n     * `ResponderEventPlugin` will populate it appropriately.\n     */\n\n    var ResponderSyntheticEvent = SyntheticEvent.extend({\n      touchHistory: function (nativeEvent) {\n        return null; // Actually doesn't even look at the native event.\n      }\n    });\n\n    var TOP_TOUCH_START = \"topTouchStart\";\n    var TOP_TOUCH_MOVE = \"topTouchMove\";\n    var TOP_TOUCH_END = \"topTouchEnd\";\n    var TOP_TOUCH_CANCEL = \"topTouchCancel\";\n    var TOP_SCROLL = \"topScroll\";\n    var TOP_SELECTION_CHANGE = \"topSelectionChange\";\n    function isStartish(topLevelType) {\n      return topLevelType === TOP_TOUCH_START;\n    }\n    function isMoveish(topLevelType) {\n      return topLevelType === TOP_TOUCH_MOVE;\n    }\n    function isEndish(topLevelType) {\n      return (\n        topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL\n      );\n    }\n    var startDependencies = [TOP_TOUCH_START];\n    var moveDependencies = [TOP_TOUCH_MOVE];\n    var endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];\n\n    /**\n     * Tracks the position and time of each active touch by `touch.identifier`. We\n     * should typically only see IDs in the range of 1-20 because IDs get recycled\n     * when touches end and start again.\n     */\n\n    var MAX_TOUCH_BANK = 20;\n    var touchBank = [];\n    var touchHistory = {\n      touchBank: touchBank,\n      numberActiveTouches: 0,\n      // If there is only one active touch, we remember its location. This prevents\n      // us having to loop through all of the touches all the time in the most\n      // common case.\n      indexOfSingleActiveTouch: -1,\n      mostRecentTimeStamp: 0\n    };\n\n    function timestampForTouch(touch) {\n      // The legacy internal implementation provides \"timeStamp\", which has been\n      // renamed to \"timestamp\". Let both work for now while we iron it out\n      // TODO (evv): rename timeStamp to timestamp in internal code\n      return touch.timeStamp || touch.timestamp;\n    }\n    /**\n     * TODO: Instead of making gestures recompute filtered velocity, we could\n     * include a built in velocity computation that can be reused globally.\n     */\n\n    function createTouchRecord(touch) {\n      return {\n        touchActive: true,\n        startPageX: touch.pageX,\n        startPageY: touch.pageY,\n        startTimeStamp: timestampForTouch(touch),\n        currentPageX: touch.pageX,\n        currentPageY: touch.pageY,\n        currentTimeStamp: timestampForTouch(touch),\n        previousPageX: touch.pageX,\n        previousPageY: touch.pageY,\n        previousTimeStamp: timestampForTouch(touch)\n      };\n    }\n\n    function resetTouchRecord(touchRecord, touch) {\n      touchRecord.touchActive = true;\n      touchRecord.startPageX = touch.pageX;\n      touchRecord.startPageY = touch.pageY;\n      touchRecord.startTimeStamp = timestampForTouch(touch);\n      touchRecord.currentPageX = touch.pageX;\n      touchRecord.currentPageY = touch.pageY;\n      touchRecord.currentTimeStamp = timestampForTouch(touch);\n      touchRecord.previousPageX = touch.pageX;\n      touchRecord.previousPageY = touch.pageY;\n      touchRecord.previousTimeStamp = timestampForTouch(touch);\n    }\n\n    function getTouchIdentifier(_ref) {\n      var identifier = _ref.identifier;\n\n      if (identifier == null) {\n        throw new Error(\"Touch object is missing identifier.\");\n      }\n\n      {\n        if (identifier > MAX_TOUCH_BANK) {\n          error(\n            \"Touch identifier %s is greater than maximum supported %s which causes \" +\n              \"performance issues backfilling array locations for all of the indices.\",\n            identifier,\n            MAX_TOUCH_BANK\n          );\n        }\n      }\n\n      return identifier;\n    }\n\n    function recordTouchStart(touch) {\n      var identifier = getTouchIdentifier(touch);\n      var touchRecord = touchBank[identifier];\n\n      if (touchRecord) {\n        resetTouchRecord(touchRecord, touch);\n      } else {\n        touchBank[identifier] = createTouchRecord(touch);\n      }\n\n      touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n    }\n\n    function recordTouchMove(touch) {\n      var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n      if (touchRecord) {\n        touchRecord.touchActive = true;\n        touchRecord.previousPageX = touchRecord.currentPageX;\n        touchRecord.previousPageY = touchRecord.currentPageY;\n        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n        touchRecord.currentPageX = touch.pageX;\n        touchRecord.currentPageY = touch.pageY;\n        touchRecord.currentTimeStamp = timestampForTouch(touch);\n        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n      } else {\n        {\n          warn(\n            \"Cannot record touch move without a touch start.\\n\" +\n              \"Touch Move: %s\\n\" +\n              \"Touch Bank: %s\",\n            printTouch(touch),\n            printTouchBank()\n          );\n        }\n      }\n    }\n\n    function recordTouchEnd(touch) {\n      var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n      if (touchRecord) {\n        touchRecord.touchActive = false;\n        touchRecord.previousPageX = touchRecord.currentPageX;\n        touchRecord.previousPageY = touchRecord.currentPageY;\n        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n        touchRecord.currentPageX = touch.pageX;\n        touchRecord.currentPageY = touch.pageY;\n        touchRecord.currentTimeStamp = timestampForTouch(touch);\n        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n      } else {\n        {\n          warn(\n            \"Cannot record touch end without a touch start.\\n\" +\n              \"Touch End: %s\\n\" +\n              \"Touch Bank: %s\",\n            printTouch(touch),\n            printTouchBank()\n          );\n        }\n      }\n    }\n\n    function printTouch(touch) {\n      return JSON.stringify({\n        identifier: touch.identifier,\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        timestamp: timestampForTouch(touch)\n      });\n    }\n\n    function printTouchBank() {\n      var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n\n      if (touchBank.length > MAX_TOUCH_BANK) {\n        printed += \" (original size: \" + touchBank.length + \")\";\n      }\n\n      return printed;\n    }\n\n    var instrumentationCallback;\n    var ResponderTouchHistoryStore = {\n      /**\n       * Registers a listener which can be used to instrument every touch event.\n       */\n      instrument: function (callback) {\n        instrumentationCallback = callback;\n      },\n      recordTouchTrack: function (topLevelType, nativeEvent) {\n        if (instrumentationCallback != null) {\n          instrumentationCallback(topLevelType, nativeEvent);\n        }\n\n        if (isMoveish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchMove);\n        } else if (isStartish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchStart);\n          touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n          if (touchHistory.numberActiveTouches === 1) {\n            touchHistory.indexOfSingleActiveTouch =\n              nativeEvent.touches[0].identifier;\n          }\n        } else if (isEndish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchEnd);\n          touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n          if (touchHistory.numberActiveTouches === 1) {\n            for (var i = 0; i < touchBank.length; i++) {\n              var touchTrackToCheck = touchBank[i];\n\n              if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n                touchHistory.indexOfSingleActiveTouch = i;\n                break;\n              }\n            }\n\n            {\n              var activeRecord =\n                touchBank[touchHistory.indexOfSingleActiveTouch];\n\n              if (activeRecord == null || !activeRecord.touchActive) {\n                error(\"Cannot find single active touch.\");\n              }\n            }\n          }\n        }\n      },\n      touchHistory: touchHistory\n    };\n\n    /**\n     * Accumulates items that must not be null or undefined.\n     *\n     * This is used to conserve memory by avoiding array allocations.\n     *\n     * @return {*|array<*>} An accumulation of items.\n     */\n\n    function accumulate(current, next) {\n      if (next == null) {\n        throw new Error(\"Accumulated items must not be null or undefined.\");\n      }\n\n      if (current == null) {\n        return next;\n      } // Both are not empty. Warning: Never call x.concat(y) when you are not\n      // certain that x is an Array (x could be a string with concat method).\n\n      if (isArray(current)) {\n        /* $FlowFixMe[incompatible-return] if `current` is `T` and `T` an array,\n         * `isArray` might refine to the array element type of `T` */\n        return current.concat(next);\n      }\n\n      if (isArray(next)) {\n        /* $FlowFixMe[incompatible-return] unsound if `next` is `T` and `T` an array,\n         * `isArray` might refine to the array element type of `T` */\n        return [current].concat(next);\n      }\n\n      return [current, next];\n    }\n\n    /**\n     * Accumulates items that must not be null or undefined into the first one. This\n     * is used to conserve memory by avoiding array allocations, and thus sacrifices\n     * API cleanness. Since `current` can be null before being passed in and not\n     * null after this function, make sure to assign it back to `current`:\n     *\n     * `a = accumulateInto(a, b);`\n     *\n     * This API should be sparingly used. Try `accumulate` for something cleaner.\n     *\n     * @return {*|array<*>} An accumulation of items.\n     */\n\n    function accumulateInto(current, next) {\n      if (next == null) {\n        throw new Error(\"Accumulated items must not be null or undefined.\");\n      }\n\n      if (current == null) {\n        return next;\n      } // Both are not empty. Warning: Never call x.concat(y) when you are not\n      // certain that x is an Array (x could be a string with concat method).\n\n      if (isArray(current)) {\n        if (isArray(next)) {\n          // $FlowFixMe[prop-missing] `isArray` does not ensure array is mutable\n          // $FlowFixMe[method-unbinding]\n          current.push.apply(current, next);\n          return current;\n        } // $FlowFixMe[prop-missing] `isArray` does not ensure array is mutable\n\n        current.push(next);\n        return current;\n      }\n\n      if (isArray(next)) {\n        // A bit too dangerous to mutate `next`.\n\n        /* $FlowFixMe[incompatible-return] unsound if `next` is `T` and `T` an array,\n         * `isArray` might refine to the array element type of `T` */\n        return [current].concat(next);\n      }\n\n      return [current, next];\n    }\n\n    /**\n     * @param {array} arr an \"accumulation\" of items which is either an Array or\n     * a single item. Useful when paired with the `accumulate` module. This is a\n     * simple utility that allows us to reason about a collection of items, but\n     * handling the case when there is exactly one item (and we do not need to\n     * allocate an array).\n     * @param {function} cb Callback invoked with each element or a collection.\n     * @param {?} [scope] Scope used as `this` in a callback.\n     */\n    function forEachAccumulated(arr, cb, scope) {\n      if (Array.isArray(arr)) {\n        // $FlowFixMe[incompatible-call] if `T` is an array, `cb` cannot be called\n        arr.forEach(cb, scope);\n      } else if (arr) {\n        cb.call(scope, arr);\n      }\n    }\n\n    var FunctionComponent = 0;\n    var ClassComponent = 1;\n    var IndeterminateComponent = 2; // Before we know whether it is function or class\n\n    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\n    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\n    var HostComponent = 5;\n    var HostText = 6;\n    var Fragment = 7;\n    var Mode = 8;\n    var ContextConsumer = 9;\n    var ContextProvider = 10;\n    var ForwardRef = 11;\n    var Profiler = 12;\n    var SuspenseComponent = 13;\n    var MemoComponent = 14;\n    var SimpleMemoComponent = 15;\n    var LazyComponent = 16;\n    var IncompleteClassComponent = 17;\n    var DehydratedFragment = 18;\n    var SuspenseListComponent = 19;\n    var ScopeComponent = 21;\n    var OffscreenComponent = 22;\n    var LegacyHiddenComponent = 23;\n    var CacheComponent = 24;\n    var TracingMarkerComponent = 25;\n    var HostHoistable = 26;\n    var HostSingleton = 27;\n\n    /**\n     * Instance of element that should respond to touch/move types of interactions,\n     * as indicated explicitly by relevant callbacks.\n     */\n\n    var responderInst = null;\n    /**\n     * Count of current touches. A textInput should become responder iff the\n     * selection changes while there is a touch on the screen.\n     */\n\n    var trackedTouchCount = 0;\n\n    function changeResponder(nextResponderInst, blockHostResponder) {\n      var oldResponderInst = responderInst;\n      responderInst = nextResponderInst;\n\n      if (ResponderEventPlugin.GlobalResponderHandler !== null) {\n        ResponderEventPlugin.GlobalResponderHandler.onChange(\n          oldResponderInst,\n          nextResponderInst,\n          blockHostResponder\n        );\n      }\n    }\n\n    var eventTypes = {\n      /**\n       * On a `touchStart`/`mouseDown`, is it desired that this element become the\n       * responder?\n       */\n      startShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onStartShouldSetResponder\",\n          captured: \"onStartShouldSetResponderCapture\"\n        },\n        dependencies: startDependencies\n      },\n\n      /**\n       * On a `scroll`, is it desired that this element become the responder? This\n       * is usually not needed, but should be used to retroactively infer that a\n       * `touchStart` had occurred during momentum scroll. During a momentum scroll,\n       * a touch start will be immediately followed by a scroll event if the view is\n       * currently scrolling.\n       *\n       * TODO: This shouldn't bubble.\n       */\n      scrollShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onScrollShouldSetResponder\",\n          captured: \"onScrollShouldSetResponderCapture\"\n        },\n        dependencies: [TOP_SCROLL]\n      },\n\n      /**\n       * On text selection change, should this element become the responder? This\n       * is needed for text inputs or other views with native selection, so the\n       * JS view can claim the responder.\n       *\n       * TODO: This shouldn't bubble.\n       */\n      selectionChangeShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onSelectionChangeShouldSetResponder\",\n          captured: \"onSelectionChangeShouldSetResponderCapture\"\n        },\n        dependencies: [TOP_SELECTION_CHANGE]\n      },\n\n      /**\n       * On a `touchMove`/`mouseMove`, is it desired that this element become the\n       * responder?\n       */\n      moveShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onMoveShouldSetResponder\",\n          captured: \"onMoveShouldSetResponderCapture\"\n        },\n        dependencies: moveDependencies\n      },\n\n      /**\n       * Direct responder events dispatched directly to responder. Do not bubble.\n       */\n      responderStart: {\n        registrationName: \"onResponderStart\",\n        dependencies: startDependencies\n      },\n      responderMove: {\n        registrationName: \"onResponderMove\",\n        dependencies: moveDependencies\n      },\n      responderEnd: {\n        registrationName: \"onResponderEnd\",\n        dependencies: endDependencies\n      },\n      responderRelease: {\n        registrationName: \"onResponderRelease\",\n        dependencies: endDependencies\n      },\n      responderTerminationRequest: {\n        registrationName: \"onResponderTerminationRequest\",\n        dependencies: []\n      },\n      responderGrant: {\n        registrationName: \"onResponderGrant\",\n        dependencies: []\n      },\n      responderReject: {\n        registrationName: \"onResponderReject\",\n        dependencies: []\n      },\n      responderTerminate: {\n        registrationName: \"onResponderTerminate\",\n        dependencies: []\n      }\n    }; // Start of inline: the below functions were inlined from\n    // EventPropagator.js, as they deviated from ReactDOM's newer\n    // implementations.\n\n    function getParent$1(inst) {\n      do {\n        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.\n        // That is depending on if we want nested subtrees (layers) to bubble\n        // events to their parent. We could also go through parentNode on the\n        // host node but that wouldn't work for React Native and doesn't let us\n        // do the portal feature.\n      } while (inst && inst.tag !== HostComponent);\n\n      if (inst) {\n        return inst;\n      }\n\n      return null;\n    }\n    /**\n     * Return the lowest common ancestor of A and B, or null if they are in\n     * different trees.\n     */\n\n    function getLowestCommonAncestor(instA, instB) {\n      var depthA = 0;\n\n      for (var tempA = instA; tempA; tempA = getParent$1(tempA)) {\n        depthA++;\n      }\n\n      var depthB = 0;\n\n      for (var tempB = instB; tempB; tempB = getParent$1(tempB)) {\n        depthB++;\n      } // If A is deeper, crawl up.\n\n      while (depthA - depthB > 0) {\n        instA = getParent$1(instA);\n        depthA--;\n      } // If B is deeper, crawl up.\n\n      while (depthB - depthA > 0) {\n        instB = getParent$1(instB);\n        depthB--;\n      } // Walk in lockstep until we find a match.\n\n      var depth = depthA;\n\n      while (depth--) {\n        if (instA === instB || instA === instB.alternate) {\n          return instA;\n        }\n\n        instA = getParent$1(instA);\n        instB = getParent$1(instB);\n      }\n\n      return null;\n    }\n    /**\n     * Return if A is an ancestor of B.\n     */\n\n    function isAncestor(instA, instB) {\n      while (instB) {\n        if (instA === instB || instA === instB.alternate) {\n          return true;\n        }\n\n        instB = getParent$1(instB);\n      }\n\n      return false;\n    }\n    /**\n     * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n     */\n\n    function traverseTwoPhase$1(inst, fn, arg) {\n      var path = [];\n\n      while (inst) {\n        path.push(inst);\n        inst = getParent$1(inst);\n      }\n\n      var i;\n\n      for (i = path.length; i-- > 0; ) {\n        fn(path[i], \"captured\", arg);\n      }\n\n      for (i = 0; i < path.length; i++) {\n        fn(path[i], \"bubbled\", arg);\n      }\n    }\n\n    function getListener$1(inst, registrationName) {\n      var stateNode = inst.stateNode;\n\n      if (stateNode === null) {\n        // Work in progress (ex: onload events in incremental mode).\n        return null;\n      }\n\n      var props = getFiberCurrentPropsFromNode$1(stateNode);\n\n      if (props === null) {\n        // Work in progress.\n        return null;\n      }\n\n      var listener = props[registrationName];\n\n      if (listener && typeof listener !== \"function\") {\n        throw new Error(\n          \"Expected `\" +\n            registrationName +\n            \"` listener to be a function, instead got a value of `\" +\n            typeof listener +\n            \"` type.\"\n        );\n      }\n\n      return listener;\n    }\n\n    function listenerAtPhase$1(inst, event, propagationPhase) {\n      var registrationName =\n        event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n      return getListener$1(inst, registrationName);\n    }\n\n    function accumulateDirectionalDispatches$1(inst, phase, event) {\n      {\n        if (!inst) {\n          error(\"Dispatching inst must not be null\");\n        }\n      }\n\n      var listener = listenerAtPhase$1(inst, event, phase);\n\n      if (listener) {\n        event._dispatchListeners = accumulateInto(\n          event._dispatchListeners,\n          listener\n        );\n        event._dispatchInstances = accumulateInto(\n          event._dispatchInstances,\n          inst\n        );\n      }\n    }\n    /**\n     * Accumulates without regard to direction, does not look for phased\n     * registration names. Same as `accumulateDirectDispatchesSingle` but without\n     * requiring that the `dispatchMarker` be the same as the dispatched ID.\n     */\n\n    function accumulateDispatches$1(inst, ignoredDirection, event) {\n      if (inst && event && event.dispatchConfig.registrationName) {\n        var registrationName = event.dispatchConfig.registrationName;\n        var listener = getListener$1(inst, registrationName);\n\n        if (listener) {\n          event._dispatchListeners = accumulateInto(\n            event._dispatchListeners,\n            listener\n          );\n          event._dispatchInstances = accumulateInto(\n            event._dispatchInstances,\n            inst\n          );\n        }\n      }\n    }\n    /**\n     * Accumulates dispatches on an `SyntheticEvent`, but only for the\n     * `dispatchMarker`.\n     * @param {SyntheticEvent} event\n     */\n\n    function accumulateDirectDispatchesSingle$1(event) {\n      if (event && event.dispatchConfig.registrationName) {\n        accumulateDispatches$1(event._targetInst, null, event);\n      }\n    }\n\n    function accumulateDirectDispatches$1(events) {\n      forEachAccumulated(events, accumulateDirectDispatchesSingle$1);\n    }\n\n    function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        var targetInst = event._targetInst;\n        var parentInst = targetInst ? getParent$1(targetInst) : null;\n        traverseTwoPhase$1(\n          parentInst,\n          accumulateDirectionalDispatches$1,\n          event\n        );\n      }\n    }\n\n    function accumulateTwoPhaseDispatchesSkipTarget(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n    }\n\n    function accumulateTwoPhaseDispatchesSingle$1(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase$1(\n          event._targetInst,\n          accumulateDirectionalDispatches$1,\n          event\n        );\n      }\n    }\n\n    function accumulateTwoPhaseDispatches$1(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle$1);\n    } // End of inline\n\n    /**\n     *\n     * Responder System:\n     * ----------------\n     *\n     * - A global, solitary \"interaction lock\" on a view.\n     * - If a node becomes the responder, it should convey visual feedback\n     *   immediately to indicate so, either by highlighting or moving accordingly.\n     * - To be the responder means, that touches are exclusively important to that\n     *   responder view, and no other view.\n     * - While touches are still occurring, the responder lock can be transferred to\n     *   a new view, but only to increasingly \"higher\" views (meaning ancestors of\n     *   the current responder).\n     *\n     * Responder being granted:\n     * ------------------------\n     *\n     * - Touch starts, moves, and scrolls can cause an ID to become the responder.\n     * - We capture/bubble `startShouldSetResponder`/`moveShouldSetResponder` to\n     *   the \"appropriate place\".\n     * - If nothing is currently the responder, the \"appropriate place\" is the\n     *   initiating event's `targetID`.\n     * - If something *is* already the responder, the \"appropriate place\" is the\n     *   first common ancestor of the event target and the current `responderInst`.\n     * - Some negotiation happens: See the timing diagram below.\n     * - Scrolled views automatically become responder. The reasoning is that a\n     *   platform scroll view that isn't built on top of the responder system has\n     *   began scrolling, and the active responder must now be notified that the\n     *   interaction is no longer locked to it - the system has taken over.\n     *\n     * - Responder being released:\n     *   As soon as no more touches that *started* inside of descendants of the\n     *   *current* responderInst, an `onResponderRelease` event is dispatched to the\n     *   current responder, and the responder lock is released.\n     *\n     * TODO:\n     * - on \"end\", a callback hook for `onResponderEndShouldRemainResponder` that\n     *   determines if the responder lock should remain.\n     * - If a view shouldn't \"remain\" the responder, any active touches should by\n     *   default be considered \"dead\" and do not influence future negotiations or\n     *   bubble paths. It should be as if those touches do not exist.\n     * -- For multitouch: Usually a translate-z will choose to \"remain\" responder\n     *  after one out of many touches ended. For translate-y, usually the view\n     *  doesn't wish to \"remain\" responder after one of many touches end.\n     * - Consider building this on top of a `stopPropagation` model similar to\n     *   `W3C` events.\n     * - Ensure that `onResponderTerminate` is called on touch cancels, whether or\n     *   not `onResponderTerminationRequest` returns `true` or `false`.\n     *\n     */\n\n    /*                                             Negotiation Performed\n                                             +-----------------------+\n                                            /                         \\\nProcess low level events to    +     Current Responder      +   wantsResponderID\ndetermine who to perform negot-|   (if any exists at all)   |\niation/transition              | Otherwise just pass through|\n-------------------------------+----------------------------+------------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchStart|           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onStartShouldSetResponder|----->|onResponderStart (cur)  |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderStart|\n                               |                            | +----------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchMove |           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onMoveShouldSetResponder |----->|onResponderMove (cur)   |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderRejec|\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderMove |\n                               |                            | +----------------+\n                               |                            |\n                               |                            |\n      Some active touch started|                            |\n      inside current responder | +------------------------+ |\n      +------------------------->|      onResponderEnd    | |\n      |                        | +------------------------+ |\n  +---+---------+              |                            |\n  | onTouchEnd  |              |                            |\n  +---+---------+              |                            |\n      |                        | +------------------------+ |\n      +------------------------->|     onResponderEnd     | |\n      No active touches started| +-----------+------------+ |\n      inside current responder |             |              |\n                               |             v              |\n                               | +------------------------+ |\n                               | |    onResponderRelease  | |\n                               | +------------------------+ |\n                               |                            |\n                               +                            + */\n\n    /**\n     * A note about event ordering in the `EventPluginRegistry`.\n     *\n     * Suppose plugins are injected in the following order:\n     *\n     * `[R, S, C]`\n     *\n     * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for\n     * `onClick` etc) and `R` is `ResponderEventPlugin`.\n     *\n     * \"Deferred-Dispatched Events\":\n     *\n     * - The current event plugin system will traverse the list of injected plugins,\n     *   in order, and extract events by collecting the plugin's return value of\n     *   `extractEvents()`.\n     * - These events that are returned from `extractEvents` are \"deferred\n     *   dispatched events\".\n     * - When returned from `extractEvents`, deferred-dispatched events contain an\n     *   \"accumulation\" of deferred dispatches.\n     * - These deferred dispatches are accumulated/collected before they are\n     *   returned, but processed at a later time by the `EventPluginRegistry` (hence the\n     *   name deferred).\n     *\n     * In the process of returning their deferred-dispatched events, event plugins\n     * themselves can dispatch events on-demand without returning them from\n     * `extractEvents`. Plugins might want to do this, so that they can use event\n     * dispatching as a tool that helps them decide which events should be extracted\n     * in the first place.\n     *\n     * \"On-Demand-Dispatched Events\":\n     *\n     * - On-demand-dispatched events are not returned from `extractEvents`.\n     * - On-demand-dispatched events are dispatched during the process of returning\n     *   the deferred-dispatched events.\n     * - They should not have side effects.\n     * - They should be avoided, and/or eventually be replaced with another\n     *   abstraction that allows event plugins to perform multiple \"rounds\" of event\n     *   extraction.\n     *\n     * Therefore, the sequence of event dispatches becomes:\n     *\n     * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)\n     * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)\n     * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)\n     * - `R`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n     * - `S`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n     * - `C`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n     *\n     * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`\n     * on-demand dispatch returns `true` (and some other details are satisfied) the\n     * `onResponderGrant` deferred dispatched event is returned from\n     * `extractEvents`. The sequence of dispatch executions in this case\n     * will appear as follows:\n     *\n     * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)\n     * - `touchStartCapture`       (`EventPluginRegistry` dispatches as usual)\n     * - `touchStart`              (`EventPluginRegistry` dispatches as usual)\n     * - `responderGrant/Reject`   (`EventPluginRegistry` dispatches as usual)\n     */\n\n    function setResponderAndExtractTransfer(\n      topLevelType,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget\n    ) {\n      var shouldSetEventType = isStartish(topLevelType)\n        ? eventTypes.startShouldSetResponder\n        : isMoveish(topLevelType)\n        ? eventTypes.moveShouldSetResponder\n        : topLevelType === TOP_SELECTION_CHANGE\n        ? eventTypes.selectionChangeShouldSetResponder\n        : eventTypes.scrollShouldSetResponder; // TODO: stop one short of the current responder.\n\n      var bubbleShouldSetFrom = !responderInst\n        ? targetInst\n        : getLowestCommonAncestor(responderInst, targetInst); // When capturing/bubbling the \"shouldSet\" event, we want to skip the target\n      // (deepest ID) if it happens to be the current responder. The reasoning:\n      // It's strange to get an `onMoveShouldSetResponder` when you're *already*\n      // the responder.\n\n      var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;\n      var shouldSetEvent = ResponderSyntheticEvent.getPooled(\n        shouldSetEventType,\n        bubbleShouldSetFrom,\n        nativeEvent,\n        nativeEventTarget\n      );\n      shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n\n      if (skipOverBubbleShouldSetFrom) {\n        accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);\n      } else {\n        accumulateTwoPhaseDispatches$1(shouldSetEvent);\n      }\n\n      var wantsResponderInst =\n        executeDispatchesInOrderStopAtTrue(shouldSetEvent);\n\n      if (!shouldSetEvent.isPersistent()) {\n        shouldSetEvent.constructor.release(shouldSetEvent);\n      }\n\n      if (!wantsResponderInst || wantsResponderInst === responderInst) {\n        return null;\n      }\n\n      var extracted;\n      var grantEvent = ResponderSyntheticEvent.getPooled(\n        eventTypes.responderGrant,\n        wantsResponderInst,\n        nativeEvent,\n        nativeEventTarget\n      );\n      grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches$1(grantEvent);\n      var blockHostResponder = executeDirectDispatch(grantEvent) === true;\n\n      if (responderInst) {\n        var terminationRequestEvent = ResponderSyntheticEvent.getPooled(\n          eventTypes.responderTerminationRequest,\n          responderInst,\n          nativeEvent,\n          nativeEventTarget\n        );\n        terminationRequestEvent.touchHistory =\n          ResponderTouchHistoryStore.touchHistory;\n        accumulateDirectDispatches$1(terminationRequestEvent);\n        var shouldSwitch =\n          !hasDispatches(terminationRequestEvent) ||\n          executeDirectDispatch(terminationRequestEvent);\n\n        if (!terminationRequestEvent.isPersistent()) {\n          terminationRequestEvent.constructor.release(terminationRequestEvent);\n        }\n\n        if (shouldSwitch) {\n          var terminateEvent = ResponderSyntheticEvent.getPooled(\n            eventTypes.responderTerminate,\n            responderInst,\n            nativeEvent,\n            nativeEventTarget\n          );\n          terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(terminateEvent);\n          extracted = accumulate(extracted, [grantEvent, terminateEvent]);\n          changeResponder(wantsResponderInst, blockHostResponder);\n        } else {\n          var rejectEvent = ResponderSyntheticEvent.getPooled(\n            eventTypes.responderReject,\n            wantsResponderInst,\n            nativeEvent,\n            nativeEventTarget\n          );\n          rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(rejectEvent);\n          extracted = accumulate(extracted, rejectEvent);\n        }\n      } else {\n        extracted = accumulate(extracted, grantEvent);\n        changeResponder(wantsResponderInst, blockHostResponder);\n      }\n\n      return extracted;\n    }\n    /**\n     * A transfer is a negotiation between a currently set responder and the next\n     * element to claim responder status. Any start event could trigger a transfer\n     * of responderInst. Any move event could trigger a transfer.\n     *\n     * @param {string} topLevelType Record from `BrowserEventConstants`.\n     * @return {boolean} True if a transfer of responder could possibly occur.\n     */\n\n    function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {\n      return (\n        topLevelInst && // responderIgnoreScroll: We are trying to migrate away from specifically\n        // tracking native scroll events here and responderIgnoreScroll indicates we\n        // will send topTouchCancel to handle canceling touch events instead\n        ((topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll) ||\n          (trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE) ||\n          isStartish(topLevelType) ||\n          isMoveish(topLevelType))\n      );\n    }\n    /**\n     * Returns whether or not this touch end event makes it such that there are no\n     * longer any touches that started inside of the current `responderInst`.\n     *\n     * @param {NativeEvent} nativeEvent Native touch end event.\n     * @return {boolean} Whether or not this touch end event ends the responder.\n     */\n\n    function noResponderTouches(nativeEvent) {\n      var touches = nativeEvent.touches;\n\n      if (!touches || touches.length === 0) {\n        return true;\n      }\n\n      for (var i = 0; i < touches.length; i++) {\n        var activeTouch = touches[i];\n        var target = activeTouch.target;\n\n        if (target !== null && target !== undefined && target !== 0) {\n          // Is the original touch location inside of the current responder?\n          var targetInst = getInstanceFromNode$1(target);\n\n          if (isAncestor(responderInst, targetInst)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    var ResponderEventPlugin = {\n      /* For unit testing only */\n      _getResponder: function () {\n        return responderInst;\n      },\n      eventTypes: eventTypes,\n\n      /**\n       * We must be resilient to `targetInst` being `null` on `touchMove` or\n       * `touchEnd`. On certain platforms, this means that a native scroll has\n       * assumed control and the original touch targets are destroyed.\n       */\n      extractEvents: function (\n        topLevelType,\n        targetInst,\n        nativeEvent,\n        nativeEventTarget,\n        eventSystemFlags\n      ) {\n        if (isStartish(topLevelType)) {\n          trackedTouchCount += 1;\n        } else if (isEndish(topLevelType)) {\n          if (trackedTouchCount >= 0) {\n            trackedTouchCount -= 1;\n          } else {\n            {\n              warn(\n                \"Ended a touch event which was not counted in `trackedTouchCount`.\"\n              );\n            }\n\n            return null;\n          }\n        }\n\n        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);\n        var extracted = canTriggerTransfer(\n          topLevelType,\n          targetInst,\n          nativeEvent\n        )\n          ? setResponderAndExtractTransfer(\n              topLevelType,\n              targetInst,\n              nativeEvent,\n              nativeEventTarget\n            )\n          : null; // Responder may or may not have transferred on a new touch start/move.\n        // Regardless, whoever is the responder after any potential transfer, we\n        // direct all touch start/move/ends to them in the form of\n        // `onResponderMove/Start/End`. These will be called for *every* additional\n        // finger that move/start/end, dispatched directly to whoever is the\n        // current responder at that moment, until the responder is \"released\".\n        //\n        // These multiple individual change touch events are are always bookended\n        // by `onResponderGrant`, and one of\n        // (`onResponderRelease/onResponderTerminate`).\n\n        var isResponderTouchStart = responderInst && isStartish(topLevelType);\n        var isResponderTouchMove = responderInst && isMoveish(topLevelType);\n        var isResponderTouchEnd = responderInst && isEndish(topLevelType);\n        var incrementalTouch = isResponderTouchStart\n          ? eventTypes.responderStart\n          : isResponderTouchMove\n          ? eventTypes.responderMove\n          : isResponderTouchEnd\n          ? eventTypes.responderEnd\n          : null;\n\n        if (incrementalTouch) {\n          var gesture = ResponderSyntheticEvent.getPooled(\n            incrementalTouch,\n            responderInst,\n            nativeEvent,\n            nativeEventTarget\n          );\n          gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(gesture);\n          extracted = accumulate(extracted, gesture);\n        }\n\n        var isResponderTerminate =\n          responderInst && topLevelType === TOP_TOUCH_CANCEL;\n        var isResponderRelease =\n          responderInst &&\n          !isResponderTerminate &&\n          isEndish(topLevelType) &&\n          noResponderTouches(nativeEvent);\n        var finalTouch = isResponderTerminate\n          ? eventTypes.responderTerminate\n          : isResponderRelease\n          ? eventTypes.responderRelease\n          : null;\n\n        if (finalTouch) {\n          var finalEvent = ResponderSyntheticEvent.getPooled(\n            finalTouch,\n            responderInst,\n            nativeEvent,\n            nativeEventTarget\n          );\n          finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(finalEvent);\n          extracted = accumulate(extracted, finalEvent);\n          changeResponder(null);\n        }\n\n        return extracted;\n      },\n      GlobalResponderHandler: null,\n      injection: {\n        /**\n         * @param {{onChange: (ReactID, ReactID) => void} GlobalResponderHandler\n         * Object that handles any change in responder. Use this to inject\n         * integration with an existing touch handling system etc.\n         */\n        injectGlobalResponderHandler: function (GlobalResponderHandler) {\n          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;\n        }\n      }\n    };\n\n    /**\n     * Injectable ordering of event plugins.\n     */\n    var eventPluginOrder = null;\n    /**\n     * Injectable mapping from names to event plugin modules.\n     */\n\n    var namesToPlugins = {};\n    /**\n     * Recomputes the plugin list using the injected plugins and plugin ordering.\n     *\n     * @private\n     */\n\n    function recomputePluginOrdering() {\n      if (!eventPluginOrder) {\n        // Wait until an `eventPluginOrder` is injected.\n        return;\n      }\n\n      for (var pluginName in namesToPlugins) {\n        var pluginModule = namesToPlugins[pluginName]; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        var pluginIndex = eventPluginOrder.indexOf(pluginName);\n\n        if (pluginIndex <= -1) {\n          throw new Error(\n            \"EventPluginRegistry: Cannot inject event plugins that do not exist in \" +\n              (\"the plugin ordering, `\" + pluginName + \"`.\")\n          );\n        }\n\n        if (plugins[pluginIndex]) {\n          continue;\n        }\n\n        if (!pluginModule.extractEvents) {\n          throw new Error(\n            \"EventPluginRegistry: Event plugins must implement an `extractEvents` \" +\n              (\"method, but `\" + pluginName + \"` does not.\")\n          );\n        }\n\n        plugins[pluginIndex] = pluginModule;\n        var publishedEvents = pluginModule.eventTypes;\n\n        for (var eventName in publishedEvents) {\n          if (\n            !publishEventForPlugin(\n              publishedEvents[eventName],\n              pluginModule,\n              eventName\n            )\n          ) {\n            throw new Error(\n              \"EventPluginRegistry: Failed to publish event `\" +\n                eventName +\n                \"` for plugin `\" +\n                pluginName +\n                \"`.\"\n            );\n          }\n        }\n      }\n    }\n    /**\n     * Publishes an event so that it can be dispatched by the supplied plugin.\n     *\n     * @param {object} dispatchConfig Dispatch configuration for the event.\n     * @param {object} PluginModule Plugin publishing the event.\n     * @return {boolean} True if the event was successfully published.\n     * @private\n     */\n\n    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        throw new Error(\n          \"EventPluginRegistry: More than one plugin attempted to publish the same \" +\n            (\"event name, `\" + eventName + \"`.\")\n        );\n      }\n\n      eventNameDispatchConfigs[eventName] = dispatchConfig;\n      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n\n      if (phasedRegistrationNames) {\n        for (var phaseName in phasedRegistrationNames) {\n          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n            var phasedRegistrationName = phasedRegistrationNames[phaseName];\n            publishRegistrationName(phasedRegistrationName, pluginModule);\n          }\n        }\n\n        return true;\n      } else if (dispatchConfig.registrationName) {\n        publishRegistrationName(dispatchConfig.registrationName, pluginModule);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Publishes a registration name that is used to identify dispatched events.\n     *\n     * @param {string} registrationName Registration name to add.\n     * @param {object} PluginModule Plugin publishing the event.\n     * @private\n     */\n\n    function publishRegistrationName(\n      registrationName,\n      pluginModule,\n      eventName\n    ) {\n      if (registrationNameModules[registrationName]) {\n        throw new Error(\n          \"EventPluginRegistry: More than one plugin attempted to publish the same \" +\n            (\"registration name, `\" + registrationName + \"`.\")\n        );\n      }\n\n      registrationNameModules[registrationName] = pluginModule;\n\n      {\n        registrationName.toLowerCase();\n      }\n    }\n    /**\n     * Registers plugins so that they can extract and dispatch events.\n     */\n\n    /**\n     * Ordered list of injected plugins.\n     */\n\n    var plugins = [];\n    /**\n     * Mapping from event name to dispatch config\n     */\n\n    var eventNameDispatchConfigs = {};\n    /**\n     * Mapping from registration name to plugin module\n     */\n\n    var registrationNameModules = {};\n\n    /**\n     * Injects an ordering of plugins (by plugin name). This allows the ordering\n     * to be decoupled from injection of the actual plugins so that ordering is\n     * always deterministic regardless of packaging, on-the-fly injection, etc.\n     *\n     * @param {array} InjectedEventPluginOrder\n     * @internal\n     */\n\n    function injectEventPluginOrder(injectedEventPluginOrder) {\n      if (eventPluginOrder) {\n        throw new Error(\n          \"EventPluginRegistry: Cannot inject event plugin ordering more than \" +\n            \"once. You are likely trying to load more than one copy of React.\"\n        );\n      } // Clone the ordering so it cannot be dynamically mutated.\n      // $FlowFixMe[method-unbinding] found when upgrading Flow\n\n      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n      recomputePluginOrdering();\n    }\n    /**\n     * Injects plugins to be used by plugin event system. The plugin names must be\n     * in the ordering injected by `injectEventPluginOrder`.\n     *\n     * Plugins can be injected as part of page initialization or on-the-fly.\n     *\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     * @internal\n     */\n\n    function injectEventPluginsByName(injectedNamesToPlugins) {\n      var isOrderingDirty = false;\n\n      for (var pluginName in injectedNamesToPlugins) {\n        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n          continue;\n        }\n\n        var pluginModule = injectedNamesToPlugins[pluginName];\n\n        if (\n          !namesToPlugins.hasOwnProperty(pluginName) ||\n          namesToPlugins[pluginName] !== pluginModule\n        ) {\n          if (namesToPlugins[pluginName]) {\n            throw new Error(\n              \"EventPluginRegistry: Cannot inject two different event plugins \" +\n                (\"using the same name, `\" + pluginName + \"`.\")\n            );\n          }\n\n          namesToPlugins[pluginName] = pluginModule;\n          isOrderingDirty = true;\n        }\n      }\n\n      if (isOrderingDirty) {\n        recomputePluginOrdering();\n      }\n    }\n\n    function getListener(inst, registrationName) {\n      var stateNode = inst.stateNode;\n\n      if (stateNode === null) {\n        // Work in progress (ex: onload events in incremental mode).\n        return null;\n      }\n\n      var props = getFiberCurrentPropsFromNode$1(stateNode);\n\n      if (props === null) {\n        // Work in progress.\n        return null;\n      }\n\n      var listener = props[registrationName];\n\n      if (listener && typeof listener !== \"function\") {\n        throw new Error(\n          \"Expected `\" +\n            registrationName +\n            \"` listener to be a function, instead got a value of `\" +\n            typeof listener +\n            \"` type.\"\n        );\n      }\n\n      return listener;\n    }\n\n    var customBubblingEventTypes =\n        ReactNativePrivateInterface.ReactNativeViewConfigRegistry\n          .customBubblingEventTypes,\n      customDirectEventTypes =\n        ReactNativePrivateInterface.ReactNativeViewConfigRegistry\n          .customDirectEventTypes; // Start of inline: the below functions were inlined from\n    // EventPropagator.js, as they deviated from ReactDOM's newer\n    // implementations.\n    // $FlowFixMe[missing-local-annot]\n\n    function listenerAtPhase(inst, event, propagationPhase) {\n      var registrationName =\n        event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n      return getListener(inst, registrationName);\n    } // $FlowFixMe[missing-local-annot]\n\n    function accumulateDirectionalDispatches(inst, phase, event) {\n      {\n        if (!inst) {\n          error(\"Dispatching inst must not be null\");\n        }\n      }\n\n      var listener = listenerAtPhase(inst, event, phase);\n\n      if (listener) {\n        event._dispatchListeners = accumulateInto(\n          event._dispatchListeners,\n          listener\n        );\n        event._dispatchInstances = accumulateInto(\n          event._dispatchInstances,\n          inst\n        );\n      }\n    } // $FlowFixMe[missing-local-annot]\n\n    function getParent(inst) {\n      do {\n        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.\n        // That is depending on if we want nested subtrees (layers) to bubble\n        // events to their parent. We could also go through parentNode on the\n        // host node but that wouldn't work for React Native and doesn't let us\n        // do the portal feature.\n      } while (inst && inst.tag !== HostComponent);\n\n      if (inst) {\n        return inst;\n      }\n\n      return null;\n    }\n    /**\n     * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n     */\n\n    function traverseTwoPhase(inst, fn, arg, skipBubbling) {\n      var path = [];\n\n      while (inst) {\n        path.push(inst);\n        inst = getParent(inst);\n      }\n\n      var i;\n\n      for (i = path.length; i-- > 0; ) {\n        fn(path[i], \"captured\", arg);\n      }\n\n      if (skipBubbling) {\n        // Dispatch on target only\n        fn(path[0], \"bubbled\", arg);\n      } else {\n        for (i = 0; i < path.length; i++) {\n          fn(path[i], \"bubbled\", arg);\n        }\n      }\n    } // $FlowFixMe[missing-local-annot]\n\n    function accumulateTwoPhaseDispatchesSingle(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase(\n          event._targetInst,\n          accumulateDirectionalDispatches,\n          event,\n          false\n        );\n      }\n    } // $FlowFixMe[missing-local-annot]\n\n    function accumulateTwoPhaseDispatches(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n    } // $FlowFixMe[missing-local-annot]\n\n    function accumulateCapturePhaseDispatches(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase(\n          event._targetInst,\n          accumulateDirectionalDispatches,\n          event,\n          true\n        );\n      }\n    }\n    /**\n     * Accumulates without regard to direction, does not look for phased\n     * registration names. Same as `accumulateDirectDispatchesSingle` but without\n     * requiring that the `dispatchMarker` be the same as the dispatched ID.\n     */\n\n    function accumulateDispatches(inst, ignoredDirection, event) {\n      if (inst && event && event.dispatchConfig.registrationName) {\n        var registrationName = event.dispatchConfig.registrationName;\n        var listener = getListener(inst, registrationName);\n\n        if (listener) {\n          event._dispatchListeners = accumulateInto(\n            event._dispatchListeners,\n            listener\n          );\n          event._dispatchInstances = accumulateInto(\n            event._dispatchInstances,\n            inst\n          );\n        }\n      }\n    }\n    /**\n     * Accumulates dispatches on an `SyntheticEvent`, but only for the\n     * `dispatchMarker`.\n     * @param {SyntheticEvent} event\n     */\n\n    function accumulateDirectDispatchesSingle(event) {\n      if (event && event.dispatchConfig.registrationName) {\n        accumulateDispatches(event._targetInst, null, event);\n      }\n    }\n\n    function accumulateDirectDispatches(events) {\n      forEachAccumulated(events, accumulateDirectDispatchesSingle);\n    } // End of inline\n\n    var ReactNativeBridgeEventPlugin = {\n      eventTypes: {},\n      extractEvents: function (\n        topLevelType,\n        targetInst,\n        nativeEvent,\n        nativeEventTarget\n      ) {\n        if (targetInst == null) {\n          // Probably a node belonging to another renderer's tree.\n          return null;\n        }\n\n        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];\n        var directDispatchConfig = customDirectEventTypes[topLevelType];\n\n        if (!bubbleDispatchConfig && !directDispatchConfig) {\n          throw new Error( // $FlowFixMe[incompatible-type] - Flow doesn't like this string coercion because DOMTopLevelEventType is opaque\n            'Unsupported top level event type \"' + topLevelType + '\" dispatched'\n          );\n        }\n\n        var event = SyntheticEvent.getPooled(\n          bubbleDispatchConfig || directDispatchConfig,\n          targetInst,\n          nativeEvent,\n          nativeEventTarget\n        );\n\n        if (bubbleDispatchConfig) {\n          var skipBubbling =\n            event != null &&\n            event.dispatchConfig.phasedRegistrationNames != null &&\n            event.dispatchConfig.phasedRegistrationNames.skipBubbling;\n\n          if (skipBubbling) {\n            accumulateCapturePhaseDispatches(event);\n          } else {\n            accumulateTwoPhaseDispatches(event);\n          }\n        } else if (directDispatchConfig) {\n          accumulateDirectDispatches(event);\n        } else {\n          return null;\n        }\n\n        return event;\n      }\n    };\n\n    var ReactNativeEventPluginOrder = [\n      \"ResponderEventPlugin\",\n      \"ReactNativeBridgeEventPlugin\"\n    ];\n\n    /**\n     * Make sure essential globals are available and are patched correctly. Please don't remove this\n     * line. Bundles created by react-packager `require` it before executing any application code. This\n     * ensures it exists in the dependency graph and can be `require`d.\n     * TODO: require this in packager, not in React #10932517\n     */\n    /**\n     * Inject module for resolving DOM hierarchy and plugin ordering.\n     */\n\n    injectEventPluginOrder(ReactNativeEventPluginOrder);\n    /**\n     * Some important event plugins included by default (without having to require\n     * them).\n     */\n\n    injectEventPluginsByName({\n      ResponderEventPlugin: ResponderEventPlugin,\n      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin\n    });\n\n    // Modules provided by RN:\n    var emptyObject$1 = {};\n    /**\n     * Create a payload that contains all the updates between two sets of props.\n     *\n     * These helpers are all encapsulated into a single module, because they use\n     * mutation as a performance optimization which leads to subtle shared\n     * dependencies between the code paths. To avoid this mutable state leaking\n     * across modules, I've kept them isolated to this module.\n     */\n    // Tracks removed keys\n\n    var removedKeys = null;\n    var removedKeyCount = 0;\n    var deepDifferOptions = {\n      unsafelyIgnoreFunctions: true\n    };\n\n    function defaultDiffer(prevProp, nextProp) {\n      if (typeof nextProp !== \"object\" || nextProp === null) {\n        // Scalars have already been checked for equality\n        return true;\n      } else {\n        // For objects and arrays, the default diffing algorithm is a deep compare\n        return ReactNativePrivateInterface.deepDiffer(\n          prevProp,\n          nextProp,\n          deepDifferOptions\n        );\n      }\n    }\n\n    function restoreDeletedValuesInNestedArray(\n      updatePayload,\n      node,\n      validAttributes\n    ) {\n      if (isArray(node)) {\n        var i = node.length;\n\n        while (i-- && removedKeyCount > 0) {\n          restoreDeletedValuesInNestedArray(\n            updatePayload,\n            node[i],\n            validAttributes\n          );\n        }\n      } else if (node && removedKeyCount > 0) {\n        var obj = node;\n\n        for (var propKey in removedKeys) {\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          if (!removedKeys[propKey]) {\n            continue;\n          }\n\n          var nextProp = obj[propKey];\n\n          if (nextProp === undefined) {\n            continue;\n          }\n\n          var attributeConfig = validAttributes[propKey];\n\n          if (!attributeConfig) {\n            continue; // not a valid native prop\n          }\n\n          if (typeof nextProp === \"function\") {\n            // $FlowFixMe[incompatible-type] found when upgrading Flow\n            nextProp = true;\n          }\n\n          if (typeof nextProp === \"undefined\") {\n            // $FlowFixMe[incompatible-type] found when upgrading Flow\n            nextProp = null;\n          }\n\n          if (typeof attributeConfig !== \"object\") {\n            // case: !Object is the default case\n            updatePayload[propKey] = nextProp;\n          } else if (\n            typeof attributeConfig.diff === \"function\" ||\n            typeof attributeConfig.process === \"function\"\n          ) {\n            // case: CustomAttributeConfiguration\n            var nextValue =\n              typeof attributeConfig.process === \"function\"\n                ? attributeConfig.process(nextProp)\n                : nextProp;\n            updatePayload[propKey] = nextValue;\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          removedKeys[propKey] = false;\n          removedKeyCount--;\n        }\n      }\n    }\n\n    function diffNestedArrayProperty(\n      updatePayload,\n      prevArray,\n      nextArray,\n      validAttributes\n    ) {\n      var minLength =\n        prevArray.length < nextArray.length\n          ? prevArray.length\n          : nextArray.length;\n      var i;\n\n      for (i = 0; i < minLength; i++) {\n        // Diff any items in the array in the forward direction. Repeated keys\n        // will be overwritten by later values.\n        updatePayload = diffNestedProperty(\n          updatePayload,\n          prevArray[i],\n          nextArray[i],\n          validAttributes\n        );\n      }\n\n      for (; i < prevArray.length; i++) {\n        // Clear out all remaining properties.\n        updatePayload = clearNestedProperty(\n          updatePayload,\n          prevArray[i],\n          validAttributes\n        );\n      }\n\n      for (; i < nextArray.length; i++) {\n        // Add all remaining properties.\n        updatePayload = addNestedProperty(\n          updatePayload,\n          nextArray[i],\n          validAttributes\n        );\n      }\n\n      return updatePayload;\n    }\n\n    function diffNestedProperty(\n      updatePayload,\n      prevProp,\n      nextProp,\n      validAttributes\n    ) {\n      if (!updatePayload && prevProp === nextProp) {\n        // If no properties have been added, then we can bail out quickly on object\n        // equality.\n        return updatePayload;\n      }\n\n      if (!prevProp || !nextProp) {\n        if (nextProp) {\n          return addNestedProperty(updatePayload, nextProp, validAttributes);\n        }\n\n        if (prevProp) {\n          return clearNestedProperty(updatePayload, prevProp, validAttributes);\n        }\n\n        return updatePayload;\n      }\n\n      if (!isArray(prevProp) && !isArray(nextProp)) {\n        // Both are leaves, we can diff the leaves.\n        return diffProperties(\n          updatePayload,\n          prevProp,\n          nextProp,\n          validAttributes\n        );\n      }\n\n      if (isArray(prevProp) && isArray(nextProp)) {\n        // Both are arrays, we can diff the arrays.\n        return diffNestedArrayProperty(\n          updatePayload,\n          prevProp,\n          nextProp,\n          validAttributes\n        );\n      }\n\n      if (isArray(prevProp)) {\n        return diffProperties(\n          updatePayload,\n          ReactNativePrivateInterface.flattenStyle(prevProp),\n          nextProp,\n          validAttributes\n        );\n      }\n\n      return diffProperties(\n        updatePayload,\n        prevProp,\n        ReactNativePrivateInterface.flattenStyle(nextProp),\n        validAttributes\n      );\n    }\n    /**\n     * addNestedProperty takes a single set of props and valid attribute\n     * attribute configurations. It processes each prop and adds it to the\n     * updatePayload.\n     */\n\n    function addNestedProperty(updatePayload, nextProp, validAttributes) {\n      if (!nextProp) {\n        return updatePayload;\n      }\n\n      if (!isArray(nextProp)) {\n        // Add each property of the leaf.\n        return addProperties(updatePayload, nextProp, validAttributes);\n      }\n\n      for (var i = 0; i < nextProp.length; i++) {\n        // Add all the properties of the array.\n        updatePayload = addNestedProperty(\n          updatePayload,\n          nextProp[i],\n          validAttributes\n        );\n      }\n\n      return updatePayload;\n    }\n    /**\n     * clearNestedProperty takes a single set of props and valid attributes. It\n     * adds a null sentinel to the updatePayload, for each prop key.\n     */\n\n    function clearNestedProperty(updatePayload, prevProp, validAttributes) {\n      if (!prevProp) {\n        return updatePayload;\n      }\n\n      if (!isArray(prevProp)) {\n        // Add each property of the leaf.\n        return clearProperties(updatePayload, prevProp, validAttributes);\n      }\n\n      for (var i = 0; i < prevProp.length; i++) {\n        // Add all the properties of the array.\n        updatePayload = clearNestedProperty(\n          updatePayload,\n          prevProp[i],\n          validAttributes\n        );\n      }\n\n      return updatePayload;\n    }\n    /**\n     * diffProperties takes two sets of props and a set of valid attributes\n     * and write to updatePayload the values that changed or were deleted.\n     * If no updatePayload is provided, a new one is created and returned if\n     * anything changed.\n     */\n\n    function diffProperties(\n      updatePayload,\n      prevProps,\n      nextProps,\n      validAttributes\n    ) {\n      var attributeConfig;\n      var nextProp;\n      var prevProp;\n\n      for (var propKey in nextProps) {\n        attributeConfig = validAttributes[propKey];\n\n        if (!attributeConfig) {\n          continue; // not a valid native prop\n        }\n\n        prevProp = prevProps[propKey];\n        nextProp = nextProps[propKey]; // functions are converted to booleans as markers that the associated\n        // events should be sent from native.\n\n        if (typeof nextProp === \"function\") {\n          nextProp = true; // If nextProp is not a function, then don't bother changing prevProp\n          // since nextProp will win and go into the updatePayload regardless.\n\n          if (typeof prevProp === \"function\") {\n            prevProp = true;\n          }\n        } // An explicit value of undefined is treated as a null because it overrides\n        // any other preceding value.\n\n        if (typeof nextProp === \"undefined\") {\n          nextProp = null;\n\n          if (typeof prevProp === \"undefined\") {\n            prevProp = null;\n          }\n        }\n\n        if (removedKeys) {\n          removedKeys[propKey] = false;\n        }\n\n        if (updatePayload && updatePayload[propKey] !== undefined) {\n          // Something else already triggered an update to this key because another\n          // value diffed. Since we're now later in the nested arrays our value is\n          // more important so we need to calculate it and override the existing\n          // value. It doesn't matter if nothing changed, we'll set it anyway.\n          // Pattern match on: attributeConfig\n          if (typeof attributeConfig !== \"object\") {\n            // case: !Object is the default case\n            updatePayload[propKey] = nextProp;\n          } else if (\n            typeof attributeConfig.diff === \"function\" ||\n            typeof attributeConfig.process === \"function\"\n          ) {\n            // case: CustomAttributeConfiguration\n            var nextValue =\n              typeof attributeConfig.process === \"function\"\n                ? attributeConfig.process(nextProp)\n                : nextProp;\n            updatePayload[propKey] = nextValue;\n          }\n\n          continue;\n        }\n\n        if (prevProp === nextProp) {\n          continue; // nothing changed\n        } // Pattern match on: attributeConfig\n\n        if (typeof attributeConfig !== \"object\") {\n          // case: !Object is the default case\n          if (defaultDiffer(prevProp, nextProp)) {\n            // a normal leaf has changed\n            (updatePayload || (updatePayload = {}))[propKey] = nextProp;\n          }\n        } else if (\n          typeof attributeConfig.diff === \"function\" ||\n          typeof attributeConfig.process === \"function\"\n        ) {\n          // case: CustomAttributeConfiguration\n          var shouldUpdate =\n            prevProp === undefined ||\n            (typeof attributeConfig.diff === \"function\"\n              ? attributeConfig.diff(prevProp, nextProp)\n              : defaultDiffer(prevProp, nextProp));\n\n          if (shouldUpdate) {\n            var _nextValue =\n              typeof attributeConfig.process === \"function\" // $FlowFixMe[incompatible-use] found when upgrading Flow\n                ? attributeConfig.process(nextProp)\n                : nextProp;\n\n            (updatePayload || (updatePayload = {}))[propKey] = _nextValue;\n          }\n        } else {\n          // default: fallthrough case when nested properties are defined\n          removedKeys = null;\n          removedKeyCount = 0; // We think that attributeConfig is not CustomAttributeConfiguration at\n          // this point so we assume it must be AttributeConfiguration.\n\n          updatePayload = diffNestedProperty(\n            updatePayload,\n            prevProp,\n            nextProp,\n            attributeConfig\n          );\n\n          if (removedKeyCount > 0 && updatePayload) {\n            restoreDeletedValuesInNestedArray(\n              updatePayload,\n              nextProp,\n              attributeConfig\n            );\n            removedKeys = null;\n          }\n        }\n      } // Also iterate through all the previous props to catch any that have been\n      // removed and make sure native gets the signal so it can reset them to the\n      // default.\n\n      for (var _propKey in prevProps) {\n        if (nextProps[_propKey] !== undefined) {\n          continue; // we've already covered this key in the previous pass\n        }\n\n        attributeConfig = validAttributes[_propKey];\n\n        if (!attributeConfig) {\n          continue; // not a valid native prop\n        }\n\n        if (updatePayload && updatePayload[_propKey] !== undefined) {\n          // This was already updated to a diff result earlier.\n          continue;\n        }\n\n        prevProp = prevProps[_propKey];\n\n        if (prevProp === undefined) {\n          continue; // was already empty anyway\n        } // Pattern match on: attributeConfig\n\n        if (\n          typeof attributeConfig !== \"object\" ||\n          typeof attributeConfig.diff === \"function\" ||\n          typeof attributeConfig.process === \"function\"\n        ) {\n          // case: CustomAttributeConfiguration | !Object\n          // Flag the leaf property for removal by sending a sentinel.\n          (updatePayload || (updatePayload = {}))[_propKey] = null;\n\n          if (!removedKeys) {\n            removedKeys = {};\n          }\n\n          if (!removedKeys[_propKey]) {\n            removedKeys[_propKey] = true;\n            removedKeyCount++;\n          }\n        } else {\n          // default:\n          // This is a nested attribute configuration where all the properties\n          // were removed so we need to go through and clear out all of them.\n          updatePayload = clearNestedProperty(\n            updatePayload,\n            prevProp,\n            attributeConfig\n          );\n        }\n      }\n\n      return updatePayload;\n    }\n    /**\n     * addProperties adds all the valid props to the payload after being processed.\n     */\n\n    function addProperties(updatePayload, props, validAttributes) {\n      // TODO: Fast path\n      return diffProperties(\n        updatePayload,\n        emptyObject$1,\n        props,\n        validAttributes\n      );\n    }\n    /**\n     * clearProperties clears all the previous props by adding a null sentinel\n     * to the payload for each valid key.\n     */\n\n    function clearProperties(updatePayload, prevProps, validAttributes) {\n      // TODO: Fast path\n      return diffProperties(\n        updatePayload,\n        prevProps,\n        emptyObject$1,\n        validAttributes\n      );\n    }\n\n    function create(props, validAttributes) {\n      return addProperties(\n        null, // updatePayload\n        props,\n        validAttributes\n      );\n    }\n    function diff(prevProps, nextProps, validAttributes) {\n      return diffProperties(\n        null, // updatePayload\n        prevProps,\n        nextProps,\n        validAttributes\n      );\n    }\n\n    // Used as a way to call batchedUpdates when we don't have a reference to\n    // the renderer. Such as when we're dispatching events or if third party\n    // libraries need to call batchedUpdates. Eventually, this API will go away when\n    // everything is batched by default. We'll then have a similar API to opt-out of\n    // scheduled work and instead do synchronous work.\n    // Defaults\n    var batchedUpdatesImpl = function (fn, bookkeeping) {\n      return fn(bookkeeping);\n    };\n\n    var isInsideEventHandler = false;\n    function batchedUpdates$1(fn, bookkeeping) {\n      if (isInsideEventHandler) {\n        // If we are currently inside another batch, we need to wait until it\n        // fully completes before restoring state.\n        return fn(bookkeeping);\n      }\n\n      isInsideEventHandler = true;\n\n      try {\n        return batchedUpdatesImpl(fn, bookkeeping);\n      } finally {\n        isInsideEventHandler = false;\n      }\n    }\n    function setBatchingImplementation(\n      _batchedUpdatesImpl,\n      _discreteUpdatesImpl\n    ) {\n      batchedUpdatesImpl = _batchedUpdatesImpl;\n    }\n\n    /**\n     * Internal queue of events that have accumulated their dispatches and are\n     * waiting to have their dispatches executed.\n     */\n\n    var eventQueue = null;\n    /**\n     * Dispatches an event and releases it back into the pool, unless persistent.\n     *\n     * @param {?object} event Synthetic event to be dispatched.\n     * @private\n     */\n\n    function executeDispatchesAndRelease(event) {\n      if (event) {\n        executeDispatchesInOrder(event);\n\n        if (!event.isPersistent()) {\n          event.constructor.release(event);\n        }\n      }\n    } // $FlowFixMe[missing-local-annot]\n\n    function executeDispatchesAndReleaseTopLevel(e) {\n      return executeDispatchesAndRelease(e);\n    }\n\n    function runEventsInBatch(events) {\n      if (events !== null) {\n        eventQueue = accumulateInto(eventQueue, events);\n      } // Set `eventQueue` to null before processing it so that we can tell if more\n      // events get enqueued while processing.\n\n      var processingEventQueue = eventQueue;\n      eventQueue = null;\n\n      if (!processingEventQueue) {\n        return;\n      }\n\n      forEachAccumulated(\n        processingEventQueue,\n        executeDispatchesAndReleaseTopLevel\n      );\n\n      if (eventQueue) {\n        throw new Error(\n          \"processEventQueue(): Additional events were enqueued while processing \" +\n            \"an event queue. Support for this has not yet been implemented.\"\n        );\n      } // This would be a good time to rethrow if any of the event handlers threw.\n\n      rethrowCaughtError();\n    }\n\n    /**\n     * Allows registered plugins an opportunity to extract events from top-level\n     * native browser events.\n     *\n     * @return {*} An accumulation of synthetic events.\n     * @internal\n     */\n\n    function extractPluginEvents(\n      topLevelType,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget\n    ) {\n      var events = null;\n      var legacyPlugins = plugins;\n\n      for (var i = 0; i < legacyPlugins.length; i++) {\n        // Not every plugin in the ordering may be loaded at runtime.\n        var possiblePlugin = legacyPlugins[i];\n\n        if (possiblePlugin) {\n          var extractedEvents = possiblePlugin.extractEvents(\n            topLevelType,\n            targetInst,\n            nativeEvent,\n            nativeEventTarget\n          );\n\n          if (extractedEvents) {\n            events = accumulateInto(events, extractedEvents);\n          }\n        }\n      }\n\n      return events;\n    }\n\n    function runExtractedPluginEventsInBatch(\n      topLevelType,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget\n    ) {\n      var events = extractPluginEvents(\n        topLevelType,\n        targetInst,\n        nativeEvent,\n        nativeEventTarget\n      );\n      runEventsInBatch(events);\n    }\n\n    function dispatchEvent(target, topLevelType, nativeEvent) {\n      var targetFiber = target;\n      var eventTarget = null;\n\n      if (targetFiber != null) {\n        var stateNode = targetFiber.stateNode; // Guard against Fiber being unmounted\n\n        if (stateNode != null) {\n          // $FlowExpectedError[incompatible-cast] public instances in Fabric do not implement `EventTarget` yet.\n          eventTarget = getPublicInstance(stateNode);\n        }\n      }\n\n      batchedUpdates$1(function () {\n        // Emit event to the RawEventEmitter. This is an unused-by-default EventEmitter\n        // that can be used to instrument event performance monitoring (primarily - could be useful\n        // for other things too).\n        //\n        // NOTE: this merely emits events into the EventEmitter below.\n        // If *you* do not add listeners to the `RawEventEmitter`,\n        // then all of these emitted events will just blackhole and are no-ops.\n        // It is available (although not officially supported... yet) if you want to collect\n        // perf data on event latency in your application, and could also be useful for debugging\n        // low-level events issues.\n        //\n        // If you do not have any event perf monitoring and are extremely concerned about event perf,\n        // it is safe to disable these \"emit\" statements; it will prevent checking the size of\n        // an empty array twice and prevent two no-ops. Practically the overhead is so low that\n        // we don't think it's worth thinking about in prod; your perf issues probably lie elsewhere.\n        //\n        // We emit two events here: one for listeners to this specific event,\n        // and one for the catchall listener '*', for any listeners that want\n        // to be notified for all events.\n        // Note that extracted events are *not* emitted,\n        // only events that have a 1:1 mapping with a native event, at least for now.\n        var event = {\n          eventName: topLevelType,\n          nativeEvent: nativeEvent\n        }; // $FlowFixMe[class-object-subtyping] found when upgrading Flow\n\n        ReactNativePrivateInterface.RawEventEmitter.emit(topLevelType, event); // $FlowFixMe[class-object-subtyping] found when upgrading Flow\n\n        ReactNativePrivateInterface.RawEventEmitter.emit(\"*\", event); // Heritage plugin event system\n\n        runExtractedPluginEventsInBatch(\n          topLevelType,\n          targetFiber,\n          nativeEvent,\n          eventTarget\n        );\n      }); // React Native doesn't use ReactControlledComponent but if it did, here's\n      // where it would do it.\n    }\n\n    // -----------------------------------------------------------------------------\n    var enableSchedulingProfiler = false;\n    var enableProfilerTimer = true;\n    var enableProfilerCommitHooks = true;\n    var enableProfilerNestedUpdatePhase = true;\n    var syncLaneExpirationMs = 250;\n    var transitionLaneExpirationMs = 5000;\n    var enableLazyContextPropagation = false;\n    var enableLegacyHidden = false;\n    var enableAsyncActions = false;\n    var passChildrenWhenCloningPersistedNodes = false;\n    var enableBigIntSupport = false;\n\n    var NoFlags$1 =\n      /*                      */\n      0;\n    var PerformedWork =\n      /*                */\n      1;\n    var Placement =\n      /*                    */\n      2;\n    var DidCapture =\n      /*                   */\n      128;\n    var Hydrating =\n      /*                    */\n      4096; // You can change the rest (and add more).\n\n    var Update =\n      /*                       */\n      4;\n    /* Skipped value:                                 0b0000000000000000000000001000; */\n\n    var ChildDeletion =\n      /*                */\n      16;\n    var ContentReset =\n      /*                 */\n      32;\n    var Callback =\n      /*                     */\n      64;\n    /* Used by DidCapture:                            0b0000000000000000000010000000; */\n\n    var ForceClientRender =\n      /*            */\n      256;\n    var Ref =\n      /*                          */\n      512;\n    var Snapshot =\n      /*                     */\n      1024;\n    var Passive$1 =\n      /*                      */\n      2048;\n    /* Used by Hydrating:                             0b0000000000000001000000000000; */\n\n    var Visibility =\n      /*                   */\n      8192;\n    var StoreConsistency =\n      /*             */\n      16384; // It's OK to reuse these bits because these flags are mutually exclusive for\n    // different fiber types. We should really be doing this for as many flags as\n    // possible, because we're about to run out of bits.\n\n    var ScheduleRetry = StoreConsistency;\n    var ShouldSuspendCommit = Visibility;\n    var DidDefer = ContentReset;\n    var LifecycleEffectMask =\n      Passive$1 | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\n    var HostEffectMask =\n      /*               */\n      32767; // These are not really side effects, but we still reuse this field.\n\n    var Incomplete =\n      /*                   */\n      32768;\n    var ShouldCapture =\n      /*                */\n      65536;\n    var ForceUpdateForLegacySuspense =\n      /* */\n      131072;\n    var Forked =\n      /*                       */\n      1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n    // This enables us to defer more work in the unmount case,\n    // since we can defer traversing the tree during layout to look for Passive effects,\n    // and instead rely on the static flag as a signal that there may be cleanup work.\n\n    var RefStatic =\n      /*                    */\n      2097152;\n    var LayoutStatic =\n      /*                 */\n      4194304;\n    var PassiveStatic =\n      /*                */\n      8388608;\n    var MaySuspendCommit =\n      /*             */\n      16777216; // Flag used to identify newly inserted fibers. It isn't reset after commit unlike `Placement`.\n\n    var PlacementDEV =\n      /*                 */\n      33554432;\n    var MountLayoutDev =\n      /*               */\n      67108864;\n    var MountPassiveDev =\n      /*              */\n      134217728; // Groups of flags that are used in the commit phase to skip over trees that\n    // don't contain effects, by checking subtreeFlags.\n\n    var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n      // flag logic (see #20043)\n      Update | Snapshot | 0;\n    var MutationMask =\n      Placement |\n      Update |\n      ChildDeletion |\n      ContentReset |\n      Ref |\n      Hydrating |\n      Visibility;\n    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\n    var PassiveMask = Passive$1 | Visibility | ChildDeletion; // Union of tags that don't get reset on clones.\n    // This allows certain concepts to persist without recalculating them,\n    // e.g. whether a subtree contains passive effects or portals.\n\n    var StaticMask =\n      LayoutStatic | PassiveStatic | RefStatic | MaySuspendCommit;\n\n    // This module only exists as an ESM wrapper around the external CommonJS\n    var scheduleCallback$2 = Scheduler.unstable_scheduleCallback;\n    var cancelCallback$1 = Scheduler.unstable_cancelCallback;\n    var shouldYield = Scheduler.unstable_shouldYield;\n    var requestPaint = Scheduler.unstable_requestPaint;\n    var now$1 = Scheduler.unstable_now;\n    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n    var NormalPriority = Scheduler.unstable_NormalPriority;\n    var IdlePriority = Scheduler.unstable_IdlePriority; // this doesn't actually exist on the scheduler, but it *does*\n\n    // Helpers to patch console.logs to avoid logging during side-effect free\n    // replaying on render function. This currently only patches the object\n    // lazily which won't cover if the log function was extracted eagerly.\n    // We could also eagerly patch the method.\n    var disabledDepth = 0;\n    var prevLog;\n    var prevInfo;\n    var prevWarn;\n    var prevError;\n    var prevGroup;\n    var prevGroupCollapsed;\n    var prevGroupEnd;\n\n    function disabledLog() {}\n\n    disabledLog.__reactDisabledLog = true;\n    function disableLogs() {\n      {\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          prevLog = console.log;\n          prevInfo = console.info;\n          prevWarn = console.warn;\n          prevError = console.error;\n          prevGroup = console.group;\n          prevGroupCollapsed = console.groupCollapsed;\n          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n          var props = {\n            configurable: true,\n            enumerable: true,\n            value: disabledLog,\n            writable: true\n          }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            info: props,\n            log: props,\n            warn: props,\n            error: props,\n            group: props,\n            groupCollapsed: props,\n            groupEnd: props\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        disabledDepth++;\n      }\n    }\n    function reenableLogs() {\n      {\n        disabledDepth--;\n\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          var props = {\n            configurable: true,\n            enumerable: true,\n            writable: true\n          }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            log: assign({}, props, {\n              value: prevLog\n            }),\n            info: assign({}, props, {\n              value: prevInfo\n            }),\n            warn: assign({}, props, {\n              value: prevWarn\n            }),\n            error: assign({}, props, {\n              value: prevError\n            }),\n            group: assign({}, props, {\n              value: prevGroup\n            }),\n            groupCollapsed: assign({}, props, {\n              value: prevGroupCollapsed\n            }),\n            groupEnd: assign({}, props, {\n              value: prevGroupEnd\n            })\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        if (disabledDepth < 0) {\n          error(\n            \"disabledDepth fell below zero. \" +\n              \"This is a bug in React. Please file an issue.\"\n          );\n        }\n      }\n    }\n\n    var rendererID = null;\n    var injectedHook = null;\n    var hasLoggedError = false;\n    var isDevToolsPresent =\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\";\n    function injectInternals(internals) {\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === \"undefined\") {\n        // No DevTools\n        return false;\n      }\n\n      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n      if (hook.isDisabled) {\n        // This isn't a real property on the hook, but it can be set to opt out\n        // of DevTools integration and associated warnings and logs.\n        // https://github.com/facebook/react/issues/3877\n        return true;\n      }\n\n      if (!hook.supportsFiber) {\n        {\n          error(\n            \"The installed version of React DevTools is too old and will not work \" +\n              \"with the current version of React. Please update React DevTools. \" +\n              \"https://react.dev/link/react-devtools\"\n          );\n        } // DevTools exists, even though it doesn't support Fiber.\n\n        return true;\n      }\n\n      try {\n        if (enableSchedulingProfiler);\n\n        rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n        injectedHook = hook;\n      } catch (err) {\n        // Catch all errors because it is unsafe to throw during initialization.\n        {\n          error(\"React instrumentation encountered an error: %s.\", err);\n        }\n      }\n\n      if (hook.checkDCE) {\n        // This is the real DevTools.\n        return true;\n      } else {\n        // This is likely a hook installed by Fast Refresh runtime.\n        return false;\n      }\n    }\n    function onScheduleRoot(root, children) {\n      {\n        if (\n          injectedHook &&\n          typeof injectedHook.onScheduleFiberRoot === \"function\"\n        ) {\n          try {\n            injectedHook.onScheduleFiberRoot(rendererID, root, children);\n          } catch (err) {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onCommitRoot(root, eventPriority) {\n      if (\n        injectedHook &&\n        typeof injectedHook.onCommitFiberRoot === \"function\"\n      ) {\n        try {\n          var didError = (root.current.flags & DidCapture) === DidCapture;\n\n          if (enableProfilerTimer) {\n            var schedulerPriority;\n\n            switch (eventPriority) {\n              case DiscreteEventPriority:\n                schedulerPriority = ImmediatePriority;\n                break;\n\n              case ContinuousEventPriority:\n                schedulerPriority = UserBlockingPriority;\n                break;\n\n              case DefaultEventPriority:\n                schedulerPriority = NormalPriority;\n                break;\n\n              case IdleEventPriority:\n                schedulerPriority = IdlePriority;\n                break;\n\n              default:\n                schedulerPriority = NormalPriority;\n                break;\n            }\n\n            injectedHook.onCommitFiberRoot(\n              rendererID,\n              root,\n              schedulerPriority,\n              didError\n            );\n          }\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onPostCommitRoot(root) {\n      if (\n        injectedHook &&\n        typeof injectedHook.onPostCommitFiberRoot === \"function\"\n      ) {\n        try {\n          injectedHook.onPostCommitFiberRoot(rendererID, root);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onCommitUnmount(fiber) {\n      if (\n        injectedHook &&\n        typeof injectedHook.onCommitFiberUnmount === \"function\"\n      ) {\n        try {\n          injectedHook.onCommitFiberUnmount(rendererID, fiber);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function setIsStrictModeForDevtools(newIsStrictMode) {\n      {\n        if (newIsStrictMode) {\n          disableLogs();\n        } else {\n          reenableLogs();\n        }\n      }\n    } // Profiler API hooks\n\n    function injectProfilingHooks(profilingHooks) {}\n\n    function getLaneLabelMap() {\n      {\n        return null;\n      }\n    }\n\n    var NoMode =\n      /*                         */\n      0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\n    var ConcurrentMode =\n      /*                 */\n      1;\n    var ProfileMode =\n      /*                    */\n      2;\n    var StrictLegacyMode =\n      /*               */\n      8;\n    var StrictEffectsMode =\n      /*              */\n      16;\n    var NoStrictPassiveEffectsMode =\n      /*     */\n      64;\n\n    // TODO: This is pretty well supported by browsers. Maybe we can drop it.\n    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n    // Based on:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n    var log = Math.log;\n    var LN2 = Math.LN2;\n\n    function clz32Fallback(x) {\n      var asUint = x >>> 0;\n\n      if (asUint === 0) {\n        return 32;\n      }\n\n      return (31 - ((log(asUint) / LN2) | 0)) | 0;\n    }\n\n    // If those values are changed that package should be rebuilt and redeployed.\n\n    var TotalLanes = 31;\n    var NoLanes =\n      /*                        */\n      0;\n    var NoLane =\n      /*                          */\n      0;\n    var SyncHydrationLane =\n      /*               */\n      1;\n    var SyncLane =\n      /*                        */\n      2;\n    var SyncLaneIndex = 1;\n    var InputContinuousHydrationLane =\n      /*    */\n      4;\n    var InputContinuousLane =\n      /*             */\n      8;\n    var DefaultHydrationLane =\n      /*            */\n      16;\n    var DefaultLane =\n      /*                     */\n      32;\n    var SyncUpdateLanes = SyncLane | InputContinuousLane | DefaultLane;\n    var TransitionHydrationLane =\n      /*                */\n      64;\n    var TransitionLanes =\n      /*                       */\n      4194176;\n    var TransitionLane1 =\n      /*                        */\n      128;\n    var TransitionLane2 =\n      /*                        */\n      256;\n    var TransitionLane3 =\n      /*                        */\n      512;\n    var TransitionLane4 =\n      /*                        */\n      1024;\n    var TransitionLane5 =\n      /*                        */\n      2048;\n    var TransitionLane6 =\n      /*                        */\n      4096;\n    var TransitionLane7 =\n      /*                        */\n      8192;\n    var TransitionLane8 =\n      /*                        */\n      16384;\n    var TransitionLane9 =\n      /*                        */\n      32768;\n    var TransitionLane10 =\n      /*                       */\n      65536;\n    var TransitionLane11 =\n      /*                       */\n      131072;\n    var TransitionLane12 =\n      /*                       */\n      262144;\n    var TransitionLane13 =\n      /*                       */\n      524288;\n    var TransitionLane14 =\n      /*                       */\n      1048576;\n    var TransitionLane15 =\n      /*                       */\n      2097152;\n    var RetryLanes =\n      /*                            */\n      62914560;\n    var RetryLane1 =\n      /*                             */\n      4194304;\n    var RetryLane2 =\n      /*                             */\n      8388608;\n    var RetryLane3 =\n      /*                             */\n      16777216;\n    var RetryLane4 =\n      /*                             */\n      33554432;\n    var SomeRetryLane = RetryLane1;\n    var SelectiveHydrationLane =\n      /*          */\n      67108864;\n    var NonIdleLanes =\n      /*                          */\n      134217727;\n    var IdleHydrationLane =\n      /*               */\n      134217728;\n    var IdleLane =\n      /*                        */\n      268435456;\n    var OffscreenLane =\n      /*                   */\n      536870912;\n    var DeferredLane =\n      /*                    */\n      1073741824; // Any lane that might schedule an update. This is used to detect infinite\n    // update loops, so it doesn't include hydration lanes or retries.\n\n    var UpdateLanes =\n      SyncLane | InputContinuousLane | DefaultLane | TransitionLanes; // This function is used for the experimental timeline (react-devtools-timeline)\n    var NoTimestamp = -1;\n    var nextTransitionLane = TransitionLane1;\n    var nextRetryLane = RetryLane1;\n\n    function getHighestPriorityLanes(lanes) {\n      {\n        var pendingSyncLanes = lanes & SyncUpdateLanes;\n\n        if (pendingSyncLanes !== 0) {\n          return pendingSyncLanes;\n        }\n      }\n\n      switch (getHighestPriorityLane(lanes)) {\n        case SyncHydrationLane:\n          return SyncHydrationLane;\n\n        case SyncLane:\n          return SyncLane;\n\n        case InputContinuousHydrationLane:\n          return InputContinuousHydrationLane;\n\n        case InputContinuousLane:\n          return InputContinuousLane;\n\n        case DefaultHydrationLane:\n          return DefaultHydrationLane;\n\n        case DefaultLane:\n          return DefaultLane;\n\n        case TransitionHydrationLane:\n          return TransitionHydrationLane;\n\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n          return lanes & TransitionLanes;\n\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n          return lanes & RetryLanes;\n\n        case SelectiveHydrationLane:\n          return SelectiveHydrationLane;\n\n        case IdleHydrationLane:\n          return IdleHydrationLane;\n\n        case IdleLane:\n          return IdleLane;\n\n        case OffscreenLane:\n          return OffscreenLane;\n\n        case DeferredLane:\n          // This shouldn't be reachable because deferred work is always entangled\n          // with something else.\n          return NoLanes;\n\n        default:\n          {\n            error(\"Should have found matching lanes. This is a bug in React.\");\n          } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n          return lanes;\n      }\n    }\n\n    function getNextLanes(root, wipLanes) {\n      // Early bailout if there's no pending work left.\n      var pendingLanes = root.pendingLanes;\n\n      if (pendingLanes === NoLanes) {\n        return NoLanes;\n      }\n\n      var nextLanes = NoLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n      // even if the work is suspended.\n\n      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n      if (nonIdlePendingLanes !== NoLanes) {\n        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n        if (nonIdleUnblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        } else {\n          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n          if (nonIdlePingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          }\n        }\n      } else {\n        // The only remaining work is Idle.\n        var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n        if (unblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(unblockedLanes);\n        } else {\n          if (pingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(pingedLanes);\n          }\n        }\n      }\n\n      if (nextLanes === NoLanes) {\n        // This should only be reachable if we're suspended\n        // TODO: Consider warning in this path if a fallback timer is not scheduled.\n        return NoLanes;\n      } // If we're already in the middle of a render, switching lanes will interrupt\n      // it and we'll lose our progress. We should only do this if the new lanes are\n      // higher priority.\n\n      if (\n        wipLanes !== NoLanes &&\n        wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n        // bother waiting until the root is complete.\n        (wipLanes & suspendedLanes) === NoLanes\n      ) {\n        var nextLane = getHighestPriorityLane(nextLanes);\n        var wipLane = getHighestPriorityLane(wipLanes);\n\n        if (\n          // Tests whether the next lane is equal or lower priority than the wip\n          // one. This works because the bits decrease in priority as you go left.\n          nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n          // only difference between default updates and transition updates is that\n          // default updates do not support refresh transitions.\n          (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n        ) {\n          // Keep working on the existing in-progress tree. Do not interrupt.\n          return wipLanes;\n        }\n      }\n\n      return nextLanes;\n    }\n    function getEntangledLanes(root, renderLanes) {\n      var entangledLanes = renderLanes;\n\n      if ((entangledLanes & InputContinuousLane) !== NoLanes) {\n        // When updates are sync by default, we entangle continuous priority updates\n        // and default updates, so they render in the same batch. The only reason\n        // they use separate lanes is because continuous updates should interrupt\n        // transitions, but default updates should not.\n        entangledLanes |= entangledLanes & DefaultLane;\n      } // Check for entangled lanes and add them to the batch.\n      //\n      // A lane is said to be entangled with another when it's not allowed to render\n      // in a batch that does not also include the other lane. Typically we do this\n      // when multiple updates have the same source, and we only want to respond to\n      // the most recent event from that source.\n      //\n      // Note that we apply entanglements *after* checking for partial work above.\n      // This means that if a lane is entangled during an interleaved event while\n      // it's already rendering, we won't interrupt it. This is intentional, since\n      // entanglement is usually \"best effort\": we'll try our best to render the\n      // lanes in the same batch, but it's not worth throwing out partially\n      // completed work in order to do it.\n      // TODO: Reconsider this. The counter-argument is that the partial work\n      // represents an intermediate state, which we don't want to show to the user.\n      // And by spending extra time finishing it, we're increasing the amount of\n      // time it takes to show the final state, which is what they are actually\n      // waiting for.\n      //\n      // For those exceptions where entanglement is semantically important,\n      // we should ensure that there is no partial work at the\n      // time we apply the entanglement.\n\n      var allEntangledLanes = root.entangledLanes;\n\n      if (allEntangledLanes !== NoLanes) {\n        var entanglements = root.entanglements;\n        var lanes = entangledLanes & allEntangledLanes;\n\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          entangledLanes |= entanglements[index];\n          lanes &= ~lane;\n        }\n      }\n\n      return entangledLanes;\n    }\n\n    function computeExpirationTime(lane, currentTime) {\n      switch (lane) {\n        case SyncHydrationLane:\n        case SyncLane:\n        case InputContinuousHydrationLane:\n        case InputContinuousLane:\n          // User interactions should expire slightly more quickly.\n          //\n          // NOTE: This is set to the corresponding constant as in Scheduler.js.\n          // When we made it larger, a product metric in www regressed, suggesting\n          // there's a user interaction that's being starved by a series of\n          // synchronous updates. If that theory is correct, the proper solution is\n          // to fix the starvation. However, this scenario supports the idea that\n          // expiration times are an important safeguard when starvation\n          // does happen.\n          return currentTime + syncLaneExpirationMs;\n\n        case DefaultHydrationLane:\n        case DefaultLane:\n        case TransitionHydrationLane:\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n          return currentTime + transitionLaneExpirationMs;\n\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n          // TODO: Retries should be allowed to expire if they are CPU bound for\n          // too long, but when I made this change it caused a spike in browser\n          // crashes. There must be some other underlying bug; not super urgent but\n          // ideally should figure out why and fix it. Unfortunately we don't have\n          // a repro for the crashes, only detected via production metrics.\n          return NoTimestamp;\n\n        case SelectiveHydrationLane:\n        case IdleHydrationLane:\n        case IdleLane:\n        case OffscreenLane:\n        case DeferredLane:\n          // Anything idle priority or lower should never expire.\n          return NoTimestamp;\n\n        default:\n          {\n            error(\"Should have found matching lanes. This is a bug in React.\");\n          }\n\n          return NoTimestamp;\n      }\n    }\n\n    function markStarvedLanesAsExpired(root, currentTime) {\n      // TODO: This gets called every time we yield. We can optimize by storing\n      // the earliest expiration time on the root. Then use that to quickly bail out\n      // of this function.\n      var pendingLanes = root.pendingLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes;\n      var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n      // expiration time. If so, we'll assume the update is being starved and mark\n      // it as expired to force it to finish.\n      // TODO: We should be able to replace this with upgradePendingLanesToSync\n      //\n      // We exclude retry lanes because those must always be time sliced, in order\n      // to unwrap uncached promises.\n      // TODO: Write a test for this\n\n      var lanes = pendingLanes & ~RetryLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        var expirationTime = expirationTimes[index];\n\n        if (expirationTime === NoTimestamp) {\n          // Found a pending lane with no expiration time. If it's not suspended, or\n          // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n          // using the current time.\n          if (\n            (lane & suspendedLanes) === NoLanes ||\n            (lane & pingedLanes) !== NoLanes\n          ) {\n            // Assumes timestamps are monotonically increasing.\n            expirationTimes[index] = computeExpirationTime(lane, currentTime);\n          }\n        } else if (expirationTime <= currentTime) {\n          // This lane expired\n          root.expiredLanes |= lane;\n        }\n\n        lanes &= ~lane;\n      }\n    } // This returns the highest priority pending lanes regardless of whether they\n    function getLanesToRetrySynchronouslyOnError(\n      root,\n      originallyAttemptedLanes\n    ) {\n      if (root.errorRecoveryDisabledLanes & originallyAttemptedLanes) {\n        // The error recovery mechanism is disabled until these lanes are cleared.\n        return NoLanes;\n      }\n\n      var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n      if (everythingButOffscreen !== NoLanes) {\n        return everythingButOffscreen;\n      }\n\n      if (everythingButOffscreen & OffscreenLane) {\n        return OffscreenLane;\n      }\n\n      return NoLanes;\n    }\n    function includesSyncLane(lanes) {\n      return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;\n    }\n    function includesNonIdleWork(lanes) {\n      return (lanes & NonIdleLanes) !== NoLanes;\n    }\n    function includesOnlyRetries(lanes) {\n      return (lanes & RetryLanes) === lanes;\n    }\n    function includesOnlyNonUrgentLanes(lanes) {\n      // TODO: Should hydration lanes be included here? This function is only\n      // used in `updateDeferredValueImpl`.\n      var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n      return (lanes & UrgentLanes) === NoLanes;\n    }\n    function includesOnlyTransitions(lanes) {\n      return (lanes & TransitionLanes) === lanes;\n    }\n    function includesBlockingLane(root, lanes) {\n      var SyncDefaultLanes =\n        InputContinuousHydrationLane |\n        InputContinuousLane |\n        DefaultHydrationLane |\n        DefaultLane;\n      return (lanes & SyncDefaultLanes) !== NoLanes;\n    }\n    function includesExpiredLane(root, lanes) {\n      // This is a separate check from includesBlockingLane because a lane can\n      // expire after a render has already started.\n      return (lanes & root.expiredLanes) !== NoLanes;\n    }\n    function isTransitionLane(lane) {\n      return (lane & TransitionLanes) !== NoLanes;\n    }\n    function claimNextTransitionLane() {\n      // Cycle through the lanes, assigning each new transition to the next lane.\n      // In most cases, this means every transition gets its own lane, until we\n      // run out of lanes and cycle back to the beginning.\n      var lane = nextTransitionLane;\n      nextTransitionLane <<= 1;\n\n      if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n        nextTransitionLane = TransitionLane1;\n      }\n\n      return lane;\n    }\n    function claimNextRetryLane() {\n      var lane = nextRetryLane;\n      nextRetryLane <<= 1;\n\n      if ((nextRetryLane & RetryLanes) === NoLanes) {\n        nextRetryLane = RetryLane1;\n      }\n\n      return lane;\n    }\n    function getHighestPriorityLane(lanes) {\n      return lanes & -lanes;\n    }\n    function pickArbitraryLane(lanes) {\n      // This wrapper function gets inlined. Only exists so to communicate that it\n      // doesn't matter which bit is selected; you can pick any bit without\n      // affecting the algorithms where its used. Here I'm using\n      // getHighestPriorityLane because it requires the fewest operations.\n      return getHighestPriorityLane(lanes);\n    }\n\n    function pickArbitraryLaneIndex(lanes) {\n      return 31 - clz32(lanes);\n    }\n\n    function laneToIndex(lane) {\n      return pickArbitraryLaneIndex(lane);\n    }\n\n    function includesSomeLane(a, b) {\n      return (a & b) !== NoLanes;\n    }\n    function isSubsetOfLanes(set, subset) {\n      return (set & subset) === subset;\n    }\n    function mergeLanes(a, b) {\n      return a | b;\n    }\n    function removeLanes(set, subset) {\n      return set & ~subset;\n    }\n    function intersectLanes(a, b) {\n      return a & b;\n    } // Seems redundant, but it changes the type from a single lane (used for\n    // updates) to a group of lanes (used for flushing work).\n\n    function laneToLanes(lane) {\n      return lane;\n    }\n    function createLaneMap(initial) {\n      // Intentionally pushing one by one.\n      // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n      var laneMap = [];\n\n      for (var i = 0; i < TotalLanes; i++) {\n        laneMap.push(initial);\n      }\n\n      return laneMap;\n    }\n    function markRootUpdated$1(root, updateLane) {\n      root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n      // could unblock them. Clear the suspended lanes so that we can try rendering\n      // them again.\n      //\n      // TODO: We really only need to unsuspend only lanes that are in the\n      // `subtreeLanes` of the updated fiber, or the update lanes of the return\n      // path. This would exclude suspended updates in an unrelated sibling tree,\n      // since there's no way for this update to unblock it.\n      //\n      // We don't do this if the incoming update is idle, because we never process\n      // idle updates until after all the regular updates have finished; there's no\n      // way it could unblock a transition.\n\n      if (updateLane !== IdleLane) {\n        root.suspendedLanes = NoLanes;\n        root.pingedLanes = NoLanes;\n      }\n    }\n    function markRootSuspended$1(root, suspendedLanes, spawnedLane) {\n      root.suspendedLanes |= suspendedLanes;\n      root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n      var expirationTimes = root.expirationTimes;\n      var lanes = suspendedLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        expirationTimes[index] = NoTimestamp;\n        lanes &= ~lane;\n      }\n\n      if (spawnedLane !== NoLane) {\n        markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);\n      }\n    }\n    function markRootPinged$1(root, pingedLanes) {\n      root.pingedLanes |= root.suspendedLanes & pingedLanes;\n    }\n    function markRootFinished(root, remainingLanes, spawnedLane) {\n      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n      root.pendingLanes = remainingLanes; // Let's try everything again\n\n      root.suspendedLanes = NoLanes;\n      root.pingedLanes = NoLanes;\n      root.expiredLanes &= remainingLanes;\n      root.entangledLanes &= remainingLanes;\n      root.errorRecoveryDisabledLanes &= remainingLanes;\n      root.shellSuspendCounter = 0;\n      var entanglements = root.entanglements;\n      var expirationTimes = root.expirationTimes;\n      var hiddenUpdates = root.hiddenUpdates; // Clear the lanes that no longer have pending work\n\n      var lanes = noLongerPendingLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        entanglements[index] = NoLanes;\n        expirationTimes[index] = NoTimestamp;\n        var hiddenUpdatesForLane = hiddenUpdates[index];\n\n        if (hiddenUpdatesForLane !== null) {\n          hiddenUpdates[index] = null; // \"Hidden\" updates are updates that were made to a hidden component. They\n          // have special logic associated with them because they may be entangled\n          // with updates that occur outside that tree. But once the outer tree\n          // commits, they behave like regular updates.\n\n          for (var i = 0; i < hiddenUpdatesForLane.length; i++) {\n            var update = hiddenUpdatesForLane[i];\n\n            if (update !== null) {\n              update.lane &= ~OffscreenLane;\n            }\n          }\n        }\n\n        lanes &= ~lane;\n      }\n\n      if (spawnedLane !== NoLane) {\n        markSpawnedDeferredLane(\n          root,\n          spawnedLane, // This render finished successfully without suspending, so we don't need\n          // to entangle the spawned task with the parent task.\n          NoLanes\n        );\n      }\n    }\n\n    function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {\n      // This render spawned a deferred task. Mark it as pending.\n      root.pendingLanes |= spawnedLane;\n      root.suspendedLanes &= ~spawnedLane; // Entangle the spawned lane with the DeferredLane bit so that we know it\n      // was the result of another render. This lets us avoid a useDeferredValue\n      // waterfall — only the first level will defer.\n\n      var spawnedLaneIndex = laneToIndex(spawnedLane);\n      root.entangledLanes |= spawnedLane;\n      root.entanglements[spawnedLaneIndex] |=\n        DeferredLane | // If the parent render task suspended, we must also entangle those lanes\n        // with the spawned task, so that the deferred task includes all the same\n        // updates that the parent task did. We can exclude any lane that is not\n        // used for updates (e.g. Offscreen).\n        (entangledLanes & UpdateLanes);\n    }\n\n    function markRootEntangled(root, entangledLanes) {\n      // In addition to entangling each of the given lanes with each other, we also\n      // have to consider _transitive_ entanglements. For each lane that is already\n      // entangled with *any* of the given lanes, that lane is now transitively\n      // entangled with *all* the given lanes.\n      //\n      // Translated: If C is entangled with A, then entangling A with B also\n      // entangles C with B.\n      //\n      // If this is hard to grasp, it might help to intentionally break this\n      // function and look at the tests that fail in ReactTransition-test.js. Try\n      // commenting out one of the conditions below.\n      var rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n      var entanglements = root.entanglements;\n      var lanes = rootEntangledLanes;\n\n      while (lanes) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n\n        if (\n          // Is this one of the newly entangled lanes?\n          (lane & entangledLanes) | // Is this lane transitively entangled with the newly entangled lanes?\n          (entanglements[index] & entangledLanes)\n        ) {\n          entanglements[index] |= entangledLanes;\n        }\n\n        lanes &= ~lane;\n      }\n    }\n    function upgradePendingLaneToSync(root, lane) {\n      // Since we're upgrading the priority of the given lane, there is now pending\n      // sync work.\n      root.pendingLanes |= SyncLane; // Entangle the sync lane with the lane we're upgrading. This means SyncLane\n      // will not be allowed to finish without also finishing the given lane.\n\n      root.entangledLanes |= SyncLane;\n      root.entanglements[SyncLaneIndex] |= lane;\n    }\n    function markHiddenUpdate(root, update, lane) {\n      var index = laneToIndex(lane);\n      var hiddenUpdates = root.hiddenUpdates;\n      var hiddenUpdatesForLane = hiddenUpdates[index];\n\n      if (hiddenUpdatesForLane === null) {\n        hiddenUpdates[index] = [update];\n      } else {\n        hiddenUpdatesForLane.push(update);\n      }\n\n      update.lane = lane | OffscreenLane;\n    }\n    function getBumpedLaneForHydration(root, renderLanes) {\n      var renderLane = getHighestPriorityLane(renderLanes);\n      var lane;\n\n      if ((renderLane & SyncUpdateLanes) !== NoLane) {\n        lane = SyncHydrationLane;\n      } else {\n        switch (renderLane) {\n          case SyncLane:\n            lane = SyncHydrationLane;\n            break;\n\n          case InputContinuousLane:\n            lane = InputContinuousHydrationLane;\n            break;\n\n          case DefaultLane:\n            lane = DefaultHydrationLane;\n            break;\n\n          case TransitionLane1:\n          case TransitionLane2:\n          case TransitionLane3:\n          case TransitionLane4:\n          case TransitionLane5:\n          case TransitionLane6:\n          case TransitionLane7:\n          case TransitionLane8:\n          case TransitionLane9:\n          case TransitionLane10:\n          case TransitionLane11:\n          case TransitionLane12:\n          case TransitionLane13:\n          case TransitionLane14:\n          case TransitionLane15:\n          case RetryLane1:\n          case RetryLane2:\n          case RetryLane3:\n          case RetryLane4:\n            lane = TransitionHydrationLane;\n            break;\n\n          case IdleLane:\n            lane = IdleHydrationLane;\n            break;\n\n          default:\n            // Everything else is already either a hydration lane, or shouldn't\n            // be retried at a hydration lane.\n            lane = NoLane;\n            break;\n        }\n      } // Check if the lane we chose is suspended. If so, that indicates that we\n      // already attempted and failed to hydrate at that level. Also check if we're\n      // already rendering that lane, which is rare but could happen.\n\n      if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n        // Give up trying to hydrate and fall back to client render.\n        return NoLane;\n      }\n\n      return lane;\n    }\n    function addFiberToLanesMap(root, fiber, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n        updaters.add(fiber);\n        lanes &= ~lane;\n      }\n    }\n    function movePendingFibersToMemoized(root, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n      var memoizedUpdaters = root.memoizedUpdaters;\n\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n\n        if (updaters.size > 0) {\n          updaters.forEach(function (fiber) {\n            var alternate = fiber.alternate;\n\n            if (alternate === null || !memoizedUpdaters.has(alternate)) {\n              memoizedUpdaters.add(fiber);\n            }\n          });\n          updaters.clear();\n        }\n\n        lanes &= ~lane;\n      }\n    }\n    function getTransitionsForLanes(root, lanes) {\n      {\n        return null;\n      }\n    }\n\n    var DiscreteEventPriority = SyncLane;\n    var ContinuousEventPriority = InputContinuousLane;\n    var DefaultEventPriority = DefaultLane;\n    var IdleEventPriority = IdleLane;\n    var currentUpdatePriority = NoLane;\n    function getCurrentUpdatePriority() {\n      return currentUpdatePriority;\n    }\n    function setCurrentUpdatePriority(newPriority) {\n      currentUpdatePriority = newPriority;\n    }\n    function higherEventPriority(a, b) {\n      return a !== 0 && a < b ? a : b;\n    }\n    function lowerEventPriority(a, b) {\n      return a === 0 || a > b ? a : b;\n    }\n    function isHigherEventPriority(a, b) {\n      return a !== 0 && a < b;\n    }\n    function lanesToEventPriority(lanes) {\n      var lane = getHighestPriorityLane(lanes);\n\n      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n        return DiscreteEventPriority;\n      }\n\n      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n        return ContinuousEventPriority;\n      }\n\n      if (includesNonIdleWork(lane)) {\n        return DefaultEventPriority;\n      }\n\n      return IdleEventPriority;\n    }\n\n    // Renderers that don't support mutation\n    // can re-export everything from this module.\n    function shim$2() {\n      throw new Error(\n        \"The current renderer does not support mutation. \" +\n          \"This error is likely caused by a bug in React. \" +\n          \"Please file an issue.\"\n      );\n    } // Mutation (when unsupported)\n    var commitMount = shim$2;\n\n    // Renderers that don't support hydration\n    // can re-export everything from this module.\n    function shim$1() {\n      throw new Error(\n        \"The current renderer does not support hydration. \" +\n          \"This error is likely caused by a bug in React. \" +\n          \"Please file an issue.\"\n      );\n    } // Hydration (when unsupported)\n    var isSuspenseInstancePending = shim$1;\n    var isSuspenseInstanceFallback = shim$1;\n    var getSuspenseInstanceFallbackErrorDetails = shim$1;\n    var registerSuspenseInstanceRetry = shim$1;\n    var errorHydratingContainer = shim$1;\n\n    // Renderers that don't support hydration\n    // can re-export everything from this module.\n    function shim() {\n      throw new Error(\n        \"The current renderer does not support Resources. \" +\n          \"This error is likely caused by a bug in React. \" +\n          \"Please file an issue.\"\n      );\n    } // Resources (when unsupported)\n    var suspendResource = shim;\n\n    var _nativeFabricUIManage = nativeFabricUIManager,\n      createNode = _nativeFabricUIManage.createNode,\n      cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren,\n      cloneNodeWithNewChildrenAndProps =\n        _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps,\n      cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps,\n      createChildNodeSet = _nativeFabricUIManage.createChildSet,\n      appendChildNode = _nativeFabricUIManage.appendChild,\n      appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet,\n      completeRoot = _nativeFabricUIManage.completeRoot,\n      registerEventHandler = _nativeFabricUIManage.registerEventHandler,\n      FabricDefaultPriority =\n        _nativeFabricUIManage.unstable_DefaultEventPriority,\n      FabricDiscretePriority =\n        _nativeFabricUIManage.unstable_DiscreteEventPriority,\n      fabricGetCurrentEventPriority =\n        _nativeFabricUIManage.unstable_getCurrentEventPriority;\n    var getViewConfigForType =\n      ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get; // Counter for uniquely identifying views.\n    // % 10 === 1 means it is a rootTag.\n    // % 2 === 0 means it is a Fabric tag.\n    // This means that they never overlap.\n\n    var nextReactTag = 2; // TODO: Remove this conditional once all changes have propagated.\n\n    if (registerEventHandler) {\n      /**\n       * Register the event emitter with the native bridge\n       */\n      registerEventHandler(dispatchEvent);\n    }\n    function appendInitialChild(parentInstance, child) {\n      appendChildNode(parentInstance.node, child.node);\n    }\n    function createInstance(\n      type,\n      props,\n      rootContainerInstance,\n      hostContext,\n      internalInstanceHandle\n    ) {\n      var tag = nextReactTag;\n      nextReactTag += 2;\n      var viewConfig = getViewConfigForType(type);\n\n      {\n        for (var key in viewConfig.validAttributes) {\n          if (props.hasOwnProperty(key)) {\n            ReactNativePrivateInterface.deepFreezeAndThrowOnMutationInDev(\n              props[key]\n            );\n          }\n        }\n      }\n\n      var updatePayload = create(props, viewConfig.validAttributes);\n      var node = createNode(\n        tag, // reactTag\n        viewConfig.uiViewClassName, // viewName\n        rootContainerInstance, // rootTag\n        updatePayload, // props\n        internalInstanceHandle // internalInstanceHandle\n      );\n      var component = ReactNativePrivateInterface.createPublicInstance(\n        tag,\n        viewConfig,\n        internalInstanceHandle\n      );\n      return {\n        node: node,\n        canonical: {\n          nativeTag: tag,\n          viewConfig: viewConfig,\n          currentProps: props,\n          internalInstanceHandle: internalInstanceHandle,\n          publicInstance: component\n        }\n      };\n    }\n    function createTextInstance(\n      text,\n      rootContainerInstance,\n      hostContext,\n      internalInstanceHandle\n    ) {\n      {\n        if (!hostContext.isInAParentText) {\n          error(\"Text strings must be rendered within a <Text> component.\");\n        }\n      }\n\n      var tag = nextReactTag;\n      nextReactTag += 2;\n      var node = createNode(\n        tag, // reactTag\n        \"RCTRawText\", // viewName\n        rootContainerInstance, // rootTag\n        {\n          text: text\n        }, // props\n        internalInstanceHandle // instance handle\n      );\n      return {\n        node: node\n      };\n    }\n    function getRootHostContext(rootContainerInstance) {\n      return {\n        isInAParentText: false\n      };\n    }\n    function getChildHostContext(parentHostContext, type) {\n      var prevIsInAParentText = parentHostContext.isInAParentText;\n      var isInAParentText =\n        type === \"AndroidTextInput\" || // Android\n        type === \"RCTMultilineTextInputView\" || // iOS\n        type === \"RCTSinglelineTextInputView\" || // iOS\n        type === \"RCTText\" ||\n        type === \"RCTVirtualText\"; // TODO: If this is an offscreen host container, we should reuse the\n      // parent context.\n\n      if (prevIsInAParentText !== isInAParentText) {\n        return {\n          isInAParentText: isInAParentText\n        };\n      } else {\n        return parentHostContext;\n      }\n    }\n    function getPublicInstance(instance) {\n      if (\n        instance.canonical != null &&\n        instance.canonical.publicInstance != null\n      ) {\n        return instance.canonical.publicInstance;\n      } // For compatibility with the legacy renderer, in case it's used with Fabric\n      // in the same app.\n      // $FlowExpectedError[prop-missing]\n\n      if (instance._nativeTag != null) {\n        // $FlowExpectedError[incompatible-return]\n        return instance;\n      }\n\n      return null;\n    }\n\n    function getPublicTextInstance(textInstance, internalInstanceHandle) {\n      if (textInstance.publicInstance == null) {\n        textInstance.publicInstance =\n          ReactNativePrivateInterface.createPublicTextInstance(\n            internalInstanceHandle\n          );\n      }\n\n      return textInstance.publicInstance;\n    }\n\n    function getPublicInstanceFromInternalInstanceHandle(\n      internalInstanceHandle\n    ) {\n      var instance = internalInstanceHandle.stateNode; // React resets all the fields in the fiber when the component is unmounted\n      // to prevent memory leaks.\n\n      if (instance == null) {\n        return null;\n      }\n\n      if (internalInstanceHandle.tag === HostText) {\n        var textInstance = instance;\n        return getPublicTextInstance(textInstance, internalInstanceHandle);\n      }\n\n      var elementInstance = internalInstanceHandle.stateNode;\n      return getPublicInstance(elementInstance);\n    }\n    function shouldSetTextContent(type, props) {\n      // TODO (bvaughn) Revisit this decision.\n      // Always returning false simplifies the createInstance() implementation,\n      // But creates an additional child Fiber for raw text children.\n      // No additional native views are created though.\n      // It's not clear to me which is better so I'm deferring for now.\n      // More context @ github.com/facebook/react/pull/8560#discussion_r92111303\n      return false;\n    }\n    function getCurrentEventPriority() {\n      var currentEventPriority = fabricGetCurrentEventPriority\n        ? fabricGetCurrentEventPriority()\n        : null;\n\n      if (currentEventPriority != null) {\n        switch (currentEventPriority) {\n          case FabricDiscretePriority:\n            return DiscreteEventPriority;\n\n          case FabricDefaultPriority:\n          default:\n            return DefaultEventPriority;\n        }\n      }\n\n      return DefaultEventPriority;\n    }\n    function shouldAttemptEagerTransition() {\n      return false;\n    } // The Fabric renderer is secondary to the existing React Native renderer.\n\n    var warnsIfNotActing = false;\n    var scheduleTimeout = setTimeout;\n    var cancelTimeout = clearTimeout;\n    var noTimeout = -1; // -------------------\n    function cloneInstance(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      keepChildren,\n      newChildSet\n    ) {\n      var viewConfig = instance.canonical.viewConfig;\n      var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes); // TODO: If the event handlers have changed, we need to update the current props\n      // in the commit phase but there is no host config hook to do it yet.\n      // So instead we hack it by updating it in the render phase.\n\n      instance.canonical.currentProps = newProps;\n      var node = instance.node;\n      var clone;\n\n      if (keepChildren) {\n        if (updatePayload !== null) {\n          clone = cloneNodeWithNewProps(node, updatePayload);\n        } else {\n          // No changes\n          return instance;\n        }\n      } else {\n        // If passChildrenWhenCloningPersistedNodes is enabled, children will be non-null\n        if (newChildSet != null) {\n          if (updatePayload !== null) {\n            clone = cloneNodeWithNewChildrenAndProps(\n              node,\n              newChildSet,\n              updatePayload\n            );\n          } else {\n            clone = cloneNodeWithNewChildren(node, newChildSet);\n          }\n        } else {\n          if (updatePayload !== null) {\n            clone = cloneNodeWithNewChildrenAndProps(node, updatePayload);\n          } else {\n            clone = cloneNodeWithNewChildren(node);\n          }\n        }\n      }\n\n      return {\n        node: clone,\n        canonical: instance.canonical\n      };\n    }\n    function cloneHiddenInstance(instance, type, props) {\n      var viewConfig = instance.canonical.viewConfig;\n      var node = instance.node;\n      var updatePayload = create(\n        {\n          style: {\n            display: \"none\"\n          }\n        },\n        viewConfig.validAttributes\n      );\n      return {\n        node: cloneNodeWithNewProps(node, updatePayload),\n        canonical: instance.canonical\n      };\n    }\n    function cloneHiddenTextInstance(instance, text) {\n      throw new Error(\"Not yet implemented.\");\n    }\n    function createContainerChildSet() {\n      {\n        return createChildNodeSet();\n      }\n    }\n    function appendChildToContainerChildSet(childSet, child) {\n      {\n        appendChildNodeToSet(childSet, child.node);\n      }\n    }\n    function finalizeContainerChildren(container, newChildren) {\n      completeRoot(container, newChildren);\n    }\n    function replaceContainerChildren(container, newChildren) {\n      // Noop - children will be replaced in finalizeContainerChildren\n    }\n    function preloadInstance(type, props) {\n      return true;\n    }\n    function waitForCommitToBeReady() {\n      return null;\n    }\n    //     Microtasks\n    // -------------------\n\n    var supportsMicrotasks =\n      typeof RN$enableMicrotasksInReact !== \"undefined\" &&\n      !!RN$enableMicrotasksInReact;\n    var scheduleMicrotask =\n      typeof queueMicrotask === \"function\" ? queueMicrotask : scheduleTimeout;\n\n    // This is ok in DOM because they types are interchangeable, but in React Native\n    // they aren't.\n\n    function getInstanceFromNode(node) {\n      var instance = node; // In React Native, node is never a text instance\n\n      if (\n        instance.canonical != null &&\n        instance.canonical.internalInstanceHandle != null\n      ) {\n        return instance.canonical.internalInstanceHandle;\n      } // $FlowFixMe[incompatible-return] DevTools incorrectly passes a fiber in React Native.\n\n      return node;\n    }\n\n    function getNodeFromInstance(fiber) {\n      var publicInstance = getPublicInstance(fiber.stateNode);\n\n      if (publicInstance == null) {\n        throw new Error(\"Could not find host instance from fiber\");\n      }\n\n      return publicInstance;\n    }\n\n    function getFiberCurrentPropsFromNode(instance) {\n      return instance.canonical.currentProps;\n    }\n\n    var ReactFabricGlobalResponderHandler = {\n      onChange: function (from, to, blockNativeResponder) {\n        if (from && from.stateNode) {\n          // equivalent to clearJSResponder\n          nativeFabricUIManager.setIsJSResponder(\n            from.stateNode.node,\n            false,\n            blockNativeResponder || false\n          );\n        }\n\n        if (to && to.stateNode) {\n          // equivalent to setJSResponder\n          nativeFabricUIManager.setIsJSResponder(\n            to.stateNode.node,\n            true,\n            blockNativeResponder || false\n          );\n        }\n      }\n    };\n\n    setComponentTree(\n      getFiberCurrentPropsFromNode,\n      getInstanceFromNode,\n      getNodeFromInstance\n    );\n    ResponderEventPlugin.injection.injectGlobalResponderHandler(\n      ReactFabricGlobalResponderHandler\n    );\n\n    /**\n     * `ReactInstanceMap` maintains a mapping from a public facing stateful\n     * instance (key) and the internal representation (value). This allows public\n     * methods to accept the user facing instance as an argument and map them back\n     * to internal methods.\n     *\n     * Note that this module is currently shared and assumed to be stateless.\n     * If this becomes an actual Map, that will break.\n     */\n    function get(key) {\n      return key._reactInternals;\n    }\n    function set(key, value) {\n      key._reactInternals = value;\n    }\n\n    // ATTENTION\n    // When adding new symbols to this file,\n    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n    // The Symbol used to tag the ReactElement-like types.\n    var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n    var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n    var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n    var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n    var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\"); // TODO: Delete with enableRenderableContext\n\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\");\n    var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n    var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n    var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n    var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n    var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n    var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n    var REACT_SCOPE_TYPE = Symbol.for(\"react.scope\");\n    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\"react.debug_trace_mode\");\n    var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for(\"react.legacy_hidden\");\n    var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n    var REACT_TRACING_MARKER_TYPE = Symbol.for(\"react.tracing_marker\");\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n        return null;\n      }\n\n      var maybeIterator =\n        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n        maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n      if (typeof maybeIterator === \"function\") {\n        return maybeIterator;\n      }\n\n      return null;\n    }\n\n    function getWrappedName$1(outerType, innerType, wrapperName) {\n      var displayName = outerType.displayName;\n\n      if (displayName) {\n        return displayName;\n      }\n\n      var functionName = innerType.displayName || innerType.name || \"\";\n      return functionName !== \"\"\n        ? wrapperName + \"(\" + functionName + \")\"\n        : wrapperName;\n    } // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n    function getContextName$1(type) {\n      return type.displayName || \"Context\";\n    }\n\n    var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n    function getComponentNameFromType(type) {\n      if (type == null) {\n        // Host root, text node or just invalid type.\n        return null;\n      }\n\n      if (typeof type === \"function\") {\n        if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n          // TODO: Create a convention for naming client references with debug info.\n          return null;\n        }\n\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === \"string\") {\n        return type;\n      }\n\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n\n      if (typeof type === \"object\") {\n        {\n          if (typeof type.tag === \"number\") {\n            error(\n              \"Received an unexpected object in getComponentNameFromType(). \" +\n                \"This is likely a bug in React. Please file an issue.\"\n            );\n          }\n        }\n\n        switch (type.$$typeof) {\n          case REACT_PROVIDER_TYPE: {\n            var provider = type;\n            return getContextName$1(provider._context) + \".Provider\";\n          }\n\n          case REACT_CONTEXT_TYPE:\n            var context = type;\n\n            {\n              return getContextName$1(context) + \".Consumer\";\n            }\n\n          case REACT_CONSUMER_TYPE: {\n            return null;\n          }\n\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName$1(type, type.render, \"ForwardRef\");\n\n          case REACT_MEMO_TYPE:\n            var outerName = type.displayName || null;\n\n            if (outerName !== null) {\n              return outerName;\n            }\n\n            return getComponentNameFromType(type.type) || \"Memo\";\n\n          case REACT_LAZY_TYPE: {\n            var lazyComponent = type;\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n\n            try {\n              return getComponentNameFromType(init(payload));\n            } catch (x) {\n              return null;\n            }\n          }\n        }\n      }\n\n      return null;\n    }\n\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var functionName = innerType.displayName || innerType.name || \"\";\n      return (\n        outerType.displayName ||\n        (functionName !== \"\"\n          ? wrapperName + \"(\" + functionName + \")\"\n          : wrapperName)\n      );\n    } // Keep in sync with shared/getComponentNameFromType\n\n    function getContextName(type) {\n      return type.displayName || \"Context\";\n    }\n\n    function getComponentNameFromFiber(fiber) {\n      var tag = fiber.tag,\n        type = fiber.type;\n\n      switch (tag) {\n        case CacheComponent:\n          return \"Cache\";\n\n        case ContextConsumer: {\n          var context = type;\n          return getContextName(context) + \".Consumer\";\n        }\n\n        case ContextProvider: {\n          var provider = type;\n          return getContextName(provider._context) + \".Provider\";\n        }\n\n        case DehydratedFragment:\n          return \"DehydratedFragment\";\n\n        case ForwardRef:\n          return getWrappedName(type, type.render, \"ForwardRef\");\n\n        case Fragment:\n          return \"Fragment\";\n\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          // Host component type is the display name (e.g. \"div\", \"View\")\n          return type;\n\n        case HostPortal:\n          return \"Portal\";\n\n        case HostRoot:\n          return \"Root\";\n\n        case HostText:\n          return \"Text\";\n\n        case LazyComponent:\n          // Name comes from the type in this case; we don't have a tag.\n          return getComponentNameFromType(type);\n\n        case Mode:\n          if (type === REACT_STRICT_MODE_TYPE) {\n            // Don't be less specific than shared/getComponentNameFromType\n            return \"StrictMode\";\n          }\n\n          return \"Mode\";\n\n        case OffscreenComponent:\n          return \"Offscreen\";\n\n        case Profiler:\n          return \"Profiler\";\n\n        case ScopeComponent:\n          return \"Scope\";\n\n        case SuspenseComponent:\n          return \"Suspense\";\n\n        case SuspenseListComponent:\n          return \"SuspenseList\";\n\n        case TracingMarkerComponent:\n          return \"TracingMarker\";\n        // The display name for this tags come from the user-provided type:\n\n        case ClassComponent:\n        case FunctionComponent:\n        case IncompleteClassComponent:\n        case IndeterminateComponent:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          if (typeof type === \"function\") {\n            return type.displayName || type.name || null;\n          }\n\n          if (typeof type === \"string\") {\n            return type;\n          }\n\n          break;\n      }\n\n      return null;\n    }\n\n    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;\n    function getNearestMountedFiber(fiber) {\n      var node = fiber;\n      var nearestMounted = fiber;\n\n      if (!fiber.alternate) {\n        // If there is no alternate, this might be a new tree that isn't inserted\n        // yet. If it is, then it will have a pending insertion effect on it.\n        var nextNode = node;\n\n        do {\n          node = nextNode;\n\n          if ((node.flags & (Placement | Hydrating)) !== NoFlags$1) {\n            // This is an insertion or in-progress hydration. The nearest possible\n            // mounted fiber is the parent but we need to continue to figure out\n            // if that one is still mounted.\n            nearestMounted = node.return;\n          } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n          nextNode = node.return;\n        } while (nextNode);\n      } else {\n        while (node.return) {\n          node = node.return;\n        }\n      }\n\n      if (node.tag === HostRoot) {\n        // TODO: Check if this was a nested HostRoot when used with\n        // renderContainerIntoSubtree.\n        return nearestMounted;\n      } // If we didn't hit the root, that means that we're in an disconnected tree\n      // that has been unmounted.\n\n      return null;\n    }\n    function isMounted(component) {\n      {\n        var owner = ReactCurrentOwner$3.current;\n\n        if (owner !== null && owner.tag === ClassComponent) {\n          var ownerFiber = owner;\n          var instance = ownerFiber.stateNode;\n\n          if (!instance._warnedAboutRefsInRender) {\n            error(\n              \"%s is accessing isMounted inside its render() function. \" +\n                \"render() should be a pure function of props and state. It should \" +\n                \"never access something that requires stale data from the previous \" +\n                \"render, such as refs. Move this logic to componentDidMount and \" +\n                \"componentDidUpdate instead.\",\n              getComponentNameFromFiber(ownerFiber) || \"A component\"\n            );\n          }\n\n          instance._warnedAboutRefsInRender = true;\n        }\n      }\n\n      var fiber = get(component);\n\n      if (!fiber) {\n        return false;\n      }\n\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n\n    function assertIsMounted(fiber) {\n      if (getNearestMountedFiber(fiber) !== fiber) {\n        throw new Error(\"Unable to find node on an unmounted component.\");\n      }\n    }\n\n    function findCurrentFiberUsingSlowPath(fiber) {\n      var alternate = fiber.alternate;\n\n      if (!alternate) {\n        // If there is no alternate, then we only need to check if it is mounted.\n        var nearestMounted = getNearestMountedFiber(fiber);\n\n        if (nearestMounted === null) {\n          throw new Error(\"Unable to find node on an unmounted component.\");\n        }\n\n        if (nearestMounted !== fiber) {\n          return null;\n        }\n\n        return fiber;\n      } // If we have two possible branches, we'll walk backwards up to the root\n      // to see what path the root points to. On the way we may hit one of the\n      // special cases and we'll deal with them.\n\n      var a = fiber;\n      var b = alternate;\n\n      while (true) {\n        var parentA = a.return;\n\n        if (parentA === null) {\n          // We're at the root.\n          break;\n        }\n\n        var parentB = parentA.alternate;\n\n        if (parentB === null) {\n          // There is no alternate. This is an unusual case. Currently, it only\n          // happens when a Suspense component is hidden. An extra fragment fiber\n          // is inserted in between the Suspense fiber and its children. Skip\n          // over this extra fragment fiber and proceed to the next parent.\n          var nextParent = parentA.return;\n\n          if (nextParent !== null) {\n            a = b = nextParent;\n            continue;\n          } // If there's no parent, we're at the root.\n\n          break;\n        } // If both copies of the parent fiber point to the same child, we can\n        // assume that the child is current. This happens when we bailout on low\n        // priority: the bailed out fiber's child reuses the current child.\n\n        if (parentA.child === parentB.child) {\n          var child = parentA.child;\n\n          while (child) {\n            if (child === a) {\n              // We've determined that A is the current branch.\n              assertIsMounted(parentA);\n              return fiber;\n            }\n\n            if (child === b) {\n              // We've determined that B is the current branch.\n              assertIsMounted(parentA);\n              return alternate;\n            }\n\n            child = child.sibling;\n          } // We should never have an alternate for any mounting node. So the only\n          // way this could possibly happen is if this was unmounted, if at all.\n\n          throw new Error(\"Unable to find node on an unmounted component.\");\n        }\n\n        if (a.return !== b.return) {\n          // The return pointer of A and the return pointer of B point to different\n          // fibers. We assume that return pointers never criss-cross, so A must\n          // belong to the child set of A.return, and B must belong to the child\n          // set of B.return.\n          a = parentA;\n          b = parentB;\n        } else {\n          // The return pointers point to the same fiber. We'll have to use the\n          // default, slow path: scan the child sets of each parent alternate to see\n          // which child belongs to which set.\n          //\n          // Search parent A's child set\n          var didFindChild = false;\n          var _child = parentA.child;\n\n          while (_child) {\n            if (_child === a) {\n              didFindChild = true;\n              a = parentA;\n              b = parentB;\n              break;\n            }\n\n            if (_child === b) {\n              didFindChild = true;\n              b = parentA;\n              a = parentB;\n              break;\n            }\n\n            _child = _child.sibling;\n          }\n\n          if (!didFindChild) {\n            // Search parent B's child set\n            _child = parentB.child;\n\n            while (_child) {\n              if (_child === a) {\n                didFindChild = true;\n                a = parentB;\n                b = parentA;\n                break;\n              }\n\n              if (_child === b) {\n                didFindChild = true;\n                b = parentB;\n                a = parentA;\n                break;\n              }\n\n              _child = _child.sibling;\n            }\n\n            if (!didFindChild) {\n              throw new Error(\n                \"Child was not found in either parent set. This indicates a bug \" +\n                  \"in React related to the return pointer. Please file an issue.\"\n              );\n            }\n          }\n        }\n\n        if (a.alternate !== b) {\n          throw new Error(\n            \"Return fibers should always be each others' alternates. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        }\n      } // If the root is not a host container, we're in a disconnected tree. I.e.\n      // unmounted.\n\n      if (a.tag !== HostRoot) {\n        throw new Error(\"Unable to find node on an unmounted component.\");\n      }\n\n      if (a.stateNode.current === a) {\n        // We've determined that A is the current branch.\n        return fiber;\n      } // Otherwise B has to be current branch.\n\n      return alternate;\n    }\n    function findCurrentHostFiber(parent) {\n      var currentParent = findCurrentFiberUsingSlowPath(parent);\n      return currentParent !== null\n        ? findCurrentHostFiberImpl(currentParent)\n        : null;\n    }\n\n    function findCurrentHostFiberImpl(node) {\n      // Next we'll drill down this component to find the first HostComponent/Text.\n      var tag = node.tag;\n\n      if (\n        tag === HostComponent ||\n        tag === HostHoistable ||\n        tag === HostSingleton ||\n        tag === HostText\n      ) {\n        return node;\n      }\n\n      var child = node.child;\n\n      while (child !== null) {\n        var match = findCurrentHostFiberImpl(child);\n\n        if (match !== null) {\n          return match;\n        }\n\n        child = child.sibling;\n      }\n\n      return null;\n    }\n    function doesFiberContain(parentFiber, childFiber) {\n      var node = childFiber;\n      var parentFiberAlternate = parentFiber.alternate;\n\n      while (node !== null) {\n        if (node === parentFiber || node === parentFiberAlternate) {\n          return true;\n        }\n\n        node = node.return;\n      }\n\n      return false;\n    }\n\n    var valueStack = [];\n    var fiberStack;\n\n    {\n      fiberStack = [];\n    }\n\n    var index = -1;\n\n    function createCursor(defaultValue) {\n      return {\n        current: defaultValue\n      };\n    }\n\n    function pop(cursor, fiber) {\n      if (index < 0) {\n        {\n          error(\"Unexpected pop.\");\n        }\n\n        return;\n      }\n\n      {\n        if (fiber !== fiberStack[index]) {\n          error(\"Unexpected Fiber popped.\");\n        }\n      }\n\n      cursor.current = valueStack[index];\n      valueStack[index] = null;\n\n      {\n        fiberStack[index] = null;\n      }\n\n      index--;\n    }\n\n    function push(cursor, value, fiber) {\n      index++;\n      valueStack[index] = cursor.current;\n\n      {\n        fiberStack[index] = fiber;\n      }\n\n      cursor.current = value;\n    }\n\n    var emptyContextObject = {};\n\n    {\n      Object.freeze(emptyContextObject);\n    } // A cursor to the current merged context object on the stack.\n\n    function hasContextChanged() {\n      {\n        return false;\n      }\n    }\n\n    function isContextProvider(type) {\n      {\n        return false;\n      }\n    }\n\n    function processChildContext(fiber, type, parentContext) {\n      {\n        return parentContext;\n      }\n    }\n\n    function findCurrentUnmaskedContext(fiber) {\n      {\n        return emptyContextObject;\n      }\n    }\n\n    var LegacyRoot = 0;\n    var ConcurrentRoot = 1;\n\n    // We use the existence of the state object as an indicator that the component\n    // is hidden.\n    var OffscreenVisible =\n      /*                     */\n      1;\n    var OffscreenDetached =\n      /*                    */\n      2;\n    var OffscreenPassiveEffectsConnected =\n      /*     */\n      4;\n    function isOffscreenManual(offscreenFiber) {\n      return (\n        offscreenFiber.memoizedProps !== null &&\n        offscreenFiber.memoizedProps.mode === \"manual\"\n      );\n    }\n\n    /**\n     * inlined Object.is polyfill to avoid requiring consumers ship their own\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n     */\n    function is(x, y) {\n      return (\n        (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n      );\n    }\n\n    var objectIs = typeof Object.is === \"function\" ? Object.is : is; // $FlowFixMe[method-unbinding]\n\n    // This is imported by the event replaying implementation in React DOM. It's\n    // in a separate file to break a circular dependency between the renderer and\n    // the reconciler.\n    function isRootDehydrated(root) {\n      var currentState = root.current.memoizedState;\n      return currentState.isDehydrated;\n    }\n\n    var contextStackCursor = createCursor(null);\n    var contextFiberStackCursor = createCursor(null);\n    var rootInstanceStackCursor = createCursor(null); // Represents the nearest host transition provider (in React DOM, a <form />)\n\n    function requiredContext(c) {\n      {\n        if (c === null) {\n          error(\n            \"Expected host context to exist. This error is likely caused by a bug \" +\n              \"in React. Please file an issue.\"\n          );\n        }\n      }\n\n      return c;\n    }\n\n    function getRootHostContainer() {\n      var rootInstance = requiredContext(rootInstanceStackCursor.current);\n      return rootInstance;\n    }\n\n    function pushHostContainer(fiber, nextRootInstance) {\n      // Push current root instance onto the stack;\n      // This allows us to reset root when portals are popped.\n      push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n      // This enables us to pop only Fibers that provide unique contexts.\n\n      push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n      // However, we can't just call getRootHostContext() and push it because\n      // we'd have a different number of entries on the stack depending on\n      // whether getRootHostContext() throws somewhere in renderer code or not.\n      // So we push an empty value first. This lets us safely unwind on errors.\n\n      push(contextStackCursor, null, fiber);\n      var nextRootContext = getRootHostContext(); // Now that we know this function doesn't throw, replace it.\n\n      pop(contextStackCursor, fiber);\n      push(contextStackCursor, nextRootContext, fiber);\n    }\n\n    function popHostContainer(fiber) {\n      pop(contextStackCursor, fiber);\n      pop(contextFiberStackCursor, fiber);\n      pop(rootInstanceStackCursor, fiber);\n    }\n\n    function getHostContext() {\n      var context = requiredContext(contextStackCursor.current);\n      return context;\n    }\n\n    function pushHostContext(fiber) {\n      var context = requiredContext(contextStackCursor.current);\n      var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.\n\n      if (context !== nextContext) {\n        // Track the context and the Fiber that provided it.\n        // This enables us to pop only Fibers that provide unique contexts.\n        push(contextFiberStackCursor, fiber, fiber);\n        push(contextStackCursor, nextContext, fiber);\n      }\n    }\n\n    function popHostContext(fiber) {\n      if (contextFiberStackCursor.current === fiber) {\n        // Do not pop unless this Fiber provided the current context.\n        // pushHostContext() only pushes Fibers that provide unique contexts.\n        pop(contextStackCursor, fiber);\n        pop(contextFiberStackCursor, fiber);\n      }\n    }\n\n    var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n\n    var hydrationErrors = null;\n\n    function prepareToHydrateHostInstance(fiber, hostContext) {\n      {\n        throw new Error(\n          \"Expected prepareToHydrateHostInstance() to never be called. \" +\n            \"This error is likely caused by a bug in React. Please file an issue.\"\n        );\n      }\n    }\n\n    function prepareToHydrateHostTextInstance(fiber) {\n      {\n        throw new Error(\n          \"Expected prepareToHydrateHostTextInstance() to never be called. \" +\n            \"This error is likely caused by a bug in React. Please file an issue.\"\n        );\n      }\n    }\n\n    function prepareToHydrateHostSuspenseInstance(fiber) {\n      {\n        throw new Error(\n          \"Expected prepareToHydrateHostSuspenseInstance() to never be called. \" +\n            \"This error is likely caused by a bug in React. Please file an issue.\"\n        );\n      }\n    }\n\n    function popHydrationState(fiber) {\n      {\n        return false;\n      }\n    }\n\n    function upgradeHydrationErrorsToRecoverable() {\n      if (hydrationErrors !== null) {\n        // Successfully completed a forced client render. The errors that occurred\n        // during the hydration attempt are now recovered. We will log them in\n        // commit phase, once the entire tree has finished.\n        queueRecoverableErrors(hydrationErrors);\n        hydrationErrors = null;\n      }\n    }\n\n    function getIsHydrating() {\n      return isHydrating;\n    }\n\n    function queueHydrationError(error) {\n      if (hydrationErrors === null) {\n        hydrationErrors = [error];\n      } else {\n        hydrationErrors.push(error);\n      }\n    }\n\n    // we wait until the current render is over (either finished or interrupted)\n    // before adding it to the fiber/hook queue. Push to this array so we can\n    // access the queue, fiber, update, et al later.\n\n    var concurrentQueues = [];\n    var concurrentQueuesIndex = 0;\n    var concurrentlyUpdatedLanes = NoLanes;\n    function finishQueueingConcurrentUpdates() {\n      var endIndex = concurrentQueuesIndex;\n      concurrentQueuesIndex = 0;\n      concurrentlyUpdatedLanes = NoLanes;\n      var i = 0;\n\n      while (i < endIndex) {\n        var fiber = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var queue = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var update = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var lane = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n\n        if (queue !== null && update !== null) {\n          var pending = queue.pending;\n\n          if (pending === null) {\n            // This is the first update. Create a circular list.\n            update.next = update;\n          } else {\n            update.next = pending.next;\n            pending.next = update;\n          }\n\n          queue.pending = update;\n        }\n\n        if (lane !== NoLane) {\n          markUpdateLaneFromFiberToRoot(fiber, update, lane);\n        }\n      }\n    }\n    function getConcurrentlyUpdatedLanes() {\n      return concurrentlyUpdatedLanes;\n    }\n\n    function enqueueUpdate$1(fiber, queue, update, lane) {\n      // Don't update the `childLanes` on the return path yet. If we already in\n      // the middle of rendering, wait until after it has completed.\n      concurrentQueues[concurrentQueuesIndex++] = fiber;\n      concurrentQueues[concurrentQueuesIndex++] = queue;\n      concurrentQueues[concurrentQueuesIndex++] = update;\n      concurrentQueues[concurrentQueuesIndex++] = lane;\n      concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane); // The fiber's `lane` field is used in some places to check if any work is\n      // scheduled, to perform an eager bailout, so we need to update it immediately.\n      // TODO: We should probably move this to the \"shared\" queue instead.\n\n      fiber.lanes = mergeLanes(fiber.lanes, lane);\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      }\n    }\n\n    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function enqueueConcurrentHookUpdateAndEagerlyBailout(\n      fiber,\n      queue,\n      update\n    ) {\n      // This function is used to queue an update that doesn't need a rerender. The\n      // only reason we queue it is in case there's a subsequent higher priority\n      // update that causes it to be rebased.\n      var lane = NoLane;\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane); // Usually we can rely on the upcoming render phase to process the concurrent\n      // queue. However, since this is a bail out, we're not scheduling any work\n      // here. So the update we just queued will leak until something else happens\n      // to schedule work (if ever).\n      //\n      // Check if we're currently in the middle of rendering a tree, and if not,\n      // process the queue immediately to prevent a leak.\n\n      var isConcurrentlyRendering = getWorkInProgressRoot() !== null;\n\n      if (!isConcurrentlyRendering) {\n        finishQueueingConcurrentUpdates();\n      }\n    }\n    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function enqueueConcurrentRenderForLane(fiber, lane) {\n      enqueueUpdate$1(fiber, null, null, lane);\n      return getRootForUpdatedFiber(fiber);\n    } // Calling this function outside this module should only be done for backwards\n    // compatibility and should always be accompanied by a warning.\n\n    function unsafe_markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n      // NOTE: For Hyrum's Law reasons, if an infinite update loop is detected, it\n      // should throw before `markUpdateLaneFromFiberToRoot` is called. But this is\n      // undefined behavior and we can change it if we need to; it just so happens\n      // that, at the time of this writing, there's an internal product test that\n      // happens to rely on this.\n      var root = getRootForUpdatedFiber(sourceFiber);\n      markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);\n      return root;\n    }\n\n    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {\n      // Update the source fiber's lanes\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n      var alternate = sourceFiber.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      } // Walk the parent path to the root and update the child lanes.\n\n      var isHidden = false;\n      var parent = sourceFiber.return;\n      var node = sourceFiber;\n\n      while (parent !== null) {\n        parent.childLanes = mergeLanes(parent.childLanes, lane);\n        alternate = parent.alternate;\n\n        if (alternate !== null) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n        }\n\n        if (parent.tag === OffscreenComponent) {\n          // Check if this offscreen boundary is currently hidden.\n          //\n          // The instance may be null if the Offscreen parent was unmounted. Usually\n          // the parent wouldn't be reachable in that case because we disconnect\n          // fibers from the tree when they are deleted. However, there's a weird\n          // edge case where setState is called on a fiber that was interrupted\n          // before it ever mounted. Because it never mounts, it also never gets\n          // deleted. Because it never gets deleted, its return pointer never gets\n          // disconnected. Which means it may be attached to a deleted Offscreen\n          // parent node. (This discovery suggests it may be better for memory usage\n          // if we don't attach the `return` pointer until the commit phase, though\n          // in order to do that we'd need some other way to track the return\n          // pointer during the initial render, like on the stack.)\n          //\n          // This case is always accompanied by a warning, but we still need to\n          // account for it. (There may be other cases that we haven't discovered,\n          // too.)\n          var offscreenInstance = parent.stateNode;\n\n          if (\n            offscreenInstance !== null &&\n            !(offscreenInstance._visibility & OffscreenVisible)\n          ) {\n            isHidden = true;\n          }\n        }\n\n        node = parent;\n        parent = parent.return;\n      }\n\n      if (isHidden && update !== null && node.tag === HostRoot) {\n        var root = node.stateNode;\n        markHiddenUpdate(root, update, lane);\n      }\n    }\n\n    function getRootForUpdatedFiber(sourceFiber) {\n      // TODO: We will detect and infinite update loop and throw even if this fiber\n      // has already unmounted. This isn't really necessary but it happens to be the\n      // current behavior we've used for several release cycles. Consider not\n      // performing this check if the updated fiber already unmounted, since it's\n      // not possible for that to cause an infinite update loop.\n      throwIfInfiniteUpdateLoopDetected(); // When a setState happens, we must ensure the root is scheduled. Because\n      // update queues do not have a backpointer to the root, the only way to do\n      // this currently is to walk up the return path. This used to not be a big\n      // deal because we would have to walk up the return path to set\n      // the `childLanes`, anyway, but now those two traversals happen at\n      // different times.\n      // TODO: Consider adding a `root` backpointer on the update queue.\n\n      detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);\n      var node = sourceFiber;\n      var parent = node.return;\n\n      while (parent !== null) {\n        detectUpdateOnUnmountedFiber(sourceFiber, node);\n        node = parent;\n        parent = node.return;\n      }\n\n      return node.tag === HostRoot ? node.stateNode : null;\n    }\n\n    function detectUpdateOnUnmountedFiber(sourceFiber, parent) {\n      {\n        var alternate = parent.alternate;\n\n        if (\n          alternate === null &&\n          (parent.flags & (Placement | Hydrating)) !== NoFlags$1\n        ) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n\n    var ReactCurrentActQueue$3 = ReactSharedInternals.ReactCurrentActQueue; // A linked list of all the roots with pending work. In an idiomatic app,\n    // there's only a single root, but we do support multi root apps, hence this\n    // extra complexity. But this module is optimized for the single root case.\n\n    var firstScheduledRoot = null;\n    var lastScheduledRoot = null; // Used to prevent redundant mircotasks from being scheduled.\n\n    var didScheduleMicrotask = false; // `act` \"microtasks\" are scheduled on the `act` queue instead of an actual\n    // microtask, so we have to dedupe those separately. This wouldn't be an issue\n    // if we required all `act` calls to be awaited, which we might in the future.\n\n    var didScheduleMicrotask_act = false; // Used to quickly bail out of flushSync if there's no sync work to do.\n\n    var mightHavePendingSyncWork = false;\n    var isFlushingWork = false;\n    var currentEventTransitionLane = NoLane;\n    function ensureRootIsScheduled(root) {\n      // This function is called whenever a root receives an update. It does two\n      // things 1) it ensures the root is in the root schedule, and 2) it ensures\n      // there's a pending microtask to process the root schedule.\n      //\n      // Most of the actual scheduling logic does not happen until\n      // `scheduleTaskForRootDuringMicrotask` runs.\n      // Add the root to the schedule\n      if (root === lastScheduledRoot || root.next !== null);\n      else {\n        if (lastScheduledRoot === null) {\n          firstScheduledRoot = lastScheduledRoot = root;\n        } else {\n          lastScheduledRoot.next = root;\n          lastScheduledRoot = root;\n        }\n      } // Any time a root received an update, we set this to true until the next time\n      // we process the schedule. If it's false, then we can quickly exit flushSync\n      // without consulting the schedule.\n\n      mightHavePendingSyncWork = true; // At the end of the current event, go through each of the roots and ensure\n      // there's a task scheduled for each one at the correct priority.\n\n      if (ReactCurrentActQueue$3.current !== null) {\n        // We're inside an `act` scope.\n        if (!didScheduleMicrotask_act) {\n          didScheduleMicrotask_act = true;\n          scheduleImmediateTask(processRootScheduleInMicrotask);\n        }\n      } else {\n        if (!didScheduleMicrotask) {\n          didScheduleMicrotask = true;\n          scheduleImmediateTask(processRootScheduleInMicrotask);\n        }\n      }\n\n      {\n        // While this flag is disabled, we schedule the render task immediately\n        // instead of waiting a microtask.\n        // TODO: We need to land enableDeferRootSchedulingToMicrotask ASAP to\n        // unblock additional features we have planned.\n        scheduleTaskForRootDuringMicrotask(root, now$1());\n      }\n\n      if (ReactCurrentActQueue$3.isBatchingLegacy && root.tag === LegacyRoot) {\n        // Special `act` case: Record whenever a legacy update is scheduled.\n        ReactCurrentActQueue$3.didScheduleLegacyUpdate = true;\n      }\n    }\n    function flushSyncWorkOnAllRoots() {\n      // This is allowed to be called synchronously, but the caller should check\n      // the execution context first.\n      flushSyncWorkAcrossRoots_impl(false);\n    }\n    function flushSyncWorkOnLegacyRootsOnly() {\n      // This is allowed to be called synchronously, but the caller should check\n      // the execution context first.\n      flushSyncWorkAcrossRoots_impl(true);\n    }\n\n    function flushSyncWorkAcrossRoots_impl(onlyLegacy) {\n      if (isFlushingWork) {\n        // Prevent reentrancy.\n        // TODO: Is this overly defensive? The callers must check the execution\n        // context first regardless.\n        return;\n      }\n\n      if (!mightHavePendingSyncWork) {\n        // Fast path. There's no sync work to do.\n        return;\n      } // There may or may not be synchronous work scheduled. Let's check.\n\n      var didPerformSomeWork;\n      var errors = null;\n      isFlushingWork = true;\n\n      do {\n        didPerformSomeWork = false;\n        var root = firstScheduledRoot;\n\n        while (root !== null) {\n          if (onlyLegacy && root.tag !== LegacyRoot);\n          else {\n            var workInProgressRoot = getWorkInProgressRoot();\n            var workInProgressRootRenderLanes =\n              getWorkInProgressRootRenderLanes();\n            var nextLanes = getNextLanes(\n              root,\n              root === workInProgressRoot\n                ? workInProgressRootRenderLanes\n                : NoLanes\n            );\n\n            if (includesSyncLane(nextLanes)) {\n              // This root has pending sync work. Flush it now.\n              try {\n                didPerformSomeWork = true;\n                performSyncWorkOnRoot(root, nextLanes);\n              } catch (error) {\n                // Collect errors so we can rethrow them at the end\n                if (errors === null) {\n                  errors = [error];\n                } else {\n                  errors.push(error);\n                }\n              }\n            }\n          }\n\n          root = root.next;\n        }\n      } while (didPerformSomeWork);\n\n      isFlushingWork = false; // If any errors were thrown, rethrow them right before exiting.\n      // TODO: Consider returning these to the caller, to allow them to decide\n      // how/when to rethrow.\n\n      if (errors !== null) {\n        if (errors.length > 1) {\n          if (typeof AggregateError === \"function\") {\n            // eslint-disable-next-line no-undef\n            throw new AggregateError(errors);\n          } else {\n            for (var i = 1; i < errors.length; i++) {\n              scheduleImmediateTask(throwError.bind(null, errors[i]));\n            }\n\n            var firstError = errors[0];\n            throw firstError;\n          }\n        } else {\n          var error = errors[0];\n          throw error;\n        }\n      }\n    }\n\n    function throwError(error) {\n      throw error;\n    }\n\n    function processRootScheduleInMicrotask() {\n      // This function is always called inside a microtask. It should never be\n      // called synchronously.\n      didScheduleMicrotask = false;\n\n      {\n        didScheduleMicrotask_act = false;\n      } // We'll recompute this as we iterate through all the roots and schedule them.\n\n      mightHavePendingSyncWork = false;\n      var currentTime = now$1();\n      var prev = null;\n      var root = firstScheduledRoot;\n\n      while (root !== null) {\n        var next = root.next;\n\n        if (\n          currentEventTransitionLane !== NoLane &&\n          shouldAttemptEagerTransition()\n        ) {\n          // A transition was scheduled during an event, but we're going to try to\n          // render it synchronously anyway. We do this during a popstate event to\n          // preserve the scroll position of the previous page.\n          upgradePendingLaneToSync(root, currentEventTransitionLane);\n        }\n\n        var nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);\n\n        if (nextLanes === NoLane) {\n          // This root has no more pending work. Remove it from the schedule. To\n          // guard against subtle reentrancy bugs, this microtask is the only place\n          // we do this — you can add roots to the schedule whenever, but you can\n          // only remove them here.\n          // Null this out so we know it's been removed from the schedule.\n          root.next = null;\n\n          if (prev === null) {\n            // This is the new head of the list\n            firstScheduledRoot = next;\n          } else {\n            prev.next = next;\n          }\n\n          if (next === null) {\n            // This is the new tail of the list\n            lastScheduledRoot = prev;\n          }\n        } else {\n          // This root still has work. Keep it in the list.\n          prev = root;\n\n          if (includesSyncLane(nextLanes)) {\n            mightHavePendingSyncWork = true;\n          }\n        }\n\n        root = next;\n      }\n\n      currentEventTransitionLane = NoLane; // At the end of the microtask, flush any pending synchronous work. This has\n      // to come at the end, because it does actual rendering work that might throw.\n\n      flushSyncWorkOnAllRoots();\n    }\n\n    function scheduleTaskForRootDuringMicrotask(root, currentTime) {\n      // This function is always called inside a microtask, or at the very end of a\n      // rendering task right before we yield to the main thread. It should never be\n      // called synchronously.\n      //\n      // TODO: Unless enableDeferRootSchedulingToMicrotask is off. We need to land\n      // that ASAP to unblock additional features we have planned.\n      //\n      // This function also never performs React work synchronously; it should\n      // only schedule work to be performed later, in a separate task or microtask.\n      // Check if any lanes are being starved by other work. If so, mark them as\n      // expired so we know to work on those next.\n      markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n      var workInProgressRoot = getWorkInProgressRoot();\n      var workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n      var nextLanes = getNextLanes(\n        root,\n        root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes\n      );\n      var existingCallbackNode = root.callbackNode;\n\n      if (\n        // Check if there's nothing to work on\n        nextLanes === NoLanes || // If this root is currently suspended and waiting for data to resolve, don't\n        // schedule a task to render it. We'll either wait for a ping, or wait to\n        // receive an update.\n        //\n        // Suspended render phase\n        (root === workInProgressRoot && isWorkLoopSuspendedOnData()) || // Suspended commit phase\n        root.cancelPendingCommit !== null\n      ) {\n        // Fast path: There's nothing to work on.\n        if (existingCallbackNode !== null) {\n          cancelCallback(existingCallbackNode);\n        }\n\n        root.callbackNode = null;\n        root.callbackPriority = NoLane;\n        return NoLane;\n      } // Schedule a new callback in the host environment.\n\n      if (includesSyncLane(nextLanes)) {\n        // Synchronous work is always flushed at the end of the microtask, so we\n        // don't need to schedule an additional task.\n        if (existingCallbackNode !== null) {\n          cancelCallback(existingCallbackNode);\n        }\n\n        root.callbackPriority = SyncLane;\n        root.callbackNode = null;\n        return SyncLane;\n      } else {\n        // We use the highest priority lane to represent the priority of the callback.\n        var existingCallbackPriority = root.callbackPriority;\n        var newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n        if (\n          newCallbackPriority === existingCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n          // Scheduler task, rather than an `act` task, cancel it and re-schedule\n          // on the `act` queue.\n          !(\n            ReactCurrentActQueue$3.current !== null &&\n            existingCallbackNode !== fakeActCallbackNode$1\n          )\n        ) {\n          // The priority hasn't changed. We can reuse the existing task.\n          return newCallbackPriority;\n        } else {\n          // Cancel the existing callback. We'll schedule a new one below.\n          cancelCallback(existingCallbackNode);\n        }\n\n        var schedulerPriorityLevel;\n\n        switch (lanesToEventPriority(nextLanes)) {\n          case DiscreteEventPriority:\n            schedulerPriorityLevel = ImmediatePriority;\n            break;\n\n          case ContinuousEventPriority:\n            schedulerPriorityLevel = UserBlockingPriority;\n            break;\n\n          case DefaultEventPriority:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n\n          case IdleEventPriority:\n            schedulerPriorityLevel = IdlePriority;\n            break;\n\n          default:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n        }\n\n        var newCallbackNode = scheduleCallback$1(\n          schedulerPriorityLevel,\n          performConcurrentWorkOnRoot.bind(null, root)\n        );\n        root.callbackPriority = newCallbackPriority;\n        root.callbackNode = newCallbackNode;\n        return newCallbackPriority;\n      }\n    }\n\n    function getContinuationForRoot(root, originalCallbackNode) {\n      // This is called at the end of `performConcurrentWorkOnRoot` to determine\n      // if we need to schedule a continuation task.\n      //\n      // Usually `scheduleTaskForRootDuringMicrotask` only runs inside a microtask;\n      // however, since most of the logic for determining if we need a continuation\n      // versus a new task is the same, we cheat a bit and call it here. This is\n      // only safe to do because we know we're at the end of the browser task.\n      // So although it's not an actual microtask, it might as well be.\n      scheduleTaskForRootDuringMicrotask(root, now$1());\n\n      if (root.callbackNode === originalCallbackNode) {\n        // The task node scheduled for this root is the same one that's\n        // currently executed. Need to return a continuation.\n        return performConcurrentWorkOnRoot.bind(null, root);\n      }\n\n      return null;\n    }\n    var fakeActCallbackNode$1 = {};\n\n    function scheduleCallback$1(priorityLevel, callback) {\n      if (ReactCurrentActQueue$3.current !== null) {\n        // Special case: We're inside an `act` scope (a testing utility).\n        // Instead of scheduling work in the host environment, add it to a\n        // fake internal queue that's managed by the `act` implementation.\n        ReactCurrentActQueue$3.current.push(callback);\n        return fakeActCallbackNode$1;\n      } else {\n        return scheduleCallback$2(priorityLevel, callback);\n      }\n    }\n\n    function cancelCallback(callbackNode) {\n      if (callbackNode === fakeActCallbackNode$1);\n      else if (callbackNode !== null) {\n        cancelCallback$1(callbackNode);\n      }\n    }\n\n    function scheduleImmediateTask(cb) {\n      if (ReactCurrentActQueue$3.current !== null) {\n        // Special case: Inside an `act` scope, we push microtasks to the fake `act`\n        // callback queue. This is because we currently support calling `act`\n        // without awaiting the result. The plan is to deprecate that, and require\n        // that you always await the result so that the microtasks have a chance to\n        // run. But it hasn't happened yet.\n        ReactCurrentActQueue$3.current.push(function () {\n          cb();\n          return null;\n        });\n      } // TODO: Can we land supportsMicrotasks? Which environments don't support it?\n      // Alternatively, can we move this check to the host config?\n\n      if (supportsMicrotasks) {\n        scheduleMicrotask(function () {\n          // In Safari, appending an iframe forces microtasks to run.\n          // https://github.com/facebook/react/issues/22459\n          // We don't support running callbacks in the middle of render\n          // or commit so we need to check against that.\n          var executionContext = getExecutionContext();\n\n          if (\n            (executionContext & (RenderContext | CommitContext)) !==\n            NoContext\n          ) {\n            // Note that this would still prematurely flush the callbacks\n            // if this happens outside render or commit phase (e.g. in an event).\n            // Intentionally using a macrotask instead of a microtask here. This is\n            // wrong semantically but it prevents an infinite loop. The bug is\n            // Safari's, not ours, so we just do our best to not crash even though\n            // the behavior isn't completely correct.\n            scheduleCallback$2(ImmediatePriority, cb);\n            return;\n          }\n\n          cb();\n        });\n      } else {\n        // If microtasks are not supported, use Scheduler.\n        scheduleCallback$2(ImmediatePriority, cb);\n      }\n    }\n\n    function requestTransitionLane( // This argument isn't used, it's only here to encourage the caller to\n      // check that it's inside a transition before calling this function.\n      // TODO: Make this non-nullable. Requires a tweak to useOptimistic.\n      transition\n    ) {\n      // The algorithm for assigning an update to a lane should be stable for all\n      // updates at the same priority within the same event. To do this, the\n      // inputs to the algorithm must be the same.\n      //\n      // The trick we use is to cache the first of each of these inputs within an\n      // event. Then reset the cached values once we can be sure the event is\n      // over. Our heuristic for that is whenever we enter a concurrent work loop.\n      if (currentEventTransitionLane === NoLane) {\n        // All transitions within the same event are assigned the same lane.\n        currentEventTransitionLane = claimNextTransitionLane();\n      }\n\n      return currentEventTransitionLane;\n    }\n\n    var currentEntangledLane = NoLane; // A thenable that resolves when the entangled scope completes. It does not\n    // resolve to a particular value because it's only used for suspending the UI\n    // until the async action scope has completed.\n\n    var currentEntangledActionThenable = null;\n\n    function chainThenableValue(thenable, result) {\n      // Equivalent to: Promise.resolve(thenable).then(() => result), except we can\n      // cheat a bit since we know that that this thenable is only ever consumed\n      // by React.\n      //\n      // We don't technically require promise support on the client yet, hence this\n      // extra code.\n      var listeners = [];\n      var thenableWithOverride = {\n        status: \"pending\",\n        value: null,\n        reason: null,\n        then: function (resolve) {\n          listeners.push(resolve);\n        }\n      };\n      thenable.then(\n        function (value) {\n          var fulfilledThenable = thenableWithOverride;\n          fulfilledThenable.status = \"fulfilled\";\n          fulfilledThenable.value = result;\n\n          for (var i = 0; i < listeners.length; i++) {\n            var listener = listeners[i];\n            listener(result);\n          }\n        },\n        function (error) {\n          var rejectedThenable = thenableWithOverride;\n          rejectedThenable.status = \"rejected\";\n          rejectedThenable.reason = error;\n\n          for (var i = 0; i < listeners.length; i++) {\n            var listener = listeners[i]; // This is a perf hack where we call the `onFulfill` ping function\n            // instead of `onReject`, because we know that React is the only\n            // consumer of these promises, and it passes the same listener to both.\n            // We also know that it will read the error directly off the\n            // `.reason` field.\n\n            listener(undefined);\n          }\n        }\n      );\n      return thenableWithOverride;\n    }\n    function peekEntangledActionLane() {\n      return currentEntangledLane;\n    }\n    function peekEntangledActionThenable() {\n      return currentEntangledActionThenable;\n    }\n\n    var UpdateState = 0;\n    var ReplaceState = 1;\n    var ForceUpdate = 2;\n    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n    // It should only be read right after calling `processUpdateQueue`, via\n    // `checkHasForceUpdateAfterProcessing`.\n\n    var hasForceUpdate = false;\n    var didWarnUpdateInsideUpdate;\n    var currentlyProcessingQueue;\n\n    {\n      didWarnUpdateInsideUpdate = false;\n      currentlyProcessingQueue = null;\n    }\n\n    function initializeUpdateQueue(fiber) {\n      var queue = {\n        baseState: fiber.memoizedState,\n        firstBaseUpdate: null,\n        lastBaseUpdate: null,\n        shared: {\n          pending: null,\n          lanes: NoLanes,\n          hiddenCallbacks: null\n        },\n        callbacks: null\n      };\n      fiber.updateQueue = queue;\n    }\n    function cloneUpdateQueue(current, workInProgress) {\n      // Clone the update queue from current. Unless it's already a clone.\n      var queue = workInProgress.updateQueue;\n      var currentQueue = current.updateQueue;\n\n      if (queue === currentQueue) {\n        var clone = {\n          baseState: currentQueue.baseState,\n          firstBaseUpdate: currentQueue.firstBaseUpdate,\n          lastBaseUpdate: currentQueue.lastBaseUpdate,\n          shared: currentQueue.shared,\n          callbacks: null\n        };\n        workInProgress.updateQueue = clone;\n      }\n    }\n    function createUpdate(lane) {\n      var update = {\n        lane: lane,\n        tag: UpdateState,\n        payload: null,\n        callback: null,\n        next: null\n      };\n      return update;\n    }\n    function enqueueUpdate(fiber, update, lane) {\n      var updateQueue = fiber.updateQueue;\n\n      if (updateQueue === null) {\n        // Only occurs if the fiber has been unmounted.\n        return null;\n      }\n\n      var sharedQueue = updateQueue.shared;\n\n      {\n        if (\n          currentlyProcessingQueue === sharedQueue &&\n          !didWarnUpdateInsideUpdate\n        ) {\n          var componentName = getComponentNameFromFiber(fiber);\n\n          error(\n            \"An update (setState, replaceState, or forceUpdate) was scheduled \" +\n              \"from inside an update function. Update functions should be pure, \" +\n              \"with zero side-effects. Consider using componentDidUpdate or a \" +\n              \"callback.\\n\\nPlease update the following component: %s\",\n            componentName\n          );\n\n          didWarnUpdateInsideUpdate = true;\n        }\n      }\n\n      if (isUnsafeClassRenderPhaseUpdate()) {\n        // This is an unsafe render phase update. Add directly to the update\n        // queue so we can process it immediately during the current render.\n        var pending = sharedQueue.pending;\n\n        if (pending === null) {\n          // This is the first update. Create a circular list.\n          update.next = update;\n        } else {\n          update.next = pending.next;\n          pending.next = update;\n        }\n\n        sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n        // this fiber. This is for backwards compatibility in the case where you\n        // update a different component during render phase than the one that is\n        // currently renderings (a pattern that is accompanied by a warning).\n\n        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n      } else {\n        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n      }\n    }\n    function entangleTransitions(root, fiber, lane) {\n      var updateQueue = fiber.updateQueue;\n\n      if (updateQueue === null) {\n        // Only occurs if the fiber has been unmounted.\n        return;\n      }\n\n      var sharedQueue = updateQueue.shared;\n\n      if (isTransitionLane(lane)) {\n        var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n        // have finished. We can remove them from the shared queue, which represents\n        // a superset of the actually pending lanes. In some cases we may entangle\n        // more than we need to, but that's OK. In fact it's worse if we *don't*\n        // entangle when we should.\n\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n        // the lane finished since the last time we entangled it. So we need to\n        // entangle it again, just to be sure.\n\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n      // Captured updates are updates that are thrown by a child during the render\n      // phase. They should be discarded if the render is aborted. Therefore,\n      // we should only put them on the work-in-progress queue, not the current one.\n      var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n      var current = workInProgress.alternate;\n\n      if (current !== null) {\n        var currentQueue = current.updateQueue;\n\n        if (queue === currentQueue) {\n          // The work-in-progress queue is the same as current. This happens when\n          // we bail out on a parent fiber that then captures an error thrown by\n          // a child. Since we want to append the update only to the work-in\n          // -progress queue, we need to clone the updates. We usually clone during\n          // processUpdateQueue, but that didn't happen in this case because we\n          // skipped over the parent when we bailed out.\n          var newFirst = null;\n          var newLast = null;\n          var firstBaseUpdate = queue.firstBaseUpdate;\n\n          if (firstBaseUpdate !== null) {\n            // Loop through the updates and clone them.\n            var update = firstBaseUpdate;\n\n            do {\n              var clone = {\n                lane: update.lane,\n                tag: update.tag,\n                payload: update.payload,\n                // When this update is rebased, we should not fire its\n                // callback again.\n                callback: null,\n                next: null\n              };\n\n              if (newLast === null) {\n                newFirst = newLast = clone;\n              } else {\n                newLast.next = clone;\n                newLast = clone;\n              } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n              update = update.next;\n            } while (update !== null); // Append the captured update the end of the cloned list.\n\n            if (newLast === null) {\n              newFirst = newLast = capturedUpdate;\n            } else {\n              newLast.next = capturedUpdate;\n              newLast = capturedUpdate;\n            }\n          } else {\n            // There are no base updates.\n            newFirst = newLast = capturedUpdate;\n          }\n\n          queue = {\n            baseState: currentQueue.baseState,\n            firstBaseUpdate: newFirst,\n            lastBaseUpdate: newLast,\n            shared: currentQueue.shared,\n            callbacks: currentQueue.callbacks\n          };\n          workInProgress.updateQueue = queue;\n          return;\n        }\n      } // Append the update to the end of the list.\n\n      var lastBaseUpdate = queue.lastBaseUpdate;\n\n      if (lastBaseUpdate === null) {\n        queue.firstBaseUpdate = capturedUpdate;\n      } else {\n        lastBaseUpdate.next = capturedUpdate;\n      }\n\n      queue.lastBaseUpdate = capturedUpdate;\n    }\n\n    function getStateFromUpdate(\n      workInProgress,\n      queue,\n      update,\n      prevState,\n      nextProps,\n      instance\n    ) {\n      switch (update.tag) {\n        case ReplaceState: {\n          var payload = update.payload;\n\n          if (typeof payload === \"function\") {\n            // Updater function\n            {\n              enterDisallowedContextReadInDEV();\n            }\n\n            var nextState = payload.call(instance, prevState, nextProps);\n\n            {\n              if (workInProgress.mode & StrictLegacyMode) {\n                setIsStrictModeForDevtools(true);\n\n                try {\n                  payload.call(instance, prevState, nextProps);\n                } finally {\n                  setIsStrictModeForDevtools(false);\n                }\n              }\n\n              exitDisallowedContextReadInDEV();\n            }\n\n            return nextState;\n          } // State object\n\n          return payload;\n        }\n\n        case CaptureUpdate: {\n          workInProgress.flags =\n            (workInProgress.flags & ~ShouldCapture) | DidCapture;\n        }\n        // Intentional fallthrough\n\n        case UpdateState: {\n          var _payload = update.payload;\n          var partialState;\n\n          if (typeof _payload === \"function\") {\n            // Updater function\n            {\n              enterDisallowedContextReadInDEV();\n            }\n\n            partialState = _payload.call(instance, prevState, nextProps);\n\n            {\n              if (workInProgress.mode & StrictLegacyMode) {\n                setIsStrictModeForDevtools(true);\n\n                try {\n                  _payload.call(instance, prevState, nextProps);\n                } finally {\n                  setIsStrictModeForDevtools(false);\n                }\n              }\n\n              exitDisallowedContextReadInDEV();\n            }\n          } else {\n            // Partial state object\n            partialState = _payload;\n          }\n\n          if (partialState === null || partialState === undefined) {\n            // Null and undefined are treated as no-ops.\n            return prevState;\n          } // Merge the partial state and the previous state.\n\n          return assign({}, prevState, partialState);\n        }\n\n        case ForceUpdate: {\n          hasForceUpdate = true;\n          return prevState;\n        }\n      }\n\n      return prevState;\n    }\n\n    var didReadFromEntangledAsyncAction = false; // Each call to processUpdateQueue should be accompanied by a call to this. It's\n    // only in a separate function because in updateHostRoot, it must happen after\n    // all the context stacks have been pushed to, to prevent a stack mismatch. A\n    // bit unfortunate.\n\n    function suspendIfUpdateReadFromEntangledAsyncAction() {\n      // Check if this update is part of a pending async action. If so, we'll\n      // need to suspend until the action has finished, so that it's batched\n      // together with future updates in the same action.\n      // TODO: Once we support hooks inside useMemo (or an equivalent\n      // memoization boundary like Forget), hoist this logic so that it only\n      // suspends if the memo boundary produces a new value.\n      if (didReadFromEntangledAsyncAction) {\n        var entangledActionThenable = peekEntangledActionThenable();\n\n        if (entangledActionThenable !== null) {\n          // TODO: Instead of the throwing the thenable directly, throw a\n          // special object like `use` does so we can detect if it's captured\n          // by userspace.\n          throw entangledActionThenable;\n        }\n      }\n    }\n    function processUpdateQueue(workInProgress, props, instance, renderLanes) {\n      didReadFromEntangledAsyncAction = false; // This is always non-null on a ClassComponent or HostRoot\n\n      var queue = workInProgress.updateQueue;\n      hasForceUpdate = false;\n\n      {\n        currentlyProcessingQueue = queue.shared;\n      }\n\n      var firstBaseUpdate = queue.firstBaseUpdate;\n      var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n      var pendingQueue = queue.shared.pending;\n\n      if (pendingQueue !== null) {\n        queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n        // and last so that it's non-circular.\n\n        var lastPendingUpdate = pendingQueue;\n        var firstPendingUpdate = lastPendingUpdate.next;\n        lastPendingUpdate.next = null; // Append pending updates to base queue\n\n        if (lastBaseUpdate === null) {\n          firstBaseUpdate = firstPendingUpdate;\n        } else {\n          lastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n        // we need to transfer the updates to that queue, too. Because the base\n        // queue is a singly-linked list with no cycles, we can append to both\n        // lists and take advantage of structural sharing.\n        // TODO: Pass `current` as argument\n\n        var current = workInProgress.alternate;\n\n        if (current !== null) {\n          // This is always non-null on a ClassComponent or HostRoot\n          var currentQueue = current.updateQueue;\n          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n          if (currentLastBaseUpdate !== lastBaseUpdate) {\n            if (currentLastBaseUpdate === null) {\n              currentQueue.firstBaseUpdate = firstPendingUpdate;\n            } else {\n              currentLastBaseUpdate.next = firstPendingUpdate;\n            }\n\n            currentQueue.lastBaseUpdate = lastPendingUpdate;\n          }\n        }\n      } // These values may change as we process the queue.\n\n      if (firstBaseUpdate !== null) {\n        // Iterate through the list of updates to compute the result.\n        var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n        // from the original lanes.\n\n        var newLanes = NoLanes;\n        var newBaseState = null;\n        var newFirstBaseUpdate = null;\n        var newLastBaseUpdate = null;\n        var update = firstBaseUpdate;\n\n        do {\n          // An extra OffscreenLane bit is added to updates that were made to\n          // a hidden tree, so that we can distinguish them from updates that were\n          // already there when the tree was hidden.\n          var updateLane = removeLanes(update.lane, OffscreenLane);\n          var isHiddenUpdate = updateLane !== update.lane; // Check if this update was made while the tree was hidden. If so, then\n          // it's not a \"base\" update and we should disregard the extra base lanes\n          // that were added to renderLanes when we entered the Offscreen tree.\n\n          var shouldSkipUpdate = isHiddenUpdate\n            ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\n            : !isSubsetOfLanes(renderLanes, updateLane);\n\n          if (shouldSkipUpdate) {\n            // Priority is insufficient. Skip this update. If this is the first\n            // skipped update, the previous update/state is the new base\n            // update/state.\n            var clone = {\n              lane: updateLane,\n              tag: update.tag,\n              payload: update.payload,\n              callback: update.callback,\n              next: null\n            };\n\n            if (newLastBaseUpdate === null) {\n              newFirstBaseUpdate = newLastBaseUpdate = clone;\n              newBaseState = newState;\n            } else {\n              newLastBaseUpdate = newLastBaseUpdate.next = clone;\n            } // Update the remaining priority in the queue.\n\n            newLanes = mergeLanes(newLanes, updateLane);\n          } else {\n            // This update does have sufficient priority.\n            // Check if this update is part of a pending async action. If so,\n            // we'll need to suspend until the action has finished, so that it's\n            // batched together with future updates in the same action.\n            if (\n              updateLane !== NoLane &&\n              updateLane === peekEntangledActionLane()\n            ) {\n              didReadFromEntangledAsyncAction = true;\n            }\n\n            if (newLastBaseUpdate !== null) {\n              var _clone = {\n                // This update is going to be committed so we never want uncommit\n                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                // this will never be skipped by the check above.\n                lane: NoLane,\n                tag: update.tag,\n                payload: update.payload,\n                // When this update is rebased, we should not fire its\n                // callback again.\n                callback: null,\n                next: null\n              };\n              newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n            } // Process this update.\n\n            newState = getStateFromUpdate(\n              workInProgress,\n              queue,\n              update,\n              newState,\n              props,\n              instance\n            );\n            var callback = update.callback;\n\n            if (callback !== null) {\n              workInProgress.flags |= Callback;\n\n              if (isHiddenUpdate) {\n                workInProgress.flags |= Visibility;\n              }\n\n              var callbacks = queue.callbacks;\n\n              if (callbacks === null) {\n                queue.callbacks = [callback];\n              } else {\n                callbacks.push(callback);\n              }\n            }\n          } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n          update = update.next;\n\n          if (update === null) {\n            pendingQueue = queue.shared.pending;\n\n            if (pendingQueue === null) {\n              break;\n            } else {\n              // An update was scheduled from inside a reducer. Add the new\n              // pending updates to the end of the list and keep processing.\n              var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n              // unravel them when transferring them to the base queue.\n\n              var _firstPendingUpdate = _lastPendingUpdate.next;\n              _lastPendingUpdate.next = null;\n              update = _firstPendingUpdate;\n              queue.lastBaseUpdate = _lastPendingUpdate;\n              queue.shared.pending = null;\n            }\n          }\n        } while (true);\n\n        if (newLastBaseUpdate === null) {\n          newBaseState = newState;\n        }\n\n        queue.baseState = newBaseState;\n        queue.firstBaseUpdate = newFirstBaseUpdate;\n        queue.lastBaseUpdate = newLastBaseUpdate;\n\n        if (firstBaseUpdate === null) {\n          // `queue.lanes` is used for entangling transitions. We can set it back to\n          // zero once the queue is empty.\n          queue.shared.lanes = NoLanes;\n        } // Set the remaining expiration time to be whatever is remaining in the queue.\n        // This should be fine because the only two other things that contribute to\n        // expiration time are props and context. We're already in the middle of the\n        // begin phase by the time we start processing the queue, so we've already\n        // dealt with the props. Context in components that specify\n        // shouldComponentUpdate is tricky; but we'll have to account for\n        // that regardless.\n\n        markSkippedUpdateLanes(newLanes);\n        workInProgress.lanes = newLanes;\n        workInProgress.memoizedState = newState;\n      }\n\n      {\n        currentlyProcessingQueue = null;\n      }\n    }\n\n    function callCallback(callback, context) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\n          \"Invalid argument passed as callback. Expected a function. Instead \" +\n            (\"received: \" + callback)\n        );\n      }\n\n      callback.call(context);\n    }\n\n    function resetHasForceUpdateBeforeProcessing() {\n      hasForceUpdate = false;\n    }\n    function checkHasForceUpdateAfterProcessing() {\n      return hasForceUpdate;\n    }\n    function deferHiddenCallbacks(updateQueue) {\n      // When an update finishes on a hidden component, its callback should not\n      // be fired until/unless the component is made visible again. Stash the\n      // callback on the shared queue object so it can be fired later.\n      var newHiddenCallbacks = updateQueue.callbacks;\n\n      if (newHiddenCallbacks !== null) {\n        var existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n\n        if (existingHiddenCallbacks === null) {\n          updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;\n        } else {\n          updateQueue.shared.hiddenCallbacks =\n            existingHiddenCallbacks.concat(newHiddenCallbacks);\n        }\n      }\n    }\n    function commitHiddenCallbacks(updateQueue, context) {\n      // This component is switching from hidden -> visible. Commit any callbacks\n      // that were previously deferred.\n      var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n\n      if (hiddenCallbacks !== null) {\n        updateQueue.shared.hiddenCallbacks = null;\n\n        for (var i = 0; i < hiddenCallbacks.length; i++) {\n          var callback = hiddenCallbacks[i];\n          callCallback(callback, context);\n        }\n      }\n    }\n    function commitCallbacks(updateQueue, context) {\n      var callbacks = updateQueue.callbacks;\n\n      if (callbacks !== null) {\n        updateQueue.callbacks = null;\n\n        for (var i = 0; i < callbacks.length; i++) {\n          var callback = callbacks[i];\n          callCallback(callback, context);\n        }\n      }\n    }\n\n    // $FlowFixMe[method-unbinding]\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    /**\n     * Performs equality by iterating through keys on an object and returning false\n     * when any key has values which are not strictly equal between the arguments.\n     * Returns true when the values of all keys are strictly equal.\n     */\n\n    function shallowEqual(objA, objB) {\n      if (objectIs(objA, objB)) {\n        return true;\n      }\n\n      if (\n        typeof objA !== \"object\" ||\n        objA === null ||\n        typeof objB !== \"object\" ||\n        objB === null\n      ) {\n        return false;\n      }\n\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n\n      if (keysA.length !== keysB.length) {\n        return false;\n      } // Test for A's keys different from B.\n\n      for (var i = 0; i < keysA.length; i++) {\n        var currentKey = keysA[i];\n\n        if (\n          !hasOwnProperty.call(objB, currentKey) || // $FlowFixMe[incompatible-use] lost refinement of `objB`\n          !objectIs(objA[currentKey], objB[currentKey])\n        ) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function describeBuiltInComponentFrame(name, ownerFn) {\n      {\n        var ownerName = null;\n\n        if (ownerFn) {\n          ownerName = ownerFn.displayName || ownerFn.name || null;\n        }\n\n        return describeComponentFrame(name, ownerName);\n      }\n    }\n    function describeDebugInfoFrame(name, env) {\n      return describeBuiltInComponentFrame(\n        name + (env ? \" (\" + env + \")\" : \"\"),\n        null\n      );\n    }\n\n    {\n      var PossiblyWeakMap$1 = typeof WeakMap === \"function\" ? WeakMap : Map;\n      new PossiblyWeakMap$1();\n    }\n\n    function describeComponentFrame(name, ownerName) {\n      var sourceInfo = \"\";\n\n      if (ownerName) {\n        sourceInfo = \" (created by \" + ownerName + \")\";\n      }\n\n      return \"\\n    in \" + (name || \"Unknown\") + sourceInfo;\n    }\n\n    function describeClassComponentFrame(ctor, ownerFn) {\n      {\n        return describeFunctionComponentFrame(ctor, ownerFn);\n      }\n    }\n    function describeFunctionComponentFrame(fn, ownerFn) {\n      {\n        if (!fn) {\n          return \"\";\n        }\n\n        var name = fn.displayName || fn.name || null;\n        var ownerName = null;\n\n        if (ownerFn) {\n          ownerName = ownerFn.displayName || ownerFn.name || null;\n        }\n\n        return describeComponentFrame(name, ownerName);\n      }\n    }\n\n    function describeFiber(fiber) {\n      var owner = fiber._debugOwner ? fiber._debugOwner.type : null;\n\n      switch (fiber.tag) {\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          return describeBuiltInComponentFrame(fiber.type, owner);\n\n        case LazyComponent:\n          return describeBuiltInComponentFrame(\"Lazy\", owner);\n\n        case SuspenseComponent:\n          return describeBuiltInComponentFrame(\"Suspense\", owner);\n\n        case SuspenseListComponent:\n          return describeBuiltInComponentFrame(\"SuspenseList\", owner);\n\n        case FunctionComponent:\n        case IndeterminateComponent:\n        case SimpleMemoComponent:\n          return describeFunctionComponentFrame(fiber.type, owner);\n\n        case ForwardRef:\n          return describeFunctionComponentFrame(fiber.type.render, owner);\n\n        case ClassComponent:\n          return describeClassComponentFrame(fiber.type, owner);\n\n        default:\n          return \"\";\n      }\n    }\n\n    function getStackByFiberInDevAndProd(workInProgress) {\n      try {\n        var info = \"\";\n        var node = workInProgress;\n\n        do {\n          info += describeFiber(node);\n\n          if (true) {\n            // Add any Server Component stack frames in reverse order.\n            var debugInfo = node._debugInfo;\n\n            if (debugInfo) {\n              for (var i = debugInfo.length - 1; i >= 0; i--) {\n                var entry = debugInfo[i];\n\n                if (typeof entry.name === \"string\") {\n                  info += describeDebugInfoFrame(entry.name, entry.env);\n                }\n              }\n            }\n          } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n          node = node.return;\n        } while (node);\n\n        return info;\n      } catch (x) {\n        return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n      }\n    }\n\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var current = null;\n    var isRendering = false;\n    function getCurrentFiberOwnerNameInDevOrNull() {\n      {\n        if (current === null) {\n          return null;\n        }\n\n        var owner = current._debugOwner;\n\n        if (owner !== null && typeof owner !== \"undefined\") {\n          return getComponentNameFromFiber(owner);\n        }\n      }\n\n      return null;\n    }\n\n    function getCurrentFiberStackInDev() {\n      {\n        if (current === null) {\n          return \"\";\n        } // Safe because if current fiber exists, we are reconciling,\n        // and it is guaranteed to be the work-in-progress version.\n\n        return getStackByFiberInDevAndProd(current);\n      }\n    }\n\n    function resetCurrentFiber() {\n      {\n        ReactDebugCurrentFrame.getCurrentStack = null;\n        current = null;\n        isRendering = false;\n      }\n    }\n    function setCurrentFiber(fiber) {\n      {\n        ReactDebugCurrentFrame.getCurrentStack =\n          fiber === null ? null : getCurrentFiberStackInDev;\n        current = fiber;\n        isRendering = false;\n      }\n    }\n    function getCurrentFiber() {\n      {\n        return current;\n      }\n    }\n    function setIsRendering(rendering) {\n      {\n        isRendering = rendering;\n      }\n    }\n\n    var ReactStrictModeWarnings = {\n      recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n      flushPendingUnsafeLifecycleWarnings: function () {},\n      recordLegacyContextWarning: function (fiber, instance) {},\n      flushLegacyContextWarning: function () {},\n      discardPendingWarnings: function () {}\n    };\n\n    {\n      var findStrictRoot = function (fiber) {\n        var maybeStrictRoot = null;\n        var node = fiber;\n\n        while (node !== null) {\n          if (node.mode & StrictLegacyMode) {\n            maybeStrictRoot = node;\n          }\n\n          node = node.return;\n        }\n\n        return maybeStrictRoot;\n      };\n\n      var setToSortedString = function (set) {\n        var array = [];\n        set.forEach(function (value) {\n          array.push(value);\n        });\n        return array.sort().join(\", \");\n      };\n\n      var pendingComponentWillMountWarnings = [];\n      var pendingUNSAFE_ComponentWillMountWarnings = [];\n      var pendingComponentWillReceivePropsWarnings = [];\n      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n      var pendingComponentWillUpdateWarnings = [];\n      var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n      var didWarnAboutUnsafeLifecycles = new Set();\n\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (\n        fiber,\n        instance\n      ) {\n        // Dedupe strategy: Warn once per component.\n        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n          return;\n        }\n\n        if (\n          typeof instance.componentWillMount === \"function\" && // Don't warn about react-lifecycles-compat polyfilled components.\n          instance.componentWillMount.__suppressDeprecationWarning !== true\n        ) {\n          pendingComponentWillMountWarnings.push(fiber);\n        }\n\n        if (\n          fiber.mode & StrictLegacyMode &&\n          typeof instance.UNSAFE_componentWillMount === \"function\"\n        ) {\n          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n        }\n\n        if (\n          typeof instance.componentWillReceiveProps === \"function\" &&\n          instance.componentWillReceiveProps.__suppressDeprecationWarning !==\n            true\n        ) {\n          pendingComponentWillReceivePropsWarnings.push(fiber);\n        }\n\n        if (\n          fiber.mode & StrictLegacyMode &&\n          typeof instance.UNSAFE_componentWillReceiveProps === \"function\"\n        ) {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n        }\n\n        if (\n          typeof instance.componentWillUpdate === \"function\" &&\n          instance.componentWillUpdate.__suppressDeprecationWarning !== true\n        ) {\n          pendingComponentWillUpdateWarnings.push(fiber);\n        }\n\n        if (\n          fiber.mode & StrictLegacyMode &&\n          typeof instance.UNSAFE_componentWillUpdate === \"function\"\n        ) {\n          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n        }\n      };\n\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings =\n        function () {\n          // We do an initial pass to gather component names\n          var componentWillMountUniqueNames = new Set();\n\n          if (pendingComponentWillMountWarnings.length > 0) {\n            pendingComponentWillMountWarnings.forEach(function (fiber) {\n              componentWillMountUniqueNames.add(\n                getComponentNameFromFiber(fiber) || \"Component\"\n              );\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingComponentWillMountWarnings = [];\n          }\n\n          var UNSAFE_componentWillMountUniqueNames = new Set();\n\n          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n            pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n              UNSAFE_componentWillMountUniqueNames.add(\n                getComponentNameFromFiber(fiber) || \"Component\"\n              );\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingUNSAFE_ComponentWillMountWarnings = [];\n          }\n\n          var componentWillReceivePropsUniqueNames = new Set();\n\n          if (pendingComponentWillReceivePropsWarnings.length > 0) {\n            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n              componentWillReceivePropsUniqueNames.add(\n                getComponentNameFromFiber(fiber) || \"Component\"\n              );\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingComponentWillReceivePropsWarnings = [];\n          }\n\n          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(\n              function (fiber) {\n                UNSAFE_componentWillReceivePropsUniqueNames.add(\n                  getComponentNameFromFiber(fiber) || \"Component\"\n                );\n                didWarnAboutUnsafeLifecycles.add(fiber.type);\n              }\n            );\n            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n          }\n\n          var componentWillUpdateUniqueNames = new Set();\n\n          if (pendingComponentWillUpdateWarnings.length > 0) {\n            pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n              componentWillUpdateUniqueNames.add(\n                getComponentNameFromFiber(fiber) || \"Component\"\n              );\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingComponentWillUpdateWarnings = [];\n          }\n\n          var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n              UNSAFE_componentWillUpdateUniqueNames.add(\n                getComponentNameFromFiber(fiber) || \"Component\"\n              );\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingUNSAFE_ComponentWillUpdateWarnings = [];\n          } // Finally, we flush all the warnings\n          // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n          if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n            var sortedNames = setToSortedString(\n              UNSAFE_componentWillMountUniqueNames\n            );\n\n            error(\n              \"Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. \" +\n                \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\" +\n                \"\\nPlease update the following components: %s\",\n              sortedNames\n            );\n          }\n\n          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n            var _sortedNames = setToSortedString(\n              UNSAFE_componentWillReceivePropsUniqueNames\n            );\n\n            error(\n              \"Using UNSAFE_componentWillReceiveProps in strict mode is not recommended \" +\n                \"and may indicate bugs in your code. \" +\n                \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move data fetching code or side effects to componentDidUpdate.\\n\" +\n                \"* If you're updating state whenever props change, \" +\n                \"refactor your code to use memoization techniques or move it to \" +\n                \"static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\\n\" +\n                \"\\nPlease update the following components: %s\",\n              _sortedNames\n            );\n          }\n\n          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n            var _sortedNames2 = setToSortedString(\n              UNSAFE_componentWillUpdateUniqueNames\n            );\n\n            error(\n              \"Using UNSAFE_componentWillUpdate in strict mode is not recommended \" +\n                \"and may indicate bugs in your code. \" +\n                \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move data fetching code or side effects to componentDidUpdate.\\n\" +\n                \"\\nPlease update the following components: %s\",\n              _sortedNames2\n            );\n          }\n\n          if (componentWillMountUniqueNames.size > 0) {\n            var _sortedNames3 = setToSortedString(\n              componentWillMountUniqueNames\n            );\n\n            warn(\n              \"componentWillMount has been renamed, and is not recommended for use. \" +\n                \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\" +\n                \"* Rename componentWillMount to UNSAFE_componentWillMount to suppress \" +\n                \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" +\n                \"To rename all deprecated lifecycles to their new names, you can run \" +\n                \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" +\n                \"\\nPlease update the following components: %s\",\n              _sortedNames3\n            );\n          }\n\n          if (componentWillReceivePropsUniqueNames.size > 0) {\n            var _sortedNames4 = setToSortedString(\n              componentWillReceivePropsUniqueNames\n            );\n\n            warn(\n              \"componentWillReceiveProps has been renamed, and is not recommended for use. \" +\n                \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move data fetching code or side effects to componentDidUpdate.\\n\" +\n                \"* If you're updating state whenever props change, refactor your \" +\n                \"code to use memoization techniques or move it to \" +\n                \"static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\\n\" +\n                \"* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress \" +\n                \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" +\n                \"To rename all deprecated lifecycles to their new names, you can run \" +\n                \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" +\n                \"\\nPlease update the following components: %s\",\n              _sortedNames4\n            );\n          }\n\n          if (componentWillUpdateUniqueNames.size > 0) {\n            var _sortedNames5 = setToSortedString(\n              componentWillUpdateUniqueNames\n            );\n\n            warn(\n              \"componentWillUpdate has been renamed, and is not recommended for use. \" +\n                \"See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move data fetching code or side effects to componentDidUpdate.\\n\" +\n                \"* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress \" +\n                \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" +\n                \"To rename all deprecated lifecycles to their new names, you can run \" +\n                \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" +\n                \"\\nPlease update the following components: %s\",\n              _sortedNames5\n            );\n          }\n        };\n\n      var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n      var didWarnAboutLegacyContext = new Set();\n\n      ReactStrictModeWarnings.recordLegacyContextWarning = function (\n        fiber,\n        instance\n      ) {\n        var strictRoot = findStrictRoot(fiber);\n\n        if (strictRoot === null) {\n          error(\n            \"Expected to find a StrictMode component in a strict mode tree. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n\n          return;\n        } // Dedup strategy: Warn once per component.\n\n        if (didWarnAboutLegacyContext.has(fiber.type)) {\n          return;\n        }\n\n        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n        if (\n          fiber.type.contextTypes != null ||\n          fiber.type.childContextTypes != null ||\n          (instance !== null && typeof instance.getChildContext === \"function\")\n        ) {\n          if (warningsForRoot === undefined) {\n            warningsForRoot = [];\n            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n          }\n\n          warningsForRoot.push(fiber);\n        }\n      };\n\n      ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n          if (fiberArray.length === 0) {\n            return;\n          }\n\n          var firstFiber = fiberArray[0];\n          var uniqueNames = new Set();\n          fiberArray.forEach(function (fiber) {\n            uniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutLegacyContext.add(fiber.type);\n          });\n          var sortedNames = setToSortedString(uniqueNames);\n\n          try {\n            setCurrentFiber(firstFiber);\n\n            error(\n              \"Legacy context API has been detected within a strict-mode tree.\" +\n                \"\\n\\nThe old API will be supported in all 16.x releases, but applications \" +\n                \"using it should migrate to the new version.\" +\n                \"\\n\\nPlease update the following components: %s\" +\n                \"\\n\\nLearn more about this warning here: https://react.dev/link/legacy-context\",\n              sortedNames\n            );\n          } finally {\n            resetCurrentFiber();\n          }\n        });\n      };\n\n      ReactStrictModeWarnings.discardPendingWarnings = function () {\n        pendingComponentWillMountWarnings = [];\n        pendingUNSAFE_ComponentWillMountWarnings = [];\n        pendingComponentWillReceivePropsWarnings = [];\n        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        pendingComponentWillUpdateWarnings = [];\n        pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        pendingLegacyContextWarning = new Map();\n      };\n    }\n\n    /*\n     * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n     *\n     * The functions in this module will throw an easier-to-understand,\n     * easier-to-debug exception with a clear errors message message explaining the\n     * problem. (Instead of a confusing exception thrown inside the implementation\n     * of the `value` object).\n     */\n    // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n    function typeName(value) {\n      {\n        // toStringTag is needed for namespaced types like Temporal.Instant\n        var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n        var type =\n          (hasToStringTag && value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\"; // $FlowFixMe[incompatible-return]\n\n        return type;\n      }\n    } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n    function willCoercionThrow(value) {\n      {\n        try {\n          testStringCoercion(value);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      }\n    }\n\n    function testStringCoercion(value) {\n      // If you ended up here by following an exception call stack, here's what's\n      // happened: you supplied an object or symbol value to React (as a prop, key,\n      // DOM attribute, CSS property, string ref, etc.) and when React tried to\n      // coerce it to a string using `'' + value`, an exception was thrown.\n      //\n      // The most common types that will cause this exception are `Symbol` instances\n      // and Temporal objects like `Temporal.Instant`. But any object that has a\n      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n      // exception. (Library authors do this to prevent users from using built-in\n      // numeric operators like `+` or comparison operators like `>=` because custom\n      // methods are needed to perform accurate arithmetic or comparison.)\n      //\n      // To fix the problem, coerce this object or symbol value to a string before\n      // passing it to React. The most reliable way is usually `String(value)`.\n      //\n      // To find which value is throwing, check the browser or debugger console.\n      // Before this exception was thrown, there should be `console.error` output\n      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n      // problem and how that type was used: key, atrribute, input value prop, etc.\n      // In most cases, this console output also shows the component and its\n      // ancestor components where the exception happened.\n      //\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      {\n        if (willCoercionThrow(value)) {\n          error(\n            \"The provided key is an unsupported type %s.\" +\n              \" This value must be coerced to a string before using it here.\",\n            typeName(value)\n          );\n\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n    function checkPropStringCoercion(value, propName) {\n      {\n        if (willCoercionThrow(value)) {\n          error(\n            \"The provided `%s` prop is an unsupported type %s.\" +\n              \" This value must be coerced to a string before using it here.\",\n            propName,\n            typeName(value)\n          );\n\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n\n    var ReactCurrentActQueue$2 = ReactSharedInternals.ReactCurrentActQueue;\n\n    function getThenablesFromState(state) {\n      {\n        var devState = state;\n        return devState.thenables;\n      }\n    } // An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n    // detect this is caught by userspace, we'll log a warning in development.\n\n    var SuspenseException = new Error(\n      \"Suspense Exception: This is not a real error! It's an implementation \" +\n        \"detail of `use` to interrupt the current render. You must either \" +\n        \"rethrow it immediately, or move the `use` call outside of the \" +\n        \"`try/catch` block. Capturing without rethrowing will lead to \" +\n        \"unexpected behavior.\\n\\n\" +\n        \"To handle async errors, wrap your component in an error boundary, or \" +\n        \"call the promise's `.catch` method and pass the result to `use`\"\n    );\n    var SuspenseyCommitException = new Error(\n      \"Suspense Exception: This is not a real error, and should not leak into \" +\n        \"userspace. If you're seeing this, it's likely a bug in React.\"\n    ); // This is a noop thenable that we use to trigger a fallback in throwException.\n    // TODO: It would be better to refactor throwException into multiple functions\n    // so we can trigger a fallback directly without having to check the type. But\n    // for now this will do.\n\n    var noopSuspenseyCommitThenable = {\n      then: function () {\n        {\n          error(\n            \"Internal React error: A listener was unexpectedly attached to a \" +\n              '\"noop\" thenable. This is a bug in React. Please file an issue.'\n          );\n        }\n      }\n    };\n    function createThenableState() {\n      // The ThenableState is created the first time a component suspends. If it\n      // suspends again, we'll reuse the same state.\n      {\n        return {\n          didWarnAboutUncachedPromise: false,\n          thenables: []\n        };\n      }\n    }\n    function isThenableResolved(thenable) {\n      var status = thenable.status;\n      return status === \"fulfilled\" || status === \"rejected\";\n    }\n\n    function noop() {}\n\n    function trackUsedThenable(thenableState, thenable, index) {\n      if (ReactCurrentActQueue$2.current !== null) {\n        ReactCurrentActQueue$2.didUsePromise = true;\n      }\n\n      var trackedThenables = getThenablesFromState(thenableState);\n      var previous = trackedThenables[index];\n\n      if (previous === undefined) {\n        trackedThenables.push(thenable);\n      } else {\n        if (previous !== thenable) {\n          // Reuse the previous thenable, and drop the new one. We can assume\n          // they represent the same value, because components are idempotent.\n          {\n            var thenableStateDev = thenableState;\n\n            if (!thenableStateDev.didWarnAboutUncachedPromise) {\n              // We should only warn the first time an uncached thenable is\n              // discovered per component, because if there are multiple, the\n              // subsequent ones are likely derived from the first.\n              //\n              // We track this on the thenableState instead of deduping using the\n              // component name like we usually do, because in the case of a\n              // promise-as-React-node, the owner component is likely different from\n              // the parent that's currently being reconciled. We'd have to track\n              // the owner using state, which we're trying to move away from. Though\n              // since this is dev-only, maybe that'd be OK.\n              //\n              // However, another benefit of doing it this way is we might\n              // eventually have a thenableState per memo/Forget boundary instead\n              // of per component, so this would allow us to have more\n              // granular warnings.\n              thenableStateDev.didWarnAboutUncachedPromise = true; // TODO: This warning should link to a corresponding docs page.\n\n              error(\n                \"A component was suspended by an uncached promise. Creating \" +\n                  \"promises inside a Client Component or hook is not yet \" +\n                  \"supported, except via a Suspense-compatible library or framework.\"\n              );\n            }\n          } // Avoid an unhandled rejection errors for the Promises that we'll\n          // intentionally ignore.\n\n          thenable.then(noop, noop);\n          thenable = previous;\n        }\n      } // We use an expando to track the status and result of a thenable so that we\n      // can synchronously unwrap the value. Think of this as an extension of the\n      // Promise API, or a custom interface that is a superset of Thenable.\n      //\n      // If the thenable doesn't have a status, set it to \"pending\" and attach\n      // a listener that will update its status and result when it resolves.\n\n      switch (thenable.status) {\n        case \"fulfilled\": {\n          var fulfilledValue = thenable.value;\n          return fulfilledValue;\n        }\n\n        case \"rejected\": {\n          var rejectedError = thenable.reason;\n          checkIfUseWrappedInAsyncCatch(rejectedError);\n          throw rejectedError;\n        }\n\n        default: {\n          if (typeof thenable.status === \"string\") {\n            // Only instrument the thenable if the status if not defined. If\n            // it's defined, but an unknown value, assume it's been instrumented by\n            // some custom userspace implementation. We treat it as \"pending\".\n            // Attach a dummy listener, to ensure that any lazy initialization can\n            // happen. Flight lazily parses JSON when the value is actually awaited.\n            thenable.then(noop, noop);\n          } else {\n            // This is an uncached thenable that we haven't seen before.\n            // Detect infinite ping loops caused by uncached promises.\n            var root = getWorkInProgressRoot();\n\n            if (root !== null && root.shellSuspendCounter > 100) {\n              // This root has suspended repeatedly in the shell without making any\n              // progress (i.e. committing something). This is highly suggestive of\n              // an infinite ping loop, often caused by an accidental Async Client\n              // Component.\n              //\n              // During a transition, we can suspend the work loop until the promise\n              // to resolve, but this is a sync render, so that's not an option. We\n              // also can't show a fallback, because none was provided. So our last\n              // resort is to throw an error.\n              //\n              // TODO: Remove this error in a future release. Other ways of handling\n              // this case include forcing a concurrent render, or putting the whole\n              // root into offscreen mode.\n              throw new Error(\n                \"async/await is not yet supported in Client Components, only \" +\n                  \"Server Components. This error is often caused by accidentally \" +\n                  \"adding `'use client'` to a module that was originally written \" +\n                  \"for the server.\"\n              );\n            }\n\n            var pendingThenable = thenable;\n            pendingThenable.status = \"pending\";\n            pendingThenable.then(\n              function (fulfilledValue) {\n                if (thenable.status === \"pending\") {\n                  var fulfilledThenable = thenable;\n                  fulfilledThenable.status = \"fulfilled\";\n                  fulfilledThenable.value = fulfilledValue;\n                }\n              },\n              function (error) {\n                if (thenable.status === \"pending\") {\n                  var rejectedThenable = thenable;\n                  rejectedThenable.status = \"rejected\";\n                  rejectedThenable.reason = error;\n                }\n              }\n            );\n          } // Check one more time in case the thenable resolved synchronously.\n\n          switch (thenable.status) {\n            case \"fulfilled\": {\n              var fulfilledThenable = thenable;\n              return fulfilledThenable.value;\n            }\n\n            case \"rejected\": {\n              var rejectedThenable = thenable;\n              var _rejectedError = rejectedThenable.reason;\n              checkIfUseWrappedInAsyncCatch(_rejectedError);\n              throw _rejectedError;\n            }\n          } // Suspend.\n          //\n          // Throwing here is an implementation detail that allows us to unwind the\n          // call stack. But we shouldn't allow it to leak into userspace. Throw an\n          // opaque placeholder value instead of the actual thenable. If it doesn't\n          // get captured by the work loop, log a warning, because that means\n          // something in userspace must have caught it.\n\n          suspendedThenable = thenable;\n\n          {\n            needsToResetSuspendedThenableDEV = true;\n          }\n\n          throw SuspenseException;\n        }\n      }\n    }\n    // passed to the rest of the Suspense implementation — which, for historical\n    // reasons, expects to receive a thenable.\n\n    var suspendedThenable = null;\n    var needsToResetSuspendedThenableDEV = false;\n    function getSuspendedThenable() {\n      // This is called right after `use` suspends by throwing an exception. `use`\n      // throws an opaque value instead of the thenable itself so that it can't be\n      // caught in userspace. Then the work loop accesses the actual thenable using\n      // this function.\n      if (suspendedThenable === null) {\n        throw new Error(\n          \"Expected a suspended thenable. This is a bug in React. Please file \" +\n            \"an issue.\"\n        );\n      }\n\n      var thenable = suspendedThenable;\n      suspendedThenable = null;\n\n      {\n        needsToResetSuspendedThenableDEV = false;\n      }\n\n      return thenable;\n    }\n    function checkIfUseWrappedInTryCatch() {\n      {\n        // This was set right before SuspenseException was thrown, and it should\n        // have been cleared when the exception was handled. If it wasn't,\n        // it must have been caught by userspace.\n        if (needsToResetSuspendedThenableDEV) {\n          needsToResetSuspendedThenableDEV = false;\n          return true;\n        }\n      }\n\n      return false;\n    }\n    function checkIfUseWrappedInAsyncCatch(rejectedReason) {\n      // This check runs in prod, too, because it prevents a more confusing\n      // downstream error, where SuspenseException is caught by a promise and\n      // thrown asynchronously.\n      // TODO: Another way to prevent SuspenseException from leaking into an async\n      // execution context is to check the dispatcher every time `use` is called,\n      // or some equivalent. That might be preferable for other reasons, too, since\n      // it matches how we prevent similar mistakes for other hooks.\n      if (rejectedReason === SuspenseException) {\n        throw new Error(\n          \"Hooks are not supported inside an async component. This \" +\n            \"error is often caused by accidentally adding `'use client'` \" +\n            \"to a module that was originally written for the server.\"\n        );\n      }\n    }\n\n    var thenableState$1 = null;\n    var thenableIndexCounter$1 = 0;\n\n    function mergeDebugInfo(outer, inner) {\n      if (inner == null) {\n        return outer;\n      } else if (outer === null) {\n        return inner;\n      } else {\n        // If we have two debugInfo, we need to create a new one. This makes the array no longer\n        // live so we'll miss any future updates if we received more so ideally we should always\n        // do this after both have fully resolved/unsuspended.\n        return outer.concat(inner);\n      }\n    }\n\n    var didWarnAboutMaps;\n    var didWarnAboutGenerators;\n    var didWarnAboutStringRefs;\n    var ownerHasKeyUseWarning;\n    var ownerHasFunctionTypeWarning;\n    var ownerHasSymbolTypeWarning;\n\n    var warnForMissingKey = function (child, returnFiber) {};\n\n    {\n      didWarnAboutMaps = false;\n      didWarnAboutGenerators = false;\n      didWarnAboutStringRefs = {};\n      /**\n       * Warn if there's no key explicitly set on dynamic arrays of children or\n       * object keys are not valid. This allows us to keep track of children between\n       * updates.\n       */\n\n      ownerHasKeyUseWarning = {};\n      ownerHasFunctionTypeWarning = {};\n      ownerHasSymbolTypeWarning = {};\n\n      warnForMissingKey = function (child, returnFiber) {\n        if (child === null || typeof child !== \"object\") {\n          return;\n        }\n\n        if (!child._store || child._store.validated || child.key != null) {\n          return;\n        }\n\n        if (typeof child._store !== \"object\") {\n          throw new Error(\n            \"React Component in warnForMissingKey should have a _store. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        } // $FlowFixMe[cannot-write] unable to narrow type from mixed to writable object\n\n        child._store.validated = true;\n        var componentName =\n          getComponentNameFromFiber(returnFiber) || \"Component\";\n\n        if (ownerHasKeyUseWarning[componentName]) {\n          return;\n        }\n\n        ownerHasKeyUseWarning[componentName] = true;\n\n        error(\n          \"Each child in a list should have a unique \" +\n            '\"key\" prop. See https://react.dev/link/warning-keys for ' +\n            \"more information.\"\n        );\n      };\n    }\n\n    function isReactClass(type) {\n      return type.prototype && type.prototype.isReactComponent;\n    }\n\n    function unwrapThenable(thenable) {\n      var index = thenableIndexCounter$1;\n      thenableIndexCounter$1 += 1;\n\n      if (thenableState$1 === null) {\n        thenableState$1 = createThenableState();\n      }\n\n      return trackUsedThenable(thenableState$1, thenable, index);\n    }\n\n    function convertStringRefToCallbackRef(\n      returnFiber,\n      current,\n      element,\n      mixedRef\n    ) {\n      {\n        checkPropStringCoercion(mixedRef, \"ref\");\n      }\n\n      var stringRef = \"\" + mixedRef;\n      var owner = element._owner;\n\n      if (!owner) {\n        throw new Error(\n          \"Element ref was specified as a string (\" +\n            stringRef +\n            \") but no owner was set. This could happen for one of\" +\n            \" the following reasons:\\n\" +\n            \"1. You may be adding a ref to a function component\\n\" +\n            \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n            \"3. You have multiple copies of React loaded\\n\" +\n            \"See https://react.dev/link/refs-must-have-owner for more information.\"\n        );\n      }\n\n      if (owner.tag !== ClassComponent) {\n        throw new Error(\n          \"Function components cannot have string refs. \" +\n            \"We recommend using useRef() instead. \" +\n            \"Learn more about using refs safely here: \" +\n            \"https://react.dev/link/strict-mode-string-ref\"\n        );\n      }\n\n      {\n        if (\n          // Will already warn with \"Function components cannot be given refs\"\n          !(typeof element.type === \"function\" && !isReactClass(element.type))\n        ) {\n          var componentName =\n            getComponentNameFromFiber(returnFiber) || \"Component\";\n\n          if (!didWarnAboutStringRefs[componentName]) {\n            error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                \"will be removed in a future major release. We recommend using \" +\n                \"useRef() or createRef() instead. \" +\n                \"Learn more about using refs safely here: \" +\n                \"https://react.dev/link/strict-mode-string-ref\",\n              componentName,\n              stringRef\n            );\n\n            didWarnAboutStringRefs[componentName] = true;\n          }\n        }\n      }\n\n      var inst = owner.stateNode;\n\n      if (!inst) {\n        throw new Error(\n          \"Missing owner for string ref \" +\n            stringRef +\n            \". This error is likely caused by a \" +\n            \"bug in React. Please file an issue.\"\n        );\n      } // Check if previous string ref matches new string ref\n\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === \"function\" &&\n        current.ref._stringRef === stringRef\n      ) {\n        // Reuse the existing string ref\n        var currentRef = current.ref;\n        return currentRef;\n      } // Create a new string ref\n\n      var ref = function (value) {\n        var refs = inst.refs;\n\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n\n      ref._stringRef = stringRef;\n      return ref;\n    }\n\n    function coerceRef(returnFiber, current, workInProgress, element) {\n      var mixedRef;\n\n      {\n        // Old behavior.\n        mixedRef = element.ref;\n      }\n\n      var coercedRef;\n\n      if (\n        typeof mixedRef === \"string\" ||\n        typeof mixedRef === \"number\" ||\n        typeof mixedRef === \"boolean\"\n      ) {\n        coercedRef = convertStringRefToCallbackRef(\n          returnFiber,\n          current,\n          element,\n          mixedRef\n        );\n      } else {\n        coercedRef = mixedRef;\n      } // TODO: If enableRefAsProp is on, we shouldn't use the `ref` field. We\n      // should always read the ref from the prop.\n\n      workInProgress.ref = coercedRef;\n    }\n\n    function throwOnInvalidObjectType(returnFiber, newChild) {\n      // $FlowFixMe[method-unbinding]\n      var childString = Object.prototype.toString.call(newChild);\n      throw new Error(\n        \"Objects are not valid as a React child (found: \" +\n          (childString === \"[object Object]\"\n            ? \"object with keys {\" + Object.keys(newChild).join(\", \") + \"}\"\n            : childString) +\n          \"). \" +\n          \"If you meant to render a collection of children, use an array \" +\n          \"instead.\"\n      );\n    }\n\n    function warnOnFunctionType(returnFiber, invalidChild) {\n      {\n        var parentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n\n        if (ownerHasFunctionTypeWarning[parentName]) {\n          return;\n        }\n\n        ownerHasFunctionTypeWarning[parentName] = true;\n        var name = invalidChild.displayName || invalidChild.name || \"Component\";\n\n        if (returnFiber.tag === HostRoot) {\n          error(\n            \"Functions are not valid as a React child. This may happen if \" +\n              \"you return %s instead of <%s /> from render. \" +\n              \"Or maybe you meant to call this function rather than return it.\\n\" +\n              \"  root.render(%s)\",\n            name,\n            name,\n            name\n          );\n        } else {\n          error(\n            \"Functions are not valid as a React child. This may happen if \" +\n              \"you return %s instead of <%s /> from render. \" +\n              \"Or maybe you meant to call this function rather than return it.\\n\" +\n              \"  <%s>{%s}</%s>\",\n            name,\n            name,\n            parentName,\n            name,\n            parentName\n          );\n        }\n      }\n    }\n\n    function warnOnSymbolType(returnFiber, invalidChild) {\n      {\n        var parentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n\n        if (ownerHasSymbolTypeWarning[parentName]) {\n          return;\n        }\n\n        ownerHasSymbolTypeWarning[parentName] = true; // eslint-disable-next-line react-internal/safe-string-coercion\n\n        var name = String(invalidChild);\n\n        if (returnFiber.tag === HostRoot) {\n          error(\n            \"Symbols are not valid as a React child.\\n\" + \"  root.render(%s)\",\n            name\n          );\n        } else {\n          error(\n            \"Symbols are not valid as a React child.\\n\" + \"  <%s>%s</%s>\",\n            parentName,\n            name,\n            parentName\n          );\n        }\n      }\n    }\n\n    function resolveLazy(lazyType) {\n      var payload = lazyType._payload;\n      var init = lazyType._init;\n      return init(payload);\n    } // This wrapper function exists because I expect to clone the code in each path\n    // to be able to optimize each path individually by branching early. This needs\n    // a compiler or we can do it manually. Helpers that don't need this branching\n    // live outside of this function.\n\n    function createChildReconciler(shouldTrackSideEffects) {\n      function deleteChild(returnFiber, childToDelete) {\n        if (!shouldTrackSideEffects) {\n          // Noop.\n          return;\n        }\n\n        var deletions = returnFiber.deletions;\n\n        if (deletions === null) {\n          returnFiber.deletions = [childToDelete];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(childToDelete);\n        }\n      }\n\n      function deleteRemainingChildren(returnFiber, currentFirstChild) {\n        if (!shouldTrackSideEffects) {\n          // Noop.\n          return null;\n        } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n        // assuming that after the first child we've already added everything.\n\n        var childToDelete = currentFirstChild;\n\n        while (childToDelete !== null) {\n          deleteChild(returnFiber, childToDelete);\n          childToDelete = childToDelete.sibling;\n        }\n\n        return null;\n      }\n\n      function mapRemainingChildren(currentFirstChild) {\n        // Add the remaining children to a temporary map so that we can find them by\n        // keys quickly. Implicit (null) keys get added to this set with their index\n        // instead.\n        var existingChildren = new Map();\n        var existingChild = currentFirstChild;\n\n        while (existingChild !== null) {\n          if (existingChild.key !== null) {\n            existingChildren.set(existingChild.key, existingChild);\n          } else {\n            existingChildren.set(existingChild.index, existingChild);\n          }\n\n          existingChild = existingChild.sibling;\n        }\n\n        return existingChildren;\n      }\n\n      function useFiber(fiber, pendingProps) {\n        // We currently set sibling to null and index to 0 here because it is easy\n        // to forget to do before returning it. E.g. for the single child case.\n        var clone = createWorkInProgress(fiber, pendingProps);\n        clone.index = 0;\n        clone.sibling = null;\n        return clone;\n      }\n\n      function placeChild(newFiber, lastPlacedIndex, newIndex) {\n        newFiber.index = newIndex;\n\n        if (!shouldTrackSideEffects) {\n          // During hydration, the useId algorithm needs to know which fibers are\n          // part of a list of children (arrays, iterators).\n          newFiber.flags |= Forked;\n          return lastPlacedIndex;\n        }\n\n        var current = newFiber.alternate;\n\n        if (current !== null) {\n          var oldIndex = current.index;\n\n          if (oldIndex < lastPlacedIndex) {\n            // This is a move.\n            newFiber.flags |= Placement | PlacementDEV;\n            return lastPlacedIndex;\n          } else {\n            // This item can stay in place.\n            return oldIndex;\n          }\n        } else {\n          // This is an insertion.\n          newFiber.flags |= Placement | PlacementDEV;\n          return lastPlacedIndex;\n        }\n      }\n\n      function placeSingleChild(newFiber) {\n        // This is simpler for the single child case. We only need to do a\n        // placement for inserting new children.\n        if (shouldTrackSideEffects && newFiber.alternate === null) {\n          newFiber.flags |= Placement | PlacementDEV;\n        }\n\n        return newFiber;\n      }\n\n      function updateTextNode(\n        returnFiber,\n        current,\n        textContent,\n        lanes,\n        debugInfo\n      ) {\n        if (current === null || current.tag !== HostText) {\n          // Insert\n          var created = createFiberFromText(\n            textContent,\n            returnFiber.mode,\n            lanes\n          );\n          created.return = returnFiber;\n\n          {\n            created._debugInfo = debugInfo;\n          }\n\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, textContent);\n          existing.return = returnFiber;\n\n          {\n            existing._debugInfo = debugInfo;\n          }\n\n          return existing;\n        }\n      }\n\n      function updateElement(returnFiber, current, element, lanes, debugInfo) {\n        var elementType = element.type;\n\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          return updateFragment(\n            returnFiber,\n            current,\n            element.props.children,\n            lanes,\n            element.key,\n            debugInfo\n          );\n        }\n\n        if (current !== null) {\n          if (\n            current.elementType === elementType || // Keep this check inline so it only runs on the false path:\n            isCompatibleFamilyForHotReloading(current, element) || // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (typeof elementType === \"object\" &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === current.type)\n          ) {\n            // Move based on index\n            var existing = useFiber(current, element.props);\n            coerceRef(returnFiber, current, existing, element);\n            existing.return = returnFiber;\n\n            {\n              existing._debugOwner = element._owner;\n              existing._debugInfo = debugInfo;\n            }\n\n            return existing;\n          }\n        } // Insert\n\n        var created = createFiberFromElement(element, returnFiber.mode, lanes);\n        coerceRef(returnFiber, current, created, element);\n        created.return = returnFiber;\n\n        {\n          created._debugInfo = debugInfo;\n        }\n\n        return created;\n      }\n\n      function updatePortal(returnFiber, current, portal, lanes, debugInfo) {\n        if (\n          current === null ||\n          current.tag !== HostPortal ||\n          current.stateNode.containerInfo !== portal.containerInfo ||\n          current.stateNode.implementation !== portal.implementation\n        ) {\n          // Insert\n          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n          created.return = returnFiber;\n\n          {\n            created._debugInfo = debugInfo;\n          }\n\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, portal.children || []);\n          existing.return = returnFiber;\n\n          {\n            existing._debugInfo = debugInfo;\n          }\n\n          return existing;\n        }\n      }\n\n      function updateFragment(\n        returnFiber,\n        current,\n        fragment,\n        lanes,\n        key,\n        debugInfo\n      ) {\n        if (current === null || current.tag !== Fragment) {\n          // Insert\n          var created = createFiberFromFragment(\n            fragment,\n            returnFiber.mode,\n            lanes,\n            key\n          );\n          created.return = returnFiber;\n\n          {\n            created._debugInfo = debugInfo;\n          }\n\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, fragment);\n          existing.return = returnFiber;\n\n          {\n            existing._debugInfo = debugInfo;\n          }\n\n          return existing;\n        }\n      }\n\n      function createChild(returnFiber, newChild, lanes, debugInfo) {\n        if (\n          (typeof newChild === \"string\" && newChild !== \"\") ||\n          typeof newChild === \"number\" ||\n          enableBigIntSupport\n        ) {\n          // Text nodes don't have keys. If the previous node is implicitly keyed\n          // we can continue to replace it without aborting even if it is not a text\n          // node.\n          var created = createFiberFromText(\n            // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n            \"\" + newChild,\n            returnFiber.mode,\n            lanes\n          );\n          created.return = returnFiber;\n\n          {\n            created._debugInfo = debugInfo;\n          }\n\n          return created;\n        }\n\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE: {\n              var _created = createFiberFromElement(\n                newChild,\n                returnFiber.mode,\n                lanes\n              );\n\n              coerceRef(returnFiber, null, _created, newChild);\n              _created.return = returnFiber;\n\n              {\n                _created._debugInfo = mergeDebugInfo(\n                  debugInfo,\n                  newChild._debugInfo\n                );\n              }\n\n              return _created;\n            }\n\n            case REACT_PORTAL_TYPE: {\n              var _created2 = createFiberFromPortal(\n                newChild,\n                returnFiber.mode,\n                lanes\n              );\n\n              _created2.return = returnFiber;\n\n              {\n                _created2._debugInfo = debugInfo;\n              }\n\n              return _created2;\n            }\n\n            case REACT_LAZY_TYPE: {\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return createChild(\n                returnFiber,\n                init(payload),\n                lanes,\n                mergeDebugInfo(debugInfo, newChild._debugInfo) // call merge after init\n              );\n            }\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _created3 = createFiberFromFragment(\n              newChild,\n              returnFiber.mode,\n              lanes,\n              null\n            );\n\n            _created3.return = returnFiber;\n\n            {\n              _created3._debugInfo = mergeDebugInfo(\n                debugInfo,\n                newChild._debugInfo\n              );\n            }\n\n            return _created3;\n          } // Usable node types\n          //\n          // Unwrap the inner value and recursively call this function again.\n\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return createChild(\n              returnFiber,\n              unwrapThenable(thenable),\n              lanes,\n              mergeDebugInfo(debugInfo, newChild._debugInfo)\n            );\n          }\n\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return createChild(\n              returnFiber,\n              readContextDuringReconciliation(returnFiber, context, lanes),\n              lanes,\n              debugInfo\n            );\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber, newChild);\n          }\n\n          if (typeof newChild === \"symbol\") {\n            warnOnSymbolType(returnFiber, newChild);\n          }\n        }\n\n        return null;\n      }\n\n      function updateSlot(returnFiber, oldFiber, newChild, lanes, debugInfo) {\n        // Update the fiber if the keys match, otherwise return null.\n        var key = oldFiber !== null ? oldFiber.key : null;\n\n        if (\n          (typeof newChild === \"string\" && newChild !== \"\") ||\n          typeof newChild === \"number\" ||\n          enableBigIntSupport\n        ) {\n          // Text nodes don't have keys. If the previous node is implicitly keyed\n          // we can continue to replace it without aborting even if it is not a text\n          // node.\n          if (key !== null) {\n            return null;\n          }\n\n          return updateTextNode(\n            returnFiber,\n            oldFiber, // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n            \"\" + newChild,\n            lanes,\n            debugInfo\n          );\n        }\n\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE: {\n              if (newChild.key === key) {\n                return updateElement(\n                  returnFiber,\n                  oldFiber,\n                  newChild,\n                  lanes,\n                  mergeDebugInfo(debugInfo, newChild._debugInfo)\n                );\n              } else {\n                return null;\n              }\n            }\n\n            case REACT_PORTAL_TYPE: {\n              if (newChild.key === key) {\n                return updatePortal(\n                  returnFiber,\n                  oldFiber,\n                  newChild,\n                  lanes,\n                  debugInfo\n                );\n              } else {\n                return null;\n              }\n            }\n\n            case REACT_LAZY_TYPE: {\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return updateSlot(\n                returnFiber,\n                oldFiber,\n                init(payload),\n                lanes,\n                mergeDebugInfo(debugInfo, newChild._debugInfo)\n              );\n            }\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            if (key !== null) {\n              return null;\n            }\n\n            return updateFragment(\n              returnFiber,\n              oldFiber,\n              newChild,\n              lanes,\n              null,\n              mergeDebugInfo(debugInfo, newChild._debugInfo)\n            );\n          } // Usable node types\n          //\n          // Unwrap the inner value and recursively call this function again.\n\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return updateSlot(\n              returnFiber,\n              oldFiber,\n              unwrapThenable(thenable),\n              lanes,\n              debugInfo\n            );\n          }\n\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return updateSlot(\n              returnFiber,\n              oldFiber,\n              readContextDuringReconciliation(returnFiber, context, lanes),\n              lanes,\n              debugInfo\n            );\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber, newChild);\n          }\n\n          if (typeof newChild === \"symbol\") {\n            warnOnSymbolType(returnFiber, newChild);\n          }\n        }\n\n        return null;\n      }\n\n      function updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChild,\n        lanes,\n        debugInfo\n      ) {\n        if (\n          (typeof newChild === \"string\" && newChild !== \"\") ||\n          typeof newChild === \"number\" ||\n          enableBigIntSupport\n        ) {\n          // Text nodes don't have keys, so we neither have to check the old nor\n          // new node for the key. If both are text nodes, they match.\n          var matchedFiber = existingChildren.get(newIdx) || null;\n          return updateTextNode(\n            returnFiber,\n            matchedFiber, // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n            \"\" + newChild,\n            lanes,\n            debugInfo\n          );\n        }\n\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE: {\n              var _matchedFiber =\n                existingChildren.get(\n                  newChild.key === null ? newIdx : newChild.key\n                ) || null;\n\n              return updateElement(\n                returnFiber,\n                _matchedFiber,\n                newChild,\n                lanes,\n                mergeDebugInfo(debugInfo, newChild._debugInfo)\n              );\n            }\n\n            case REACT_PORTAL_TYPE: {\n              var _matchedFiber2 =\n                existingChildren.get(\n                  newChild.key === null ? newIdx : newChild.key\n                ) || null;\n\n              return updatePortal(\n                returnFiber,\n                _matchedFiber2,\n                newChild,\n                lanes,\n                debugInfo\n              );\n            }\n\n            case REACT_LAZY_TYPE:\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return updateFromMap(\n                existingChildren,\n                returnFiber,\n                newIdx,\n                init(payload),\n                lanes,\n                mergeDebugInfo(debugInfo, newChild._debugInfo)\n              );\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n            return updateFragment(\n              returnFiber,\n              _matchedFiber3,\n              newChild,\n              lanes,\n              null,\n              mergeDebugInfo(debugInfo, newChild._debugInfo)\n            );\n          } // Usable node types\n          //\n          // Unwrap the inner value and recursively call this function again.\n\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              unwrapThenable(thenable),\n              lanes,\n              debugInfo\n            );\n          }\n\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              readContextDuringReconciliation(returnFiber, context, lanes),\n              lanes,\n              debugInfo\n            );\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber, newChild);\n          }\n\n          if (typeof newChild === \"symbol\") {\n            warnOnSymbolType(returnFiber, newChild);\n          }\n        }\n\n        return null;\n      }\n      /**\n       * Warns if there is a duplicate or missing key\n       */\n\n      function warnOnInvalidKey(child, knownKeys, returnFiber) {\n        {\n          if (typeof child !== \"object\" || child === null) {\n            return knownKeys;\n          }\n\n          switch (child.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n            case REACT_PORTAL_TYPE:\n              warnForMissingKey(child, returnFiber);\n              var key = child.key;\n\n              if (typeof key !== \"string\") {\n                break;\n              }\n\n              if (knownKeys === null) {\n                knownKeys = new Set();\n                knownKeys.add(key);\n                break;\n              }\n\n              if (!knownKeys.has(key)) {\n                knownKeys.add(key);\n                break;\n              }\n\n              error(\n                \"Encountered two children with the same key, `%s`. \" +\n                  \"Keys should be unique so that components maintain their identity \" +\n                  \"across updates. Non-unique keys may cause children to be \" +\n                  \"duplicated and/or omitted — the behavior is unsupported and \" +\n                  \"could change in a future version.\",\n                key\n              );\n\n              break;\n\n            case REACT_LAZY_TYPE:\n              var payload = child._payload;\n              var init = child._init;\n              warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n              break;\n          }\n        }\n\n        return knownKeys;\n      }\n\n      function reconcileChildrenArray(\n        returnFiber,\n        currentFirstChild,\n        newChildren,\n        lanes,\n        debugInfo\n      ) {\n        // This algorithm can't optimize by searching from both ends since we\n        // don't have backpointers on fibers. I'm trying to see how far we can get\n        // with that model. If it ends up not being worth the tradeoffs, we can\n        // add it later.\n        // Even with a two ended optimization, we'd want to optimize for the case\n        // where there are few changes and brute force the comparison instead of\n        // going for the Map. It'd like to explore hitting that path first in\n        // forward-only mode and only go for the Map once we notice that we need\n        // lots of look ahead. This doesn't handle reversal as well as two ended\n        // search but that's unusual. Besides, for the two ended optimization to\n        // work on Iterables, we'd need to copy the whole set.\n        // In this first iteration, we'll just live with hitting the bad case\n        // (adding everything to a Map) in for every insert/move.\n        // If you change this code, also update reconcileChildrenIterator() which\n        // uses the same algorithm.\n        {\n          // First, validate keys.\n          var knownKeys = null;\n\n          for (var i = 0; i < newChildren.length; i++) {\n            var child = newChildren[i];\n            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n          }\n        }\n\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n\n        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n\n          var newFiber = updateSlot(\n            returnFiber,\n            oldFiber,\n            newChildren[newIdx],\n            lanes,\n            debugInfo\n          );\n\n          if (newFiber === null) {\n            // TODO: This breaks on empty slots like null children. That's\n            // unfortunate because it triggers the slow path all the time. We need\n            // a better way to communicate whether this was a miss or null,\n            // boolean, undefined, etc.\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n\n            break;\n          }\n\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              // We matched the slot, but we didn't reuse the existing fiber, so we\n              // need to delete the existing child.\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n          if (previousNewFiber === null) {\n            // TODO: Move out of the loop. This only happens for the first run.\n            resultingFirstChild = newFiber;\n          } else {\n            // TODO: Defer siblings if we're not at the right index for this slot.\n            // I.e. if we had null values before, then we want to defer this\n            // for each null value. However, we also don't want to call updateSlot\n            // with the previous one.\n            previousNewFiber.sibling = newFiber;\n          }\n\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n\n        if (newIdx === newChildren.length) {\n          // We've reached the end of the new children. We can delete the rest.\n          deleteRemainingChildren(returnFiber, oldFiber);\n\n          return resultingFirstChild;\n        }\n\n        if (oldFiber === null) {\n          // If we don't have any more existing children we can choose a fast path\n          // since the rest will all be insertions.\n          for (; newIdx < newChildren.length; newIdx++) {\n            var _newFiber = createChild(\n              returnFiber,\n              newChildren[newIdx],\n              lanes,\n              debugInfo\n            );\n\n            if (_newFiber === null) {\n              continue;\n            }\n\n            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = _newFiber;\n            } else {\n              previousNewFiber.sibling = _newFiber;\n            }\n\n            previousNewFiber = _newFiber;\n          }\n\n          return resultingFirstChild;\n        } // Add all children to a key map for quick lookups.\n\n        var existingChildren = mapRemainingChildren(oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n        for (; newIdx < newChildren.length; newIdx++) {\n          var _newFiber2 = updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            newChildren[newIdx],\n            lanes,\n            debugInfo\n          );\n\n          if (_newFiber2 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber2.alternate !== null) {\n                // The new fiber is a work in progress, but if there exists a\n                // current, that means that we reused the fiber. We need to delete\n                // it from the child list so that we don't add it to the deletion\n                // list.\n                existingChildren.delete(\n                  _newFiber2.key === null ? newIdx : _newFiber2.key\n                );\n              }\n            }\n\n            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber2;\n            } else {\n              previousNewFiber.sibling = _newFiber2;\n            }\n\n            previousNewFiber = _newFiber2;\n          }\n        }\n\n        if (shouldTrackSideEffects) {\n          // Any existing children that weren't consumed above were deleted. We need\n          // to add them to the deletion list.\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n\n        return resultingFirstChild;\n      }\n\n      function reconcileChildrenIterator(\n        returnFiber,\n        currentFirstChild,\n        newChildrenIterable,\n        lanes,\n        debugInfo\n      ) {\n        // This is the same implementation as reconcileChildrenArray(),\n        // but using the iterator instead.\n        var iteratorFn = getIteratorFn(newChildrenIterable);\n\n        if (typeof iteratorFn !== \"function\") {\n          throw new Error(\n            \"An object is not an iterable. This error is likely caused by a bug in \" +\n              \"React. Please file an issue.\"\n          );\n        }\n\n        {\n          // We don't support rendering Generators because it's a mutation.\n          // See https://github.com/facebook/react/issues/12995\n          if (\n            typeof Symbol === \"function\" && // $FlowFixMe[prop-missing] Flow doesn't know about toStringTag\n            newChildrenIterable[Symbol.toStringTag] === \"Generator\"\n          ) {\n            if (!didWarnAboutGenerators) {\n              error(\n                \"Using Generators as children is unsupported and will likely yield \" +\n                  \"unexpected results because enumerating a generator mutates it. \" +\n                  \"You may convert it to an array with `Array.from()` or the \" +\n                  \"`[...spread]` operator before rendering. Keep in mind \" +\n                  \"you might need to polyfill these features for older browsers.\"\n              );\n            }\n\n            didWarnAboutGenerators = true;\n          } // Warn about using Maps as children\n\n          if (newChildrenIterable.entries === iteratorFn) {\n            if (!didWarnAboutMaps) {\n              error(\n                \"Using Maps as children is not supported. \" +\n                  \"Use an array of keyed ReactElements instead.\"\n              );\n            }\n\n            didWarnAboutMaps = true;\n          } // First, validate keys.\n          // We'll get a different iterator later for the main pass.\n\n          var _newChildren = iteratorFn.call(newChildrenIterable);\n\n          if (_newChildren) {\n            var knownKeys = null;\n\n            var _step = _newChildren.next();\n\n            for (; !_step.done; _step = _newChildren.next()) {\n              var child = _step.value;\n              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n            }\n          }\n        }\n\n        var newChildren = iteratorFn.call(newChildrenIterable);\n\n        if (newChildren == null) {\n          throw new Error(\"An iterable object provided no iterator.\");\n        }\n\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n        var step = newChildren.next();\n\n        for (\n          ;\n          oldFiber !== null && !step.done;\n          newIdx++, step = newChildren.next()\n        ) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n\n          var newFiber = updateSlot(\n            returnFiber,\n            oldFiber,\n            step.value,\n            lanes,\n            debugInfo\n          );\n\n          if (newFiber === null) {\n            // TODO: This breaks on empty slots like null children. That's\n            // unfortunate because it triggers the slow path all the time. We need\n            // a better way to communicate whether this was a miss or null,\n            // boolean, undefined, etc.\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n\n            break;\n          }\n\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              // We matched the slot, but we didn't reuse the existing fiber, so we\n              // need to delete the existing child.\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n          if (previousNewFiber === null) {\n            // TODO: Move out of the loop. This only happens for the first run.\n            resultingFirstChild = newFiber;\n          } else {\n            // TODO: Defer siblings if we're not at the right index for this slot.\n            // I.e. if we had null values before, then we want to defer this\n            // for each null value. However, we also don't want to call updateSlot\n            // with the previous one.\n            previousNewFiber.sibling = newFiber;\n          }\n\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n\n        if (step.done) {\n          // We've reached the end of the new children. We can delete the rest.\n          deleteRemainingChildren(returnFiber, oldFiber);\n\n          return resultingFirstChild;\n        }\n\n        if (oldFiber === null) {\n          // If we don't have any more existing children we can choose a fast path\n          // since the rest will all be insertions.\n          for (; !step.done; newIdx++, step = newChildren.next()) {\n            var _newFiber3 = createChild(\n              returnFiber,\n              step.value,\n              lanes,\n              debugInfo\n            );\n\n            if (_newFiber3 === null) {\n              continue;\n            }\n\n            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = _newFiber3;\n            } else {\n              previousNewFiber.sibling = _newFiber3;\n            }\n\n            previousNewFiber = _newFiber3;\n          }\n\n          return resultingFirstChild;\n        } // Add all children to a key map for quick lookups.\n\n        var existingChildren = mapRemainingChildren(oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n        for (; !step.done; newIdx++, step = newChildren.next()) {\n          var _newFiber4 = updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            step.value,\n            lanes,\n            debugInfo\n          );\n\n          if (_newFiber4 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber4.alternate !== null) {\n                // The new fiber is a work in progress, but if there exists a\n                // current, that means that we reused the fiber. We need to delete\n                // it from the child list so that we don't add it to the deletion\n                // list.\n                existingChildren.delete(\n                  _newFiber4.key === null ? newIdx : _newFiber4.key\n                );\n              }\n            }\n\n            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber4;\n            } else {\n              previousNewFiber.sibling = _newFiber4;\n            }\n\n            previousNewFiber = _newFiber4;\n          }\n        }\n\n        if (shouldTrackSideEffects) {\n          // Any existing children that weren't consumed above were deleted. We need\n          // to add them to the deletion list.\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n\n        return resultingFirstChild;\n      }\n\n      function reconcileSingleTextNode(\n        returnFiber,\n        currentFirstChild,\n        textContent,\n        lanes\n      ) {\n        // There's no need to check for keys on text nodes since we don't have a\n        // way to define them.\n        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n          // We already have an existing node so let's just update it and delete\n          // the rest.\n          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n          var existing = useFiber(currentFirstChild, textContent);\n          existing.return = returnFiber;\n          return existing;\n        } // The existing first child is not a text node so we need to create one\n        // and delete the existing ones.\n\n        deleteRemainingChildren(returnFiber, currentFirstChild);\n        var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      }\n\n      function reconcileSingleElement(\n        returnFiber,\n        currentFirstChild,\n        element,\n        lanes,\n        debugInfo\n      ) {\n        var key = element.key;\n        var child = currentFirstChild;\n\n        while (child !== null) {\n          // TODO: If key === null and child.key === null, then this only applies to\n          // the first item in the list.\n          if (child.key === key) {\n            var elementType = element.type;\n\n            if (elementType === REACT_FRAGMENT_TYPE) {\n              if (child.tag === Fragment) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, element.props.children);\n                existing.return = returnFiber;\n\n                {\n                  existing._debugOwner = element._owner;\n                  existing._debugInfo = debugInfo;\n                }\n\n                return existing;\n              }\n            } else {\n              if (\n                child.elementType === elementType || // Keep this check inline so it only runs on the false path:\n                isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.\n                // We need to do this after the Hot Reloading check above,\n                // because hot reloading has different semantics than prod because\n                // it doesn't resuspend. So we can't let the call below suspend.\n                (typeof elementType === \"object\" &&\n                  elementType !== null &&\n                  elementType.$$typeof === REACT_LAZY_TYPE &&\n                  resolveLazy(elementType) === child.type)\n              ) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n\n                var _existing = useFiber(child, element.props);\n\n                coerceRef(returnFiber, child, _existing, element);\n                _existing.return = returnFiber;\n\n                {\n                  _existing._debugOwner = element._owner;\n                  _existing._debugInfo = debugInfo;\n                }\n\n                return _existing;\n              }\n            } // Didn't match.\n\n            deleteRemainingChildren(returnFiber, child);\n            break;\n          } else {\n            deleteChild(returnFiber, child);\n          }\n\n          child = child.sibling;\n        }\n\n        if (element.type === REACT_FRAGMENT_TYPE) {\n          var created = createFiberFromFragment(\n            element.props.children,\n            returnFiber.mode,\n            lanes,\n            element.key\n          );\n          created.return = returnFiber;\n\n          {\n            created._debugInfo = debugInfo;\n          }\n\n          return created;\n        } else {\n          var _created4 = createFiberFromElement(\n            element,\n            returnFiber.mode,\n            lanes\n          );\n\n          coerceRef(returnFiber, currentFirstChild, _created4, element);\n          _created4.return = returnFiber;\n\n          {\n            _created4._debugInfo = debugInfo;\n          }\n\n          return _created4;\n        }\n      }\n\n      function reconcileSinglePortal(\n        returnFiber,\n        currentFirstChild,\n        portal,\n        lanes,\n        debugInfo\n      ) {\n        var key = portal.key;\n        var child = currentFirstChild;\n\n        while (child !== null) {\n          // TODO: If key === null and child.key === null, then this only applies to\n          // the first item in the list.\n          if (child.key === key) {\n            if (\n              child.tag === HostPortal &&\n              child.stateNode.containerInfo === portal.containerInfo &&\n              child.stateNode.implementation === portal.implementation\n            ) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              var existing = useFiber(child, portal.children || []);\n              existing.return = returnFiber;\n              return existing;\n            } else {\n              deleteRemainingChildren(returnFiber, child);\n              break;\n            }\n          } else {\n            deleteChild(returnFiber, child);\n          }\n\n          child = child.sibling;\n        }\n\n        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      } // This API will tag the children with the side-effect of the reconciliation\n      // itself. They will be added to the side-effect list as we pass through the\n      // children and the parent.\n\n      function reconcileChildFibersImpl(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes,\n        debugInfo\n      ) {\n        // This function is not recursive.\n        // If the top level item is an array, we treat it as a set of children,\n        // not as a fragment. Nested arrays on the other hand will be treated as\n        // fragment nodes. Recursion happens at the normal flow.\n        // Handle top level unkeyed fragments as if they were arrays.\n        // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n        // We treat the ambiguous cases above the same.\n        // TODO: Let's use recursion like we do for Usable nodes?\n        var isUnkeyedTopLevelFragment =\n          typeof newChild === \"object\" &&\n          newChild !== null &&\n          newChild.type === REACT_FRAGMENT_TYPE &&\n          newChild.key === null;\n\n        if (isUnkeyedTopLevelFragment) {\n          newChild = newChild.props.children;\n        } // Handle object types\n\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              return placeSingleChild(\n                reconcileSingleElement(\n                  returnFiber,\n                  currentFirstChild,\n                  newChild,\n                  lanes,\n                  mergeDebugInfo(debugInfo, newChild._debugInfo)\n                )\n              );\n\n            case REACT_PORTAL_TYPE:\n              return placeSingleChild(\n                reconcileSinglePortal(\n                  returnFiber,\n                  currentFirstChild,\n                  newChild,\n                  lanes\n                )\n              );\n\n            case REACT_LAZY_TYPE:\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return reconcileChildFibersImpl(\n                returnFiber,\n                currentFirstChild,\n                init(payload),\n                lanes,\n                mergeDebugInfo(debugInfo, newChild._debugInfo)\n              );\n          }\n\n          if (isArray(newChild)) {\n            return reconcileChildrenArray(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n              mergeDebugInfo(debugInfo, newChild._debugInfo)\n            );\n          }\n\n          if (getIteratorFn(newChild)) {\n            return reconcileChildrenIterator(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n              mergeDebugInfo(debugInfo, newChild._debugInfo)\n            );\n          } // Usables are a valid React node type. When React encounters a Usable in\n          // a child position, it unwraps it using the same algorithm as `use`. For\n          // example, for promises, React will throw an exception to unwind the\n          // stack, then replay the component once the promise resolves.\n          //\n          // A difference from `use` is that React will keep unwrapping the value\n          // until it reaches a non-Usable type.\n          //\n          // e.g. Usable<Usable<Usable<T>>> should resolve to T\n          //\n          // The structure is a bit unfortunate. Ideally, we shouldn't need to\n          // replay the entire begin phase of the parent fiber in order to reconcile\n          // the children again. This would require a somewhat significant refactor,\n          // because reconcilation happens deep within the begin phase, and\n          // depending on the type of work, not always at the end. We should\n          // consider as an future improvement.\n\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return reconcileChildFibersImpl(\n              returnFiber,\n              currentFirstChild,\n              unwrapThenable(thenable),\n              lanes,\n              mergeDebugInfo(debugInfo, thenable._debugInfo)\n            );\n          }\n\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return reconcileChildFibersImpl(\n              returnFiber,\n              currentFirstChild,\n              readContextDuringReconciliation(returnFiber, context, lanes),\n              lanes,\n              debugInfo\n            );\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        if (\n          (typeof newChild === \"string\" && newChild !== \"\") ||\n          typeof newChild === \"number\" ||\n          enableBigIntSupport\n        ) {\n          return placeSingleChild(\n            reconcileSingleTextNode(\n              returnFiber,\n              currentFirstChild, // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n              \"\" + newChild,\n              lanes\n            )\n          );\n        }\n\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber, newChild);\n          }\n\n          if (typeof newChild === \"symbol\") {\n            warnOnSymbolType(returnFiber, newChild);\n          }\n        } // Remaining cases are all treated as empty.\n\n        return deleteRemainingChildren(returnFiber, currentFirstChild);\n      }\n\n      function reconcileChildFibers(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes\n      ) {\n        // This indirection only exists so we can reset `thenableState` at the end.\n        // It should get inlined by Closure.\n        thenableIndexCounter$1 = 0;\n        var firstChildFiber = reconcileChildFibersImpl(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n          null // debugInfo\n        );\n        thenableState$1 = null; // Don't bother to reset `thenableIndexCounter` to 0 because it always gets\n        // set at the beginning.\n\n        return firstChildFiber;\n      }\n\n      return reconcileChildFibers;\n    }\n\n    var reconcileChildFibers = createChildReconciler(true);\n    var mountChildFibers = createChildReconciler(false);\n    function resetChildReconcilerOnUnwind() {\n      // On unwind, clear any pending thenables that were used.\n      thenableState$1 = null;\n      thenableIndexCounter$1 = 0;\n    }\n    function cloneChildFibers(current, workInProgress) {\n      if (current !== null && workInProgress.child !== current.child) {\n        throw new Error(\"Resuming work not yet implemented.\");\n      }\n\n      if (workInProgress.child === null) {\n        return;\n      }\n\n      var currentChild = workInProgress.child;\n      var newChild = createWorkInProgress(\n        currentChild,\n        currentChild.pendingProps\n      );\n      workInProgress.child = newChild;\n      newChild.return = workInProgress;\n\n      while (currentChild.sibling !== null) {\n        currentChild = currentChild.sibling;\n        newChild = newChild.sibling = createWorkInProgress(\n          currentChild,\n          currentChild.pendingProps\n        );\n        newChild.return = workInProgress;\n      }\n\n      newChild.sibling = null;\n    } // Reset a workInProgress child set to prepare it for a second pass.\n\n    function resetChildFibers(workInProgress, lanes) {\n      var child = workInProgress.child;\n\n      while (child !== null) {\n        resetWorkInProgress(child, lanes);\n        child = child.sibling;\n      }\n    }\n\n    // TODO: This isn't being used yet, but it's intended to replace the\n    // InvisibleParentContext that is currently managed by SuspenseContext.\n\n    var currentTreeHiddenStackCursor = createCursor(null);\n    var prevEntangledRenderLanesCursor = createCursor(NoLanes);\n    function pushHiddenContext(fiber, context) {\n      var prevEntangledRenderLanes = getEntangledRenderLanes();\n      push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);\n      push(currentTreeHiddenStackCursor, context, fiber); // When rendering a subtree that's currently hidden, we must include all\n      // lanes that would have rendered if the hidden subtree hadn't been deferred.\n      // That is, in order to reveal content from hidden -> visible, we must commit\n      // all the updates that we skipped when we originally hid the tree.\n\n      setEntangledRenderLanes(\n        mergeLanes(prevEntangledRenderLanes, context.baseLanes)\n      );\n    }\n    function reuseHiddenContextOnStack(fiber) {\n      // This subtree is not currently hidden, so we don't need to add any lanes\n      // to the render lanes. But we still need to push something to avoid a\n      // context mismatch. Reuse the existing context on the stack.\n      push(prevEntangledRenderLanesCursor, getEntangledRenderLanes(), fiber);\n      push(\n        currentTreeHiddenStackCursor,\n        currentTreeHiddenStackCursor.current,\n        fiber\n      );\n    }\n    function popHiddenContext(fiber) {\n      // Restore the previous render lanes from the stack\n      setEntangledRenderLanes(prevEntangledRenderLanesCursor.current);\n      pop(currentTreeHiddenStackCursor, fiber);\n      pop(prevEntangledRenderLanesCursor, fiber);\n    }\n    function isCurrentTreeHidden() {\n      return currentTreeHiddenStackCursor.current !== null;\n    }\n\n    // suspends, i.e. it's the nearest `catch` block on the stack.\n\n    var suspenseHandlerStackCursor = createCursor(null); // Represents the outermost boundary that is not visible in the current tree.\n    // Everything above this is the \"shell\". When this is null, it means we're\n    // rendering in the shell of the app. If it's non-null, it means we're rendering\n    // deeper than the shell, inside a new tree that wasn't already visible.\n    //\n    // The main way we use this concept is to determine whether showing a fallback\n    // would result in a desirable or undesirable loading state. Activing a fallback\n    // in the shell is considered an undersirable loading state, because it would\n    // mean hiding visible (albeit stale) content in the current tree — we prefer to\n    // show the stale content, rather than switch to a fallback. But showing a\n    // fallback in a new tree is fine, because there's no stale content to\n    // prefer instead.\n\n    var shellBoundary = null;\n    function getShellBoundary() {\n      return shellBoundary;\n    }\n    function pushPrimaryTreeSuspenseHandler(handler) {\n      // TODO: Pass as argument\n      var current = handler.alternate;\n      // propagated a single level. For example, when ForceSuspenseFallback is set,\n      // it should only force the nearest Suspense boundary into fallback mode.\n\n      pushSuspenseListContext(\n        handler,\n        setDefaultShallowSuspenseListContext(suspenseStackCursor.current)\n      ); // Experimental feature: Some Suspense boundaries are marked as having an\n      // to push a nested Suspense handler, because it will get replaced by the\n      // outer fallback, anyway. Consider this as a future optimization.\n\n      push(suspenseHandlerStackCursor, handler, handler);\n\n      if (shellBoundary === null) {\n        if (current === null || isCurrentTreeHidden()) {\n          // This boundary is not visible in the current UI.\n          shellBoundary = handler;\n        } else {\n          var prevState = current.memoizedState;\n\n          if (prevState !== null) {\n            // This boundary is showing a fallback in the current UI.\n            shellBoundary = handler;\n          }\n        }\n      }\n    }\n    function pushFallbackTreeSuspenseHandler(fiber) {\n      // We're about to render the fallback. If something in the fallback suspends,\n      // it's akin to throwing inside of a `catch` block. This boundary should not\n      // capture. Reuse the existing handler on the stack.\n      reuseSuspenseHandlerOnStack(fiber);\n    }\n    function pushOffscreenSuspenseHandler(fiber) {\n      if (fiber.tag === OffscreenComponent) {\n        // A SuspenseList context is only pushed here to avoid a push/pop mismatch.\n        // Reuse the current value on the stack.\n        // TODO: We can avoid needing to push here by by forking popSuspenseHandler\n        // into separate functions for Suspense and Offscreen.\n        pushSuspenseListContext(fiber, suspenseStackCursor.current);\n        push(suspenseHandlerStackCursor, fiber, fiber);\n\n        if (shellBoundary !== null);\n        else {\n          var current = fiber.alternate;\n\n          if (current !== null) {\n            var prevState = current.memoizedState;\n\n            if (prevState !== null) {\n              // This is the first boundary in the stack that's already showing\n              // a fallback. So everything outside is considered the shell.\n              shellBoundary = fiber;\n            }\n          }\n        }\n      } else {\n        // This is a LegacyHidden component.\n        reuseSuspenseHandlerOnStack(fiber);\n      }\n    }\n    function reuseSuspenseHandlerOnStack(fiber) {\n      pushSuspenseListContext(fiber, suspenseStackCursor.current);\n      push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);\n    }\n    function getSuspenseHandler() {\n      return suspenseHandlerStackCursor.current;\n    }\n    function popSuspenseHandler(fiber) {\n      pop(suspenseHandlerStackCursor, fiber);\n\n      if (shellBoundary === fiber) {\n        // Popping back into the shell.\n        shellBoundary = null;\n      }\n\n      popSuspenseListContext(fiber);\n    } // SuspenseList context\n    // TODO: Move to a separate module? We may change the SuspenseList\n    // implementation to hide/show in the commit phase, anyway.\n\n    var DefaultSuspenseContext = 0;\n    var SubtreeSuspenseContextMask = 1; // ForceSuspenseFallback can be used by SuspenseList to force newly added\n    // items into their fallback state during one of the render passes.\n\n    var ForceSuspenseFallback = 2;\n    var suspenseStackCursor = createCursor(DefaultSuspenseContext);\n    function hasSuspenseListContext(parentContext, flag) {\n      return (parentContext & flag) !== 0;\n    }\n    function setDefaultShallowSuspenseListContext(parentContext) {\n      return parentContext & SubtreeSuspenseContextMask;\n    }\n    function setShallowSuspenseListContext(parentContext, shallowContext) {\n      return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n    }\n    function pushSuspenseListContext(fiber, newContext) {\n      push(suspenseStackCursor, newContext, fiber);\n    }\n    function popSuspenseListContext(fiber) {\n      pop(suspenseStackCursor, fiber);\n    }\n\n    // A non-null SuspenseState means that it is blocked for one reason or another.\n    // - A non-null dehydrated field means it's blocked pending hydration.\n    //   - A non-null dehydrated field can use isSuspenseInstancePending or\n    //     isSuspenseInstanceFallback to query the reason for being dehydrated.\n    // - A null dehydrated field means it's blocked by something suspending and\n    //   we're currently showing a fallback instead.\n\n    function findFirstSuspended(row) {\n      var node = row;\n\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n\n          if (state !== null) {\n            var dehydrated = state.dehydrated;\n\n            if (\n              dehydrated === null ||\n              isSuspenseInstancePending() ||\n              isSuspenseInstanceFallback()\n            ) {\n              return node;\n            }\n          }\n        } else if (\n          node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n          // keep track of whether it suspended or not.\n          node.memoizedProps.revealOrder !== undefined\n        ) {\n          var didSuspend = (node.flags & DidCapture) !== NoFlags$1;\n\n          if (didSuspend) {\n            return node;\n          }\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        if (node === row) {\n          return null;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === row) {\n            return null;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n\n      return null;\n    }\n\n    var NoFlags =\n      /*   */\n      0; // Represents whether effect should fire.\n\n    var HasEffect =\n      /* */\n      1; // Represents the phase in which the effect (not the clean-up) fires.\n\n    var Insertion =\n      /* */\n      2;\n    var Layout =\n      /*    */\n      4;\n    var Passive =\n      /*   */\n      8;\n\n    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;\n    var didWarnAboutMismatchedHooksForComponent;\n    var didWarnUncachedGetSnapshot;\n    var didWarnAboutUseWrappedInTryCatch;\n    var didWarnAboutAsyncClientComponent;\n\n    {\n      didWarnAboutMismatchedHooksForComponent = new Set();\n      didWarnAboutUseWrappedInTryCatch = new Set();\n      didWarnAboutAsyncClientComponent = new Set();\n    } // The effect \"instance\" is a shared object that remains the same for the entire\n    // lifetime of an effect. In Rust terms, a RefCell. We use it to store the\n    // \"destroy\" function that is returned from an effect, because that is stateful.\n    // The field is `undefined` if the effect is unmounted, or if the effect ran\n    // but is not stateful. We don't explicitly track whether the effect is mounted\n    // or unmounted because that can be inferred by the hiddenness of the fiber in\n    // the tree, i.e. whether there is a hidden Offscreen fiber above it.\n    //\n    // It's unfortunate that this is stored on a separate object, because it adds\n    // more memory per effect instance, but it's conceptually sound. I think there's\n    // likely a better data structure we could use for effects; perhaps just one\n    // array of effect instances per fiber. But I think this is OK for now despite\n    // the additional memory and we can follow up with performance\n    // optimizations later.\n    // These are set right before calling the component.\n\n    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n    // the work-in-progress hook.\n\n    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n    // current hook list is the list that belongs to the current fiber. The\n    // work-in-progress hook list is a new list that will be added to the\n    // work-in-progress fiber.\n\n    var currentHook = null;\n    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n    // does not get reset if we do another render pass; only when we're completely\n    // finished evaluating this component. This is an optimization so we know\n    // whether we need to clear render phase updates after a throw.\n\n    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n    // gets reset after each attempt.\n    // TODO: Maybe there's some way to consolidate this with\n    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\n    var didScheduleRenderPhaseUpdateDuringThisPass = false;\n    var shouldDoubleInvokeUserFnsInHooksDEV = false; // Counts the number of useId hooks in this component.\n\n    var thenableIndexCounter = 0;\n    var thenableState = null; // Used for ids that are generated completely client-side (i.e. not during\n    // hydration). This counter is global, so client ids are not stable across\n    // render attempts.\n\n    var globalClientIdCounter = 0;\n    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\n    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n    // The list stores the order of hooks used during the initial render (mount).\n    // Subsequent renders (updates) reference this list.\n\n    var hookTypesDev = null;\n    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n    // When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\n    var ignorePreviousDependencies = false;\n\n    function mountHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n\n        if (hookTypesDev === null) {\n          hookTypesDev = [hookName];\n        } else {\n          hookTypesDev.push(hookName);\n        }\n      }\n    }\n\n    function updateHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n\n        if (hookTypesDev !== null) {\n          hookTypesUpdateIndexDev++;\n\n          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n            warnOnHookMismatchInDev(hookName);\n          }\n        }\n      }\n    }\n\n    function checkDepsAreArrayDev(deps) {\n      {\n        if (deps !== undefined && deps !== null && !isArray(deps)) {\n          // Verify deps, but only on mount to avoid extra checks.\n          // It's unlikely their type would change as usually you define them inline.\n          error(\n            \"%s received a final argument that is not an array (instead, received `%s`). When \" +\n              \"specified, the final argument must be an array.\",\n            currentHookNameInDev,\n            typeof deps\n          );\n        }\n      }\n    }\n\n    function warnOnHookMismatchInDev(currentHookName) {\n      {\n        var componentName = getComponentNameFromFiber(\n          currentlyRenderingFiber$1\n        );\n\n        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n          didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n          if (hookTypesDev !== null) {\n            var table = \"\";\n            var secondColumnStart = 30;\n\n            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n              var oldHookName = hookTypesDev[i];\n              var newHookName =\n                i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n              var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n              // lol @ IE not supporting String#repeat\n\n              while (row.length < secondColumnStart) {\n                row += \" \";\n              }\n\n              row += newHookName + \"\\n\";\n              table += row;\n            }\n\n            error(\n              \"React has detected a change in the order of Hooks called by %s. \" +\n                \"This will lead to bugs and errors if not fixed. \" +\n                \"For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\\n\\n\" +\n                \"   Previous render            Next render\\n\" +\n                \"   ------------------------------------------------------\\n\" +\n                \"%s\" +\n                \"   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\",\n              componentName,\n              table\n            );\n          }\n        }\n      }\n    }\n\n    function warnIfAsyncClientComponent(Component) {\n      {\n        // This dev-only check only works for detecting native async functions,\n        // not transpiled ones. There's also a prod check that we use to prevent\n        // async client components from crashing the app; the prod one works even\n        // for transpiled async functions. Neither mechanism is completely\n        // bulletproof but together they cover the most common cases.\n        var isAsyncFunction = // $FlowIgnore[method-unbinding]\n          Object.prototype.toString.call(Component) ===\n          \"[object AsyncFunction]\";\n\n        if (isAsyncFunction) {\n          // Encountered an async Client Component. This is not yet supported.\n          var componentName = getComponentNameFromFiber(\n            currentlyRenderingFiber$1\n          );\n\n          if (!didWarnAboutAsyncClientComponent.has(componentName)) {\n            didWarnAboutAsyncClientComponent.add(componentName);\n\n            error(\n              \"async/await is not yet supported in Client Components, only \" +\n                \"Server Components. This error is often caused by accidentally \" +\n                \"adding `'use client'` to a module that was originally written \" +\n                \"for the server.\"\n            );\n          }\n        }\n      }\n    }\n\n    function throwInvalidHookError() {\n      throw new Error(\n        \"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" +\n          \" one of the following reasons:\\n\" +\n          \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" +\n          \"2. You might be breaking the Rules of Hooks\\n\" +\n          \"3. You might have more than one copy of React in the same app\\n\" +\n          \"See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.\"\n      );\n    }\n\n    function areHookInputsEqual(nextDeps, prevDeps) {\n      {\n        if (ignorePreviousDependencies) {\n          // Only true when this component is being hot reloaded.\n          return false;\n        }\n      }\n\n      if (prevDeps === null) {\n        {\n          error(\n            \"%s received a final argument during this render, but not during \" +\n              \"the previous render. Even though the final argument is optional, \" +\n              \"its type cannot change between renders.\",\n            currentHookNameInDev\n          );\n        }\n\n        return false;\n      }\n\n      {\n        // Don't bother comparing lengths in prod because these arrays should be\n        // passed inline.\n        if (nextDeps.length !== prevDeps.length) {\n          error(\n            \"The final argument passed to %s changed size between renders. The \" +\n              \"order and size of this array must remain constant.\\n\\n\" +\n              \"Previous: %s\\n\" +\n              \"Incoming: %s\",\n            currentHookNameInDev,\n            \"[\" + prevDeps.join(\", \") + \"]\",\n            \"[\" + nextDeps.join(\", \") + \"]\"\n          );\n        }\n      } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        if (objectIs(nextDeps[i], prevDeps[i])) {\n          continue;\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n\n    function renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      props,\n      secondArg,\n      nextRenderLanes\n    ) {\n      renderLanes = nextRenderLanes;\n      currentlyRenderingFiber$1 = workInProgress;\n\n      {\n        hookTypesDev = current !== null ? current._debugHookTypes : null;\n        hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n        ignorePreviousDependencies =\n          current !== null && current.type !== workInProgress.type;\n        warnIfAsyncClientComponent(Component);\n      }\n\n      workInProgress.memoizedState = null;\n      workInProgress.updateQueue = null;\n      workInProgress.lanes = NoLanes; // The following should have already been reset\n      // currentHook = null;\n      // workInProgressHook = null;\n      // didScheduleRenderPhaseUpdate = false;\n      // localIdCounter = 0;\n      // thenableIndexCounter = 0;\n      // thenableState = null;\n      // TODO Warn if no hooks are used at all during mount, then some are used during update.\n      // Currently we will identify the update render as a mount because memoizedState === null.\n      // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n      // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n      // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n      // so memoizedState would be null during updates and mounts.\n\n      {\n        if (current !== null && current.memoizedState !== null) {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n        } else if (hookTypesDev !== null) {\n          // This dispatcher handles an edge case where a component is updating,\n          // but no stateful hooks have been used.\n          // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n          // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n          // This dispatcher does that.\n          ReactCurrentDispatcher$1.current =\n            HooksDispatcherOnMountWithHookTypesInDEV;\n        } else {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      } // In Strict Mode, during development, user functions are double invoked to\n      // help detect side effects. The logic for how this is implemented for in\n      // hook components is a bit complex so let's break it down.\n      //\n      // We will invoke the entire component function twice. However, during the\n      // second invocation of the component, the hook state from the first\n      // invocation will be reused. That means things like `useMemo` functions won't\n      // run again, because the deps will match and the memoized result will\n      // be reused.\n      //\n      // We want memoized functions to run twice, too, so account for this, user\n      // functions are double invoked during the *first* invocation of the component\n      // function, and are *not* double invoked during the second incovation:\n      //\n      // - First execution of component function: user functions are double invoked\n      // - Second execution of component function (in Strict Mode, during\n      //   development): user functions are not double invoked.\n      //\n      // This is intentional for a few reasons; most importantly, it's because of\n      // how `use` works when something suspends: it reuses the promise that was\n      // passed during the first attempt. This is itself a form of memoization.\n      // We need to be able to memoize the reactive inputs to the `use` call using\n      // a hook (i.e. `useMemo`), which means, the reactive inputs to `use` must\n      // come from the same component invocation as the output.\n      //\n      // There are plenty of tests to ensure this behavior is correct.\n\n      var shouldDoubleRenderDEV =\n        (workInProgress.mode & StrictLegacyMode) !== NoMode;\n      shouldDoubleInvokeUserFnsInHooksDEV = shouldDoubleRenderDEV;\n      var children = Component(props, secondArg);\n      shouldDoubleInvokeUserFnsInHooksDEV = false; // Check if there was a render phase update\n\n      if (didScheduleRenderPhaseUpdateDuringThisPass) {\n        // Keep rendering until the component stabilizes (there are no more render\n        // phase updates).\n        children = renderWithHooksAgain(\n          workInProgress,\n          Component,\n          props,\n          secondArg\n        );\n      }\n\n      if (shouldDoubleRenderDEV) {\n        // In development, components are invoked twice to help detect side effects.\n        setIsStrictModeForDevtools(true);\n\n        try {\n          children = renderWithHooksAgain(\n            workInProgress,\n            Component,\n            props,\n            secondArg\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      finishRenderingHooks(current, workInProgress);\n      return children;\n    }\n\n    function finishRenderingHooks(current, workInProgress, Component) {\n      {\n        workInProgress._debugHookTypes = hookTypesDev;\n      } // We can assume the previous dispatcher is always this one, since we set it\n      // at the beginning of the render phase and there's no re-entrance.\n\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This check uses currentHook so that it works the same in DEV and prod bundles.\n      // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n      var didRenderTooFewHooks =\n        currentHook !== null && currentHook.next !== null;\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n\n      {\n        currentHookNameInDev = null;\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n        // render. If this fires, it suggests that we incorrectly reset the static\n        // flags in some other part of the codebase. This has happened before, for\n        // example, in the SuspenseList implementation.\n\n        if (\n          current !== null &&\n          (current.flags & StaticMask) !==\n            (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n          // and creates false positives. To make this work in legacy mode, we'd\n          // need to mark fibers that commit in an incomplete state, somehow. For\n          // now I'll disable the warning that most of the bugs that would trigger\n          // it are either exclusive to concurrent mode or exist in both.\n          (current.mode & ConcurrentMode) !== NoMode\n        ) {\n          error(\n            \"Internal React error: Expected static flag was missing. Please \" +\n              \"notify the React team.\"\n          );\n        }\n      }\n\n      didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n      // localIdCounter = 0;\n\n      thenableIndexCounter = 0;\n      thenableState = null;\n\n      if (didRenderTooFewHooks) {\n        throw new Error(\n          \"Rendered fewer hooks than expected. This may be caused by an accidental \" +\n            \"early return statement.\"\n        );\n      }\n\n      {\n        if (checkIfUseWrappedInTryCatch()) {\n          var componentName =\n            getComponentNameFromFiber(workInProgress) || \"Unknown\";\n\n          if (\n            !didWarnAboutUseWrappedInTryCatch.has(componentName) && // This warning also fires if you suspend with `use` inside an\n            // async component. Since we warn for that above, we'll silence this\n            // second warning by checking here.\n            !didWarnAboutAsyncClientComponent.has(componentName)\n          ) {\n            didWarnAboutUseWrappedInTryCatch.add(componentName);\n\n            error(\n              \"`use` was called from inside a try/catch block. This is not allowed \" +\n                \"and can lead to unexpected behavior. To handle errors triggered \" +\n                \"by `use`, wrap your component in a error boundary.\"\n            );\n          }\n        }\n      }\n    }\n\n    function replaySuspendedComponentWithHooks(\n      current,\n      workInProgress,\n      Component,\n      props,\n      secondArg\n    ) {\n      // This function is used to replay a component that previously suspended,\n      // after its data resolves.\n      //\n      // It's a simplified version of renderWithHooks, but it doesn't need to do\n      // most of the set up work because they weren't reset when we suspended; they\n      // only get reset when the component either completes (finishRenderingHooks)\n      // or unwinds (resetHooksOnUnwind).\n      {\n        hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n        ignorePreviousDependencies =\n          current !== null && current.type !== workInProgress.type;\n      }\n\n      var children = renderWithHooksAgain(\n        workInProgress,\n        Component,\n        props,\n        secondArg\n      );\n      finishRenderingHooks(current, workInProgress);\n      return children;\n    }\n\n    function renderWithHooksAgain(workInProgress, Component, props, secondArg) {\n      // This is used to perform another render pass. It's used when setState is\n      // called during render, and for double invoking components in Strict Mode\n      // during development.\n      //\n      // The state from the previous pass is reused whenever possible. So, state\n      // updates that were already processed are not processed again, and memoized\n      // functions (`useMemo`) are not invoked again.\n      //\n      // Keep rendering in a loop for as long as render phase updates continue to\n      // be scheduled. Use a counter to prevent infinite loops.\n      currentlyRenderingFiber$1 = workInProgress;\n      var numberOfReRenders = 0;\n      var children;\n\n      do {\n        if (didScheduleRenderPhaseUpdateDuringThisPass) {\n          // It's possible that a use() value depended on a state that was updated in\n          // this rerender, so we need to watch for different thenables this time.\n          thenableState = null;\n        }\n\n        thenableIndexCounter = 0;\n        didScheduleRenderPhaseUpdateDuringThisPass = false;\n\n        if (numberOfReRenders >= RE_RENDER_LIMIT) {\n          throw new Error(\n            \"Too many re-renders. React limits the number of renders to prevent \" +\n              \"an infinite loop.\"\n          );\n        }\n\n        numberOfReRenders += 1;\n\n        {\n          // Even when hot reloading, allow dependencies to stabilize\n          // after first render to prevent infinite render phase updates.\n          ignorePreviousDependencies = false;\n        } // Start over from the beginning of the list\n\n        currentHook = null;\n        workInProgressHook = null;\n        workInProgress.updateQueue = null;\n\n        {\n          // Also validate hook order for cascading updates.\n          hookTypesUpdateIndexDev = -1;\n        }\n\n        ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;\n        children = Component(props, secondArg);\n      } while (didScheduleRenderPhaseUpdateDuringThisPass);\n\n      return children;\n    }\n    function bailoutHooks(current, workInProgress, lanes) {\n      workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n      // complete phase (bubbleProperties).\n\n      if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        workInProgress.flags &= ~(\n          MountPassiveDev |\n          MountLayoutDev |\n          Passive$1 |\n          Update\n        );\n      } else {\n        workInProgress.flags &= ~(Passive$1 | Update);\n      }\n\n      current.lanes = removeLanes(current.lanes, lanes);\n    }\n    function resetHooksAfterThrow() {\n      // This is called immediaetly after a throw. It shouldn't reset the entire\n      // module state, because the work loop might decide to replay the component\n      // again without rewinding.\n      //\n      // It should only reset things like the current dispatcher, to prevent hooks\n      // from being called outside of a component.\n      currentlyRenderingFiber$1 = null; // We can assume the previous dispatcher is always this one, since we set it\n      // at the beginning of the render phase and there's no re-entrance.\n\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n    }\n    function resetHooksOnUnwind(workInProgress) {\n      if (didScheduleRenderPhaseUpdate) {\n        // There were render phase updates. These are only valid for this render\n        // phase, which we are now aborting. Remove the updates from the queues so\n        // they do not persist to the next render. Do not remove updates from hooks\n        // that weren't processed.\n        //\n        // Only reset the updates from the queue if it has a clone. If it does\n        // not have a clone, that means it wasn't processed, and the updates were\n        // scheduled before we entered the render phase.\n        var hook = workInProgress.memoizedState;\n\n        while (hook !== null) {\n          var queue = hook.queue;\n\n          if (queue !== null) {\n            queue.pending = null;\n          }\n\n          hook = hook.next;\n        }\n\n        didScheduleRenderPhaseUpdate = false;\n      }\n\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n\n      {\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1;\n        currentHookNameInDev = null;\n      }\n\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      thenableIndexCounter = 0;\n      thenableState = null;\n    }\n\n    function mountWorkInProgressHook() {\n      var hook = {\n        memoizedState: null,\n        baseState: null,\n        baseQueue: null,\n        queue: null,\n        next: null\n      };\n\n      if (workInProgressHook === null) {\n        // This is the first hook in the list\n        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n      } else {\n        // Append to the end of the list\n        workInProgressHook = workInProgressHook.next = hook;\n      }\n\n      return workInProgressHook;\n    }\n\n    function updateWorkInProgressHook() {\n      // This function is used both for updates and for re-renders triggered by a\n      // render phase update. It assumes there is either a current hook we can\n      // clone, or a work-in-progress hook from a previous render pass that we can\n      // use as a base.\n      var nextCurrentHook;\n\n      if (currentHook === null) {\n        var current = currentlyRenderingFiber$1.alternate;\n\n        if (current !== null) {\n          nextCurrentHook = current.memoizedState;\n        } else {\n          nextCurrentHook = null;\n        }\n      } else {\n        nextCurrentHook = currentHook.next;\n      }\n\n      var nextWorkInProgressHook;\n\n      if (workInProgressHook === null) {\n        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n      } else {\n        nextWorkInProgressHook = workInProgressHook.next;\n      }\n\n      if (nextWorkInProgressHook !== null) {\n        // There's already a work-in-progress. Reuse it.\n        workInProgressHook = nextWorkInProgressHook;\n        nextWorkInProgressHook = workInProgressHook.next;\n        currentHook = nextCurrentHook;\n      } else {\n        // Clone from the current hook.\n        if (nextCurrentHook === null) {\n          var currentFiber = currentlyRenderingFiber$1.alternate;\n\n          if (currentFiber === null) {\n            // This is the initial render. This branch is reached when the component\n            // suspends, resumes, then renders an additional hook.\n            // Should never be reached because we should switch to the mount dispatcher first.\n            throw new Error(\n              \"Update hook called on initial render. This is likely a bug in React. Please file an issue.\"\n            );\n          } else {\n            // This is an update. We should always have a current hook.\n            throw new Error(\n              \"Rendered more hooks than during the previous render.\"\n            );\n          }\n        }\n\n        currentHook = nextCurrentHook;\n        var newHook = {\n          memoizedState: currentHook.memoizedState,\n          baseState: currentHook.baseState,\n          baseQueue: currentHook.baseQueue,\n          queue: currentHook.queue,\n          next: null\n        };\n\n        if (workInProgressHook === null) {\n          // This is the first hook in the list.\n          currentlyRenderingFiber$1.memoizedState = workInProgressHook =\n            newHook;\n        } else {\n          // Append to the end of the list.\n          workInProgressHook = workInProgressHook.next = newHook;\n        }\n      }\n\n      return workInProgressHook;\n    } // NOTE: defining two versions of this function to avoid size impact when this feature is disabled.\n    // Previously this function was inlined, the additional `memoCache` property makes it not inlined.\n\n    var createFunctionComponentUpdateQueue;\n\n    {\n      createFunctionComponentUpdateQueue = function () {\n        return {\n          lastEffect: null,\n          events: null,\n          stores: null\n        };\n      };\n    }\n\n    function useThenable(thenable) {\n      // Track the position of the thenable within this fiber.\n      var index = thenableIndexCounter;\n      thenableIndexCounter += 1;\n\n      if (thenableState === null) {\n        thenableState = createThenableState();\n      }\n\n      var result = trackUsedThenable(thenableState, thenable, index);\n\n      if (\n        currentlyRenderingFiber$1.alternate === null &&\n        (workInProgressHook === null\n          ? currentlyRenderingFiber$1.memoizedState === null\n          : workInProgressHook.next === null)\n      ) {\n        // Initial render, and either this is the first time the component is\n        // called, or there were no Hooks called after this use() the previous\n        // time (perhaps because it threw). Subsequent Hook calls should use the\n        // mount dispatcher.\n        {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      }\n\n      return result;\n    }\n\n    function use(usable) {\n      if (usable !== null && typeof usable === \"object\") {\n        // $FlowFixMe[method-unbinding]\n        if (typeof usable.then === \"function\") {\n          // This is a thenable.\n          var thenable = usable;\n          return useThenable(thenable);\n        } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {\n          var context = usable;\n          return readContext(context);\n        }\n      } // eslint-disable-next-line react-internal/safe-string-coercion\n\n      throw new Error(\n        \"An unsupported type was passed to use(): \" + String(usable)\n      );\n    }\n\n    function basicStateReducer(state, action) {\n      // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n      return typeof action === \"function\" ? action(state) : action;\n    }\n\n    function mountReducer(reducer, initialArg, init) {\n      var hook = mountWorkInProgressHook();\n      var initialState;\n\n      if (init !== undefined) {\n        initialState = init(initialArg);\n\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          setIsStrictModeForDevtools(true);\n          init(initialArg);\n          setIsStrictModeForDevtools(false);\n        }\n      } else {\n        initialState = initialArg;\n      }\n\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: reducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      var dispatch = (queue.dispatch = dispatchReducerAction.bind(\n        null,\n        currentlyRenderingFiber$1,\n        queue\n      ));\n      return [hook.memoizedState, dispatch];\n    }\n\n    function updateReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      return updateReducerImpl(hook, currentHook, reducer);\n    }\n\n    function updateReducerImpl(hook, current, reducer) {\n      var queue = hook.queue;\n\n      if (queue === null) {\n        throw new Error(\n          \"Should have a queue. This is likely a bug in React. Please file an issue.\"\n        );\n      }\n\n      queue.lastRenderedReducer = reducer; // The last rebase update that is NOT part of the base state.\n\n      var baseQueue = hook.baseQueue; // The last pending update that hasn't been processed yet.\n\n      var pendingQueue = queue.pending;\n\n      if (pendingQueue !== null) {\n        // We have new updates that haven't been processed yet.\n        // We'll add them to the base queue.\n        if (baseQueue !== null) {\n          // Merge the pending queue and the base queue.\n          var baseFirst = baseQueue.next;\n          var pendingFirst = pendingQueue.next;\n          baseQueue.next = pendingFirst;\n          pendingQueue.next = baseFirst;\n        }\n\n        {\n          if (current.baseQueue !== baseQueue) {\n            // Internal invariant that should never happen, but feasibly could in\n            // the future if we implement resuming, or some form of that.\n            error(\n              \"Internal error: Expected work-in-progress queue to be a clone. \" +\n                \"This is a bug in React.\"\n            );\n          }\n        }\n\n        current.baseQueue = baseQueue = pendingQueue;\n        queue.pending = null;\n      }\n\n      var baseState = hook.baseState;\n\n      if (baseQueue === null) {\n        // If there are no pending updates, then the memoized state should be the\n        // same as the base state. Currently these only diverge in the case of\n        // useOptimistic, because useOptimistic accepts a new baseState on\n        // every render.\n        hook.memoizedState = baseState; // We don't need to call markWorkInProgressReceivedUpdate because\n        // baseState is derived from other reactive values.\n      } else {\n        // We have a queue to process.\n        var first = baseQueue.next;\n        var newState = baseState;\n        var newBaseState = null;\n        var newBaseQueueFirst = null;\n        var newBaseQueueLast = null;\n        var update = first;\n        var didReadFromEntangledAsyncAction = false;\n\n        do {\n          // An extra OffscreenLane bit is added to updates that were made to\n          // a hidden tree, so that we can distinguish them from updates that were\n          // already there when the tree was hidden.\n          var updateLane = removeLanes(update.lane, OffscreenLane);\n          var isHiddenUpdate = updateLane !== update.lane; // Check if this update was made while the tree was hidden. If so, then\n          // it's not a \"base\" update and we should disregard the extra base lanes\n          // that were added to renderLanes when we entered the Offscreen tree.\n\n          var shouldSkipUpdate = isHiddenUpdate\n            ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\n            : !isSubsetOfLanes(renderLanes, updateLane);\n\n          if (shouldSkipUpdate) {\n            // Priority is insufficient. Skip this update. If this is the first\n            // skipped update, the previous update/state is the new base\n            // update/state.\n            var clone = {\n              lane: updateLane,\n              revertLane: update.revertLane,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: null\n            };\n\n            if (newBaseQueueLast === null) {\n              newBaseQueueFirst = newBaseQueueLast = clone;\n              newBaseState = newState;\n            } else {\n              newBaseQueueLast = newBaseQueueLast.next = clone;\n            } // Update the remaining priority in the queue.\n            // TODO: Don't need to accumulate this. Instead, we can remove\n            // renderLanes from the original lanes.\n\n            currentlyRenderingFiber$1.lanes = mergeLanes(\n              currentlyRenderingFiber$1.lanes,\n              updateLane\n            );\n            markSkippedUpdateLanes(updateLane);\n          } else {\n            {\n              // This is not an optimistic update, and we're going to apply it now.\n              // But, if there were earlier updates that were skipped, we need to\n              // leave this update in the queue so it can be rebased later.\n              if (newBaseQueueLast !== null) {\n                var _clone = {\n                  // This update is going to be committed so we never want uncommit\n                  // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                  // this will never be skipped by the check above.\n                  lane: NoLane,\n                  revertLane: NoLane,\n                  action: update.action,\n                  hasEagerState: update.hasEagerState,\n                  eagerState: update.eagerState,\n                  next: null\n                };\n                newBaseQueueLast = newBaseQueueLast.next = _clone;\n              } // Check if this update is part of a pending async action. If so,\n              // we'll need to suspend until the action has finished, so that it's\n              // batched together with future updates in the same action.\n\n              if (updateLane === peekEntangledActionLane()) {\n                didReadFromEntangledAsyncAction = true;\n              }\n            } // Process this update.\n\n            var action = update.action;\n\n            if (shouldDoubleInvokeUserFnsInHooksDEV) {\n              reducer(newState, action);\n            }\n\n            if (update.hasEagerState) {\n              // If this update is a state update (not a reducer) and was processed eagerly,\n              // we can use the eagerly computed state\n              newState = update.eagerState;\n            } else {\n              newState = reducer(newState, action);\n            }\n          }\n\n          update = update.next;\n        } while (update !== null && update !== first);\n\n        if (newBaseQueueLast === null) {\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast.next = newBaseQueueFirst;\n        } // Mark that the fiber performed work, but only if the new state is\n        // different from the current state.\n\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate(); // Check if this update is part of a pending async action. If so, we'll\n          // need to suspend until the action has finished, so that it's batched\n          // together with future updates in the same action.\n          // TODO: Once we support hooks inside useMemo (or an equivalent\n          // memoization boundary like Forget), hoist this logic so that it only\n          // suspends if the memo boundary produces a new value.\n\n          if (didReadFromEntangledAsyncAction) {\n            var entangledActionThenable = peekEntangledActionThenable();\n\n            if (entangledActionThenable !== null) {\n              // TODO: Instead of the throwing the thenable directly, throw a\n              // special object like `use` does so we can detect if it's captured\n              // by userspace.\n              throw entangledActionThenable;\n            }\n          }\n        }\n\n        hook.memoizedState = newState;\n        hook.baseState = newBaseState;\n        hook.baseQueue = newBaseQueueLast;\n        queue.lastRenderedState = newState;\n      }\n\n      if (baseQueue === null) {\n        // `queue.lanes` is used for entangling transitions. We can set it back to\n        // zero once the queue is empty.\n        queue.lanes = NoLanes;\n      }\n\n      var dispatch = queue.dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n\n    function rerenderReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      var queue = hook.queue;\n\n      if (queue === null) {\n        throw new Error(\n          \"Should have a queue. This is likely a bug in React. Please file an issue.\"\n        );\n      }\n\n      queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n      // work-in-progress hook.\n\n      var dispatch = queue.dispatch;\n      var lastRenderPhaseUpdate = queue.pending;\n      var newState = hook.memoizedState;\n\n      if (lastRenderPhaseUpdate !== null) {\n        // The queue doesn't persist past this render pass.\n        queue.pending = null;\n        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n        var update = firstRenderPhaseUpdate;\n\n        do {\n          // Process this render phase update. We don't have to check the\n          // priority because it will always be the same as the current\n          // render's.\n          var action = update.action;\n          newState = reducer(newState, action);\n          update = update.next;\n        } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n        // different from the current state.\n\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n        }\n\n        hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n        // the base state unless the queue is empty.\n        // TODO: Not sure if this is the desired semantics, but it's what we\n        // do for gDSFP. I can't remember why.\n\n        if (hook.baseQueue === null) {\n          hook.baseState = newState;\n        }\n\n        queue.lastRenderedState = newState;\n      }\n\n      return [newState, dispatch];\n    }\n\n    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = mountWorkInProgressHook();\n      var nextSnapshot;\n\n      {\n        nextSnapshot = getSnapshot();\n\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error(\n                \"The result of getSnapshot should be cached to avoid an infinite loop\"\n              );\n\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        } // Unless we're rendering a blocking lane, schedule a consistency check.\n        // Right before committing, we will walk the tree and check if any of the\n        // stores were mutated.\n        //\n        // We won't do this if we're hydrating server-rendered content, because if\n        // the content is stale, it's already visible anyway. Instead we'll patch\n        // it up in a passive effect.\n\n        var root = getWorkInProgressRoot();\n\n        if (root === null) {\n          throw new Error(\n            \"Expected a work-in-progress root. This is a bug in React. Please file an issue.\"\n          );\n        }\n\n        var rootRenderLanes = getWorkInProgressRootRenderLanes();\n\n        if (!includesBlockingLane(root, rootRenderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      } // Read the current snapshot from the store on every render. This breaks the\n      // normal rules of React, and only works because store updates are\n      // always synchronous.\n\n      hook.memoizedState = nextSnapshot;\n      var inst = {\n        value: nextSnapshot,\n        getSnapshot: getSnapshot\n      };\n      hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n        subscribe\n      ]); // Schedule an effect to update the mutable instance fields. We will update\n      // this whenever subscribe, getSnapshot, or value changes. Because there's no\n      // clean-up function, and we track the deps correctly, we can call pushEffect\n      // directly, without storing any additional state. For the same reason, we\n      // don't need to set a static flag, either.\n\n      fiber.flags |= Passive$1;\n      pushEffect(\n        HasEffect | Passive,\n        updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n        createEffectInstance(),\n        null\n      );\n      return nextSnapshot;\n    }\n\n    function updateSyncExternalStore(\n      subscribe,\n      getSnapshot,\n      getServerSnapshot\n    ) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n      // normal rules of React, and only works because store updates are\n      // always synchronous.\n\n      var nextSnapshot;\n\n      {\n        nextSnapshot = getSnapshot();\n\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error(\n                \"The result of getSnapshot should be cached to avoid an infinite loop\"\n              );\n\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        }\n      }\n\n      var prevSnapshot = (currentHook || hook).memoizedState;\n      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n      if (snapshotChanged) {\n        hook.memoizedState = nextSnapshot;\n        markWorkInProgressReceivedUpdate();\n      }\n\n      var inst = hook.queue;\n      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n        subscribe\n      ]); // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n\n      if (\n        inst.getSnapshot !== getSnapshot ||\n        snapshotChanged || // Check if the subscribe function changed. We can save some memory by\n        // checking whether we scheduled a subscription effect above.\n        (workInProgressHook !== null &&\n          workInProgressHook.memoizedState.tag & HasEffect)\n      ) {\n        fiber.flags |= Passive$1;\n        pushEffect(\n          HasEffect | Passive,\n          updateStoreInstance.bind(\n            null,\n            fiber,\n            inst,\n            nextSnapshot,\n            getSnapshot\n          ),\n          createEffectInstance(),\n          null\n        ); // Unless we're rendering a blocking lane, schedule a consistency check.\n        // Right before committing, we will walk the tree and check if any of the\n        // stores were mutated.\n\n        var root = getWorkInProgressRoot();\n\n        if (root === null) {\n          throw new Error(\n            \"Expected a work-in-progress root. This is a bug in React. Please file an issue.\"\n          );\n        }\n\n        if (!includesBlockingLane(root, renderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      }\n\n      return nextSnapshot;\n    }\n\n    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n      fiber.flags |= StoreConsistency;\n      var check = {\n        getSnapshot: getSnapshot,\n        value: renderedSnapshot\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.stores = [check];\n      } else {\n        var stores = componentUpdateQueue.stores;\n\n        if (stores === null) {\n          componentUpdateQueue.stores = [check];\n        } else {\n          stores.push(check);\n        }\n      }\n    }\n\n    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n      // These are updated in the passive phase\n      inst.value = nextSnapshot;\n      inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n      // have been in an event that fired before the passive effects, or it could\n      // have been in a layout effect. In that case, we would have used the old\n      // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceStoreRerender(fiber);\n      }\n    }\n\n    function subscribeToStore(fiber, inst, subscribe) {\n      var handleStoreChange = function () {\n        // The store changed. Check if the snapshot changed since the last time we\n        // read from the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceStoreRerender(fiber);\n        }\n      }; // Subscribe to the store and return a clean-up function.\n\n      return subscribe(handleStoreChange);\n    }\n\n    function checkIfSnapshotChanged(inst) {\n      var latestGetSnapshot = inst.getSnapshot;\n      var prevValue = inst.value;\n\n      try {\n        var nextValue = latestGetSnapshot();\n        return !objectIs(prevValue, nextValue);\n      } catch (error) {\n        return true;\n      }\n    }\n\n    function forceStoreRerender(fiber) {\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n\n    function mountStateImpl(initialState) {\n      var hook = mountWorkInProgressHook();\n\n      if (typeof initialState === \"function\") {\n        var initialStateInitializer = initialState; // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n\n        initialState = initialStateInitializer();\n\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          setIsStrictModeForDevtools(true); // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n\n          initialStateInitializer();\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: basicStateReducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      return hook;\n    }\n\n    function mountState(initialState) {\n      var hook = mountStateImpl(initialState);\n      var queue = hook.queue;\n      var dispatch = dispatchSetState.bind(\n        null,\n        currentlyRenderingFiber$1,\n        queue\n      );\n      queue.dispatch = dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n\n    function updateState(initialState) {\n      return updateReducer(basicStateReducer);\n    }\n\n    function rerenderState(initialState) {\n      return rerenderReducer(basicStateReducer);\n    }\n\n    function pushEffect(tag, create, inst, deps) {\n      var effect = {\n        tag: tag,\n        create: create,\n        inst: inst,\n        deps: deps,\n        // Circular\n        next: null\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.lastEffect = effect.next = effect;\n      } else {\n        var lastEffect = componentUpdateQueue.lastEffect;\n\n        if (lastEffect === null) {\n          componentUpdateQueue.lastEffect = effect.next = effect;\n        } else {\n          var firstEffect = lastEffect.next;\n          lastEffect.next = effect;\n          effect.next = firstEffect;\n          componentUpdateQueue.lastEffect = effect;\n        }\n      }\n\n      return effect;\n    }\n\n    function createEffectInstance() {\n      return {\n        destroy: undefined\n      };\n    }\n\n    function mountRef(initialValue) {\n      var hook = mountWorkInProgressHook();\n\n      {\n        var _ref2 = {\n          current: initialValue\n        };\n        hook.memoizedState = _ref2;\n        return _ref2;\n      }\n    }\n\n    function updateRef(initialValue) {\n      var hook = updateWorkInProgressHook();\n      return hook.memoizedState;\n    }\n\n    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(\n        HasEffect | hookFlags,\n        create,\n        createEffectInstance(),\n        nextDeps\n      );\n    }\n\n    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var effect = hook.memoizedState;\n      var inst = effect.inst; // currentHook is null on initial mount when rerendering after a render phase\n      // state update or for strict mode.\n\n      if (currentHook !== null) {\n        if (nextDeps !== null) {\n          var prevEffect = currentHook.memoizedState;\n          var prevDeps = prevEffect.deps;\n\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            hook.memoizedState = pushEffect(hookFlags, create, inst, nextDeps);\n            return;\n          }\n        }\n      }\n\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(\n        HasEffect | hookFlags,\n        create,\n        inst,\n        nextDeps\n      );\n    }\n\n    function mountEffect(create, deps) {\n      if (\n        (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode &&\n        (currentlyRenderingFiber$1.mode & NoStrictPassiveEffectsMode) === NoMode\n      ) {\n        mountEffectImpl(\n          MountPassiveDev | Passive$1 | PassiveStatic,\n          Passive,\n          create,\n          deps\n        );\n      } else {\n        mountEffectImpl(Passive$1 | PassiveStatic, Passive, create, deps);\n      }\n    }\n\n    function updateEffect(create, deps) {\n      updateEffectImpl(Passive$1, Passive, create, deps);\n    }\n\n    function mountInsertionEffect(create, deps) {\n      mountEffectImpl(Update, Insertion, create, deps);\n    }\n\n    function updateInsertionEffect(create, deps) {\n      return updateEffectImpl(Update, Insertion, create, deps);\n    }\n\n    function mountLayoutEffect(create, deps) {\n      var fiberFlags = Update | LayoutStatic;\n\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n\n      return mountEffectImpl(fiberFlags, Layout, create, deps);\n    }\n\n    function updateLayoutEffect(create, deps) {\n      return updateEffectImpl(Update, Layout, create, deps);\n    }\n\n    function imperativeHandleEffect(create, ref) {\n      if (typeof ref === \"function\") {\n        var refCallback = ref;\n        var inst = create();\n        refCallback(inst);\n        return function () {\n          refCallback(null);\n        };\n      } else if (ref !== null && ref !== undefined) {\n        var refObject = ref;\n\n        {\n          if (!refObject.hasOwnProperty(\"current\")) {\n            error(\n              \"Expected useImperativeHandle() first argument to either be a \" +\n                \"ref callback or React.createRef() object. Instead received: %s.\",\n              \"an object with keys {\" + Object.keys(refObject).join(\", \") + \"}\"\n            );\n          }\n        }\n\n        var _inst = create();\n\n        refObject.current = _inst;\n        return function () {\n          refObject.current = null;\n        };\n      }\n    }\n\n    function mountImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== \"function\") {\n          error(\n            \"Expected useImperativeHandle() second argument to be a function \" +\n              \"that creates a handle. Instead received: %s.\",\n            create !== null ? typeof create : \"null\"\n          );\n        }\n      } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n      var effectDeps =\n        deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      var fiberFlags = Update | LayoutStatic;\n\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n\n      mountEffectImpl(\n        fiberFlags,\n        Layout,\n        imperativeHandleEffect.bind(null, create, ref),\n        effectDeps\n      );\n    }\n\n    function updateImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== \"function\") {\n          error(\n            \"Expected useImperativeHandle() second argument to be a function \" +\n              \"that creates a handle. Instead received: %s.\",\n            create !== null ? typeof create : \"null\"\n          );\n        }\n      } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n      var effectDeps =\n        deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      updateEffectImpl(\n        Update,\n        Layout,\n        imperativeHandleEffect.bind(null, create, ref),\n        effectDeps\n      );\n    }\n\n    function mountDebugValue(value, formatterFn) {\n      // This hook is normally a no-op.\n      // The react-debug-hooks package injects its own implementation\n      // so that e.g. DevTools can display custom hook values.\n    }\n\n    var updateDebugValue = mountDebugValue;\n\n    function mountCallback(callback, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n\n    function updateCallback(callback, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n\n    function mountMemo(nextCreate, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var nextValue = nextCreate();\n\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(true);\n        nextCreate();\n        setIsStrictModeForDevtools(false);\n      }\n\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n\n    function updateMemo(nextCreate, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState; // Assume these are defined. If they're not, areHookInputsEqual will warn.\n\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n\n      var nextValue = nextCreate();\n\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(true);\n        nextCreate();\n        setIsStrictModeForDevtools(false);\n      }\n\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n\n    function mountDeferredValue(value, initialValue) {\n      var hook = mountWorkInProgressHook();\n      return mountDeferredValueImpl(hook, value, initialValue);\n    }\n\n    function updateDeferredValue(value, initialValue) {\n      var hook = updateWorkInProgressHook();\n      var resolvedCurrentHook = currentHook;\n      var prevValue = resolvedCurrentHook.memoizedState;\n      return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n    }\n\n    function rerenderDeferredValue(value, initialValue) {\n      var hook = updateWorkInProgressHook();\n\n      if (currentHook === null) {\n        // This is a rerender during a mount.\n        return mountDeferredValueImpl(hook, value, initialValue);\n      } else {\n        // This is a rerender during an update.\n        var prevValue = currentHook.memoizedState;\n        return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n      }\n    }\n\n    function mountDeferredValueImpl(hook, value, initialValue) {\n      if (\n        // When `initialValue` is provided, we defer the initial render even if the\n        // current render is not synchronous.\n        initialValue !== undefined && // However, to avoid waterfalls, we do not defer if this render\n        // was itself spawned by an earlier useDeferredValue. Check if DeferredLane\n        // is part of the render lanes.\n        !includesSomeLane(renderLanes, DeferredLane)\n      ) {\n        // Render with the initial value\n        hook.memoizedState = initialValue; // Schedule a deferred render to switch to the final value.\n\n        var deferredLane = requestDeferredLane();\n        currentlyRenderingFiber$1.lanes = mergeLanes(\n          currentlyRenderingFiber$1.lanes,\n          deferredLane\n        );\n        markSkippedUpdateLanes(deferredLane);\n        return initialValue;\n      } else {\n        hook.memoizedState = value;\n        return value;\n      }\n    }\n\n    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {\n      if (objectIs(value, prevValue)) {\n        // The incoming value is referentially identical to the currently rendered\n        // value, so we can bail out quickly.\n        return value;\n      } else {\n        // Received a new value that's different from the current value.\n        // Check if we're inside a hidden tree\n        if (isCurrentTreeHidden()) {\n          // Revealing a prerendered tree is considered the same as mounting new\n          // one, so we reuse the \"mount\" path in this case.\n          var resultValue = mountDeferredValueImpl(hook, value, initialValue); // Unlike during an actual mount, we need to mark this as an update if\n          // the value changed.\n\n          if (!objectIs(resultValue, prevValue)) {\n            markWorkInProgressReceivedUpdate();\n          }\n\n          return resultValue;\n        }\n\n        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n\n        if (shouldDeferValue) {\n          // This is an urgent update. Since the value has changed, keep using the\n          // previous value and spawn a deferred render to update it later.\n          // Schedule a deferred render\n          var deferredLane = requestDeferredLane();\n          currentlyRenderingFiber$1.lanes = mergeLanes(\n            currentlyRenderingFiber$1.lanes,\n            deferredLane\n          );\n          markSkippedUpdateLanes(deferredLane); // Reuse the previous value. We do not need to mark this as an update,\n          // because we did not render a new value.\n\n          return prevValue;\n        } else {\n          // This is not an urgent update, so we can use the latest value regardless\n          // of what it is. No need to defer it.\n          // Mark this as an update to prevent the fiber from bailing out.\n          markWorkInProgressReceivedUpdate();\n          hook.memoizedState = value;\n          return value;\n        }\n      }\n    }\n\n    function startTransition(\n      fiber,\n      queue,\n      pendingState,\n      finishedState,\n      callback,\n      options\n    ) {\n      var previousPriority = getCurrentUpdatePriority();\n      setCurrentUpdatePriority(\n        higherEventPriority(previousPriority, ContinuousEventPriority)\n      );\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      var currentTransition = {\n        _callbacks: new Set()\n      };\n\n      {\n        ReactCurrentBatchConfig$2.transition = null;\n        dispatchSetState(fiber, queue, pendingState);\n        ReactCurrentBatchConfig$2.transition = currentTransition;\n      }\n\n      {\n        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();\n      }\n\n      try {\n        var returnValue, thenable, thenableForFinishedState;\n        if (enableAsyncActions);\n        else {\n          // Async actions are not enabled.\n          dispatchSetState(fiber, queue, finishedState);\n          callback();\n        }\n      } catch (error) {\n        {\n          // The error rethrowing behavior is only enabled when the async actions\n          // feature is on, even for sync actions.\n          throw error;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n\n        {\n          if (prevTransition === null && currentTransition._updatedFibers) {\n            var updatedFibersCount = currentTransition._updatedFibers.size;\n\n            currentTransition._updatedFibers.clear();\n\n            if (updatedFibersCount > 10) {\n              warn(\n                \"Detected a large number of updates inside startTransition. \" +\n                  \"If this is due to a subscription please re-write it to use React provided hooks. \" +\n                  \"Otherwise concurrent mode guarantees are off the table.\"\n              );\n            }\n          }\n        }\n      }\n    }\n\n    function mountTransition() {\n      var stateHook = mountStateImpl(false); // The `start` method never changes.\n\n      var start = startTransition.bind(\n        null,\n        currentlyRenderingFiber$1,\n        stateHook.queue,\n        true,\n        false\n      );\n      var hook = mountWorkInProgressHook();\n      hook.memoizedState = start;\n      return [false, start];\n    }\n\n    function updateTransition() {\n      var _updateState2 = updateState(),\n        booleanOrThenable = _updateState2[0];\n\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      var isPending =\n        typeof booleanOrThenable === \"boolean\"\n          ? booleanOrThenable // This will suspend until the async action scope has finished.\n          : useThenable(booleanOrThenable);\n      return [isPending, start];\n    }\n\n    function rerenderTransition() {\n      var _rerenderState = rerenderState(),\n        booleanOrThenable = _rerenderState[0];\n\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      var isPending =\n        typeof booleanOrThenable === \"boolean\"\n          ? booleanOrThenable // This will suspend until the async action scope has finished.\n          : useThenable(booleanOrThenable);\n      return [isPending, start];\n    }\n\n    function mountId() {\n      var hook = mountWorkInProgressHook();\n      var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n      // should do this in Fiber, too? Deferring this decision for now because\n      // there's no other place to store the prefix except for an internal field on\n      // the public createRoot object, which the fiber tree does not currently have\n      // a reference to.\n\n      var identifierPrefix = root.identifierPrefix;\n      var id;\n\n      {\n        // Use a lowercase r prefix for client-generated ids.\n        var globalClientId = globalClientIdCounter++;\n        id = \":\" + identifierPrefix + \"r\" + globalClientId.toString(32) + \":\";\n      }\n\n      hook.memoizedState = id;\n      return id;\n    }\n\n    function updateId() {\n      var hook = updateWorkInProgressHook();\n      var id = hook.memoizedState;\n      return id;\n    }\n\n    function dispatchReducerAction(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === \"function\") {\n          error(\n            \"State updates from the useState() and useReducer() Hooks don't support the \" +\n              \"second callback argument. To execute a side effect after \" +\n              \"rendering, declare it in the component body with useEffect().\"\n          );\n        }\n      }\n\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        revertLane: NoLane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n    }\n\n    function dispatchSetState(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === \"function\") {\n          error(\n            \"State updates from the useState() and useReducer() Hooks don't support the \" +\n              \"second callback argument. To execute a side effect after \" +\n              \"rendering, declare it in the component body with useEffect().\"\n          );\n        }\n      }\n\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        revertLane: NoLane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        var alternate = fiber.alternate;\n\n        if (\n          fiber.lanes === NoLanes &&\n          (alternate === null || alternate.lanes === NoLanes)\n        ) {\n          // The queue is currently empty, which means we can eagerly compute the\n          // next state before entering the render phase. If the new state is the\n          // same as the current state, we may be able to bail out entirely.\n          var lastRenderedReducer = queue.lastRenderedReducer;\n\n          if (lastRenderedReducer !== null) {\n            var prevDispatcher;\n\n            {\n              prevDispatcher = ReactCurrentDispatcher$1.current;\n              ReactCurrentDispatcher$1.current =\n                InvalidNestedHooksDispatcherOnUpdateInDEV;\n            }\n\n            try {\n              var currentState = queue.lastRenderedState;\n              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n              // it, on the update object. If the reducer hasn't changed by the\n              // time we enter the render phase, then the eager state can be used\n              // without calling the reducer again.\n\n              update.hasEagerState = true;\n              update.eagerState = eagerState;\n\n              if (objectIs(eagerState, currentState)) {\n                // Fast path. We can bail out without scheduling React to re-render.\n                // It's still possible that we'll need to rebase this update later,\n                // if the component re-renders for a different reason and by that\n                // time the reducer has changed.\n                // TODO: Do we still need to entangle transitions in this case?\n                enqueueConcurrentHookUpdateAndEagerlyBailout(\n                  fiber,\n                  queue,\n                  update\n                );\n                return;\n              }\n            } catch (error) {\n              // Suppress the error. It will throw again in the render phase.\n            } finally {\n              {\n                ReactCurrentDispatcher$1.current = prevDispatcher;\n              }\n            }\n          }\n        }\n\n        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n    }\n\n    function isRenderPhaseUpdate(fiber) {\n      var alternate = fiber.alternate;\n      return (\n        fiber === currentlyRenderingFiber$1 ||\n        (alternate !== null && alternate === currentlyRenderingFiber$1)\n      );\n    }\n\n    function enqueueRenderPhaseUpdate(queue, update) {\n      // This is a render phase update. Stash it in a lazily-created map of\n      // queue -> linked list of updates. After this render pass, we'll restart\n      // and apply the stashed updates on top of the work-in-progress hook.\n      didScheduleRenderPhaseUpdateDuringThisPass =\n        didScheduleRenderPhaseUpdate = true;\n      var pending = queue.pending;\n\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n\n      queue.pending = update;\n    } // TODO: Move to ReactFiberConcurrentUpdates?\n\n    function entangleTransitionUpdate(root, queue, lane) {\n      if (isTransitionLane(lane)) {\n        var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n        // must have finished. We can remove them from the shared queue, which\n        // represents a superset of the actually pending lanes. In some cases we\n        // may entangle more than we need to, but that's OK. In fact it's worse if\n        // we *don't* entangle when we should.\n\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n        // the lane finished since the last time we entangled it. So we need to\n        // entangle it again, just to be sure.\n\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n\n    var ContextOnlyDispatcher = {\n      readContext: readContext,\n      use: use,\n      useCallback: throwInvalidHookError,\n      useContext: throwInvalidHookError,\n      useEffect: throwInvalidHookError,\n      useImperativeHandle: throwInvalidHookError,\n      useInsertionEffect: throwInvalidHookError,\n      useLayoutEffect: throwInvalidHookError,\n      useMemo: throwInvalidHookError,\n      useReducer: throwInvalidHookError,\n      useRef: throwInvalidHookError,\n      useState: throwInvalidHookError,\n      useDebugValue: throwInvalidHookError,\n      useDeferredValue: throwInvalidHookError,\n      useTransition: throwInvalidHookError,\n      useSyncExternalStore: throwInvalidHookError,\n      useId: throwInvalidHookError\n    };\n\n    var HooksDispatcherOnMountInDEV = null;\n    var HooksDispatcherOnMountWithHookTypesInDEV = null;\n    var HooksDispatcherOnUpdateInDEV = null;\n    var HooksDispatcherOnRerenderInDEV = null;\n    var InvalidNestedHooksDispatcherOnMountInDEV = null;\n    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n\n    {\n      var warnInvalidContextAccess = function () {\n        error(\n          \"Context can only be read while React is rendering. \" +\n            \"In classes, you can read it in the render method or getDerivedStateFromProps. \" +\n            \"In function components, you can read it directly in the function body, but not \" +\n            \"inside Hooks like useReducer() or useMemo().\"\n        );\n      };\n\n      var warnInvalidHookAccess = function () {\n        error(\n          \"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. \" +\n            \"You can only call Hooks at the top level of your React function. \" +\n            \"For more information, see \" +\n            \"https://react.dev/link/rules-of-hooks\"\n        );\n      };\n\n      HooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          mountHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          mountHookTypesDev();\n          return mountId();\n        }\n      };\n\n      HooksDispatcherOnMountWithHookTypesInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return mountId();\n        }\n      };\n\n      HooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return updateDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n\n      HooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return rerenderDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n\n      InvalidNestedHooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountId();\n        }\n      };\n\n      InvalidNestedHooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n\n      InvalidNestedHooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n    }\n\n    var now = Scheduler.unstable_now;\n    var commitTime = 0;\n    var layoutEffectStartTime = -1;\n    var profilerStartTime = -1;\n    var passiveEffectStartTime = -1;\n    /**\n     * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n     *\n     * The overall sequence is:\n     *   1. render\n     *   2. commit (and call `onRender`, `onCommit`)\n     *   3. check for nested updates\n     *   4. flush passive effects (and call `onPostCommit`)\n     *\n     * Nested updates are identified in step 3 above,\n     * but step 4 still applies to the work that was just committed.\n     * We use two flags to track nested updates then:\n     * one tracks whether the upcoming update is a nested update,\n     * and the other tracks whether the current update was a nested update.\n     * The first value gets synced to the second at the start of the render phase.\n     */\n\n    var currentUpdateIsNested = false;\n    var nestedUpdateScheduled = false;\n\n    function isCurrentUpdateNested() {\n      return currentUpdateIsNested;\n    }\n\n    function markNestedUpdateScheduled() {\n      {\n        nestedUpdateScheduled = true;\n      }\n    }\n\n    function resetNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = false;\n        nestedUpdateScheduled = false;\n      }\n    }\n\n    function syncNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = nestedUpdateScheduled;\n        nestedUpdateScheduled = false;\n      }\n    }\n\n    function getCommitTime() {\n      return commitTime;\n    }\n\n    function recordCommitTime() {\n      commitTime = now();\n    }\n\n    function startProfilerTimer(fiber) {\n      profilerStartTime = now();\n\n      if (fiber.actualStartTime < 0) {\n        fiber.actualStartTime = now();\n      }\n    }\n\n    function stopProfilerTimerIfRunning(fiber) {\n      profilerStartTime = -1;\n    }\n\n    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n      if (profilerStartTime >= 0) {\n        var elapsedTime = now() - profilerStartTime;\n        fiber.actualDuration += elapsedTime;\n\n        if (overrideBaseTime) {\n          fiber.selfBaseDuration = elapsedTime;\n        }\n\n        profilerStartTime = -1;\n      }\n    }\n\n    function recordLayoutEffectDuration(fiber) {\n      if (layoutEffectStartTime >= 0) {\n        var elapsedTime = now() - layoutEffectStartTime;\n        layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n        // Or the root (for the DevTools Profiler to read)\n\n        var parentFiber = fiber.return;\n\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n              root.effectDuration += elapsedTime;\n              return;\n\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += elapsedTime;\n              return;\n          }\n\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n\n    function recordPassiveEffectDuration(fiber) {\n      if (passiveEffectStartTime >= 0) {\n        var elapsedTime = now() - passiveEffectStartTime;\n        passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n        // Or the root (for the DevTools Profiler to read)\n\n        var parentFiber = fiber.return;\n\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n\n              if (root !== null) {\n                root.passiveEffectDuration += elapsedTime;\n              }\n\n              return;\n\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n\n              if (parentStateNode !== null) {\n                // Detached fibers have their state node cleared out.\n                // In this case, the return pointer is also cleared out,\n                // so we won't be able to report the time spent in this Profiler's subtree.\n                parentStateNode.passiveEffectDuration += elapsedTime;\n              }\n\n              return;\n          }\n\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n\n    function startLayoutEffectTimer() {\n      layoutEffectStartTime = now();\n    }\n\n    function startPassiveEffectTimer() {\n      passiveEffectStartTime = now();\n    }\n\n    function transferActualDuration(fiber) {\n      // Transfer time spent rendering these children so we don't lose it\n      // after we rerender. This is used as a helper in special cases\n      // where we should count the work of multiple passes.\n      var child = fiber.child;\n\n      while (child) {\n        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n        fiber.actualDuration += child.actualDuration;\n        child = child.sibling;\n      }\n    }\n\n    function resolveDefaultProps(Component, baseProps) {\n      if (Component && Component.defaultProps) {\n        // Resolve default props. Taken from ReactElement\n        var props = assign({}, baseProps);\n        var defaultProps = Component.defaultProps;\n\n        for (var propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n\n        return props;\n      }\n\n      return baseProps;\n    }\n\n    var fakeInternalInstance = {};\n    var didWarnAboutStateAssignmentForComponent;\n    var didWarnAboutUninitializedState;\n    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n    var didWarnAboutLegacyLifecyclesAndDerivedState;\n    var didWarnAboutUndefinedDerivedState;\n    var didWarnAboutDirectlyAssigningPropsToState;\n    var didWarnAboutInvalidateContextType;\n    var didWarnOnInvalidCallback;\n\n    {\n      didWarnAboutStateAssignmentForComponent = new Set();\n      didWarnAboutUninitializedState = new Set();\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n      didWarnAboutDirectlyAssigningPropsToState = new Set();\n      didWarnAboutUndefinedDerivedState = new Set();\n      didWarnAboutInvalidateContextType = new Set();\n      didWarnOnInvalidCallback = new Set(); // This is so gross but it's at least non-critical and can be removed if\n      // it causes problems. This is meant to give a nicer error message for\n      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n      // ...)) which otherwise throws a \"_processChildContext is not a function\"\n      // exception.\n\n      Object.defineProperty(fakeInternalInstance, \"_processChildContext\", {\n        enumerable: false,\n        value: function () {\n          throw new Error(\n            \"_processChildContext is not available in React 16+. This likely \" +\n              \"means you have multiple copies of React and are attempting to nest \" +\n              \"a React 15 tree inside a React 16 tree using \" +\n              \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n              \"to make sure you have only one copy of React (and ideally, switch \" +\n              \"to ReactDOM.createPortal).\"\n          );\n        }\n      });\n      Object.freeze(fakeInternalInstance);\n    }\n\n    function warnOnInvalidCallback(callback) {\n      {\n        if (callback === null || typeof callback === \"function\") {\n          return;\n        } // eslint-disable-next-line react-internal/safe-string-coercion\n\n        var key = String(callback);\n\n        if (!didWarnOnInvalidCallback.has(key)) {\n          didWarnOnInvalidCallback.add(key);\n\n          error(\n            \"Expected the last optional `callback` argument to be a \" +\n              \"function. Instead received: %s.\",\n            callback\n          );\n        }\n      }\n    }\n\n    function warnOnUndefinedDerivedState(type, partialState) {\n      {\n        if (partialState === undefined) {\n          var componentName = getComponentNameFromType(type) || \"Component\";\n\n          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n            didWarnAboutUndefinedDerivedState.add(componentName);\n\n            error(\n              \"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. \" +\n                \"You have returned undefined.\",\n              componentName\n            );\n          }\n        }\n      }\n    }\n\n    function applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      nextProps\n    ) {\n      var prevState = workInProgress.memoizedState;\n      var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n\n          try {\n            // Invoke the function an extra time to help detect side-effects.\n            partialState = getDerivedStateFromProps(nextProps, prevState);\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n\n        warnOnUndefinedDerivedState(ctor, partialState);\n      } // Merge the partial state and the previous state.\n\n      var memoizedState =\n        partialState === null || partialState === undefined\n          ? prevState\n          : assign({}, prevState, partialState);\n      workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n      // base state.\n\n      if (workInProgress.lanes === NoLanes) {\n        // Queue is always non-null for classes\n        var updateQueue = workInProgress.updateQueue;\n        updateQueue.baseState = memoizedState;\n      }\n    }\n\n    var classComponentUpdater = {\n      isMounted: isMounted,\n      // $FlowFixMe[missing-local-annot]\n      enqueueSetState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.payload = payload;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback);\n          }\n\n          update.callback = callback;\n        }\n\n        var root = enqueueUpdate(fiber, update, lane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      },\n      enqueueReplaceState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.tag = ReplaceState;\n        update.payload = payload;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback);\n          }\n\n          update.callback = callback;\n        }\n\n        var root = enqueueUpdate(fiber, update, lane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      },\n      // $FlowFixMe[missing-local-annot]\n      enqueueForceUpdate: function (inst, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.tag = ForceUpdate;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback);\n          }\n\n          update.callback = callback;\n        }\n\n        var root = enqueueUpdate(fiber, update, lane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      }\n    };\n\n    function checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext\n    ) {\n      var instance = workInProgress.stateNode;\n\n      if (typeof instance.shouldComponentUpdate === \"function\") {\n        var shouldUpdate = instance.shouldComponentUpdate(\n          newProps,\n          newState,\n          nextContext\n        );\n\n        {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n\n            try {\n              // Invoke the function an extra time to help detect side-effects.\n              shouldUpdate = instance.shouldComponentUpdate(\n                newProps,\n                newState,\n                nextContext\n              );\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n\n          if (shouldUpdate === undefined) {\n            error(\n              \"%s.shouldComponentUpdate(): Returned undefined instead of a \" +\n                \"boolean value. Make sure to return true or false.\",\n              getComponentNameFromType(ctor) || \"Component\"\n            );\n          }\n        }\n\n        return shouldUpdate;\n      }\n\n      if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n        return (\n          !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n        );\n      }\n\n      return true;\n    }\n\n    function checkClassInstance(workInProgress, ctor, newProps) {\n      var instance = workInProgress.stateNode;\n\n      {\n        var name = getComponentNameFromType(ctor) || \"Component\";\n        var renderPresent = instance.render;\n\n        if (!renderPresent) {\n          if (ctor.prototype && typeof ctor.prototype.render === \"function\") {\n            error(\n              \"No `render` method found on the %s \" +\n                \"instance: did you accidentally return an object from the constructor?\",\n              name\n            );\n          } else {\n            error(\n              \"No `render` method found on the %s \" +\n                \"instance: you may have forgotten to define `render`.\",\n              name\n            );\n          }\n        }\n\n        if (\n          instance.getInitialState &&\n          !instance.getInitialState.isReactClassApproved &&\n          !instance.state\n        ) {\n          error(\n            \"getInitialState was defined on %s, a plain JavaScript class. \" +\n              \"This is only supported for classes created using React.createClass. \" +\n              \"Did you mean to define a state property instead?\",\n            name\n          );\n        }\n\n        if (\n          instance.getDefaultProps &&\n          !instance.getDefaultProps.isReactClassApproved\n        ) {\n          error(\n            \"getDefaultProps was defined on %s, a plain JavaScript class. \" +\n              \"This is only supported for classes created using React.createClass. \" +\n              \"Use a static property to define defaultProps instead.\",\n            name\n          );\n        }\n\n        if (instance.propTypes) {\n          error(\n            \"propTypes was defined as an instance property on %s. Use a static \" +\n              \"property to define propTypes instead.\",\n            name\n          );\n        }\n\n        if (instance.contextType) {\n          error(\n            \"contextType was defined as an instance property on %s. Use a static \" +\n              \"property to define contextType instead.\",\n            name\n          );\n        }\n\n        {\n          if (ctor.childContextTypes) {\n            error(\n              \"%s uses the legacy childContextTypes API which is no longer supported. \" +\n                \"Use React.createContext() instead.\",\n              name\n            );\n          }\n\n          if (ctor.contextTypes) {\n            error(\n              \"%s uses the legacy contextTypes API which is no longer supported. \" +\n                \"Use React.createContext() with static contextType instead.\",\n              name\n            );\n          }\n        }\n\n        if (typeof instance.componentShouldUpdate === \"function\") {\n          error(\n            \"%s has a method called \" +\n              \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" +\n              \"The name is phrased as a question because the function is \" +\n              \"expected to return a value.\",\n            name\n          );\n        }\n\n        if (\n          ctor.prototype &&\n          ctor.prototype.isPureReactComponent &&\n          typeof instance.shouldComponentUpdate !== \"undefined\"\n        ) {\n          error(\n            \"%s has a method called shouldComponentUpdate(). \" +\n              \"shouldComponentUpdate should not be used when extending React.PureComponent. \" +\n              \"Please extend React.Component if shouldComponentUpdate is used.\",\n            getComponentNameFromType(ctor) || \"A pure component\"\n          );\n        }\n\n        if (typeof instance.componentDidUnmount === \"function\") {\n          error(\n            \"%s has a method called \" +\n              \"componentDidUnmount(). But there is no such lifecycle method. \" +\n              \"Did you mean componentWillUnmount()?\",\n            name\n          );\n        }\n\n        if (typeof instance.componentDidReceiveProps === \"function\") {\n          error(\n            \"%s has a method called \" +\n              \"componentDidReceiveProps(). But there is no such lifecycle method. \" +\n              \"If you meant to update the state in response to changing props, \" +\n              \"use componentWillReceiveProps(). If you meant to fetch data or \" +\n              \"run side-effects or mutations after React has updated the UI, use componentDidUpdate().\",\n            name\n          );\n        }\n\n        if (typeof instance.componentWillRecieveProps === \"function\") {\n          error(\n            \"%s has a method called \" +\n              \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\",\n            name\n          );\n        }\n\n        if (typeof instance.UNSAFE_componentWillRecieveProps === \"function\") {\n          error(\n            \"%s has a method called \" +\n              \"UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\",\n            name\n          );\n        }\n\n        var hasMutatedProps = instance.props !== newProps;\n\n        if (instance.props !== undefined && hasMutatedProps) {\n          error(\n            \"When calling super() in `%s`, make sure to pass \" +\n              \"up the same props that your component's constructor was passed.\",\n            name\n          );\n        }\n\n        if (instance.defaultProps) {\n          error(\n            \"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" +\n              \" Instead, define defaultProps as a static property on %s.\",\n            name,\n            name\n          );\n        }\n\n        if (\n          typeof instance.getSnapshotBeforeUpdate === \"function\" &&\n          typeof instance.componentDidUpdate !== \"function\" &&\n          !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n        ) {\n          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n          error(\n            \"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). \" +\n              \"This component defines getSnapshotBeforeUpdate() only.\",\n            getComponentNameFromType(ctor)\n          );\n        }\n\n        if (typeof instance.getDerivedStateFromProps === \"function\") {\n          error(\n            \"%s: getDerivedStateFromProps() is defined as an instance method \" +\n              \"and will be ignored. Instead, declare it as a static method.\",\n            name\n          );\n        }\n\n        if (typeof instance.getDerivedStateFromError === \"function\") {\n          error(\n            \"%s: getDerivedStateFromError() is defined as an instance method \" +\n              \"and will be ignored. Instead, declare it as a static method.\",\n            name\n          );\n        }\n\n        if (typeof ctor.getSnapshotBeforeUpdate === \"function\") {\n          error(\n            \"%s: getSnapshotBeforeUpdate() is defined as a static method \" +\n              \"and will be ignored. Instead, declare it as an instance method.\",\n            name\n          );\n        }\n\n        var state = instance.state;\n\n        if (state && (typeof state !== \"object\" || isArray(state))) {\n          error(\"%s.state: must be set to an object or null\", name);\n        }\n\n        if (\n          typeof instance.getChildContext === \"function\" &&\n          typeof ctor.childContextTypes !== \"object\"\n        ) {\n          error(\n            \"%s.getChildContext(): childContextTypes must be defined in order to \" +\n              \"use getChildContext().\",\n            name\n          );\n        }\n      }\n    }\n\n    function adoptClassInstance(workInProgress, instance) {\n      instance.updater = classComponentUpdater;\n      workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n      set(instance, workInProgress);\n\n      {\n        instance._reactInternalInstance = fakeInternalInstance;\n      }\n    }\n\n    function constructClassInstance(workInProgress, ctor, props) {\n      var context = emptyContextObject;\n      var contextType = ctor.contextType;\n\n      {\n        if (\"contextType\" in ctor) {\n          var isValid = // Allow null for conditional declaration\n            contextType === null ||\n            (contextType !== undefined &&\n              contextType.$$typeof === REACT_CONTEXT_TYPE);\n\n          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n            didWarnAboutInvalidateContextType.add(ctor);\n            var addendum = \"\";\n\n            if (contextType === undefined) {\n              addendum =\n                \" However, it is set to undefined. \" +\n                \"This can be caused by a typo or by mixing up named and default imports. \" +\n                \"This can also happen due to a circular dependency, so \" +\n                \"try moving the createContext() call to a separate file.\";\n            } else if (typeof contextType !== \"object\") {\n              addendum = \" However, it is set to a \" + typeof contextType + \".\";\n            } else if (contextType.$$typeof === REACT_CONSUMER_TYPE) {\n              addendum =\n                \" Did you accidentally pass the Context.Consumer instead?\";\n            } else {\n              addendum =\n                \" However, it is set to an object with keys {\" +\n                Object.keys(contextType).join(\", \") +\n                \"}.\";\n            }\n\n            error(\n              \"%s defines an invalid contextType. \" +\n                \"contextType should point to the Context object returned by React.createContext().%s\",\n              getComponentNameFromType(ctor) || \"Component\",\n              addendum\n            );\n          }\n        }\n      }\n\n      if (typeof contextType === \"object\" && contextType !== null) {\n        context = readContext(contextType);\n      }\n\n      var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n\n          try {\n            instance = new ctor(props, context); // eslint-disable-line no-new\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n      }\n\n      var state = (workInProgress.memoizedState =\n        instance.state !== null && instance.state !== undefined\n          ? instance.state\n          : null);\n      adoptClassInstance(workInProgress, instance);\n\n      {\n        if (\n          typeof ctor.getDerivedStateFromProps === \"function\" &&\n          state === null\n        ) {\n          var componentName = getComponentNameFromType(ctor) || \"Component\";\n\n          if (!didWarnAboutUninitializedState.has(componentName)) {\n            didWarnAboutUninitializedState.add(componentName);\n\n            error(\n              \"`%s` uses `getDerivedStateFromProps` but its initial state is \" +\n                \"%s. This is not recommended. Instead, define the initial state by \" +\n                \"assigning an object to `this.state` in the constructor of `%s`. \" +\n                \"This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\",\n              componentName,\n              instance.state === null ? \"null\" : \"undefined\",\n              componentName\n            );\n          }\n        } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n        // Warn about these lifecycles if they are present.\n        // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n        if (\n          typeof ctor.getDerivedStateFromProps === \"function\" ||\n          typeof instance.getSnapshotBeforeUpdate === \"function\"\n        ) {\n          var foundWillMountName = null;\n          var foundWillReceivePropsName = null;\n          var foundWillUpdateName = null;\n\n          if (\n            typeof instance.componentWillMount === \"function\" &&\n            instance.componentWillMount.__suppressDeprecationWarning !== true\n          ) {\n            foundWillMountName = \"componentWillMount\";\n          } else if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n            foundWillMountName = \"UNSAFE_componentWillMount\";\n          }\n\n          if (\n            typeof instance.componentWillReceiveProps === \"function\" &&\n            instance.componentWillReceiveProps.__suppressDeprecationWarning !==\n              true\n          ) {\n            foundWillReceivePropsName = \"componentWillReceiveProps\";\n          } else if (\n            typeof instance.UNSAFE_componentWillReceiveProps === \"function\"\n          ) {\n            foundWillReceivePropsName = \"UNSAFE_componentWillReceiveProps\";\n          }\n\n          if (\n            typeof instance.componentWillUpdate === \"function\" &&\n            instance.componentWillUpdate.__suppressDeprecationWarning !== true\n          ) {\n            foundWillUpdateName = \"componentWillUpdate\";\n          } else if (\n            typeof instance.UNSAFE_componentWillUpdate === \"function\"\n          ) {\n            foundWillUpdateName = \"UNSAFE_componentWillUpdate\";\n          }\n\n          if (\n            foundWillMountName !== null ||\n            foundWillReceivePropsName !== null ||\n            foundWillUpdateName !== null\n          ) {\n            var _componentName = getComponentNameFromType(ctor) || \"Component\";\n\n            var newApiName =\n              typeof ctor.getDerivedStateFromProps === \"function\"\n                ? \"getDerivedStateFromProps()\"\n                : \"getSnapshotBeforeUpdate()\";\n\n            if (\n              !didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)\n            ) {\n              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n              error(\n                \"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\" +\n                  \"%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n\" +\n                  \"The above lifecycles should be removed. Learn more about this warning here:\\n\" +\n                  \"https://react.dev/link/unsafe-component-lifecycles\",\n                _componentName,\n                newApiName,\n                foundWillMountName !== null ? \"\\n  \" + foundWillMountName : \"\",\n                foundWillReceivePropsName !== null\n                  ? \"\\n  \" + foundWillReceivePropsName\n                  : \"\",\n                foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : \"\"\n              );\n            }\n          }\n        }\n      } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n\n      return instance;\n    }\n\n    function callComponentWillMount(workInProgress, instance) {\n      var oldState = instance.state;\n\n      if (typeof instance.componentWillMount === \"function\") {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n        instance.UNSAFE_componentWillMount();\n      }\n\n      if (oldState !== instance.state) {\n        {\n          error(\n            \"%s.componentWillMount(): Assigning directly to this.state is \" +\n              \"deprecated (except inside a component's \" +\n              \"constructor). Use setState instead.\",\n            getComponentNameFromFiber(workInProgress) || \"Component\"\n          );\n        }\n\n        classComponentUpdater.enqueueReplaceState(\n          instance,\n          instance.state,\n          null\n        );\n      }\n    }\n\n    function callComponentWillReceiveProps(\n      workInProgress,\n      instance,\n      newProps,\n      nextContext\n    ) {\n      var oldState = instance.state;\n\n      if (typeof instance.componentWillReceiveProps === \"function\") {\n        instance.componentWillReceiveProps(newProps, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n      }\n\n      if (instance.state !== oldState) {\n        {\n          var componentName =\n            getComponentNameFromFiber(workInProgress) || \"Component\";\n\n          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n            didWarnAboutStateAssignmentForComponent.add(componentName);\n\n            error(\n              \"%s.componentWillReceiveProps(): Assigning directly to \" +\n                \"this.state is deprecated (except inside a component's \" +\n                \"constructor). Use setState instead.\",\n              componentName\n            );\n          }\n        }\n\n        classComponentUpdater.enqueueReplaceState(\n          instance,\n          instance.state,\n          null\n        );\n      }\n    } // Invokes the mount life-cycles on a previously never rendered instance.\n\n    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      {\n        checkClassInstance(workInProgress, ctor, newProps);\n      }\n\n      var instance = workInProgress.stateNode;\n      instance.props = newProps;\n      instance.state = workInProgress.memoizedState;\n      instance.refs = {};\n      initializeUpdateQueue(workInProgress);\n      var contextType = ctor.contextType;\n\n      if (typeof contextType === \"object\" && contextType !== null) {\n        instance.context = readContext(contextType);\n      } else {\n        instance.context = emptyContextObject;\n      }\n\n      {\n        if (instance.state === newProps) {\n          var componentName = getComponentNameFromType(ctor) || \"Component\";\n\n          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n            didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n            error(\n              \"%s: It is not recommended to assign props directly to state \" +\n                \"because updates to props won't be reflected in state. \" +\n                \"In most cases, it is better to use props directly.\",\n              componentName\n            );\n          }\n        }\n\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(\n            workInProgress,\n            instance\n          );\n        }\n\n        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n          workInProgress,\n          instance\n        );\n      }\n\n      instance.state = workInProgress.memoizedState;\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(\n          workInProgress,\n          ctor,\n          getDerivedStateFromProps,\n          newProps\n        );\n        instance.state = workInProgress.memoizedState;\n      } // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (\n        typeof ctor.getDerivedStateFromProps !== \"function\" &&\n        typeof instance.getSnapshotBeforeUpdate !== \"function\" &&\n        (typeof instance.UNSAFE_componentWillMount === \"function\" ||\n          typeof instance.componentWillMount === \"function\")\n      ) {\n        callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n        // process them now.\n\n        processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n        suspendIfUpdateReadFromEntangledAsyncAction();\n        instance.state = workInProgress.memoizedState;\n      }\n\n      if (typeof instance.componentDidMount === \"function\") {\n        workInProgress.flags |= Update | LayoutStatic;\n      }\n\n      if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        workInProgress.flags |= MountLayoutDev;\n      }\n    }\n\n    function resumeMountClassInstance(\n      workInProgress,\n      ctor,\n      newProps,\n      renderLanes\n    ) {\n      var instance = workInProgress.stateNode;\n      var oldProps = workInProgress.memoizedProps;\n      instance.props = oldProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n\n      if (typeof contextType === \"object\" && contextType !== null) {\n        nextContext = readContext(contextType);\n      }\n\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles =\n        typeof getDerivedStateFromProps === \"function\" ||\n        typeof instance.getSnapshotBeforeUpdate === \"function\"; // Note: During these life-cycles, instance.props/instance.state are what\n      // ever the previously attempted to render - not the \"current\". However,\n      // during componentDidUpdate we pass the \"current\" props.\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (\n        !hasNewLifecycles &&\n        (typeof instance.UNSAFE_componentWillReceiveProps === \"function\" ||\n          typeof instance.componentWillReceiveProps === \"function\")\n      ) {\n        if (oldProps !== newProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(\n            workInProgress,\n            instance,\n            newProps,\n            nextContext\n          );\n        }\n      }\n\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = (instance.state = oldState);\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      suspendIfUpdateReadFromEntangledAsyncAction();\n      newState = workInProgress.memoizedState;\n\n      if (\n        oldProps === newProps &&\n        oldState === newState &&\n        !hasContextChanged() &&\n        !checkHasForceUpdateAfterProcessing()\n      ) {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        }\n\n        return false;\n      }\n\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(\n          workInProgress,\n          ctor,\n          getDerivedStateFromProps,\n          newProps\n        );\n        newState = workInProgress.memoizedState;\n      }\n\n      var shouldUpdate =\n        checkHasForceUpdateAfterProcessing() ||\n        checkShouldComponentUpdate(\n          workInProgress,\n          ctor,\n          oldProps,\n          newProps,\n          oldState,\n          newState,\n          nextContext\n        );\n\n      if (shouldUpdate) {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n        if (\n          !hasNewLifecycles &&\n          (typeof instance.UNSAFE_componentWillMount === \"function\" ||\n            typeof instance.componentWillMount === \"function\")\n        ) {\n          if (typeof instance.componentWillMount === \"function\") {\n            instance.componentWillMount();\n          }\n\n          if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n            instance.UNSAFE_componentWillMount();\n          }\n        }\n\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        }\n      } else {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        } // If shouldComponentUpdate returned false, we should still update the\n        // memoized state to indicate that this work can be reused.\n\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      } // Update the existing instance's state, props, and context pointers even\n      // if shouldComponentUpdate returns false.\n\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    } // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n    function updateClassInstance(\n      current,\n      workInProgress,\n      ctor,\n      newProps,\n      renderLanes\n    ) {\n      var instance = workInProgress.stateNode;\n      cloneUpdateQueue(current, workInProgress);\n      var unresolvedOldProps = workInProgress.memoizedProps;\n      var oldProps =\n        workInProgress.type === workInProgress.elementType\n          ? unresolvedOldProps\n          : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n      instance.props = oldProps;\n      var unresolvedNewProps = workInProgress.pendingProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n\n      if (typeof contextType === \"object\" && contextType !== null) {\n        nextContext = readContext(contextType);\n      }\n\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles =\n        typeof getDerivedStateFromProps === \"function\" ||\n        typeof instance.getSnapshotBeforeUpdate === \"function\"; // Note: During these life-cycles, instance.props/instance.state are what\n      // ever the previously attempted to render - not the \"current\". However,\n      // during componentDidUpdate we pass the \"current\" props.\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (\n        !hasNewLifecycles &&\n        (typeof instance.UNSAFE_componentWillReceiveProps === \"function\" ||\n          typeof instance.componentWillReceiveProps === \"function\")\n      ) {\n        if (\n          unresolvedOldProps !== unresolvedNewProps ||\n          oldContext !== nextContext\n        ) {\n          callComponentWillReceiveProps(\n            workInProgress,\n            instance,\n            newProps,\n            nextContext\n          );\n        }\n      }\n\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = (instance.state = oldState);\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      suspendIfUpdateReadFromEntangledAsyncAction();\n      newState = workInProgress.memoizedState;\n\n      if (\n        unresolvedOldProps === unresolvedNewProps &&\n        oldState === newState &&\n        !hasContextChanged() &&\n        !checkHasForceUpdateAfterProcessing() &&\n        !enableLazyContextPropagation\n      ) {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidUpdate === \"function\") {\n          if (\n            unresolvedOldProps !== current.memoizedProps ||\n            oldState !== current.memoizedState\n          ) {\n            workInProgress.flags |= Update;\n          }\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          if (\n            unresolvedOldProps !== current.memoizedProps ||\n            oldState !== current.memoizedState\n          ) {\n            workInProgress.flags |= Snapshot;\n          }\n        }\n\n        return false;\n      }\n\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(\n          workInProgress,\n          ctor,\n          getDerivedStateFromProps,\n          newProps\n        );\n        newState = workInProgress.memoizedState;\n      }\n\n      var shouldUpdate =\n        checkHasForceUpdateAfterProcessing() ||\n        checkShouldComponentUpdate(\n          workInProgress,\n          ctor,\n          oldProps,\n          newProps,\n          oldState,\n          newState,\n          nextContext\n        ) || // TODO: In some cases, we'll end up checking if context has changed twice,\n        // both before and after `shouldComponentUpdate` has been called. Not ideal,\n        // but I'm loath to refactor this function. This only happens for memoized\n        // components so it's not that common.\n        enableLazyContextPropagation;\n\n      if (shouldUpdate) {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n        if (\n          !hasNewLifecycles &&\n          (typeof instance.UNSAFE_componentWillUpdate === \"function\" ||\n            typeof instance.componentWillUpdate === \"function\")\n        ) {\n          if (typeof instance.componentWillUpdate === \"function\") {\n            instance.componentWillUpdate(newProps, newState, nextContext);\n          }\n\n          if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n            instance.UNSAFE_componentWillUpdate(\n              newProps,\n              newState,\n              nextContext\n            );\n          }\n        }\n\n        if (typeof instance.componentDidUpdate === \"function\") {\n          workInProgress.flags |= Update;\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          workInProgress.flags |= Snapshot;\n        }\n      } else {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidUpdate === \"function\") {\n          if (\n            unresolvedOldProps !== current.memoizedProps ||\n            oldState !== current.memoizedState\n          ) {\n            workInProgress.flags |= Update;\n          }\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          if (\n            unresolvedOldProps !== current.memoizedProps ||\n            oldState !== current.memoizedState\n          ) {\n            workInProgress.flags |= Snapshot;\n          }\n        } // If shouldComponentUpdate returned false, we should still update the\n        // memoized props/state to indicate that this work can be reused.\n\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      } // Update the existing instance's state, props, and context pointers even\n      // if shouldComponentUpdate returns false.\n\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    }\n\n    var CapturedStacks = new WeakMap();\n    function createCapturedValueAtFiber(value, source) {\n      // If the value is an error, call this function immediately after it is thrown\n      // so the stack is accurate.\n      var stack;\n\n      if (typeof value === \"object\" && value !== null) {\n        var capturedStack = CapturedStacks.get(value);\n\n        if (typeof capturedStack === \"string\") {\n          stack = capturedStack;\n        } else {\n          stack = getStackByFiberInDevAndProd(source);\n          CapturedStacks.set(value, stack);\n        }\n      } else {\n        stack = getStackByFiberInDevAndProd(source);\n      }\n\n      return {\n        value: value,\n        source: source,\n        stack: stack,\n        digest: null\n      };\n    }\n    function createCapturedValueFromError(value, digest, stack) {\n      if (typeof stack === \"string\") {\n        CapturedStacks.set(value, stack);\n      }\n\n      return {\n        value: value,\n        source: null,\n        stack: stack != null ? stack : null,\n        digest: digest != null ? digest : null\n      };\n    }\n\n    if (\n      typeof ReactNativePrivateInterface.ReactFiberErrorDialog\n        .showErrorDialog !== \"function\"\n    ) {\n      throw new Error(\n        \"Expected ReactFiberErrorDialog.showErrorDialog to be a function.\"\n      );\n    }\n\n    function showErrorDialog(boundary, errorInfo) {\n      var capturedError = {\n        componentStack: errorInfo.stack !== null ? errorInfo.stack : \"\",\n        error: errorInfo.value,\n        errorBoundary:\n          boundary !== null && boundary.tag === ClassComponent\n            ? boundary.stateNode\n            : null\n      };\n      return ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(\n        capturedError\n      );\n    }\n\n    function logCapturedError(boundary, errorInfo) {\n      try {\n        var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n        // This enables renderers like ReactNative to better manage redbox behavior.\n\n        if (logError === false) {\n          return;\n        }\n\n        var error = errorInfo.value;\n\n        if (true) {\n          var source = errorInfo.source;\n          var stack = errorInfo.stack;\n          var componentStack = stack !== null ? stack : \"\"; // TODO: There's no longer a way to silence these warnings e.g. for tests.\n          // See https://github.com/facebook/react/pull/13384\n\n          var componentName = source ? getComponentNameFromFiber(source) : null;\n          var componentNameMessage = componentName\n            ? \"The above error occurred in the <\" +\n              componentName +\n              \"> component:\"\n            : \"The above error occurred in one of your React components:\";\n          var errorBoundaryMessage;\n\n          if (boundary.tag === HostRoot) {\n            errorBoundaryMessage =\n              \"Consider adding an error boundary to your tree to customize error handling behavior.\\n\" +\n              \"Visit https://react.dev/link/error-boundaries to learn more about error boundaries.\";\n          } else {\n            var errorBoundaryName =\n              getComponentNameFromFiber(boundary) || \"Anonymous\";\n            errorBoundaryMessage =\n              \"React will try to recreate this component tree from scratch \" +\n              (\"using the error boundary you provided, \" +\n                errorBoundaryName +\n                \".\");\n          } // In development, we provide our own message which includes the component stack\n          // in addition to the error.\n\n          console[\"error\"](\n            // Don't transform to our wrapper\n            \"%o\\n\\n%s\\n%s\\n\\n%s\",\n            error,\n            componentNameMessage,\n            componentStack,\n            errorBoundaryMessage\n          );\n        }\n      } catch (e) {\n        // This method must not throw, or React internal state will get messed up.\n        // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n        // we want to report this error outside of the normal stack as a last resort.\n        // https://github.com/facebook/react/issues/13188\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n\n    function createRootErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(lane); // Unmount the root by rendering null.\n\n      update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      update.payload = {\n        element: null\n      };\n      var error = errorInfo.value;\n\n      update.callback = function () {\n        onUncaughtError(error);\n        logCapturedError(fiber, errorInfo);\n      };\n\n      return update;\n    }\n\n    function createClassErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(lane);\n      update.tag = CaptureUpdate;\n      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n      if (typeof getDerivedStateFromError === \"function\") {\n        var error$1 = errorInfo.value;\n\n        update.payload = function () {\n          return getDerivedStateFromError(error$1);\n        };\n\n        update.callback = function () {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n\n          logCapturedError(fiber, errorInfo);\n        };\n      }\n\n      var inst = fiber.stateNode;\n\n      if (inst !== null && typeof inst.componentDidCatch === \"function\") {\n        // $FlowFixMe[missing-this-annot]\n        update.callback = function callback() {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n\n          logCapturedError(fiber, errorInfo);\n\n          if (typeof getDerivedStateFromError !== \"function\") {\n            // To preserve the preexisting retry behavior of error boundaries,\n            // we keep track of which ones already failed during this batch.\n            // This gets reset before we yield back to the browser.\n            // TODO: Warn in strict mode if getDerivedStateFromError is\n            // not defined.\n            markLegacyErrorBoundaryAsFailed(this);\n          }\n\n          var error$1 = errorInfo.value;\n          var stack = errorInfo.stack;\n          this.componentDidCatch(error$1, {\n            componentStack: stack !== null ? stack : \"\"\n          });\n\n          {\n            if (typeof getDerivedStateFromError !== \"function\") {\n              // If componentDidCatch is the only error boundary method defined,\n              // then it needs to call setState to recover from errors.\n              // If no state update is scheduled then the boundary will swallow the error.\n              if (!includesSomeLane(fiber.lanes, SyncLane)) {\n                error(\n                  \"%s: Error boundaries should implement getDerivedStateFromError(). \" +\n                    \"In that method, return a state update to display an error message or fallback UI.\",\n                  getComponentNameFromFiber(fiber) || \"Unknown\"\n                );\n              }\n            }\n          }\n        };\n      }\n\n      return update;\n    }\n\n    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n      // A legacy mode Suspense quirk, only relevant to hook components.\n\n      var tag = sourceFiber.tag;\n\n      if (\n        (sourceFiber.mode & ConcurrentMode) === NoMode &&\n        (tag === FunctionComponent ||\n          tag === ForwardRef ||\n          tag === SimpleMemoComponent)\n      ) {\n        var currentSource = sourceFiber.alternate;\n\n        if (currentSource) {\n          sourceFiber.updateQueue = currentSource.updateQueue;\n          sourceFiber.memoizedState = currentSource.memoizedState;\n          sourceFiber.lanes = currentSource.lanes;\n        } else {\n          sourceFiber.updateQueue = null;\n          sourceFiber.memoizedState = null;\n        }\n      }\n    }\n\n    function markSuspenseBoundaryShouldCapture(\n      suspenseBoundary,\n      returnFiber,\n      sourceFiber,\n      root,\n      rootRenderLanes\n    ) {\n      // This marks a Suspense boundary so that when we're unwinding the stack,\n      // it captures the suspended \"exception\" and does a second (fallback) pass.\n      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n        // Legacy Mode Suspense\n        //\n        // If the boundary is in legacy mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. When the Suspense boundary completes,\n        // we'll do a second pass to render the fallback.\n        if (suspenseBoundary === returnFiber) {\n          // Special case where we suspended while reconciling the children of\n          // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n          // when a React.lazy component is a direct child of a\n          // Suspense boundary.\n          //\n          // Suspense boundaries are implemented as multiple fibers, but they\n          // are a single conceptual unit. The legacy mode behavior where we\n          // pretend the suspended fiber committed as `null` won't work,\n          // because in this case the \"suspended\" fiber is the inner\n          // Offscreen wrapper.\n          //\n          // Because the contents of the boundary haven't started rendering\n          // yet (i.e. nothing in the tree has partially rendered) we can\n          // switch to the regular, concurrent mode behavior: mark the\n          // boundary with ShouldCapture and enter the unwind phase.\n          suspenseBoundary.flags |= ShouldCapture;\n        } else {\n          suspenseBoundary.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (sourceFiber.tag === ClassComponent) {\n            var currentSourceFiber = sourceFiber.alternate;\n\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              var update = createUpdate(SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update, SyncLane);\n            }\n          } // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n        }\n\n        return suspenseBoundary;\n      } // Confirmed that the boundary is in a concurrent mode tree. Continue\n      // with the normal suspend path.\n      //\n      // After this we'll use a set of heuristics to determine whether this\n      // render pass will run to completion or restart or \"suspend\" the commit.\n      // The actual logic for this is spread out in different places.\n      //\n      // This first principle is that if we're going to suspend when we complete\n      // a root, then we should also restart if we get an update or ping that\n      // might unsuspend it, and vice versa. The only reason to suspend is\n      // because you think you might want to restart before committing. However,\n      // it doesn't make sense to restart only while in the period we're suspended.\n      //\n      // Restarting too aggressively is also not good because it starves out any\n      // intermediate loading state. So we use heuristics to determine when.\n      // Suspense Heuristics\n      //\n      // If nothing threw a Promise or all the same fallbacks are already showing,\n      // then don't suspend/restart.\n      //\n      // If this is an initial render of a new tree of Suspense boundaries and\n      // those trigger a fallback, then don't suspend/restart. We want to ensure\n      // that we can show the initial loading state as quickly as possible.\n      //\n      // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n      // a fallback, then we should always suspend/restart. Transitions apply\n      // to this case. If none is defined, JND is used instead.\n      //\n      // If we're already showing a fallback and it gets \"retried\", allowing us to show\n      // another level, but there's still an inner boundary that would show a fallback,\n      // then we suspend/restart for 500ms since the last time we showed a fallback\n      // anywhere in the tree. This effectively throttles progressive loading into a\n      // consistent train of commits. This also gives us an opportunity to restart to\n      // get to the completed state slightly earlier.\n      //\n      // If there's ambiguity due to batching it's resolved in preference of:\n      // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n      //\n      // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n      // ensure that new initial loading states can commit as soon as possible.\n\n      suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n      // the begin phase to prevent an early bailout.\n\n      suspenseBoundary.lanes = rootRenderLanes;\n      return suspenseBoundary;\n    }\n\n    function throwException(\n      root,\n      returnFiber,\n      sourceFiber,\n      value,\n      rootRenderLanes\n    ) {\n      // The source fiber did not complete.\n      sourceFiber.flags |= Incomplete;\n\n      {\n        if (isDevToolsPresent) {\n          // If we have pending work still, restore the original updaters\n          restorePendingUpdaters(root, rootRenderLanes);\n        }\n      }\n\n      if (value !== null && typeof value === \"object\") {\n        if (typeof value.then === \"function\") {\n          // This is a wakeable. The component suspended.\n          var wakeable = value;\n          resetSuspendedComponent(sourceFiber);\n\n          var suspenseBoundary = getSuspenseHandler();\n\n          if (suspenseBoundary !== null) {\n            switch (suspenseBoundary.tag) {\n              case SuspenseComponent: {\n                // If this suspense boundary is not already showing a fallback, mark\n                // the in-progress render as suspended. We try to perform this logic\n                // as soon as soon as possible during the render phase, so the work\n                // loop can know things like whether it's OK to switch to other tasks,\n                // or whether it can wait for data to resolve before continuing.\n                // TODO: Most of these checks are already performed when entering a\n                // Suspense boundary. We should track the information on the stack so\n                // we don't have to recompute it on demand. This would also allow us\n                // to unify with `use` which needs to perform this logic even sooner,\n                // before `throwException` is called.\n                if (sourceFiber.mode & ConcurrentMode) {\n                  if (getShellBoundary() === null) {\n                    // Suspended in the \"shell\" of the app. This is an undesirable\n                    // loading state. We should avoid committing this tree.\n                    renderDidSuspendDelayIfPossible();\n                  } else {\n                    // If we suspended deeper than the shell, we don't need to delay\n                    // the commmit. However, we still call renderDidSuspend if this is\n                    // a new boundary, to tell the work loop that a new fallback has\n                    // appeared during this render.\n                    // TODO: Theoretically we should be able to delete this branch.\n                    // It's currently used for two things: 1) to throttle the\n                    // appearance of successive loading states, and 2) in\n                    // SuspenseList, to determine whether the children include any\n                    // pending fallbacks. For 1, we should apply throttling to all\n                    // retries, not just ones that render an additional fallback. For\n                    // 2, we should check subtreeFlags instead. Then we can delete\n                    // this branch.\n                    var current = suspenseBoundary.alternate;\n\n                    if (current === null) {\n                      renderDidSuspend();\n                    }\n                  }\n                }\n\n                suspenseBoundary.flags &= ~ForceClientRender;\n                markSuspenseBoundaryShouldCapture(\n                  suspenseBoundary,\n                  returnFiber,\n                  sourceFiber,\n                  root,\n                  rootRenderLanes\n                ); // Retry listener\n                //\n                // If the fallback does commit, we need to attach a different type of\n                // listener. This one schedules an update on the Suspense boundary to\n                // turn the fallback state off.\n                //\n                // Stash the wakeable on the boundary fiber so we can access it in the\n                // commit phase.\n                //\n                // When the wakeable resolves, we'll attempt to render the boundary\n                // again (\"retry\").\n                // Check if this is a Suspensey resource. We do not attach retry\n                // listeners to these, because we don't actually need them for\n                // rendering. Only for committing. Instead, if a fallback commits\n                // and the only thing that suspended was a Suspensey resource, we\n                // retry immediately.\n                // TODO: Refactor throwException so that we don't have to do this type\n                // check. The caller already knows what the cause was.\n\n                var isSuspenseyResource =\n                  wakeable === noopSuspenseyCommitThenable;\n\n                if (isSuspenseyResource) {\n                  suspenseBoundary.flags |= ScheduleRetry;\n                } else {\n                  var retryQueue = suspenseBoundary.updateQueue;\n\n                  if (retryQueue === null) {\n                    suspenseBoundary.updateQueue = new Set([wakeable]);\n                  } else {\n                    retryQueue.add(wakeable);\n                  } // We only attach ping listeners in concurrent mode. Legacy\n                  // Suspense always commits fallbacks synchronously, so there are\n                  // no pings.\n\n                  if (suspenseBoundary.mode & ConcurrentMode) {\n                    attachPingListener(root, wakeable, rootRenderLanes);\n                  }\n                }\n\n                return false;\n              }\n\n              case OffscreenComponent: {\n                if (suspenseBoundary.mode & ConcurrentMode) {\n                  suspenseBoundary.flags |= ShouldCapture;\n\n                  var _isSuspenseyResource =\n                    wakeable === noopSuspenseyCommitThenable;\n\n                  if (_isSuspenseyResource) {\n                    suspenseBoundary.flags |= ScheduleRetry;\n                  } else {\n                    var offscreenQueue = suspenseBoundary.updateQueue;\n\n                    if (offscreenQueue === null) {\n                      var newOffscreenQueue = {\n                        transitions: null,\n                        markerInstances: null,\n                        retryQueue: new Set([wakeable])\n                      };\n                      suspenseBoundary.updateQueue = newOffscreenQueue;\n                    } else {\n                      var _retryQueue = offscreenQueue.retryQueue;\n\n                      if (_retryQueue === null) {\n                        offscreenQueue.retryQueue = new Set([wakeable]);\n                      } else {\n                        _retryQueue.add(wakeable);\n                      }\n                    }\n\n                    attachPingListener(root, wakeable, rootRenderLanes);\n                  }\n\n                  return false;\n                }\n              }\n            }\n\n            throw new Error(\n              \"Unexpected Suspense handler tag (\" +\n                suspenseBoundary.tag +\n                \"). This \" +\n                \"is a bug in React.\"\n            );\n          } else {\n            // No boundary was found. Unless this is a sync update, this is OK.\n            // We can suspend and wait for more data to arrive.\n            if (root.tag === ConcurrentRoot) {\n              // In a concurrent root, suspending without a Suspense boundary is\n              // allowed. It will suspend indefinitely without committing.\n              //\n              // TODO: Should we have different behavior for discrete updates? What\n              // about flushSync? Maybe it should put the tree into an inert state,\n              // and potentially log a warning. Revisit this for a future release.\n              attachPingListener(root, wakeable, rootRenderLanes);\n              renderDidSuspendDelayIfPossible();\n              return false;\n            } else {\n              // In a legacy root, suspending without a boundary is always an error.\n              var uncaughtSuspenseError = new Error(\n                \"A component suspended while responding to synchronous input. This \" +\n                  \"will cause the UI to be replaced with a loading indicator. To \" +\n                  \"fix, updates that suspend should be wrapped \" +\n                  \"with startTransition.\"\n              );\n              value = uncaughtSuspenseError;\n            }\n          }\n        }\n      } // This is a regular error, not a Suspense wakeable.\n\n      value = createCapturedValueAtFiber(value, sourceFiber);\n      renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\n      // over and traverse parent path again, this time treating the exception\n      // as an error.\n\n      if (returnFiber === null) {\n        // There's no return fiber, which means the root errored. This should never\n        // happen. Return `true` to trigger a fatal error (panic).\n        return true;\n      }\n\n      var workInProgress = returnFiber;\n\n      do {\n        switch (workInProgress.tag) {\n          case HostRoot: {\n            var _errorInfo = value;\n            workInProgress.flags |= ShouldCapture;\n            var lane = pickArbitraryLane(rootRenderLanes);\n            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n            var update = createRootErrorUpdate(\n              workInProgress,\n              _errorInfo,\n              lane\n            );\n            enqueueCapturedUpdate(workInProgress, update);\n            return false;\n          }\n\n          case ClassComponent:\n            // Capture and retry\n            var errorInfo = value;\n            var ctor = workInProgress.type;\n            var instance = workInProgress.stateNode;\n\n            if (\n              (workInProgress.flags & DidCapture) === NoFlags$1 &&\n              (typeof ctor.getDerivedStateFromError === \"function\" ||\n                (instance !== null &&\n                  typeof instance.componentDidCatch === \"function\" &&\n                  !isAlreadyFailedLegacyErrorBoundary(instance)))\n            ) {\n              workInProgress.flags |= ShouldCapture;\n\n              var _lane = pickArbitraryLane(rootRenderLanes);\n\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n              var _update = createClassErrorUpdate(\n                workInProgress,\n                errorInfo,\n                _lane\n              );\n\n              enqueueCapturedUpdate(workInProgress, _update);\n              return false;\n            }\n\n            break;\n        } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n        workInProgress = workInProgress.return;\n      } while (workInProgress !== null);\n\n      return false;\n    }\n\n    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner; // A special exception that's used to unwind the stack when an update flows\n    // into a dehydrated boundary.\n\n    var SelectiveHydrationException = new Error(\n      \"This is not a real error. It's an implementation detail of React's \" +\n        \"selective hydration feature. If this leaks into userspace, it's a bug in \" +\n        \"React. Please file an issue.\"\n    );\n    var didReceiveUpdate = false;\n    var didWarnAboutBadClass;\n    var didWarnAboutModulePatternComponent;\n    var didWarnAboutContextTypeOnFunctionComponent;\n    var didWarnAboutGetDerivedStateOnFunctionComponent;\n    var didWarnAboutFunctionRefs;\n    var didWarnAboutReassigningProps;\n    var didWarnAboutRevealOrder;\n    var didWarnAboutTailOptions;\n    var didWarnAboutDefaultPropsOnFunctionComponent;\n\n    {\n      didWarnAboutBadClass = {};\n      didWarnAboutModulePatternComponent = {};\n      didWarnAboutContextTypeOnFunctionComponent = {};\n      didWarnAboutGetDerivedStateOnFunctionComponent = {};\n      didWarnAboutFunctionRefs = {};\n      didWarnAboutReassigningProps = false;\n      didWarnAboutRevealOrder = {};\n      didWarnAboutTailOptions = {};\n      didWarnAboutDefaultPropsOnFunctionComponent = {};\n    }\n\n    function reconcileChildren(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes\n    ) {\n      if (current === null) {\n        // If this is a fresh new component that hasn't been rendered yet, we\n        // won't update its child set by applying minimal side-effects. Instead,\n        // we will add them all to the child before it gets rendered. That means\n        // we can optimize this reconciliation pass by not tracking side-effects.\n        workInProgress.child = mountChildFibers(\n          workInProgress,\n          null,\n          nextChildren,\n          renderLanes\n        );\n      } else {\n        // If the current child is the same as the work in progress, it means that\n        // we haven't yet started any work on these children. Therefore, we use\n        // the clone algorithm to create a copy of all the current children.\n        // If we had any progressed work already, that is invalid at this point so\n        // let's throw it out.\n        workInProgress.child = reconcileChildFibers(\n          workInProgress,\n          current.child,\n          nextChildren,\n          renderLanes\n        );\n      }\n    }\n\n    function forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes\n    ) {\n      // This function is fork of reconcileChildren. It's used in cases where we\n      // want to reconcile without matching against the existing set. This has the\n      // effect of all current children being unmounted; even if the type and key\n      // are the same, the old child is unmounted and a new child is created.\n      //\n      // To do this, we're going to go through the reconcile algorithm twice. In\n      // the first pass, we schedule a deletion for all the current children by\n      // passing null.\n      workInProgress.child = reconcileChildFibers(\n        workInProgress,\n        current.child,\n        null,\n        renderLanes\n      ); // In the second pass, we mount the new children. The trick here is that we\n      // pass null in place of where we usually pass the current child set. This has\n      // the effect of remounting all children regardless of whether their\n      // identities match.\n\n      workInProgress.child = reconcileChildFibers(\n        workInProgress,\n        null,\n        nextChildren,\n        renderLanes\n      );\n    }\n\n    function updateForwardRef(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      // TODO: current can be non-null here even if the component\n      // hasn't yet mounted. This happens after the first render suspends.\n      // We'll need to figure out if this is fine or can cause issues.\n      var render = Component.render;\n      var ref = workInProgress.ref;\n      var propsWithoutRef;\n\n      {\n        propsWithoutRef = nextProps;\n      } // The rest is a fork of updateFunctionComponent\n\n      var nextChildren;\n      prepareToReadContext(workInProgress, renderLanes);\n\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          propsWithoutRef,\n          ref,\n          renderLanes\n        );\n        setIsRendering(false);\n      }\n\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes\n        );\n      }\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateMemoComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      if (current === null) {\n        var type = Component.type;\n\n        if (\n          isSimpleFunctionComponent(type) &&\n          Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n          Component.defaultProps === undefined\n        ) {\n          var resolvedType = type;\n\n          {\n            resolvedType = resolveFunctionForHotReloading(type);\n          } // If this is a plain function component without default props,\n          // and with only the default shallow comparison, we upgrade it\n          // to a SimpleMemoComponent to allow fast path updates.\n\n          workInProgress.tag = SimpleMemoComponent;\n          workInProgress.type = resolvedType;\n\n          {\n            validateFunctionComponentInDev(workInProgress, type);\n          }\n\n          return updateSimpleMemoComponent(\n            current,\n            workInProgress,\n            resolvedType,\n            nextProps,\n            renderLanes\n          );\n        }\n\n        {\n          if (Component.defaultProps !== undefined) {\n            var componentName = getComponentNameFromType(type) || \"Unknown\";\n\n            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n              error(\n                \"%s: Support for defaultProps will be removed from memo components \" +\n                  \"in a future major release. Use JavaScript default parameters instead.\",\n                componentName\n              );\n\n              didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n            }\n          }\n        }\n\n        var child = createFiberFromTypeAndProps(\n          Component.type,\n          null,\n          nextProps,\n          workInProgress,\n          workInProgress.mode,\n          renderLanes\n        );\n        child.ref = workInProgress.ref;\n        child.return = workInProgress;\n        workInProgress.child = child;\n        return child;\n      }\n\n      var currentChild = current.child; // This is always exactly one child\n\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes\n      );\n\n      if (!hasScheduledUpdateOrContext) {\n        // This will be the props with resolved defaultProps,\n        // unlike current.memoizedProps which will be the unresolved ones.\n        var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n        var compare = Component.compare;\n        compare = compare !== null ? compare : shallowEqual;\n\n        if (\n          compare(prevProps, nextProps) &&\n          current.ref === workInProgress.ref\n        ) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes\n          );\n        }\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n      var newChild = createWorkInProgress(currentChild, nextProps);\n      newChild.ref = workInProgress.ref;\n      newChild.return = workInProgress;\n      workInProgress.child = newChild;\n      return newChild;\n    }\n\n    function updateSimpleMemoComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      // TODO: current can be non-null here even if the component\n      // hasn't yet mounted. This happens when the inner render suspends.\n      // We'll need to figure out if this is fine or can cause issues.\n      if (current !== null) {\n        var prevProps = current.memoizedProps;\n\n        if (\n          shallowEqual(prevProps, nextProps) &&\n          current.ref === workInProgress.ref && // Prevent bailout if the implementation changed due to hot reload.\n          workInProgress.type === current.type\n        ) {\n          didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n          // would during a normal fiber bailout.\n          //\n          // We don't have strong guarantees that the props object is referentially\n          // equal during updates where we can't bail out anyway — like if the props\n          // are shallowly equal, but there's a local state or context update in the\n          // same batch.\n          //\n          // However, as a principle, we should aim to make the behavior consistent\n          // across different ways of memoizing a component. For example, React.memo\n          // has a different internal Fiber layout if you pass a normal function\n          // component (SimpleMemoComponent) versus if you pass a different type\n          // like forwardRef (MemoComponent). But this is an implementation detail.\n          // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n          // affect whether the props object is reused during a bailout.\n\n          workInProgress.pendingProps = nextProps = prevProps;\n\n          if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n            // The pending lanes were cleared at the beginning of beginWork. We're\n            // about to bail out, but there might be other lanes that weren't\n            // included in the current render. Usually, the priority level of the\n            // remaining updates is accumulated during the evaluation of the\n            // component (i.e. when processing the update queue). But since since\n            // we're bailing out early *without* evaluating the component, we need\n            // to account for it here, too. Reset to the value of the current fiber.\n            // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n            // because a MemoComponent fiber does not have hooks or an update queue;\n            // rather, it wraps around an inner component, which may or may not\n            // contains hooks.\n            // TODO: Move the reset at in beginWork out of the common path so that\n            // this is no longer necessary.\n            workInProgress.lanes = current.lanes;\n            return bailoutOnAlreadyFinishedWork(\n              current,\n              workInProgress,\n              renderLanes\n            );\n          } else if (\n            (current.flags & ForceUpdateForLegacySuspense) !==\n            NoFlags$1\n          ) {\n            // This is a special case that only exists for legacy mode.\n            // See https://github.com/facebook/react/pull/19216.\n            didReceiveUpdate = true;\n          }\n        }\n      }\n\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        nextProps,\n        renderLanes\n      );\n    }\n\n    function updateOffscreenComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      var nextIsDetached =\n        (workInProgress.stateNode._pendingVisibility & OffscreenDetached) !== 0;\n      var prevState = current !== null ? current.memoizedState : null;\n      markRef(current, workInProgress);\n\n      if (nextProps.mode === \"hidden\" || enableLegacyHidden || nextIsDetached) {\n        // Rendering a hidden tree.\n        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n\n        if (didSuspend) {\n          // Something suspended inside a hidden tree\n          // Include the base lanes from the last render\n          var nextBaseLanes =\n            prevState !== null\n              ? mergeLanes(prevState.baseLanes, renderLanes)\n              : renderLanes;\n\n          if (current !== null) {\n            // Reset to the current children\n            var currentChild = (workInProgress.child = current.child); // The current render suspended, but there may be other lanes with\n            // pending work. We can't read `childLanes` from the current Offscreen\n            // fiber because we reset it when it was deferred; however, we can read\n            // the pending lanes from the child fibers.\n\n            var currentChildLanes = NoLanes;\n\n            while (currentChild !== null) {\n              currentChildLanes = mergeLanes(\n                mergeLanes(currentChildLanes, currentChild.lanes),\n                currentChild.childLanes\n              );\n              currentChild = currentChild.sibling;\n            }\n\n            var lanesWeJustAttempted = nextBaseLanes;\n            var remainingChildLanes = removeLanes(\n              currentChildLanes,\n              lanesWeJustAttempted\n            );\n            workInProgress.childLanes = remainingChildLanes;\n          } else {\n            workInProgress.childLanes = NoLanes;\n            workInProgress.child = null;\n          }\n\n          return deferHiddenOffscreenComponent(\n            current,\n            workInProgress,\n            nextBaseLanes\n          );\n        }\n\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          // In legacy sync mode, don't defer the subtree. Render it now.\n          // TODO: Consider how Offscreen should work with transitions in the future\n          var nextState = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = nextState;\n\n          reuseHiddenContextOnStack(workInProgress);\n          pushOffscreenSuspenseHandler(workInProgress);\n        } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n          // We're hidden, and we're not rendering at Offscreen. We will bail out\n          // and resume this tree later.\n          // Schedule this fiber to re-render at Offscreen priority\n          workInProgress.lanes = workInProgress.childLanes =\n            laneToLanes(OffscreenLane); // Include the base lanes from the last render\n\n          var _nextBaseLanes =\n            prevState !== null\n              ? mergeLanes(prevState.baseLanes, renderLanes)\n              : renderLanes;\n\n          return deferHiddenOffscreenComponent(\n            current,\n            workInProgress,\n            _nextBaseLanes\n          );\n        } else {\n          // This is the second render. The surrounding visible content has already\n          // committed. Now we resume rendering the hidden tree.\n          // Rendering at offscreen, so we can clear the base lanes.\n          var _nextState = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = _nextState;\n\n          if (prevState !== null) {\n            pushHiddenContext(workInProgress, prevState);\n          } else {\n            reuseHiddenContextOnStack(workInProgress);\n          }\n\n          pushOffscreenSuspenseHandler(workInProgress);\n        }\n      } else {\n        // Rendering a visible tree.\n        if (prevState !== null) {\n          pushHiddenContext(workInProgress, prevState);\n          reuseSuspenseHandlerOnStack(workInProgress); // Since we're not hidden anymore, reset the state\n\n          workInProgress.memoizedState = null;\n        } else {\n          // to avoid a push/pop misalignment.\n\n          reuseHiddenContextOnStack(workInProgress);\n          reuseSuspenseHandlerOnStack(workInProgress);\n        }\n      }\n\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function deferHiddenOffscreenComponent(\n      current,\n      workInProgress,\n      nextBaseLanes,\n      renderLanes\n    ) {\n      var nextState = {\n        baseLanes: nextBaseLanes,\n        // Save the cache pool so we can resume later.\n        cachePool: null\n      };\n      workInProgress.memoizedState = nextState;\n      // to avoid a push/pop misalignment.\n\n      reuseHiddenContextOnStack(workInProgress);\n      pushOffscreenSuspenseHandler(workInProgress);\n\n      return null;\n    } // Note: These happen to have identical begin phases, for now. We shouldn't hold\n\n    function updateFragment(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateMode(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateProfiler(current, workInProgress, renderLanes) {\n      {\n        workInProgress.flags |= Update;\n\n        {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function markRef(current, workInProgress) {\n      // TODO: Check props.ref instead of fiber.ref when enableRefAsProp is on.\n      var ref = workInProgress.ref;\n\n      if (ref === null) {\n        if (current !== null && current.ref !== null) {\n          // Schedule a Ref effect\n          workInProgress.flags |= Ref | RefStatic;\n        }\n      } else {\n        if (typeof ref !== \"function\" && typeof ref !== \"object\") {\n          throw new Error(\n            \"Expected ref to be a function, an object returned by React.createRef(), or undefined/null.\"\n          );\n        }\n\n        if (current === null || current.ref !== ref) {\n          // Schedule a Ref effect\n          workInProgress.flags |= Ref | RefStatic;\n        }\n      }\n    }\n\n    function updateFunctionComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      var context;\n\n      var nextChildren;\n      prepareToReadContext(workInProgress, renderLanes);\n\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes\n        );\n        setIsRendering(false);\n      }\n\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes\n        );\n      }\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function replayFunctionComponent(\n      current,\n      workInProgress,\n      nextProps,\n      Component,\n      secondArg,\n      renderLanes\n    ) {\n      // This function is used to replay a component that previously suspended,\n      // after its data resolves. It's a simplified version of\n      // updateFunctionComponent that reuses the hooks from the previous attempt.\n      prepareToReadContext(workInProgress, renderLanes);\n\n      var nextChildren = replaySuspendedComponentWithHooks(\n        current,\n        workInProgress,\n        Component,\n        nextProps,\n        secondArg\n      );\n\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes\n        );\n      }\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateClassComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      {\n        // This is used by DevTools to force a boundary to error.\n        switch (shouldError(workInProgress)) {\n          case false: {\n            var _instance = workInProgress.stateNode;\n            var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n            // Is there a better way to do this?\n\n            var tempInstance = new ctor(\n              workInProgress.memoizedProps,\n              _instance.context\n            );\n            var state = tempInstance.state;\n\n            _instance.updater.enqueueSetState(_instance, state, null);\n\n            break;\n          }\n\n          case true: {\n            workInProgress.flags |= DidCapture;\n            workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n            var error$1 = new Error(\"Simulated error coming from DevTools\");\n            var lane = pickArbitraryLane(renderLanes);\n            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n            var update = createClassErrorUpdate(\n              workInProgress,\n              createCapturedValueAtFiber(error$1, workInProgress),\n              lane\n            );\n            enqueueCapturedUpdate(workInProgress, update);\n            break;\n          }\n        }\n      } // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n\n      var hasContext;\n\n      if (isContextProvider()) {\n        hasContext = true;\n      } else {\n        hasContext = false;\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      var instance = workInProgress.stateNode;\n      var shouldUpdate;\n\n      if (instance === null) {\n        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\n\n        constructClassInstance(workInProgress, Component, nextProps);\n        mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n        shouldUpdate = true;\n      } else if (current === null) {\n        // In a resume, we'll already have an instance we can reuse.\n        shouldUpdate = resumeMountClassInstance(\n          workInProgress,\n          Component,\n          nextProps,\n          renderLanes\n        );\n      } else {\n        shouldUpdate = updateClassInstance(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          renderLanes\n        );\n      }\n\n      var nextUnitOfWork = finishClassComponent(\n        current,\n        workInProgress,\n        Component,\n        shouldUpdate,\n        hasContext,\n        renderLanes\n      );\n\n      {\n        var inst = workInProgress.stateNode;\n\n        if (shouldUpdate && inst.props !== nextProps) {\n          if (!didWarnAboutReassigningProps) {\n            error(\n              \"It looks like %s is reassigning its own `this.props` while rendering. \" +\n                \"This is not supported and can lead to confusing bugs.\",\n              getComponentNameFromFiber(workInProgress) || \"a component\"\n            );\n          }\n\n          didWarnAboutReassigningProps = true;\n        }\n      }\n\n      return nextUnitOfWork;\n    }\n\n    function finishClassComponent(\n      current,\n      workInProgress,\n      Component,\n      shouldUpdate,\n      hasContext,\n      renderLanes\n    ) {\n      // Refs should update even if shouldComponentUpdate returns false\n      markRef(current, workInProgress);\n      var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags$1;\n\n      if (!shouldUpdate && !didCaptureError) {\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes\n        );\n      }\n\n      var instance = workInProgress.stateNode; // Rerender\n\n      ReactCurrentOwner$2.current = workInProgress;\n      var nextChildren;\n\n      if (\n        didCaptureError &&\n        typeof Component.getDerivedStateFromError !== \"function\"\n      ) {\n        // If we captured an error, but getDerivedStateFromError is not defined,\n        // unmount all the children. componentDidCatch will schedule an update to\n        // re-render a fallback. This is temporary until we migrate everyone to\n        // the new API.\n        // TODO: Warn in a future release.\n        nextChildren = null;\n\n        {\n          stopProfilerTimerIfRunning();\n        }\n      } else {\n        {\n          setIsRendering(true);\n          nextChildren = instance.render();\n\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n\n            try {\n              instance.render();\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n\n          setIsRendering(false);\n        }\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n\n      if (current !== null && didCaptureError) {\n        // If we're recovering from an error, reconcile without reusing any of\n        // the existing children. Conceptually, the normal children and the children\n        // that are shown on error are two different sets, so we shouldn't reuse\n        // normal children even if their identities match.\n        forceUnmountCurrentAndReconcile(\n          current,\n          workInProgress,\n          nextChildren,\n          renderLanes\n        );\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      } // Memoize state using the values we just used to render.\n      // TODO: Restructure so we never read values from the instance.\n\n      workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n      return workInProgress.child;\n    }\n\n    function pushHostRootContext(workInProgress) {\n      var root = workInProgress.stateNode;\n\n      pushHostContainer(workInProgress, root.containerInfo);\n    }\n\n    function updateHostRoot(current, workInProgress, renderLanes) {\n      pushHostRootContext(workInProgress);\n\n      if (current === null) {\n        throw new Error(\"Should have a current fiber. This is a bug in React.\");\n      }\n\n      var nextProps = workInProgress.pendingProps;\n      var prevState = workInProgress.memoizedState;\n      var prevChildren = prevState.element;\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n      var nextState = workInProgress.memoizedState;\n      // it needs to happen after the `pushCacheProvider` call above to avoid a\n      // context stack mismatch. A bit unfortunate.\n\n      suspendIfUpdateReadFromEntangledAsyncAction(); // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      var nextChildren = nextState.element;\n\n      {\n        if (nextChildren === prevChildren) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes\n          );\n        }\n\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n\n      return workInProgress.child;\n    }\n\n    function updateHostComponent$1(current, workInProgress, renderLanes) {\n      pushHostContext(workInProgress);\n      var nextProps = workInProgress.pendingProps;\n      var prevProps = current !== null ? current.memoizedProps : null;\n      var nextChildren = nextProps.children;\n\n      if (prevProps !== null && shouldSetTextContent()) {\n        // If we're switching from a direct text child to a normal child, or to\n        // empty, we need to schedule the text content to be reset.\n        workInProgress.flags |= ContentReset;\n      }\n\n      markRef(current, workInProgress);\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateHostText$1(current, workInProgress) {\n      // immediately after.\n\n      return null;\n    }\n\n    function mountLazyComponent(\n      _current,\n      workInProgress,\n      elementType,\n      renderLanes\n    ) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      var props = workInProgress.pendingProps;\n      var lazyComponent = elementType;\n      var payload = lazyComponent._payload;\n      var init = lazyComponent._init;\n      var Component = init(payload); // Store the unwrapped component in the type.\n\n      workInProgress.type = Component;\n      var resolvedTag = (workInProgress.tag =\n        resolveLazyComponentTag(Component));\n      var resolvedProps = resolveDefaultProps(Component, props);\n      var child;\n\n      switch (resolvedTag) {\n        case FunctionComponent: {\n          {\n            validateFunctionComponentInDev(workInProgress, Component);\n            workInProgress.type = Component =\n              resolveFunctionForHotReloading(Component);\n          }\n\n          child = updateFunctionComponent(\n            null,\n            workInProgress,\n            Component,\n            resolvedProps,\n            renderLanes\n          );\n          return child;\n        }\n\n        case ClassComponent: {\n          {\n            workInProgress.type = Component =\n              resolveClassForHotReloading(Component);\n          }\n\n          child = updateClassComponent(\n            null,\n            workInProgress,\n            Component,\n            resolvedProps,\n            renderLanes\n          );\n          return child;\n        }\n\n        case ForwardRef: {\n          {\n            workInProgress.type = Component =\n              resolveForwardRefForHotReloading(Component);\n          }\n\n          child = updateForwardRef(\n            null,\n            workInProgress,\n            Component,\n            resolvedProps,\n            renderLanes\n          );\n          return child;\n        }\n\n        case MemoComponent: {\n          child = updateMemoComponent(\n            null,\n            workInProgress,\n            Component,\n            resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n            renderLanes\n          );\n          return child;\n        }\n      }\n\n      var hint = \"\";\n\n      {\n        if (\n          Component !== null &&\n          typeof Component === \"object\" &&\n          Component.$$typeof === REACT_LAZY_TYPE\n        ) {\n          hint = \" Did you wrap a component in React.lazy() more than once?\";\n        }\n      } // This message intentionally doesn't mention ForwardRef or MemoComponent\n      // because the fact that it's a separate type of work is an\n      // implementation detail.\n\n      throw new Error(\n        \"Element type is invalid. Received a promise that resolves to: \" +\n          Component +\n          \". \" +\n          (\"Lazy element type must resolve to a class or function.\" + hint)\n      );\n    }\n\n    function mountIncompleteClassComponent(\n      _current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\n\n      workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n      // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n\n      var hasContext;\n\n      if (isContextProvider()) {\n        hasContext = true;\n      } else {\n        hasContext = false;\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      constructClassInstance(workInProgress, Component, nextProps);\n      mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      return finishClassComponent(\n        null,\n        workInProgress,\n        Component,\n        true,\n        hasContext,\n        renderLanes\n      );\n    }\n\n    function mountIndeterminateComponent(\n      _current,\n      workInProgress,\n      Component,\n      renderLanes\n    ) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      var props = workInProgress.pendingProps;\n      var context;\n\n      prepareToReadContext(workInProgress, renderLanes);\n      var value;\n\n      {\n        if (\n          Component.prototype &&\n          typeof Component.prototype.render === \"function\"\n        ) {\n          var componentName = getComponentNameFromType(Component) || \"Unknown\";\n\n          if (!didWarnAboutBadClass[componentName]) {\n            error(\n              \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n                \"This is likely to cause errors. Change %s to extend React.Component instead.\",\n              componentName,\n              componentName\n            );\n\n            didWarnAboutBadClass[componentName] = true;\n          }\n        }\n\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(\n            workInProgress,\n            null\n          );\n        }\n\n        setIsRendering(true);\n        ReactCurrentOwner$2.current = workInProgress;\n        value = renderWithHooks(\n          null,\n          workInProgress,\n          Component,\n          props,\n          context,\n          renderLanes\n        );\n        setIsRendering(false);\n      }\n\n      workInProgress.flags |= PerformedWork;\n\n      {\n        // Support for module components is deprecated and is removed behind a flag.\n        // Whether or not it would crash later, we want to show a good message in DEV first.\n        if (\n          typeof value === \"object\" &&\n          value !== null &&\n          typeof value.render === \"function\" &&\n          value.$$typeof === undefined\n        ) {\n          var _componentName = getComponentNameFromType(Component) || \"Unknown\";\n\n          if (!didWarnAboutModulePatternComponent[_componentName]) {\n            error(\n              \"The <%s /> component appears to be a function component that returns a class instance. \" +\n                \"Change %s to a class that extends React.Component instead. \" +\n                \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n                \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n                \"cannot be called with `new` by React.\",\n              _componentName,\n              _componentName,\n              _componentName\n            );\n\n            didWarnAboutModulePatternComponent[_componentName] = true;\n          }\n        }\n      }\n\n      if (\n        // Run these checks in production only if the flag is off.\n        // Eventually we'll delete this branch altogether.\n        typeof value === \"object\" &&\n        value !== null &&\n        typeof value.render === \"function\" &&\n        value.$$typeof === undefined\n      ) {\n        {\n          var _componentName2 =\n            getComponentNameFromType(Component) || \"Unknown\";\n\n          if (!didWarnAboutModulePatternComponent[_componentName2]) {\n            error(\n              \"The <%s /> component appears to be a function component that returns a class instance. \" +\n                \"Change %s to a class that extends React.Component instead. \" +\n                \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n                \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n                \"cannot be called with `new` by React.\",\n              _componentName2,\n              _componentName2,\n              _componentName2\n            );\n\n            didWarnAboutModulePatternComponent[_componentName2] = true;\n          }\n        } // Proceed under the assumption that this is a class instance\n\n        workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n        // During mounting we don't know the child context yet as the instance doesn't exist.\n        // We will invalidate the child context in finishClassComponent() right after rendering.\n\n        var hasContext = false;\n\n        if (isContextProvider()) {\n          hasContext = true;\n        } else {\n          hasContext = false;\n        }\n\n        workInProgress.memoizedState =\n          value.state !== null && value.state !== undefined\n            ? value.state\n            : null;\n        initializeUpdateQueue(workInProgress);\n        adoptClassInstance(workInProgress, value);\n        mountClassInstance(workInProgress, Component, props, renderLanes);\n        return finishClassComponent(\n          null,\n          workInProgress,\n          Component,\n          true,\n          hasContext,\n          renderLanes\n        );\n      } else {\n        // Proceed under the assumption that this is a function component\n        workInProgress.tag = FunctionComponent;\n\n        {\n          if (Component.contextTypes) {\n            error(\n              \"%s uses the legacy contextTypes API which is no longer supported. \" +\n                \"Use React.createContext() with React.useContext() instead.\",\n              getComponentNameFromType(Component) || \"Unknown\"\n            );\n          }\n        }\n\n        reconcileChildren(null, workInProgress, value, renderLanes);\n\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n        }\n\n        return workInProgress.child;\n      }\n    }\n\n    function validateFunctionComponentInDev(workInProgress, Component) {\n      {\n        if (Component) {\n          if (Component.childContextTypes) {\n            error(\n              \"childContextTypes cannot be defined on a function component.\\n\" +\n                \"  %s.childContextTypes = ...\",\n              Component.displayName || Component.name || \"Component\"\n            );\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          var info = \"\";\n          var componentName = getComponentNameFromType(Component) || \"Unknown\";\n          var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n          if (ownerName) {\n            info += \"\\n\\nCheck the render method of `\" + ownerName + \"`.\";\n          }\n\n          var warningKey = componentName + \"|\" + (ownerName || \"\");\n\n          if (!didWarnAboutFunctionRefs[warningKey]) {\n            didWarnAboutFunctionRefs[warningKey] = true;\n\n            error(\n              \"Function components cannot be given refs. \" +\n                \"Attempts to access this ref will fail. \" +\n                \"Did you mean to use React.forwardRef()?%s\",\n              info\n            );\n          }\n        }\n\n        if (Component.defaultProps !== undefined) {\n          var _componentName3 =\n            getComponentNameFromType(Component) || \"Unknown\";\n\n          if (!didWarnAboutDefaultPropsOnFunctionComponent[_componentName3]) {\n            error(\n              \"%s: Support for defaultProps will be removed from function components \" +\n                \"in a future major release. Use JavaScript default parameters instead.\",\n              _componentName3\n            );\n\n            didWarnAboutDefaultPropsOnFunctionComponent[_componentName3] = true;\n          }\n        }\n\n        if (typeof Component.getDerivedStateFromProps === \"function\") {\n          var _componentName4 =\n            getComponentNameFromType(Component) || \"Unknown\";\n\n          if (\n            !didWarnAboutGetDerivedStateOnFunctionComponent[_componentName4]\n          ) {\n            error(\n              \"%s: Function components do not support getDerivedStateFromProps.\",\n              _componentName4\n            );\n\n            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName4] =\n              true;\n          }\n        }\n\n        if (\n          typeof Component.contextType === \"object\" &&\n          Component.contextType !== null\n        ) {\n          var _componentName5 =\n            getComponentNameFromType(Component) || \"Unknown\";\n\n          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName5]) {\n            error(\n              \"%s: Function components do not support contextType.\",\n              _componentName5\n            );\n\n            didWarnAboutContextTypeOnFunctionComponent[_componentName5] = true;\n          }\n        }\n      }\n    }\n\n    var SUSPENDED_MARKER = {\n      dehydrated: null,\n      treeContext: null,\n      retryLane: NoLane\n    };\n\n    function mountSuspenseOffscreenState(renderLanes) {\n      return {\n        baseLanes: renderLanes,\n        cachePool: getSuspendedCache()\n      };\n    }\n\n    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n      var cachePool = null;\n\n      return {\n        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n        cachePool: cachePool\n      };\n    } // TODO: Probably should inline this back\n\n    function shouldRemainOnFallback(current, workInProgress, renderLanes) {\n      // If we're already showing a fallback, there are cases where we need to\n      // remain on that fallback regardless of whether the content has resolved.\n      // For example, SuspenseList coordinates when nested content appears.\n      // TODO: For compatibility with offscreen prerendering, this should also check\n      // whether the current fiber (if it exists) was visible in the previous tree.\n      if (current !== null) {\n        var suspenseState = current.memoizedState;\n\n        if (suspenseState === null) {\n          // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n          // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n          // Note: This is a factoring smell. Can't remain on a fallback if there's\n          // no fallback to remain on.\n          return false;\n        }\n      } // Not currently showing content. Consult the Suspense context.\n\n      var suspenseContext = suspenseStackCursor.current;\n      return hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n    }\n\n    function getRemainingWorkInPrimaryTree(\n      current,\n      primaryTreeDidDefer,\n      renderLanes\n    ) {\n      var remainingLanes =\n        current !== null\n          ? removeLanes(current.childLanes, renderLanes)\n          : NoLanes;\n\n      if (primaryTreeDidDefer) {\n        // A useDeferredValue hook spawned a deferred task inside the primary tree.\n        // Ensure that we retry this component at the deferred priority.\n        // TODO: We could make this a per-subtree value instead of a global one.\n        // Would need to track it on the context stack somehow, similar to what\n        // we'd have to do for resumable contexts.\n        remainingLanes = mergeLanes(remainingLanes, peekDeferredLane());\n      }\n\n      return remainingLanes;\n    }\n\n    function updateSuspenseComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n      {\n        if (shouldSuspend(workInProgress)) {\n          workInProgress.flags |= DidCapture;\n        }\n      }\n\n      var showFallback = false;\n      var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n\n      if (didSuspend || shouldRemainOnFallback(current)) {\n        // Something in this boundary's subtree already suspended. Switch to\n        // rendering the fallback children.\n        showFallback = true;\n        workInProgress.flags &= ~DidCapture;\n      } // Check if the primary children spawned a deferred task (useDeferredValue)\n      // during the first pass.\n\n      var didPrimaryChildrenDefer =\n        (workInProgress.flags & DidDefer) !== NoFlags$1;\n      workInProgress.flags &= ~DidDefer; // OK, the next part is confusing. We're about to reconcile the Suspense\n      // boundary's children. This involves some custom reconciliation logic. Two\n      // main reasons this is so complicated.\n      //\n      // First, Legacy Mode has different semantics for backwards compatibility. The\n      // primary tree will commit in an inconsistent state, so when we do the\n      // second pass to render the fallback, we do some exceedingly, uh, clever\n      // hacks to make that not totally break. Like transferring effects and\n      // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n      // because we bailout on the primary tree completely and leave it in its old\n      // state, no effects. Same as what we do for Offscreen (except that\n      // Offscreen doesn't have the first render pass).\n      //\n      // Second is hydration. During hydration, the Suspense fiber has a slightly\n      // different layout, where the child points to a dehydrated fragment, which\n      // contains the DOM rendered by the server.\n      //\n      // Third, even if you set all that aside, Suspense is like error boundaries in\n      // that we first we try to render one tree, and if that fails, we render again\n      // and switch to a different tree. Like a try/catch block. So we have to track\n      // which branch we're currently rendering. Ideally we would model this using\n      // a stack.\n\n      if (current === null) {\n        var nextPrimaryChildren = nextProps.children;\n        var nextFallbackChildren = nextProps.fallback;\n\n        if (showFallback) {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var fallbackFragment = mountSuspenseFallbackChildren(\n            workInProgress,\n            nextPrimaryChildren,\n            nextFallbackChildren,\n            renderLanes\n          );\n          var primaryChildFragment = workInProgress.child;\n          primaryChildFragment.memoizedState =\n            mountSuspenseOffscreenState(renderLanes);\n          primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n            current,\n            didPrimaryChildrenDefer,\n            renderLanes\n          );\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n\n          return fallbackFragment;\n        } else {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          return mountSuspensePrimaryChildren(\n            workInProgress,\n            nextPrimaryChildren\n          );\n        }\n      } else {\n        // This is an update.\n        // Special path for hydration\n        var prevState = current.memoizedState;\n\n        if (prevState !== null) {\n          var _dehydrated = prevState.dehydrated;\n\n          if (_dehydrated !== null) {\n            return updateDehydratedSuspenseComponent(\n              current,\n              workInProgress,\n              didSuspend,\n              didPrimaryChildrenDefer,\n              nextProps,\n              _dehydrated,\n              prevState,\n              renderLanes\n            );\n          }\n        }\n\n        if (showFallback) {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var _nextFallbackChildren = nextProps.fallback;\n          var _nextPrimaryChildren = nextProps.children;\n          var fallbackChildFragment = updateSuspenseFallbackChildren(\n            current,\n            workInProgress,\n            _nextPrimaryChildren,\n            _nextFallbackChildren,\n            renderLanes\n          );\n          var _primaryChildFragment2 = workInProgress.child;\n          var prevOffscreenState = current.child.memoizedState;\n          _primaryChildFragment2.memoizedState =\n            prevOffscreenState === null\n              ? mountSuspenseOffscreenState(renderLanes)\n              : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n\n          _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(\n            current,\n            didPrimaryChildrenDefer,\n            renderLanes\n          );\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackChildFragment;\n        } else {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          var _nextPrimaryChildren2 = nextProps.children;\n\n          var _primaryChildFragment3 = updateSuspensePrimaryChildren(\n            current,\n            workInProgress,\n            _nextPrimaryChildren2,\n            renderLanes\n          );\n\n          workInProgress.memoizedState = null;\n          return _primaryChildFragment3;\n        }\n      }\n    }\n\n    function mountSuspensePrimaryChildren(\n      workInProgress,\n      primaryChildren,\n      renderLanes\n    ) {\n      var mode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: \"visible\",\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(\n        primaryChildProps,\n        mode\n      );\n      primaryChildFragment.return = workInProgress;\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n\n    function mountSuspenseFallbackChildren(\n      workInProgress,\n      primaryChildren,\n      fallbackChildren,\n      renderLanes\n    ) {\n      var mode = workInProgress.mode;\n      var progressedPrimaryFragment = workInProgress.child;\n      var primaryChildProps = {\n        mode: \"hidden\",\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n      var fallbackChildFragment;\n\n      if (\n        (mode & ConcurrentMode) === NoMode &&\n        progressedPrimaryFragment !== null\n      ) {\n        // In legacy mode, we commit the primary tree as if it successfully\n        // completed, even though it's in an inconsistent state.\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n\n        if (workInProgress.mode & ProfileMode) {\n          // Reset the durations from the first pass so they aren't included in the\n          // final amounts. This seems counterintuitive, since we're intentionally\n          // not measuring part of the render phase, but this makes it match what we\n          // do in Concurrent Mode.\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = 0;\n          primaryChildFragment.treeBaseDuration = 0;\n        }\n\n        fallbackChildFragment = createFiberFromFragment(\n          fallbackChildren,\n          mode,\n          renderLanes,\n          null\n        );\n      } else {\n        primaryChildFragment = mountWorkInProgressOffscreenFiber(\n          primaryChildProps,\n          mode\n        );\n        fallbackChildFragment = createFiberFromFragment(\n          fallbackChildren,\n          mode,\n          renderLanes,\n          null\n        );\n      }\n\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n\n    function mountWorkInProgressOffscreenFiber(\n      offscreenProps,\n      mode,\n      renderLanes\n    ) {\n      // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n      // this wrapper function to constrain it.\n      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n    }\n\n    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n      // The props argument to `createWorkInProgress` is `any` typed, so we use this\n      // wrapper function to constrain it.\n      return createWorkInProgress(current, offscreenProps);\n    }\n\n    function updateSuspensePrimaryChildren(\n      current,\n      workInProgress,\n      primaryChildren,\n      renderLanes\n    ) {\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildFragment = updateWorkInProgressOffscreenFiber(\n        currentPrimaryChildFragment,\n        {\n          mode: \"visible\",\n          children: primaryChildren\n        }\n      );\n\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        primaryChildFragment.lanes = renderLanes;\n      }\n\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = null;\n\n      if (currentFallbackChildFragment !== null) {\n        // Delete the fallback child fragment\n        var deletions = workInProgress.deletions;\n\n        if (deletions === null) {\n          workInProgress.deletions = [currentFallbackChildFragment];\n          workInProgress.flags |= ChildDeletion;\n        } else {\n          deletions.push(currentFallbackChildFragment);\n        }\n      }\n\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n\n    function updateSuspenseFallbackChildren(\n      current,\n      workInProgress,\n      primaryChildren,\n      fallbackChildren,\n      renderLanes\n    ) {\n      var mode = workInProgress.mode;\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildProps = {\n        mode: \"hidden\",\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n\n      if (\n        // In legacy mode, we commit the primary tree as if it successfully\n        // completed, even though it's in an inconsistent state.\n        (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n        // already cloned. In legacy mode, the only case where this isn't true is\n        // when DevTools forces us to display a fallback; we skip the first render\n        // pass entirely and go straight to rendering the fallback. (In Concurrent\n        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n        // only codepath.)\n        workInProgress.child !== currentPrimaryChildFragment\n      ) {\n        var progressedPrimaryFragment = workInProgress.child;\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n\n        if (workInProgress.mode & ProfileMode) {\n          // Reset the durations from the first pass so they aren't included in the\n          // final amounts. This seems counterintuitive, since we're intentionally\n          // not measuring part of the render phase, but this makes it match what we\n          // do in Concurrent Mode.\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration =\n            currentPrimaryChildFragment.selfBaseDuration;\n          primaryChildFragment.treeBaseDuration =\n            currentPrimaryChildFragment.treeBaseDuration;\n        } // The fallback fiber was added as a deletion during the first pass.\n        // However, since we're going to remain on the fallback, we no longer want\n        // to delete it.\n\n        workInProgress.deletions = null;\n      } else {\n        primaryChildFragment = updateWorkInProgressOffscreenFiber(\n          currentPrimaryChildFragment,\n          primaryChildProps\n        ); // Since we're reusing a current tree, we need to reuse the flags, too.\n        // (We don't do this in legacy mode, because in legacy mode we don't re-use\n        // the current tree; see previous branch.)\n\n        primaryChildFragment.subtreeFlags =\n          currentPrimaryChildFragment.subtreeFlags & StaticMask;\n      }\n\n      var fallbackChildFragment;\n\n      if (currentFallbackChildFragment !== null) {\n        fallbackChildFragment = createWorkInProgress(\n          currentFallbackChildFragment,\n          fallbackChildren\n        );\n      } else {\n        fallbackChildFragment = createFiberFromFragment(\n          fallbackChildren,\n          mode,\n          renderLanes,\n          null\n        ); // Needs a placement effect because the parent (the Suspense boundary) already\n        // mounted but this is a new fiber.\n\n        fallbackChildFragment.flags |= Placement;\n      }\n\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n\n    function retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n      recoverableError\n    ) {\n      // Falling back to client rendering. Because this has performance\n      // implications, it's considered a recoverable error, even though the user\n      // likely won't observe anything wrong with the UI.\n      //\n      // The error is passed in as an argument to enforce that every caller provide\n      // a custom message, or explicitly opt out (currently the only path that opts\n      // out is legacy mode; every concurrent path provides an error).\n      if (recoverableError !== null) {\n        queueHydrationError(recoverableError);\n      } // This will add the old fiber to the deletion list\n\n      reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n      var nextProps = workInProgress.pendingProps;\n      var primaryChildren = nextProps.children;\n      var primaryChildFragment = mountSuspensePrimaryChildren(\n        workInProgress,\n        primaryChildren\n      ); // Needs a placement effect because the parent (the Suspense boundary) already\n      // mounted but this is a new fiber.\n\n      primaryChildFragment.flags |= Placement;\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n\n    function mountSuspenseFallbackAfterRetryWithoutHydrating(\n      current,\n      workInProgress,\n      primaryChildren,\n      fallbackChildren,\n      renderLanes\n    ) {\n      var fiberMode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: \"visible\",\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(\n        primaryChildProps,\n        fiberMode\n      );\n      var fallbackChildFragment = createFiberFromFragment(\n        fallbackChildren,\n        fiberMode,\n        renderLanes,\n        null\n      ); // Needs a placement effect because the parent (the Suspense\n      // boundary) already mounted but this is a new fiber.\n\n      fallbackChildFragment.flags |= Placement;\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n\n      if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n        // We will have dropped the effect list which contains the\n        // deletion. We need to reconcile to delete the current child.\n        reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      }\n\n      return fallbackChildFragment;\n    }\n\n    function updateDehydratedSuspenseComponent(\n      current,\n      workInProgress,\n      didSuspend,\n      didPrimaryChildrenDefer,\n      nextProps,\n      suspenseInstance,\n      suspenseState,\n      renderLanes\n    ) {\n      if (!didSuspend) {\n        // This is the first render pass. Attempt to hydrate.\n        pushPrimaryTreeSuspenseHandler(workInProgress); // We should never be hydrating at this point because it is the first pass,\n\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          return retrySuspenseComponentWithoutHydrating(\n            current,\n            workInProgress,\n            renderLanes,\n            null\n          );\n        }\n\n        if (isSuspenseInstanceFallback()) {\n          // This boundary is in a permanent fallback state. In this case, we'll never\n          // get an update and we'll never be able to hydrate the final content. Let's just try the\n          // client side render instead.\n          var digest;\n          var message, stack;\n\n          {\n            var _getSuspenseInstanceF =\n              getSuspenseInstanceFallbackErrorDetails();\n\n            digest = _getSuspenseInstanceF.digest;\n            message = _getSuspenseInstanceF.message;\n            stack = _getSuspenseInstanceF.stack;\n          }\n\n          var capturedValue = null; // TODO: Figure out a better signal than encoding a magic digest value.\n\n          {\n            var error;\n\n            if (message) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error(message);\n            } else {\n              error = new Error(\n                \"The server could not finish this Suspense boundary, likely \" +\n                  \"due to an error during server rendering. Switched to \" +\n                  \"client rendering.\"\n              );\n            }\n\n            error.digest = digest;\n            capturedValue = createCapturedValueFromError(error, digest, stack);\n          }\n\n          return retrySuspenseComponentWithoutHydrating(\n            current,\n            workInProgress,\n            renderLanes,\n            capturedValue\n          );\n        }\n        // any context has changed, we need to treat is as if the input might have changed.\n\n        var hasContextChanged = includesSomeLane(\n          renderLanes,\n          current.childLanes\n        );\n\n        if (didReceiveUpdate || hasContextChanged) {\n          // This boundary has changed since the first render. This means that we are now unable to\n          // hydrate it. We might still be able to hydrate it using a higher priority lane.\n          var root = getWorkInProgressRoot();\n\n          if (root !== null) {\n            var attemptHydrationAtLane = getBumpedLaneForHydration(\n              root,\n              renderLanes\n            );\n\n            if (\n              attemptHydrationAtLane !== NoLane &&\n              attemptHydrationAtLane !== suspenseState.retryLane\n            ) {\n              // Intentionally mutating since this render will get interrupted. This\n              // is one of the very rare times where we mutate the current tree\n              // during the render phase.\n              suspenseState.retryLane = attemptHydrationAtLane;\n              enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n              scheduleUpdateOnFiber(root, current, attemptHydrationAtLane); // Throw a special object that signals to the work loop that it should\n              // interrupt the current render.\n              //\n              // Because we're inside a React-only execution stack, we don't\n              // strictly need to throw here — we could instead modify some internal\n              // work loop state. But using an exception means we don't need to\n              // check for this case on every iteration of the work loop. So doing\n              // it this way moves the check out of the fast path.\n\n              throw SelectiveHydrationException;\n            }\n          } // If we did not selectively hydrate, we'll continue rendering without\n          // hydrating. Mark this tree as suspended to prevent it from committing\n          // outside a transition.\n          //\n          // This path should only happen if the hydration lane already suspended.\n          // Currently, it also happens during sync updates because there is no\n          // hydration lane for sync updates.\n          // TODO: We should ideally have a sync hydration lane that we can apply to do\n          // a pass where we hydrate this subtree in place using the previous Context and then\n          // reapply the update afterwards.\n\n          if (isSuspenseInstancePending());\n          else {\n            renderDidSuspendDelayIfPossible();\n          }\n\n          return retrySuspenseComponentWithoutHydrating(\n            current,\n            workInProgress,\n            renderLanes,\n            null\n          );\n        } else if (isSuspenseInstancePending()) {\n          // This component is still pending more data from the server, so we can't hydrate its\n          // content. We treat it as if this component suspended itself. It might seem as if\n          // we could just try to render it client-side instead. However, this will perform a\n          // lot of unnecessary work and is unlikely to complete since it often will suspend\n          // on missing data anyway. Additionally, the server might be able to render more\n          // than we can on the client yet. In that case we'd end up with more fallback states\n          // on the client than if we just leave it alone. If the server times out or errors\n          // these should update this boundary to the permanent Fallback state instead.\n          // Mark it as having captured (i.e. suspended).\n          workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n          workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n          retryDehydratedSuspenseBoundary.bind(null, current);\n          registerSuspenseInstanceRetry();\n          return null;\n        } else {\n          var primaryChildren = nextProps.children;\n          var primaryChildFragment = mountSuspensePrimaryChildren(\n            workInProgress,\n            primaryChildren\n          ); // Mark the children as hydrating. This is a fast path to know whether this\n          // tree is part of a hydrating tree. This is used to determine if a child\n          // node has fully mounted yet, and for scheduling event replaying.\n          // Conceptually this is similar to Placement in that a new subtree is\n          // inserted into the React tree here. It just happens to not need DOM\n          // mutations because it already exists.\n\n          primaryChildFragment.flags |= Hydrating;\n          return primaryChildFragment;\n        }\n      } else {\n        // This is the second render pass. We already attempted to hydrated, but\n        // something either suspended or errored.\n        if (workInProgress.flags & ForceClientRender) {\n          // Something errored during hydration. Try again without hydrating.\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          workInProgress.flags &= ~ForceClientRender;\n\n          var _capturedValue = createCapturedValueFromError(\n            new Error(\n              \"There was an error while hydrating this Suspense boundary. \" +\n                \"Switched to client rendering.\"\n            )\n          );\n\n          return retrySuspenseComponentWithoutHydrating(\n            current,\n            workInProgress,\n            renderLanes,\n            _capturedValue\n          );\n        } else if (workInProgress.memoizedState !== null) {\n          // Something suspended and we should still be in dehydrated mode.\n          // Leave the existing child in place.\n          // Push to avoid a mismatch\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n          // but the normal suspense pass doesn't.\n\n          workInProgress.flags |= DidCapture;\n          return null;\n        } else {\n          // Suspended but we should no longer be in dehydrated mode.\n          // Therefore we now have to render the fallback.\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var nextPrimaryChildren = nextProps.children;\n          var nextFallbackChildren = nextProps.fallback;\n          var fallbackChildFragment =\n            mountSuspenseFallbackAfterRetryWithoutHydrating(\n              current,\n              workInProgress,\n              nextPrimaryChildren,\n              nextFallbackChildren,\n              renderLanes\n            );\n          var _primaryChildFragment4 = workInProgress.child;\n          _primaryChildFragment4.memoizedState =\n            mountSuspenseOffscreenState(renderLanes);\n          _primaryChildFragment4.childLanes = getRemainingWorkInPrimaryTree(\n            current,\n            didPrimaryChildrenDefer,\n            renderLanes\n          );\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackChildFragment;\n        }\n      }\n    }\n\n    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n      fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n\n      scheduleContextWorkOnParentPath(\n        fiber.return,\n        renderLanes,\n        propagationRoot\n      );\n    }\n\n    function propagateSuspenseContextChange(\n      workInProgress,\n      firstChild,\n      renderLanes\n    ) {\n      // Mark any Suspense boundaries with fallbacks as having work to do.\n      // If they were previously forced into fallbacks, they may now be able\n      // to unblock.\n      var node = firstChild;\n\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n\n          if (state !== null) {\n            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n          }\n        } else if (node.tag === SuspenseListComponent) {\n          // If the tail is hidden there might not be an Suspense boundaries\n          // to schedule work on. In this case we have to schedule it on the\n          // list itself.\n          // We don't have to traverse to the children of the list since\n          // the list will propagate the change when it rerenders.\n          scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        if (node === workInProgress) {\n          return;\n        } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        while (node.sibling === null) {\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          if (node.return === null || node.return === workInProgress) {\n            return;\n          }\n\n          node = node.return;\n        } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n\n    function findLastContentRow(firstChild) {\n      // This is going to find the last row among these children that is already\n      // showing content on the screen, as opposed to being in fallback state or\n      // new. If a row has multiple Suspense boundaries, any of them being in the\n      // fallback state, counts as the whole row being in a fallback state.\n      // Note that the \"rows\" will be workInProgress, but any nested children\n      // will still be current since we haven't rendered them yet. The mounted\n      // order may not be the same as the new order. We use the new order.\n      var row = firstChild;\n      var lastContentRow = null;\n\n      while (row !== null) {\n        var currentRow = row.alternate; // New rows can't be content rows.\n\n        if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n          lastContentRow = row;\n        }\n\n        row = row.sibling;\n      }\n\n      return lastContentRow;\n    }\n\n    function validateRevealOrder(revealOrder) {\n      {\n        if (\n          revealOrder !== undefined &&\n          revealOrder !== \"forwards\" &&\n          revealOrder !== \"backwards\" &&\n          revealOrder !== \"together\" &&\n          !didWarnAboutRevealOrder[revealOrder]\n        ) {\n          didWarnAboutRevealOrder[revealOrder] = true;\n\n          if (typeof revealOrder === \"string\") {\n            switch (revealOrder.toLowerCase()) {\n              case \"together\":\n              case \"forwards\":\n              case \"backwards\": {\n                error(\n                  '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                    'Use lowercase \"%s\" instead.',\n                  revealOrder,\n                  revealOrder.toLowerCase()\n                );\n\n                break;\n              }\n\n              case \"forward\":\n              case \"backward\": {\n                error(\n                  '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                    'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n                  revealOrder,\n                  revealOrder.toLowerCase()\n                );\n\n                break;\n              }\n\n              default:\n                error(\n                  '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                    'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n                  revealOrder\n                );\n\n                break;\n            }\n          } else {\n            error(\n              \"%s is not a supported value for revealOrder on <SuspenseList />. \" +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder\n            );\n          }\n        }\n      }\n    }\n\n    function validateTailOptions(tailMode, revealOrder) {\n      {\n        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n          if (tailMode !== \"collapsed\" && tailMode !== \"hidden\") {\n            didWarnAboutTailOptions[tailMode] = true;\n\n            error(\n              '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n                'Did you mean \"collapsed\" or \"hidden\"?',\n              tailMode\n            );\n          } else if (\n            revealOrder !== \"forwards\" &&\n            revealOrder !== \"backwards\"\n          ) {\n            didWarnAboutTailOptions[tailMode] = true;\n\n            error(\n              '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n                '\"forwards\" or \"backwards\". ' +\n                'Did you mean to specify revealOrder=\"forwards\"?',\n              tailMode\n            );\n          }\n        }\n      }\n    }\n\n    function validateSuspenseListNestedChild(childSlot, index) {\n      {\n        var isAnArray = isArray(childSlot);\n        var isIterable =\n          !isAnArray && typeof getIteratorFn(childSlot) === \"function\";\n\n        if (isAnArray || isIterable) {\n          var type = isAnArray ? \"array\" : \"iterable\";\n\n          error(\n            \"A nested %s was passed to row #%s in <SuspenseList />. Wrap it in \" +\n              \"an additional SuspenseList to configure its revealOrder: \" +\n              \"<SuspenseList revealOrder=...> ... \" +\n              \"<SuspenseList revealOrder=...>{%s}</SuspenseList> ... \" +\n              \"</SuspenseList>\",\n            type,\n            index,\n            type\n          );\n\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function validateSuspenseListChildren(children, revealOrder) {\n      {\n        if (\n          (revealOrder === \"forwards\" || revealOrder === \"backwards\") &&\n          children !== undefined &&\n          children !== null &&\n          children !== false\n        ) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              if (!validateSuspenseListNestedChild(children[i], i)) {\n                return;\n              }\n            }\n          } else {\n            var iteratorFn = getIteratorFn(children);\n\n            if (typeof iteratorFn === \"function\") {\n              var childrenIterator = iteratorFn.call(children);\n\n              if (childrenIterator) {\n                var step = childrenIterator.next();\n                var _i = 0;\n\n                for (; !step.done; step = childrenIterator.next()) {\n                  if (!validateSuspenseListNestedChild(step.value, _i)) {\n                    return;\n                  }\n\n                  _i++;\n                }\n              }\n            } else {\n              error(\n                'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n                  \"This is not useful since it needs multiple rows. \" +\n                  \"Did you mean to pass multiple children or an array?\",\n                revealOrder\n              );\n            }\n          }\n        }\n      }\n    }\n\n    function initSuspenseListRenderState(\n      workInProgress,\n      isBackwards,\n      tail,\n      lastContentRow,\n      tailMode\n    ) {\n      var renderState = workInProgress.memoizedState;\n\n      if (renderState === null) {\n        workInProgress.memoizedState = {\n          isBackwards: isBackwards,\n          rendering: null,\n          renderingStartTime: 0,\n          last: lastContentRow,\n          tail: tail,\n          tailMode: tailMode\n        };\n      } else {\n        // We can reuse the existing object from previous renders.\n        renderState.isBackwards = isBackwards;\n        renderState.rendering = null;\n        renderState.renderingStartTime = 0;\n        renderState.last = lastContentRow;\n        renderState.tail = tail;\n        renderState.tailMode = tailMode;\n      }\n    } // This can end up rendering this component multiple passes.\n    // The first pass splits the children fibers into two sets. A head and tail.\n    // We first render the head. If anything is in fallback state, we do another\n    // pass through beginWork to rerender all children (including the tail) with\n    // the force suspend context. If the first render didn't have anything in\n    // in fallback state. Then we render each row in the tail one-by-one.\n    // That happens in the completeWork phase without going back to beginWork.\n\n    function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var revealOrder = nextProps.revealOrder;\n      var tailMode = nextProps.tail;\n      var newChildren = nextProps.children;\n      validateRevealOrder(revealOrder);\n      validateTailOptions(tailMode, revealOrder);\n      validateSuspenseListChildren(newChildren, revealOrder);\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      var suspenseContext = suspenseStackCursor.current;\n      var shouldForceFallback = hasSuspenseListContext(\n        suspenseContext,\n        ForceSuspenseFallback\n      );\n\n      if (shouldForceFallback) {\n        suspenseContext = setShallowSuspenseListContext(\n          suspenseContext,\n          ForceSuspenseFallback\n        );\n        workInProgress.flags |= DidCapture;\n      } else {\n        var didSuspendBefore =\n          current !== null && (current.flags & DidCapture) !== NoFlags$1;\n\n        if (didSuspendBefore) {\n          // If we previously forced a fallback, we need to schedule work\n          // on any nested boundaries to let them know to try to render\n          // again. This is the same as context updating.\n          propagateSuspenseContextChange(\n            workInProgress,\n            workInProgress.child,\n            renderLanes\n          );\n        }\n\n        suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n      }\n\n      pushSuspenseListContext(workInProgress, suspenseContext);\n\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        // In legacy mode, SuspenseList doesn't work so we just\n        // use make it a noop by treating it as the default revealOrder.\n        workInProgress.memoizedState = null;\n      } else {\n        switch (revealOrder) {\n          case \"forwards\": {\n            var lastContentRow = findLastContentRow(workInProgress.child);\n            var tail;\n\n            if (lastContentRow === null) {\n              // The whole list is part of the tail.\n              // TODO: We could fast path by just rendering the tail now.\n              tail = workInProgress.child;\n              workInProgress.child = null;\n            } else {\n              // Disconnect the tail rows after the content row.\n              // We're going to render them separately later.\n              tail = lastContentRow.sibling;\n              lastContentRow.sibling = null;\n            }\n\n            initSuspenseListRenderState(\n              workInProgress,\n              false, // isBackwards\n              tail,\n              lastContentRow,\n              tailMode\n            );\n            break;\n          }\n\n          case \"backwards\": {\n            // We're going to find the first row that has existing content.\n            // At the same time we're going to reverse the list of everything\n            // we pass in the meantime. That's going to be our tail in reverse\n            // order.\n            var _tail = null;\n            var row = workInProgress.child;\n            workInProgress.child = null;\n\n            while (row !== null) {\n              var currentRow = row.alternate; // New rows can't be content rows.\n\n              if (\n                currentRow !== null &&\n                findFirstSuspended(currentRow) === null\n              ) {\n                // This is the beginning of the main content.\n                workInProgress.child = row;\n                break;\n              }\n\n              var nextRow = row.sibling;\n              row.sibling = _tail;\n              _tail = row;\n              row = nextRow;\n            } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n            initSuspenseListRenderState(\n              workInProgress,\n              true, // isBackwards\n              _tail,\n              null, // last\n              tailMode\n            );\n            break;\n          }\n\n          case \"together\": {\n            initSuspenseListRenderState(\n              workInProgress,\n              false, // isBackwards\n              null, // tail\n              null, // last\n              undefined\n            );\n            break;\n          }\n\n          default: {\n            // The default reveal order is the same as not having\n            // a boundary.\n            workInProgress.memoizedState = null;\n          }\n        }\n      }\n\n      return workInProgress.child;\n    }\n\n    function updatePortalComponent(current, workInProgress, renderLanes) {\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      var nextChildren = workInProgress.pendingProps;\n\n      if (current === null) {\n        // Portals are special because we don't append the children during mount\n        // but at commit. Therefore we need to track insertions which the normal\n        // flow doesn't do during mount. This doesn't happen at the root because\n        // the root always starts with a \"current\" with a null child.\n        // TODO: Consider unifying this with how the root works.\n        workInProgress.child = reconcileChildFibers(\n          workInProgress,\n          null,\n          nextChildren,\n          renderLanes\n        );\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n\n      return workInProgress.child;\n    }\n\n    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\n    function updateContextProvider(current, workInProgress, renderLanes) {\n      var context;\n\n      {\n        context = workInProgress.type._context;\n      }\n\n      var newProps = workInProgress.pendingProps;\n      var oldProps = workInProgress.memoizedProps;\n      var newValue = newProps.value;\n\n      {\n        if (!(\"value\" in newProps)) {\n          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n            hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n\n            error(\n              \"The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?\"\n            );\n          }\n        }\n      }\n\n      pushProvider(workInProgress, context, newValue);\n\n      {\n        if (oldProps !== null) {\n          var oldValue = oldProps.value;\n\n          if (objectIs(oldValue, newValue)) {\n            // No change. Bailout early if children are the same.\n            if (\n              oldProps.children === newProps.children &&\n              !hasContextChanged()\n            ) {\n              return bailoutOnAlreadyFinishedWork(\n                current,\n                workInProgress,\n                renderLanes\n              );\n            }\n          } else {\n            // The context value changed. Search for matching consumers and schedule\n            // them to update.\n            propagateContextChange(workInProgress, context, renderLanes);\n          }\n        }\n      }\n\n      var newChildren = newProps.children;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateContextConsumer(current, workInProgress, renderLanes) {\n      var context;\n\n      {\n        context = workInProgress.type;\n\n        {\n          if (context._context !== undefined) {\n            context = context._context;\n          }\n        }\n      }\n\n      var newProps = workInProgress.pendingProps;\n      var render = newProps.children;\n\n      {\n        if (typeof render !== \"function\") {\n          error(\n            \"A context consumer was rendered with multiple children, or a child \" +\n              \"that isn't a function. A context consumer expects a single child \" +\n              \"that is a function. If you did pass a function, make sure there \" +\n              \"is no trailing or leading whitespace around it.\"\n          );\n        }\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      var newValue = readContext(context);\n\n      var newChildren;\n\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        newChildren = render(newValue);\n        setIsRendering(false);\n      }\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function markWorkInProgressReceivedUpdate() {\n      didReceiveUpdate = true;\n    }\n\n    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        if (current !== null) {\n          // A lazy component only mounts if it suspended inside a non-\n          // concurrent tree, in an inconsistent state. We want to treat it like\n          // a new mount, even though an empty version of it already committed.\n          // Disconnect the alternate pointers.\n          current.alternate = null;\n          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n          workInProgress.flags |= Placement;\n        }\n      }\n    }\n\n    function bailoutOnAlreadyFinishedWork(\n      current,\n      workInProgress,\n      renderLanes\n    ) {\n      if (current !== null) {\n        // Reuse previous dependencies\n        workInProgress.dependencies = current.dependencies;\n      }\n\n      {\n        // Don't update \"base\" render times for bailouts.\n        stopProfilerTimerIfRunning();\n      }\n\n      markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        // The children don't have any work either. We can skip them.\n        // TODO: Once we add back resuming, we should check if the children are\n        // a work-in-progress set. If so, we need to transfer their effects.\n        {\n          return null;\n        }\n      } // This fiber doesn't have work, but its subtree does. Clone the child\n      // fibers and continue.\n\n      cloneChildFibers(current, workInProgress);\n      return workInProgress.child;\n    }\n\n    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n      {\n        var returnFiber = oldWorkInProgress.return;\n\n        if (returnFiber === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error(\"Cannot swap the root fiber.\");\n        } // Disconnect from the old current.\n        // It will get deleted.\n\n        current.alternate = null;\n        oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n        newWorkInProgress.index = oldWorkInProgress.index;\n        newWorkInProgress.sibling = oldWorkInProgress.sibling;\n        newWorkInProgress.return = oldWorkInProgress.return;\n        newWorkInProgress.ref = oldWorkInProgress.ref;\n\n        {\n          newWorkInProgress._debugInfo = oldWorkInProgress._debugInfo;\n        } // Replace the child/sibling pointers above it.\n\n        if (oldWorkInProgress === returnFiber.child) {\n          returnFiber.child = newWorkInProgress;\n        } else {\n          var prevSibling = returnFiber.child;\n\n          if (prevSibling === null) {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            throw new Error(\"Expected parent to have a child.\");\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          while (prevSibling.sibling !== oldWorkInProgress) {\n            // $FlowFixMe[incompatible-use] found when upgrading Flow\n            prevSibling = prevSibling.sibling;\n\n            if (prevSibling === null) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              throw new Error(\"Expected to find the previous sibling.\");\n            }\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          prevSibling.sibling = newWorkInProgress;\n        } // Delete the old fiber and place the new one.\n        // Since the old fiber is disconnected, we have to schedule it manually.\n\n        var deletions = returnFiber.deletions;\n\n        if (deletions === null) {\n          returnFiber.deletions = [current];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(current);\n        }\n\n        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n        return newWorkInProgress;\n      }\n    }\n\n    function checkScheduledUpdateOrContext(current, renderLanes) {\n      // Before performing an early bailout, we must check if there are pending\n      // updates or context.\n      var updateLanes = current.lanes;\n\n      if (includesSomeLane(updateLanes, renderLanes)) {\n        return true;\n      } // No pending update, but because context is propagated lazily, we need\n\n      return false;\n    }\n\n    function attemptEarlyBailoutIfNoScheduledUpdate(\n      current,\n      workInProgress,\n      renderLanes\n    ) {\n      // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          break;\n\n        case HostSingleton:\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n\n        case ClassComponent: {\n          break;\n        }\n\n        case HostPortal:\n          pushHostContainer(\n            workInProgress,\n            workInProgress.stateNode.containerInfo\n          );\n          break;\n\n        case ContextProvider: {\n          var newValue = workInProgress.memoizedProps.value;\n          var context;\n\n          {\n            context = workInProgress.type._context;\n          }\n\n          pushProvider(workInProgress, context, newValue);\n          break;\n        }\n\n        case Profiler:\n          {\n            // Profiler should only call onRender when one of its descendants actually rendered.\n            var hasChildWork = includesSomeLane(\n              renderLanes,\n              workInProgress.childLanes\n            );\n\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n\n            {\n              // Reset effect durations for the next eventual effect phase.\n              // These are reset during render to allow the DevTools commit hook a chance to read them,\n              var stateNode = workInProgress.stateNode;\n              stateNode.effectDuration = 0;\n              stateNode.passiveEffectDuration = 0;\n            }\n          }\n\n          break;\n\n        case SuspenseComponent: {\n          var state = workInProgress.memoizedState;\n\n          if (state !== null) {\n            if (state.dehydrated !== null) {\n              // We're not going to render the children, so this is just to maintain\n              // push/pop symmetry\n              pushPrimaryTreeSuspenseHandler(workInProgress); // We know that this component will suspend again because if it has\n              // been unsuspended it has committed as a resolved Suspense component.\n              // If it needs to be retried, it should have work scheduled on it.\n\n              workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n              // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n              return null;\n            } // If this boundary is currently timed out, we need to decide\n            // whether to retry the primary children, or to skip over it and\n            // go straight to the fallback. Check the priority of the primary\n            // child fragment.\n\n            var primaryChildFragment = workInProgress.child;\n            var primaryChildLanes = primaryChildFragment.childLanes;\n\n            if (includesSomeLane(renderLanes, primaryChildLanes)) {\n              // The primary children have pending work. Use the normal path\n              // to attempt to render the primary children again.\n              return updateSuspenseComponent(\n                current,\n                workInProgress,\n                renderLanes\n              );\n            } else {\n              // The primary child fragment does not have pending work marked\n              // on it\n              pushPrimaryTreeSuspenseHandler(workInProgress); // The primary children do not have pending work with sufficient\n              // priority. Bailout.\n\n              var child = bailoutOnAlreadyFinishedWork(\n                current,\n                workInProgress,\n                renderLanes\n              );\n\n              if (child !== null) {\n                // The fallback children have pending work. Skip over the\n                // primary children and work on the fallback.\n                return child.sibling;\n              } else {\n                // Note: We can return `null` here because we already checked\n                // whether there were nested context consumers, via the call to\n                // `bailoutOnAlreadyFinishedWork` above.\n                return null;\n              }\n            }\n          } else {\n            pushPrimaryTreeSuspenseHandler(workInProgress);\n          }\n\n          break;\n        }\n\n        case SuspenseListComponent: {\n          var didSuspendBefore = (current.flags & DidCapture) !== NoFlags$1;\n\n          var _hasChildWork = includesSomeLane(\n            renderLanes,\n            workInProgress.childLanes\n          );\n\n          if (didSuspendBefore) {\n            if (_hasChildWork) {\n              // If something was in fallback state last time, and we have all the\n              // same children then we're still in progressive loading state.\n              // Something might get unblocked by state updates or retries in the\n              // tree which will affect the tail. So we need to use the normal\n              // path to compute the correct tail.\n              return updateSuspenseListComponent(\n                current,\n                workInProgress,\n                renderLanes\n              );\n            } // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n\n            workInProgress.flags |= DidCapture;\n          } // If nothing suspended before and we're rendering the same children,\n          // then the tail doesn't matter. Anything new that suspends will work\n          // in the \"together\" mode, so we can continue from the state we had.\n\n          var renderState = workInProgress.memoizedState;\n\n          if (renderState !== null) {\n            // Reset to the \"together\" mode in case we've started a different\n            // update in the past but didn't complete it.\n            renderState.rendering = null;\n            renderState.tail = null;\n            renderState.lastEffect = null;\n          }\n\n          pushSuspenseListContext(workInProgress, suspenseStackCursor.current);\n\n          if (_hasChildWork) {\n            break;\n          } else {\n            // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n            return null;\n          }\n        }\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent: {\n          // Need to check if the tree still needs to be deferred. This is\n          // almost identical to the logic used in the normal update path,\n          // so we'll just enter that. The only difference is we'll bail out\n          // at the next level instead of this one, because the child props\n          // have not changed. Which is fine.\n          // TODO: Probably should refactor `beginWork` to split the bailout\n          // path from the normal path. I'm tempted to do a labeled break here\n          // but I won't :)\n          workInProgress.lanes = NoLanes;\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\n        }\n      }\n\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n\n    function beginWork(current, workInProgress, renderLanes) {\n      {\n        if (workInProgress._debugNeedsRemount && current !== null) {\n          // This will restart the begin phase with a new fiber.\n          return remountFiber(\n            current,\n            workInProgress,\n            createFiberFromTypeAndProps(\n              workInProgress.type,\n              workInProgress.key,\n              workInProgress.pendingProps,\n              workInProgress._debugOwner || null,\n              workInProgress.mode,\n              workInProgress.lanes\n            )\n          );\n        }\n      }\n\n      if (current !== null) {\n        var oldProps = current.memoizedProps;\n        var newProps = workInProgress.pendingProps;\n\n        if (\n          oldProps !== newProps ||\n          hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:\n          workInProgress.type !== current.type\n        ) {\n          // If props or context changed, mark the fiber as having performed work.\n          // This may be unset if the props are determined to be equal later (memo).\n          didReceiveUpdate = true;\n        } else {\n          // Neither props nor legacy context changes. Check if there's a pending\n          // update or context change.\n          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n            current,\n            renderLanes\n          );\n\n          if (\n            !hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n            // may not be work scheduled on `current`, so we check for this flag.\n            (workInProgress.flags & DidCapture) === NoFlags$1\n          ) {\n            // No pending updates or context. Bail out now.\n            didReceiveUpdate = false;\n            return attemptEarlyBailoutIfNoScheduledUpdate(\n              current,\n              workInProgress,\n              renderLanes\n            );\n          }\n\n          if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {\n            // This is a special case that only exists for legacy mode.\n            // See https://github.com/facebook/react/pull/19216.\n            didReceiveUpdate = true;\n          } else {\n            // An update was scheduled on this fiber, but there are no new props\n            // nor legacy context. Set this to false. If an update queue or context\n            // consumer produces a changed value, it will set this to true. Otherwise,\n            // the component will assume the children have not changed and bail out.\n            didReceiveUpdate = false;\n          }\n        }\n      } else {\n        didReceiveUpdate = false;\n      } // Before entering the begin phase, clear pending update priority.\n      // TODO: This assumes that we're about to evaluate the component and process\n      // the update queue. However, there's an exception: SimpleMemoComponent\n      // sometimes bails out later in the begin phase. This indicates that we should\n      // move this assignment out of the common path and into each branch.\n\n      workInProgress.lanes = NoLanes;\n\n      switch (workInProgress.tag) {\n        case IndeterminateComponent: {\n          return mountIndeterminateComponent(\n            current,\n            workInProgress,\n            workInProgress.type,\n            renderLanes\n          );\n        }\n\n        case LazyComponent: {\n          var elementType = workInProgress.elementType;\n          return mountLazyComponent(\n            current,\n            workInProgress,\n            elementType,\n            renderLanes\n          );\n        }\n\n        case FunctionComponent: {\n          var Component = workInProgress.type;\n          var unresolvedProps = workInProgress.pendingProps;\n          var resolvedProps =\n            workInProgress.elementType === Component\n              ? unresolvedProps\n              : resolveDefaultProps(Component, unresolvedProps);\n          return updateFunctionComponent(\n            current,\n            workInProgress,\n            Component,\n            resolvedProps,\n            renderLanes\n          );\n        }\n\n        case ClassComponent: {\n          var _Component = workInProgress.type;\n          var _unresolvedProps = workInProgress.pendingProps;\n\n          var _resolvedProps =\n            workInProgress.elementType === _Component\n              ? _unresolvedProps\n              : resolveDefaultProps(_Component, _unresolvedProps);\n\n          return updateClassComponent(\n            current,\n            workInProgress,\n            _Component,\n            _resolvedProps,\n            renderLanes\n          );\n        }\n\n        case HostRoot:\n          return updateHostRoot(current, workInProgress, renderLanes);\n\n        case HostHoistable:\n\n        // Fall through\n\n        case HostSingleton:\n\n        // Fall through\n\n        case HostComponent:\n          return updateHostComponent$1(current, workInProgress, renderLanes);\n\n        case HostText:\n          return updateHostText$1();\n\n        case SuspenseComponent:\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n        case HostPortal:\n          return updatePortalComponent(current, workInProgress, renderLanes);\n\n        case ForwardRef: {\n          var type = workInProgress.type;\n          var _unresolvedProps2 = workInProgress.pendingProps;\n\n          var _resolvedProps2 =\n            workInProgress.elementType === type\n              ? _unresolvedProps2\n              : resolveDefaultProps(type, _unresolvedProps2);\n\n          return updateForwardRef(\n            current,\n            workInProgress,\n            type,\n            _resolvedProps2,\n            renderLanes\n          );\n        }\n\n        case Fragment:\n          return updateFragment(current, workInProgress, renderLanes);\n\n        case Mode:\n          return updateMode(current, workInProgress, renderLanes);\n\n        case Profiler:\n          return updateProfiler(current, workInProgress, renderLanes);\n\n        case ContextProvider:\n          return updateContextProvider(current, workInProgress, renderLanes);\n\n        case ContextConsumer:\n          return updateContextConsumer(current, workInProgress, renderLanes);\n\n        case MemoComponent: {\n          var _type = workInProgress.type;\n          var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n          var _resolvedProps3 = resolveDefaultProps(_type, _unresolvedProps3);\n\n          _resolvedProps3 = resolveDefaultProps(_type.type, _resolvedProps3);\n          return updateMemoComponent(\n            current,\n            workInProgress,\n            _type,\n            _resolvedProps3,\n            renderLanes\n          );\n        }\n\n        case SimpleMemoComponent: {\n          return updateSimpleMemoComponent(\n            current,\n            workInProgress,\n            workInProgress.type,\n            workInProgress.pendingProps,\n            renderLanes\n          );\n        }\n\n        case IncompleteClassComponent: {\n          var _Component2 = workInProgress.type;\n          var _unresolvedProps4 = workInProgress.pendingProps;\n\n          var _resolvedProps4 =\n            workInProgress.elementType === _Component2\n              ? _unresolvedProps4\n              : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n          return mountIncompleteClassComponent(\n            current,\n            workInProgress,\n            _Component2,\n            _resolvedProps4,\n            renderLanes\n          );\n        }\n\n        case SuspenseListComponent: {\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes\n          );\n        }\n\n        case ScopeComponent: {\n          break;\n        }\n\n        case OffscreenComponent: {\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\n        }\n      }\n\n      throw new Error(\n        \"Unknown unit of work tag (\" +\n          workInProgress.tag +\n          \"). This error is likely caused by a bug in \" +\n          \"React. Please file an issue.\"\n      );\n    }\n\n    var valueCursor = createCursor(null);\n\n    var renderer2CursorDEV;\n\n    {\n      renderer2CursorDEV = createCursor(null);\n    }\n\n    var rendererSigil;\n\n    {\n      // Use this to detect multiple renderers using the same context\n      rendererSigil = {};\n    }\n\n    var currentlyRenderingFiber = null;\n    var lastContextDependency = null;\n    var lastFullyObservedContext = null;\n    var isDisallowedContextReadInDEV = false;\n    function resetContextDependencies() {\n      // This is called right before React yields execution, to ensure `readContext`\n      // cannot be called outside the render phase.\n      currentlyRenderingFiber = null;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n    function enterDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = true;\n      }\n    }\n    function exitDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n    function pushProvider(providerFiber, context, nextValue) {\n      {\n        push(valueCursor, context._currentValue2, providerFiber);\n        context._currentValue2 = nextValue;\n\n        {\n          push(renderer2CursorDEV, context._currentRenderer2, providerFiber);\n\n          if (\n            context._currentRenderer2 !== undefined &&\n            context._currentRenderer2 !== null &&\n            context._currentRenderer2 !== rendererSigil\n          ) {\n            error(\n              \"Detected multiple renderers concurrently rendering the \" +\n                \"same context provider. This is currently unsupported.\"\n            );\n          }\n\n          context._currentRenderer2 = rendererSigil;\n        }\n      }\n    }\n    function popProvider(context, providerFiber) {\n      var currentValue = valueCursor.current;\n\n      {\n        context._currentValue2 = currentValue;\n\n        {\n          var currentRenderer2 = renderer2CursorDEV.current;\n          pop(renderer2CursorDEV, providerFiber);\n          context._currentRenderer2 = currentRenderer2;\n        }\n      }\n\n      pop(valueCursor, providerFiber);\n    }\n    function scheduleContextWorkOnParentPath(\n      parent,\n      renderLanes,\n      propagationRoot\n    ) {\n      // Update the child lanes of all the ancestors, including the alternates.\n      var node = parent;\n\n      while (node !== null) {\n        var alternate = node.alternate;\n\n        if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n          node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n          if (alternate !== null) {\n            alternate.childLanes = mergeLanes(\n              alternate.childLanes,\n              renderLanes\n            );\n          }\n        } else if (\n          alternate !== null &&\n          !isSubsetOfLanes(alternate.childLanes, renderLanes)\n        ) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n        } else;\n\n        if (node === propagationRoot) {\n          break;\n        }\n\n        node = node.return;\n      }\n\n      {\n        if (node !== propagationRoot) {\n          error(\n            \"Expected to find the propagation root when scheduling context work. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        }\n      }\n    }\n    function propagateContextChange(workInProgress, context, renderLanes) {\n      {\n        propagateContextChange_eager(workInProgress, context, renderLanes);\n      }\n    }\n\n    function propagateContextChange_eager(\n      workInProgress,\n      context,\n      renderLanes\n    ) {\n      var fiber = workInProgress.child;\n\n      if (fiber !== null) {\n        // Set the return pointer of the child to the work-in-progress fiber.\n        fiber.return = workInProgress;\n      }\n\n      while (fiber !== null) {\n        var nextFiber = void 0; // Visit this fiber.\n\n        var list = fiber.dependencies;\n\n        if (list !== null) {\n          nextFiber = fiber.child;\n          var dependency = list.firstContext;\n\n          while (dependency !== null) {\n            // Check if the context matches.\n            if (dependency.context === context) {\n              // Match! Schedule an update on this fiber.\n              if (fiber.tag === ClassComponent) {\n                // Schedule a force update on the work-in-progress.\n                var lane = pickArbitraryLane(renderLanes);\n                var update = createUpdate(lane);\n                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n                // update to the current fiber, too, which means it will persist even if\n                // this render is thrown away. Since it's a race condition, not sure it's\n                // worth fixing.\n                // Inlined `enqueueUpdate` to remove interleaved update check\n\n                var updateQueue = fiber.updateQueue;\n\n                if (updateQueue === null);\n                else {\n                  var sharedQueue = updateQueue.shared;\n                  var pending = sharedQueue.pending;\n\n                  if (pending === null) {\n                    // This is the first update. Create a circular list.\n                    update.next = update;\n                  } else {\n                    update.next = pending.next;\n                    pending.next = update;\n                  }\n\n                  sharedQueue.pending = update;\n                }\n              }\n\n              fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n              var alternate = fiber.alternate;\n\n              if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n              }\n\n              scheduleContextWorkOnParentPath(\n                fiber.return,\n                renderLanes,\n                workInProgress\n              ); // Mark the updated lanes on the list, too.\n\n              list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n              // dependency list.\n\n              break;\n            }\n\n            dependency = dependency.next;\n          }\n        } else if (fiber.tag === ContextProvider) {\n          // Don't scan deeper if this is a matching provider\n          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n        } else if (fiber.tag === DehydratedFragment) {\n          // If a dehydrated suspense boundary is in this subtree, we don't know\n          // if it will have any context consumers in it. The best we can do is\n          // mark it as having updates.\n          var parentSuspense = fiber.return;\n\n          if (parentSuspense === null) {\n            throw new Error(\n              \"We just came from a parent so we must have had a parent. This is a bug in React.\"\n            );\n          }\n\n          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n          var _alternate = parentSuspense.alternate;\n\n          if (_alternate !== null) {\n            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n          } // This is intentionally passing this fiber as the parent\n          // because we want to schedule this fiber as having work\n          // on its children. We'll use the childLanes on\n          // this fiber to indicate that a context has changed.\n\n          scheduleContextWorkOnParentPath(\n            parentSuspense,\n            renderLanes,\n            workInProgress\n          );\n          nextFiber = fiber.sibling;\n        } else {\n          // Traverse down.\n          nextFiber = fiber.child;\n        }\n\n        if (nextFiber !== null) {\n          // Set the return pointer of the child to the work-in-progress fiber.\n          nextFiber.return = fiber;\n        } else {\n          // No child. Traverse to next sibling.\n          nextFiber = fiber;\n\n          while (nextFiber !== null) {\n            if (nextFiber === workInProgress) {\n              // We're back to the root of this subtree. Exit.\n              nextFiber = null;\n              break;\n            }\n\n            var sibling = nextFiber.sibling;\n\n            if (sibling !== null) {\n              // Set the return pointer of the sibling to the work-in-progress fiber.\n              sibling.return = nextFiber.return;\n              nextFiber = sibling;\n              break;\n            } // No more siblings. Traverse up.\n\n            nextFiber = nextFiber.return;\n          }\n        }\n\n        fiber = nextFiber;\n      }\n    }\n    function prepareToReadContext(workInProgress, renderLanes) {\n      currentlyRenderingFiber = workInProgress;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      var dependencies = workInProgress.dependencies;\n\n      if (dependencies !== null) {\n        {\n          var firstContext = dependencies.firstContext;\n\n          if (firstContext !== null) {\n            if (includesSomeLane(dependencies.lanes, renderLanes)) {\n              // Context list has a pending update. Mark that this fiber performed work.\n              markWorkInProgressReceivedUpdate();\n            } // Reset the work-in-progress list\n\n            dependencies.firstContext = null;\n          }\n        }\n      }\n    }\n    function readContext(context) {\n      {\n        // This warning would fire if you read context inside a Hook like useMemo.\n        // Unlike the class check below, it's not enforced in production for perf.\n        if (isDisallowedContextReadInDEV) {\n          error(\n            \"Context can only be read while React is rendering. \" +\n              \"In classes, you can read it in the render method or getDerivedStateFromProps. \" +\n              \"In function components, you can read it directly in the function body, but not \" +\n              \"inside Hooks like useReducer() or useMemo().\"\n          );\n        }\n      }\n\n      return readContextForConsumer(currentlyRenderingFiber, context);\n    }\n    function readContextDuringReconciliation(consumer, context, renderLanes) {\n      if (currentlyRenderingFiber === null) {\n        prepareToReadContext(consumer, renderLanes);\n      }\n\n      return readContextForConsumer(consumer, context);\n    }\n\n    function readContextForConsumer(consumer, context) {\n      var value = context._currentValue2;\n\n      if (lastFullyObservedContext === context);\n      else {\n        var contextItem = {\n          context: context,\n          memoizedValue: value,\n          next: null\n        };\n\n        if (lastContextDependency === null) {\n          if (consumer === null) {\n            throw new Error(\n              \"Context can only be read while React is rendering. \" +\n                \"In classes, you can read it in the render method or getDerivedStateFromProps. \" +\n                \"In function components, you can read it directly in the function body, but not \" +\n                \"inside Hooks like useReducer() or useMemo().\"\n            );\n          } // This is the first dependency for this component. Create a new list.\n\n          lastContextDependency = contextItem;\n          consumer.dependencies = {\n            lanes: NoLanes,\n            firstContext: contextItem\n          };\n        } else {\n          // Append a new context item.\n          lastContextDependency = lastContextDependency.next = contextItem;\n        }\n      }\n\n      return value;\n    }\n\n    var ReactCurrentBatchConfig$1 =\n      ReactSharedInternals.ReactCurrentBatchConfig;\n    function requestCurrentTransition() {\n      var transition = ReactCurrentBatchConfig$1.transition;\n\n      if (transition !== null) {\n        // Whenever a transition update is scheduled, register a callback on the\n        // transition object so we can get the return value of the scope function.\n        transition._callbacks.add(handleAsyncAction);\n      }\n\n      return transition;\n    }\n\n    function handleAsyncAction(transition, thenable) {}\n\n    function notifyTransitionCallbacks(transition, returnValue) {\n      var callbacks = transition._callbacks;\n      callbacks.forEach(function (callback) {\n        return callback(transition, returnValue);\n      });\n    } // When retrying a Suspense/Offscreen boundary, we restore the cache that was\n    function getSuspendedCache() {\n      {\n        return null;\n      } // This function is called when a Suspense boundary suspends. It returns the\n    }\n\n    /**\n     * Tag the fiber with an update effect. This turns a Placement into\n     * a PlacementAndUpdate.\n     */\n\n    function markUpdate(workInProgress) {\n      workInProgress.flags |= Update;\n    }\n    /**\n     * In persistent mode, return whether this update needs to clone the subtree.\n     */\n\n    function doesRequireClone(current, completedWork) {\n      var didBailout =\n        current !== null && current.child === completedWork.child;\n\n      if (didBailout) {\n        return false;\n      }\n\n      if ((completedWork.flags & ChildDeletion) !== NoFlags$1) {\n        return true;\n      } // TODO: If we move the `doesRequireClone` call after `bubbleProperties`\n      // then we only have to check the `completedWork.subtreeFlags`.\n\n      var child = completedWork.child;\n\n      while (child !== null) {\n        if (\n          (child.flags & MutationMask) !== NoFlags$1 ||\n          (child.subtreeFlags & MutationMask) !== NoFlags$1\n        ) {\n          return true;\n        }\n\n        child = child.sibling;\n      }\n\n      return false;\n    }\n\n    function appendAllChildren(\n      parent,\n      workInProgress,\n      needsVisibilityToggle,\n      isHidden\n    ) {\n      {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var _node = workInProgress.child;\n\n        while (_node !== null) {\n          if (_node.tag === HostComponent) {\n            var instance = _node.stateNode;\n\n            if (needsVisibilityToggle && isHidden) {\n              instance = cloneHiddenInstance(instance);\n            }\n\n            appendInitialChild(parent, instance);\n          } else if (_node.tag === HostText) {\n            var _instance = _node.stateNode;\n\n            if (needsVisibilityToggle && isHidden) {\n              _instance = cloneHiddenTextInstance();\n            }\n\n            appendInitialChild(parent, _instance);\n          } else if (_node.tag === HostPortal);\n          else if (\n            _node.tag === OffscreenComponent &&\n            _node.memoizedState !== null\n          ) {\n            // The children in this boundary are hidden. Toggle their visibility\n            // before appending.\n            var child = _node.child;\n\n            if (child !== null) {\n              child.return = _node;\n            }\n\n            appendAllChildren(\n              parent,\n              _node,\n              /* needsVisibilityToggle */\n              true,\n              /* isHidden */\n              true\n            );\n          } else if (_node.child !== null) {\n            _node.child.return = _node;\n            _node = _node.child;\n            continue;\n          }\n\n          if (_node === workInProgress) {\n            return;\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          while (_node.sibling === null) {\n            // $FlowFixMe[incompatible-use] found when upgrading Flow\n            if (_node.return === null || _node.return === workInProgress) {\n              return;\n            }\n\n            _node = _node.return;\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          _node.sibling.return = _node.return;\n          _node = _node.sibling;\n        }\n      }\n    } // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n    function appendAllChildrenToContainer(\n      containerChildSet,\n      workInProgress,\n      needsVisibilityToggle,\n      isHidden\n    ) {\n      {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n\n        while (node !== null) {\n          // eslint-disable-next-line no-labels\n          if (node.tag === HostComponent) {\n            var instance = node.stateNode;\n\n            if (needsVisibilityToggle && isHidden) {\n              instance = cloneHiddenInstance(instance);\n            }\n\n            appendChildToContainerChildSet(containerChildSet, instance);\n          } else if (node.tag === HostText) {\n            var _instance2 = node.stateNode;\n\n            if (needsVisibilityToggle && isHidden) {\n              _instance2 = cloneHiddenTextInstance();\n            }\n\n            appendChildToContainerChildSet(containerChildSet, _instance2);\n          } else if (node.tag === HostPortal);\n          else if (\n            node.tag === OffscreenComponent &&\n            node.memoizedState !== null\n          ) {\n            // The children in this boundary are hidden. Toggle their visibility\n            // before appending.\n            var child = node.child;\n\n            if (child !== null) {\n              child.return = node;\n            } // If Offscreen is not in manual mode, detached tree is hidden from user space.\n\n            var _needsVisibilityToggle = !isOffscreenManual(node);\n\n            appendAllChildrenToContainer(\n              containerChildSet,\n              node,\n              /* needsVisibilityToggle */\n              _needsVisibilityToggle,\n              /* isHidden */\n              true\n            );\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          node = node;\n\n          if (node === workInProgress) {\n            return;\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          while (node.sibling === null) {\n            // $FlowFixMe[incompatible-use] found when upgrading Flow\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n\n            node = node.return;\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n    }\n\n    function updateHostContainer(current, workInProgress) {\n      {\n        if (doesRequireClone(current, workInProgress)) {\n          var portalOrRoot = workInProgress.stateNode;\n          var container = portalOrRoot.containerInfo;\n          var newChildSet = createContainerChildSet(); // If children might have changed, we have to add them all to the set.\n\n          appendAllChildrenToContainer(\n            newChildSet,\n            workInProgress,\n            /* needsVisibilityToggle */\n            false,\n            /* isHidden */\n            false\n          );\n          portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n          markUpdate(workInProgress);\n          finalizeContainerChildren(container, newChildSet);\n        }\n      }\n    }\n\n    function updateHostComponent(\n      current,\n      workInProgress,\n      type,\n      newProps,\n      renderLanes\n    ) {\n      {\n        var currentInstance = current.stateNode;\n        var _oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n        // This guarantees that we can reuse all of them.\n\n        var requiresClone = doesRequireClone(current, workInProgress);\n\n        if (!requiresClone && _oldProps === newProps) {\n          // No changes, just reuse the existing instance.\n          // Note that this might release a previous clone.\n          workInProgress.stateNode = currentInstance;\n          return;\n        }\n\n        getHostContext();\n        var newChildSet = null;\n\n        if (requiresClone && passChildrenWhenCloningPersistedNodes) {\n          newChildSet = createContainerChildSet(); // If children might have changed, we have to add them all to the set.\n\n          appendAllChildrenToContainer(\n            newChildSet,\n            workInProgress,\n            /* needsVisibilityToggle */\n            false,\n            /* isHidden */\n            false\n          );\n        }\n\n        var newInstance = cloneInstance(\n          currentInstance,\n          type,\n          _oldProps,\n          newProps,\n          !requiresClone,\n          newChildSet\n        );\n\n        if (newInstance === currentInstance) {\n          // No changes, just reuse the existing instance.\n          // Note that this might release a previous clone.\n          workInProgress.stateNode = currentInstance;\n          return;\n        } // Certain renderers require commit-time effects for initial mount.\n\n        workInProgress.stateNode = newInstance;\n\n        if (!requiresClone) {\n          // If there are no other effects in this tree, we need to flag this node as having one.\n          // Even though we're not going to use it for anything.\n          // Otherwise parents won't know that there are new children to propagate upwards.\n          markUpdate(workInProgress);\n        } else {\n          // If children might have changed, we have to add them all to the set.\n          appendAllChildren(\n            newInstance,\n            workInProgress,\n            /* needsVisibilityToggle */\n            false,\n            /* isHidden */\n            false\n          );\n        }\n      }\n    } // This function must be called at the very end of the complete phase, because\n    // it might throw to suspend, and if the resource immediately loads, the work\n    // loop will resume rendering as if the work-in-progress completed. So it must\n    // fully complete.\n    // TODO: This should ideally move to begin phase, but currently the instance is\n    // not created until the complete phase. For our existing use cases, host nodes\n    // that suspend don't have children, so it doesn't matter. But that might not\n    // always be true in the future.\n\n    function preloadInstanceAndSuspendIfNeeded(\n      workInProgress,\n      type,\n      props,\n      renderLanes\n    ) {\n      {\n        // If this flag was set previously, we can remove it. The flag\n        // represents whether this particular set of props might ever need to\n        // suspend. The safest thing to do is for maySuspendCommit to always\n        // return true, but if the renderer is reasonably confident that the\n        // underlying resource won't be evicted, it can return false as a\n        // performance optimization.\n        workInProgress.flags &= ~MaySuspendCommit;\n        return;\n      } // Mark this fiber with a flag. This gets set on all host instances\n    }\n\n    function scheduleRetryEffect(workInProgress, retryQueue) {\n      var wakeables = retryQueue;\n\n      if (wakeables !== null) {\n        // Schedule an effect to attach a retry listener to the promise.\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      } else {\n        // This boundary suspended, but no wakeables were added to the retry\n        // queue. Check if the renderer suspended commit. If so, this means\n        // that once the fallback is committed, we can immediately retry\n        // rendering again, because rendering wasn't actually blocked. Only\n        // the commit phase.\n        // TODO: Consider a model where we always schedule an immediate retry, even\n        // for normal Suspense. That way the retry can partially render up to the\n        // first thing that suspends.\n        if (workInProgress.flags & ScheduleRetry) {\n          var retryLane = // TODO: This check should probably be moved into claimNextRetryLane\n            // I also suspect that we need some further consolidation of offscreen\n            // and retry lanes.\n            workInProgress.tag !== OffscreenComponent\n              ? claimNextRetryLane()\n              : OffscreenLane;\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, retryLane);\n        }\n      }\n    }\n\n    function updateHostText(current, workInProgress, oldText, newText) {\n      {\n        if (oldText !== newText) {\n          // If the text content differs, we'll create a new text instance for it.\n          var rootContainerInstance = getRootHostContainer();\n          var currentHostContext = getHostContext();\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress\n          ); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n          // This lets the parents know that at least one of their children has changed.\n\n          markUpdate(workInProgress);\n        } else {\n          workInProgress.stateNode = current.stateNode;\n        }\n      }\n    }\n\n    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n      switch (renderState.tailMode) {\n        case \"hidden\": {\n          // Any insertions at the end of the tail list after this point\n          // should be invisible. If there are already mounted boundaries\n          // anything before them are not considered for collapsing.\n          // Therefore we need to go through the whole tail to find if\n          // there are any.\n          var tailNode = renderState.tail;\n          var lastTailNode = null;\n\n          while (tailNode !== null) {\n            if (tailNode.alternate !== null) {\n              lastTailNode = tailNode;\n            }\n\n            tailNode = tailNode.sibling;\n          } // Next we're simply going to delete all insertions after the\n          // last rendered item.\n\n          if (lastTailNode === null) {\n            // All remaining items in the tail are insertions.\n            renderState.tail = null;\n          } else {\n            // Detach the insertion after the last node that was already\n            // inserted.\n            lastTailNode.sibling = null;\n          }\n\n          break;\n        }\n\n        case \"collapsed\": {\n          // Any insertions at the end of the tail list after this point\n          // should be invisible. If there are already mounted boundaries\n          // anything before them are not considered for collapsing.\n          // Therefore we need to go through the whole tail to find if\n          // there are any.\n          var _tailNode = renderState.tail;\n          var _lastTailNode = null;\n\n          while (_tailNode !== null) {\n            if (_tailNode.alternate !== null) {\n              _lastTailNode = _tailNode;\n            }\n\n            _tailNode = _tailNode.sibling;\n          } // Next we're simply going to delete all insertions after the\n          // last rendered item.\n\n          if (_lastTailNode === null) {\n            // All remaining items in the tail are insertions.\n            if (!hasRenderedATailFallback && renderState.tail !== null) {\n              // We suspended during the head. We want to show at least one\n              // row at the tail. So we'll keep on and cut off the rest.\n              renderState.tail.sibling = null;\n            } else {\n              renderState.tail = null;\n            }\n          } else {\n            // Detach the insertion after the last node that was already\n            // inserted.\n            _lastTailNode.sibling = null;\n          }\n\n          break;\n        }\n      }\n    }\n\n    function bubbleProperties(completedWork) {\n      var didBailout =\n        completedWork.alternate !== null &&\n        completedWork.alternate.child === completedWork.child;\n      var newChildLanes = NoLanes;\n      var subtreeFlags = NoFlags$1;\n\n      if (!didBailout) {\n        // Bubble up the earliest expiration time.\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          // In profiling mode, resetChildExpirationTime is also used to reset\n          // profiler durations.\n          var actualDuration = completedWork.actualDuration;\n          var treeBaseDuration = completedWork.selfBaseDuration;\n          var child = completedWork.child;\n\n          while (child !== null) {\n            newChildLanes = mergeLanes(\n              newChildLanes,\n              mergeLanes(child.lanes, child.childLanes)\n            );\n            subtreeFlags |= child.subtreeFlags;\n            subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n            // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n            // When work is done, it should bubble to the parent's actualDuration. If\n            // the fiber has not been cloned though, (meaning no work was done), then\n            // this value will reflect the amount of time spent working on a previous\n            // render. In that case it should not bubble. We determine whether it was\n            // cloned by comparing the child pointer.\n            // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n\n            actualDuration += child.actualDuration; // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n\n            treeBaseDuration += child.treeBaseDuration;\n            child = child.sibling;\n          }\n\n          completedWork.actualDuration = actualDuration;\n          completedWork.treeBaseDuration = treeBaseDuration;\n        } else {\n          var _child = completedWork.child;\n\n          while (_child !== null) {\n            newChildLanes = mergeLanes(\n              newChildLanes,\n              mergeLanes(_child.lanes, _child.childLanes)\n            );\n            subtreeFlags |= _child.subtreeFlags;\n            subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n            // smell because it assumes the commit phase is never concurrent with\n            // the render phase. Will address during refactor to alternate model.\n\n            _child.return = completedWork;\n            _child = _child.sibling;\n          }\n        }\n\n        completedWork.subtreeFlags |= subtreeFlags;\n      } else {\n        // Bubble up the earliest expiration time.\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          // In profiling mode, resetChildExpirationTime is also used to reset\n          // profiler durations.\n          var _treeBaseDuration = completedWork.selfBaseDuration;\n          var _child2 = completedWork.child;\n\n          while (_child2 !== null) {\n            newChildLanes = mergeLanes(\n              newChildLanes,\n              mergeLanes(_child2.lanes, _child2.childLanes)\n            ); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n            // so we should bubble those up even during a bailout. All the other\n            // flags have a lifetime only of a single render + commit, so we should\n            // ignore them.\n\n            subtreeFlags |= _child2.subtreeFlags & StaticMask;\n            subtreeFlags |= _child2.flags & StaticMask; // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n\n            _treeBaseDuration += _child2.treeBaseDuration;\n            _child2 = _child2.sibling;\n          }\n\n          completedWork.treeBaseDuration = _treeBaseDuration;\n        } else {\n          var _child3 = completedWork.child;\n\n          while (_child3 !== null) {\n            newChildLanes = mergeLanes(\n              newChildLanes,\n              mergeLanes(_child3.lanes, _child3.childLanes)\n            ); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n            // so we should bubble those up even during a bailout. All the other\n            // flags have a lifetime only of a single render + commit, so we should\n            // ignore them.\n\n            subtreeFlags |= _child3.subtreeFlags & StaticMask;\n            subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n            // smell because it assumes the commit phase is never concurrent with\n            // the render phase. Will address during refactor to alternate model.\n\n            _child3.return = completedWork;\n            _child3 = _child3.sibling;\n          }\n        }\n\n        completedWork.subtreeFlags |= subtreeFlags;\n      }\n\n      completedWork.childLanes = newChildLanes;\n      return didBailout;\n    }\n\n    function completeDehydratedSuspenseBoundary(\n      current,\n      workInProgress,\n      nextState\n    ) {\n      var wasHydrated = popHydrationState();\n\n      if (nextState !== null && nextState.dehydrated !== null) {\n        // We might be inside a hydration state the first time we're picking up this\n        // Suspense boundary, and also after we've reentered it for further hydration.\n        if (current === null) {\n          if (!wasHydrated) {\n            throw new Error(\n              \"A dehydrated suspense component was completed without a hydrated node. \" +\n                \"This is probably a bug in React.\"\n            );\n          }\n\n          prepareToHydrateHostSuspenseInstance();\n          bubbleProperties(workInProgress);\n\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              var isTimedOutSuspense = nextState !== null;\n\n              if (isTimedOutSuspense) {\n                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                var primaryChildFragment = workInProgress.child;\n\n                if (primaryChildFragment !== null) {\n                  // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n                  workInProgress.treeBaseDuration -=\n                    primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n\n          return false;\n        } else {\n          if ((workInProgress.flags & DidCapture) === NoFlags$1) {\n            // This boundary did not suspend so it's now hydrated and unsuspended.\n            workInProgress.memoizedState = null;\n          } // If nothing suspended, we need to schedule an effect to mark this boundary\n          // as having hydrated so events know that they're free to be invoked.\n          // It's also a signal to replay events and the suspense callback.\n          // If something suspended, schedule an effect to attach retry listeners.\n          // So we might as well always mark this.\n\n          workInProgress.flags |= Update;\n          bubbleProperties(workInProgress);\n\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              var _isTimedOutSuspense = nextState !== null;\n\n              if (_isTimedOutSuspense) {\n                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                var _primaryChildFragment = workInProgress.child;\n\n                if (_primaryChildFragment !== null) {\n                  // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n                  workInProgress.treeBaseDuration -=\n                    _primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n\n          return false;\n        }\n      } else {\n        // Successfully completed this tree. If this was a forced client render,\n        // there may have been recoverable errors during first hydration\n        // attempt. If so, add them to a queue so we can log them in the\n        // commit phase.\n        upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n\n        return true;\n      }\n    }\n\n    function completeWork(current, workInProgress, renderLanes) {\n      var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n        case LazyComponent:\n        case SimpleMemoComponent:\n        case FunctionComponent:\n        case ForwardRef:\n        case Fragment:\n        case Mode:\n        case Profiler:\n        case ContextConsumer:\n        case MemoComponent:\n          bubbleProperties(workInProgress);\n          return null;\n\n        case ClassComponent: {\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        case HostRoot: {\n          var fiberRoot = workInProgress.stateNode;\n          popHostContainer(workInProgress);\n\n          if (fiberRoot.pendingContext) {\n            fiberRoot.context = fiberRoot.pendingContext;\n            fiberRoot.pendingContext = null;\n          }\n\n          if (current === null || current.child === null) {\n            // If we hydrated, pop so that we can delete any remaining children\n            // that weren't hydrated.\n            var wasHydrated = popHydrationState();\n\n            if (wasHydrated) {\n              // If we hydrated, then we'll need to schedule an update for\n              // the commit side-effects on the root.\n              markUpdate(workInProgress);\n            } else {\n              if (current !== null) {\n                var prevState = current.memoizedState;\n\n                if (\n                  // Check if this is a client root\n                  !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n                  (workInProgress.flags & ForceClientRender) !== NoFlags$1\n                ) {\n                  // Schedule an effect to clear this container at the start of the\n                  // next commit. This handles the case of React rendering into a\n                  // container with previous children. It's also safe to do for\n                  // updates too, because current.child would only be null if the\n                  // previous render was null (so the container would already\n                  // be empty).\n                  workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                  // recoverable errors during first hydration attempt. If so, add\n                  // them to a queue so we can log them in the commit phase.\n\n                  upgradeHydrationErrorsToRecoverable();\n                }\n              }\n            }\n          }\n\n          updateHostContainer(current, workInProgress);\n          bubbleProperties(workInProgress);\n\n          return null;\n        }\n\n        case HostHoistable:\n\n        case HostSingleton:\n\n        case HostComponent: {\n          popHostContext(workInProgress);\n          var _type2 = workInProgress.type;\n\n          if (current !== null && workInProgress.stateNode != null) {\n            updateHostComponent(current, workInProgress, _type2, newProps);\n          } else {\n            if (!newProps) {\n              if (workInProgress.stateNode === null) {\n                throw new Error(\n                  \"We must have new props for new mounts. This error is likely \" +\n                    \"caused by a bug in React. Please file an issue.\"\n                );\n              } // This can happen when we abort work.\n\n              bubbleProperties(workInProgress);\n              return null;\n            }\n\n            var _currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n            // \"stack\" as the parent. Then append children as we go in beginWork\n            // or completeWork depending on whether we want to add them top->down or\n            // bottom->up. Top->down is faster in IE11.\n\n            var _wasHydrated2 = popHydrationState();\n\n            if (_wasHydrated2) {\n              // TODO: Move this and createInstance step into the beginPhase\n              // to consolidate.\n              prepareToHydrateHostInstance();\n            } else {\n              var _rootContainerInstance = getRootHostContainer();\n\n              var _instance3 = createInstance(\n                _type2,\n                newProps,\n                _rootContainerInstance,\n                _currentHostContext,\n                workInProgress\n              ); // TODO: For persistent renderers, we should pass children as part\n              // of the initial instance creation\n\n              appendAllChildren(_instance3, workInProgress, false, false);\n              workInProgress.stateNode = _instance3; // Certain renderers require commit-time effects for initial mount.\n            }\n          }\n\n          bubbleProperties(workInProgress); // This must come at the very end of the complete phase, because it might\n          // throw to suspend, and if the resource immediately loads, the work loop\n          // will resume rendering as if the work-in-progress completed. So it must\n          // fully complete.\n\n          preloadInstanceAndSuspendIfNeeded(workInProgress);\n          return null;\n        }\n\n        case HostText: {\n          var newText = newProps;\n\n          if (current && workInProgress.stateNode != null) {\n            var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n            // to schedule a side-effect to do the updates.\n\n            updateHostText(current, workInProgress, oldText, newText);\n          } else {\n            if (typeof newText !== \"string\") {\n              if (workInProgress.stateNode === null) {\n                throw new Error(\n                  \"We must have new props for new mounts. This error is likely \" +\n                    \"caused by a bug in React. Please file an issue.\"\n                );\n              } // This can happen when we abort work.\n            }\n\n            var _rootContainerInstance2 = getRootHostContainer();\n\n            var _currentHostContext2 = getHostContext();\n\n            var _wasHydrated3 = popHydrationState();\n\n            if (_wasHydrated3) {\n              if (prepareToHydrateHostTextInstance()) {\n                markUpdate(workInProgress);\n              }\n            } else {\n              workInProgress.stateNode = createTextInstance(\n                newText,\n                _rootContainerInstance2,\n                _currentHostContext2,\n                workInProgress\n              );\n            }\n          }\n\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        case SuspenseComponent: {\n          var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n          // to its own fiber type so that we can add other kinds of hydration\n          // boundaries that aren't associated with a Suspense tree. In anticipation\n          // of such a refactor, all the hydration logic is contained in\n          // this branch.\n\n          if (\n            current === null ||\n            (current.memoizedState !== null &&\n              current.memoizedState.dehydrated !== null)\n          ) {\n            var fallthroughToNormalSuspensePath =\n              completeDehydratedSuspenseBoundary(\n                current,\n                workInProgress,\n                nextState\n              );\n\n            if (!fallthroughToNormalSuspensePath) {\n              if (workInProgress.flags & ForceClientRender) {\n                popSuspenseHandler(workInProgress); // Special case. There were remaining unhydrated nodes. We treat\n                // this as a mismatch. Revert to client rendering.\n\n                return workInProgress;\n              } else {\n                popSuspenseHandler(workInProgress); // Did not finish hydrating, either because this is the initial\n                // render or because something suspended.\n\n                return null;\n              }\n            } // Continue with the normal Suspense path.\n          }\n\n          popSuspenseHandler(workInProgress);\n\n          if ((workInProgress.flags & DidCapture) !== NoFlags$1) {\n            // Something suspended. Re-render with the fallback children.\n            workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              transferActualDuration(workInProgress);\n            } // Don't bubble properties in this case.\n\n            return workInProgress;\n          }\n\n          var nextDidTimeout = nextState !== null;\n          var prevDidTimeout =\n            current !== null && current.memoizedState !== null;\n          // a passive effect, which is when we process the transitions\n\n          if (nextDidTimeout !== prevDidTimeout) {\n            // an effect to toggle the subtree's visibility. When we switch from\n            // fallback -> primary, the inner Offscreen fiber schedules this effect\n            // as part of its normal complete phase. But when we switch from\n            // primary -> fallback, the inner Offscreen fiber does not have a complete\n            // phase. So we need to schedule its effect here.\n            //\n            // We also use this flag to connect/disconnect the effects, but the same\n            // logic applies: when re-connecting, the Offscreen fiber's complete\n            // phase will handle scheduling the effect. It's only when the fallback\n            // is active that we have to do anything special.\n\n            if (nextDidTimeout) {\n              var _offscreenFiber2 = workInProgress.child;\n              _offscreenFiber2.flags |= Visibility;\n            }\n          }\n\n          var retryQueue = workInProgress.updateQueue;\n          scheduleRetryEffect(workInProgress, retryQueue);\n\n          bubbleProperties(workInProgress);\n\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              if (nextDidTimeout) {\n                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                var primaryChildFragment = workInProgress.child;\n\n                if (primaryChildFragment !== null) {\n                  // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n                  workInProgress.treeBaseDuration -=\n                    primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n\n          return null;\n        }\n\n        case HostPortal:\n          popHostContainer(workInProgress);\n          updateHostContainer(current, workInProgress);\n\n          bubbleProperties(workInProgress);\n          return null;\n\n        case ContextProvider:\n          // Pop provider fiber\n          var context;\n\n          {\n            context = workInProgress.type._context;\n          }\n\n          popProvider(context, workInProgress);\n          bubbleProperties(workInProgress);\n          return null;\n\n        case IncompleteClassComponent: {\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        case SuspenseListComponent: {\n          popSuspenseListContext(workInProgress);\n          var renderState = workInProgress.memoizedState;\n\n          if (renderState === null) {\n            // We're running in the default, \"independent\" mode.\n            // We don't do anything in this mode.\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n          var didSuspendAlready =\n            (workInProgress.flags & DidCapture) !== NoFlags$1;\n          var renderedTail = renderState.rendering;\n\n          if (renderedTail === null) {\n            // We just rendered the head.\n            if (!didSuspendAlready) {\n              // This is the first pass. We need to figure out if anything is still\n              // suspended in the rendered set.\n              // If new content unsuspended, but there's still some content that\n              // didn't. Then we need to do a second pass that forces everything\n              // to keep showing their fallbacks.\n              // We might be suspended if something in this render pass suspended, or\n              // something in the previous committed pass suspended. Otherwise,\n              // there's no chance so we can skip the expensive call to\n              // findFirstSuspended.\n              var cannotBeSuspended =\n                renderHasNotSuspendedYet() &&\n                (current === null ||\n                  (current.flags & DidCapture) === NoFlags$1);\n\n              if (!cannotBeSuspended) {\n                var row = workInProgress.child;\n\n                while (row !== null) {\n                  var suspended = findFirstSuspended(row);\n\n                  if (suspended !== null) {\n                    didSuspendAlready = true;\n                    workInProgress.flags |= DidCapture;\n                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                    // part of the second pass. In that case nothing will subscribe to\n                    // its thenables. Instead, we'll transfer its thenables to the\n                    // SuspenseList so that it can retry if they resolve.\n                    // There might be multiple of these in the list but since we're\n                    // going to wait for all of them anyway, it doesn't really matter\n                    // which ones gets to ping. In theory we could get clever and keep\n                    // track of how many dependencies remain but it gets tricky because\n                    // in the meantime, we can add/remove/change items and dependencies.\n                    // We might bail out of the loop before finding any but that\n                    // doesn't matter since that means that the other boundaries that\n                    // we did find already has their listeners attached.\n\n                    var _retryQueue = suspended.updateQueue;\n                    workInProgress.updateQueue = _retryQueue;\n                    scheduleRetryEffect(workInProgress, _retryQueue); // Rerender the whole list, but this time, we'll force fallbacks\n                    // to stay in place.\n                    // Reset the effect flags before doing the second pass since that's now invalid.\n                    // Reset the child fibers to their original state.\n\n                    workInProgress.subtreeFlags = NoFlags$1;\n                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense List Context to force suspense and\n                    // immediately rerender the children.\n\n                    pushSuspenseListContext(\n                      workInProgress,\n                      setShallowSuspenseListContext(\n                        suspenseStackCursor.current,\n                        ForceSuspenseFallback\n                      )\n                    ); // Don't bubble properties in this case.\n\n                    return workInProgress.child;\n                  }\n\n                  row = row.sibling;\n                }\n              }\n\n              if (\n                renderState.tail !== null &&\n                now$1() > getRenderTargetTime()\n              ) {\n                // We have already passed our CPU deadline but we still have rows\n                // left in the tail. We'll just give up further attempts to render\n                // the main content and only render fallbacks.\n                workInProgress.flags |= DidCapture;\n                didSuspendAlready = true;\n                cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                // to get it started back up to attempt the next item. While in terms\n                // of priority this work has the same priority as this current render,\n                // it's not part of the same transition once the transition has\n                // committed. If it's sync, we still want to yield so that it can be\n                // painted. Conceptually, this is really the same as pinging.\n                // We can use any RetryLane even if it's the one currently rendering\n                // since we're leaving it behind on this node.\n\n                workInProgress.lanes = SomeRetryLane;\n              }\n            } else {\n              cutOffTailIfNeeded(renderState, false);\n            } // Next we're going to render the tail.\n          } else {\n            // Append the rendered row to the child list.\n            if (!didSuspendAlready) {\n              var _suspended = findFirstSuspended(renderedTail);\n\n              if (_suspended !== null) {\n                workInProgress.flags |= DidCapture;\n                didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n                // get lost if this row ends up dropped during a second pass.\n\n                var _retryQueue2 = _suspended.updateQueue;\n                workInProgress.updateQueue = _retryQueue2;\n                scheduleRetryEffect(workInProgress, _retryQueue2);\n                cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n                if (\n                  renderState.tail === null &&\n                  renderState.tailMode === \"hidden\" &&\n                  !renderedTail.alternate &&\n                  !getIsHydrating() // We don't cut it if we're hydrating.\n                ) {\n                  // We're done.\n                  bubbleProperties(workInProgress);\n                  return null;\n                }\n              } else if (\n                // The time it took to render last row is greater than the remaining\n                // time we have to render. So rendering one more row would likely\n                // exceed it.\n                now$1() * 2 - renderState.renderingStartTime >\n                  getRenderTargetTime() &&\n                renderLanes !== OffscreenLane\n              ) {\n                // We have now passed our CPU deadline and we'll just give up further\n                // attempts to render the main content and only render fallbacks.\n                // The assumption is that this is usually faster.\n                workInProgress.flags |= DidCapture;\n                didSuspendAlready = true;\n                cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                // to get it started back up to attempt the next item. While in terms\n                // of priority this work has the same priority as this current render,\n                // it's not part of the same transition once the transition has\n                // committed. If it's sync, we still want to yield so that it can be\n                // painted. Conceptually, this is really the same as pinging.\n                // We can use any RetryLane even if it's the one currently rendering\n                // since we're leaving it behind on this node.\n\n                workInProgress.lanes = SomeRetryLane;\n              }\n            }\n\n            if (renderState.isBackwards) {\n              // The effect list of the backwards tail will have been added\n              // to the end. This breaks the guarantee that life-cycles fire in\n              // sibling order but that isn't a strong guarantee promised by React.\n              // Especially since these might also just pop in during future commits.\n              // Append to the beginning of the list.\n              renderedTail.sibling = workInProgress.child;\n              workInProgress.child = renderedTail;\n            } else {\n              var previousSibling = renderState.last;\n\n              if (previousSibling !== null) {\n                previousSibling.sibling = renderedTail;\n              } else {\n                workInProgress.child = renderedTail;\n              }\n\n              renderState.last = renderedTail;\n            }\n          }\n\n          if (renderState.tail !== null) {\n            // We still have tail rows to render.\n            // Pop a row.\n            var next = renderState.tail;\n            renderState.rendering = next;\n            renderState.tail = next.sibling;\n            renderState.renderingStartTime = now$1();\n            next.sibling = null; // Restore the context.\n            // TODO: We can probably just avoid popping it instead and only\n            // setting it the first time we go from not suspended to suspended.\n\n            var suspenseContext = suspenseStackCursor.current;\n\n            if (didSuspendAlready) {\n              suspenseContext = setShallowSuspenseListContext(\n                suspenseContext,\n                ForceSuspenseFallback\n              );\n            } else {\n              suspenseContext =\n                setDefaultShallowSuspenseListContext(suspenseContext);\n            }\n\n            pushSuspenseListContext(workInProgress, suspenseContext); // Do a pass over the next row.\n            // Don't bubble properties in this case.\n\n            return next;\n          }\n\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        case ScopeComponent: {\n          break;\n        }\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent: {\n          popSuspenseHandler(workInProgress);\n          popHiddenContext(workInProgress);\n          var _nextState = workInProgress.memoizedState;\n          var nextIsHidden = _nextState !== null; // Schedule a Visibility effect if the visibility has changed\n\n          {\n            if (current !== null) {\n              var _prevState = current.memoizedState;\n              var prevIsHidden = _prevState !== null;\n\n              if (prevIsHidden !== nextIsHidden) {\n                workInProgress.flags |= Visibility;\n              }\n            } else {\n              // On initial mount, we only need a Visibility effect if the tree\n              // is hidden.\n              if (nextIsHidden) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n          }\n\n          if (\n            !nextIsHidden ||\n            (workInProgress.mode & ConcurrentMode) === NoMode\n          ) {\n            bubbleProperties(workInProgress);\n          } else {\n            // Don't bubble properties for hidden children unless we're rendering\n            // at offscreen priority.\n            if (\n              includesSomeLane(renderLanes, OffscreenLane) && // Also don't bubble if the tree suspended\n              (workInProgress.flags & DidCapture) === NoLanes\n            ) {\n              bubbleProperties(workInProgress); // Check if there was an insertion or update in the hidden subtree.\n              // If so, we need to hide those nodes in the commit phase, so\n              // schedule a visibility effect.\n\n              if (workInProgress.subtreeFlags & (Placement | Update)) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n          }\n\n          var offscreenQueue = workInProgress.updateQueue;\n\n          if (offscreenQueue !== null) {\n            var _retryQueue3 = offscreenQueue.retryQueue;\n            scheduleRetryEffect(workInProgress, _retryQueue3);\n          }\n          return null;\n        }\n\n        case CacheComponent: {\n          return null;\n        }\n\n        case TracingMarkerComponent: {\n          return null;\n        }\n      }\n\n      throw new Error(\n        \"Unknown unit of work tag (\" +\n          workInProgress.tag +\n          \"). This error is likely caused by a bug in \" +\n          \"React. Please file an issue.\"\n      );\n    }\n\n    function unwindWork(current, workInProgress, renderLanes) {\n      switch (workInProgress.tag) {\n        case ClassComponent: {\n          var flags = workInProgress.flags;\n\n          if (flags & ShouldCapture) {\n            workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              transferActualDuration(workInProgress);\n            }\n\n            return workInProgress;\n          }\n\n          return null;\n        }\n\n        case HostRoot: {\n          popHostContainer(workInProgress);\n          var _flags = workInProgress.flags;\n\n          if (\n            (_flags & ShouldCapture) !== NoFlags$1 &&\n            (_flags & DidCapture) === NoFlags$1\n          ) {\n            // There was an error during render that wasn't captured by a suspense\n            // boundary. Do a second pass on the root to unmount the children.\n            workInProgress.flags = (_flags & ~ShouldCapture) | DidCapture;\n            return workInProgress;\n          } // We unwound to the root without completing it. Exit.\n\n          return null;\n        }\n\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent: {\n          // TODO: popHydrationState\n          popHostContext(workInProgress);\n          return null;\n        }\n\n        case SuspenseComponent: {\n          popSuspenseHandler(workInProgress);\n          var suspenseState = workInProgress.memoizedState;\n\n          if (suspenseState !== null && suspenseState.dehydrated !== null) {\n            if (workInProgress.alternate === null) {\n              throw new Error(\n                \"Threw in newly mounted dehydrated component. This is likely a bug in \" +\n                  \"React. Please file an issue.\"\n              );\n            }\n          }\n\n          var _flags2 = workInProgress.flags;\n\n          if (_flags2 & ShouldCapture) {\n            workInProgress.flags = (_flags2 & ~ShouldCapture) | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              transferActualDuration(workInProgress);\n            }\n\n            return workInProgress;\n          }\n\n          return null;\n        }\n\n        case SuspenseListComponent: {\n          popSuspenseListContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n          // caught by a nested boundary. If not, it should bubble through.\n\n          return null;\n        }\n\n        case HostPortal:\n          popHostContainer(workInProgress);\n          return null;\n\n        case ContextProvider:\n          var context;\n\n          {\n            context = workInProgress.type._context;\n          }\n\n          popProvider(context, workInProgress);\n          return null;\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent: {\n          popSuspenseHandler(workInProgress);\n          popHiddenContext(workInProgress);\n          var _flags3 = workInProgress.flags;\n\n          if (_flags3 & ShouldCapture) {\n            workInProgress.flags = (_flags3 & ~ShouldCapture) | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              transferActualDuration(workInProgress);\n            }\n\n            return workInProgress;\n          }\n\n          return null;\n        }\n\n        case CacheComponent:\n          return null;\n\n        case TracingMarkerComponent:\n          return null;\n\n        default:\n          return null;\n      }\n    }\n\n    function unwindInterruptedWork(current, interruptedWork, renderLanes) {\n      switch (interruptedWork.tag) {\n        case ClassComponent: {\n          break;\n        }\n\n        case HostRoot: {\n          popHostContainer(interruptedWork);\n          break;\n        }\n\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent: {\n          popHostContext(interruptedWork);\n          break;\n        }\n\n        case HostPortal:\n          popHostContainer(interruptedWork);\n          break;\n\n        case SuspenseComponent:\n          popSuspenseHandler(interruptedWork);\n          break;\n\n        case SuspenseListComponent:\n          popSuspenseListContext(interruptedWork);\n          break;\n\n        case ContextProvider:\n          var context;\n\n          {\n            context = interruptedWork.type._context;\n          }\n\n          popProvider(context, interruptedWork);\n          break;\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          popSuspenseHandler(interruptedWork);\n          popHiddenContext(interruptedWork);\n          break;\n      }\n    }\n\n    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n\n    {\n      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n    } // Used during the commit phase to track the state of the Offscreen component stack.\n    // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n\n    var offscreenSubtreeIsHidden = false;\n    var offscreenSubtreeWasHidden = false;\n    var PossiblyWeakSet = typeof WeakSet === \"function\" ? WeakSet : Set;\n    var nextEffect = null; // Used for Profiling builds to track updaters.\n\n    var inProgressLanes = null;\n    var inProgressRoot = null;\n\n    function shouldProfile(current) {\n      return (\n        (current.mode & ProfileMode) !== NoMode &&\n        (getExecutionContext() & CommitContext) !== NoContext\n      );\n    }\n\n    function callComponentWillUnmountWithTimer(current, instance) {\n      instance.props = current.memoizedProps;\n      instance.state = current.memoizedState;\n\n      if (shouldProfile(current)) {\n        try {\n          startLayoutEffectTimer();\n          instance.componentWillUnmount();\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        instance.componentWillUnmount();\n      }\n    } // Capture errors so they don't interrupt unmounting.\n\n    function safelyCallComponentWillUnmount(\n      current,\n      nearestMountedAncestor,\n      instance\n    ) {\n      try {\n        callComponentWillUnmountWithTimer(current, instance);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } // Capture errors so they don't interrupt mounting.\n\n    function safelyAttachRef(current, nearestMountedAncestor) {\n      try {\n        commitAttachRef(current);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n\n    function safelyDetachRef(current, nearestMountedAncestor) {\n      var ref = current.ref;\n      var refCleanup = current.refCleanup;\n\n      if (ref !== null) {\n        if (typeof refCleanup === \"function\") {\n          try {\n            if (shouldProfile(current)) {\n              try {\n                startLayoutEffectTimer();\n                refCleanup();\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              refCleanup();\n            }\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          } finally {\n            // `refCleanup` has been called. Nullify all references to it to prevent double invocation.\n            current.refCleanup = null;\n            var finishedWork = current.alternate;\n\n            if (finishedWork != null) {\n              finishedWork.refCleanup = null;\n            }\n          }\n        } else if (typeof ref === \"function\") {\n          var retVal;\n\n          try {\n            if (shouldProfile(current)) {\n              try {\n                startLayoutEffectTimer();\n                retVal = ref(null);\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              retVal = ref(null);\n            }\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          }\n\n          {\n            if (typeof retVal === \"function\") {\n              error(\n                \"Unexpected return value from a callback ref in %s. \" +\n                  \"A callback ref should not return a function.\",\n                getComponentNameFromFiber(current)\n              );\n            }\n          }\n        } else {\n          // $FlowFixMe[incompatible-use] unable to narrow type to RefObject\n          ref.current = null;\n        }\n      }\n    }\n\n    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n      try {\n        destroy();\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    var shouldFireAfterActiveInstanceBlur = false;\n    function commitBeforeMutationEffects(root, firstChild) {\n      nextEffect = firstChild;\n      commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n      var shouldFire = shouldFireAfterActiveInstanceBlur;\n      shouldFireAfterActiveInstanceBlur = false;\n      return shouldFire;\n    }\n\n    function commitBeforeMutationEffects_begin() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n        var child = fiber.child;\n\n        if (\n          (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags$1 &&\n          child !== null\n        ) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitBeforeMutationEffects_complete();\n        }\n      }\n    }\n\n    function commitBeforeMutationEffects_complete() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n\n        try {\n          commitBeforeMutationEffectsOnFiber(fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n\n        resetCurrentFiber();\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitBeforeMutationEffectsOnFiber(finishedWork) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags;\n\n      if ((flags & Snapshot) !== NoFlags$1) {\n        setCurrentFiber(finishedWork);\n      }\n\n      switch (finishedWork.tag) {\n        case FunctionComponent: {\n          break;\n        }\n\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          break;\n        }\n\n        case ClassComponent: {\n          if ((flags & Snapshot) !== NoFlags$1) {\n            if (current !== null) {\n              var prevProps = current.memoizedProps;\n              var prevState = current.memoizedState;\n              var instance = finishedWork.stateNode; // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n\n              {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    error(\n                      \"Expected %s props to match memoized props before \" +\n                        \"getSnapshotBeforeUpdate. \" +\n                        \"This might either be because of a bug in React, or because \" +\n                        \"a component reassigns its own `this.props`. \" +\n                        \"Please file an issue.\",\n                      getComponentNameFromFiber(finishedWork) || \"instance\"\n                    );\n                  }\n\n                  if (instance.state !== finishedWork.memoizedState) {\n                    error(\n                      \"Expected %s state to match memoized state before \" +\n                        \"getSnapshotBeforeUpdate. \" +\n                        \"This might either be because of a bug in React, or because \" +\n                        \"a component reassigns its own `this.state`. \" +\n                        \"Please file an issue.\",\n                      getComponentNameFromFiber(finishedWork) || \"instance\"\n                    );\n                  }\n                }\n              }\n\n              var snapshot = instance.getSnapshotBeforeUpdate(\n                finishedWork.elementType === finishedWork.type\n                  ? prevProps\n                  : resolveDefaultProps(finishedWork.type, prevProps),\n                prevState\n              );\n\n              {\n                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n                if (\n                  snapshot === undefined &&\n                  !didWarnSet.has(finishedWork.type)\n                ) {\n                  didWarnSet.add(finishedWork.type);\n\n                  error(\n                    \"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) \" +\n                      \"must be returned. You have returned undefined.\",\n                    getComponentNameFromFiber(finishedWork)\n                  );\n                }\n              }\n\n              instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n            }\n          }\n\n          break;\n        }\n\n        case HostRoot: {\n          break;\n        }\n\n        case HostComponent:\n        case HostHoistable:\n        case HostSingleton:\n        case HostText:\n        case HostPortal:\n        case IncompleteClassComponent:\n          // Nothing to do for these component types\n          break;\n\n        default: {\n          if ((flags & Snapshot) !== NoFlags$1) {\n            throw new Error(\n              \"This unit of work tag should not have side-effects. This error is \" +\n                \"likely caused by a bug in React. Please file an issue.\"\n            );\n          }\n        }\n      }\n\n      if ((flags & Snapshot) !== NoFlags$1) {\n        resetCurrentFiber();\n      }\n    }\n\n    function commitHookEffectListUnmount(\n      flags,\n      finishedWork,\n      nearestMountedAncestor\n    ) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n\n        do {\n          if ((effect.tag & flags) === flags) {\n            // Unmount\n            var inst = effect.inst;\n            var destroy = inst.destroy;\n\n            if (destroy !== undefined) {\n              inst.destroy = undefined;\n\n              {\n                if ((flags & Insertion) !== NoFlags) {\n                  setIsRunningInsertionEffect(true);\n                }\n              }\n\n              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n\n              {\n                if ((flags & Insertion) !== NoFlags) {\n                  setIsRunningInsertionEffect(false);\n                }\n              }\n            }\n          }\n\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n\n    function commitHookEffectListMount(flags, finishedWork) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n\n        do {\n          if ((effect.tag & flags) === flags) {\n            var create = effect.create;\n\n            {\n              if ((flags & Insertion) !== NoFlags) {\n                setIsRunningInsertionEffect(true);\n              }\n            }\n\n            var inst = effect.inst;\n            var destroy = create();\n            inst.destroy = destroy;\n\n            {\n              if ((flags & Insertion) !== NoFlags) {\n                setIsRunningInsertionEffect(false);\n              }\n            }\n\n            {\n              if (destroy !== undefined && typeof destroy !== \"function\") {\n                var hookName = void 0;\n\n                if ((effect.tag & Layout) !== NoFlags$1) {\n                  hookName = \"useLayoutEffect\";\n                } else if ((effect.tag & Insertion) !== NoFlags$1) {\n                  hookName = \"useInsertionEffect\";\n                } else {\n                  hookName = \"useEffect\";\n                }\n\n                var addendum = void 0;\n\n                if (destroy === null) {\n                  addendum =\n                    \" You returned null. If your effect does not require clean \" +\n                    \"up, return undefined (or nothing).\";\n                } else if (typeof destroy.then === \"function\") {\n                  addendum =\n                    \"\\n\\nIt looks like you wrote \" +\n                    hookName +\n                    \"(async () => ...) or returned a Promise. \" +\n                    \"Instead, write the async function inside your effect \" +\n                    \"and call it immediately:\\n\\n\" +\n                    hookName +\n                    \"(() => {\\n\" +\n                    \"  async function fetchData() {\\n\" +\n                    \"    // You can await here\\n\" +\n                    \"    const response = await MyAPI.getData(someId);\\n\" +\n                    \"    // ...\\n\" +\n                    \"  }\\n\" +\n                    \"  fetchData();\\n\" +\n                    \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" +\n                    \"Learn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching\";\n                } else {\n                  addendum = \" You returned: \" + destroy;\n                }\n\n                error(\n                  \"%s must not return anything besides a function, \" +\n                    \"which is used for clean-up.%s\",\n                  hookName,\n                  addendum\n                );\n              }\n            }\n          }\n\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n\n    function commitPassiveEffectDurations(finishedRoot, finishedWork) {\n      if (getExecutionContext() & CommitContext) {\n        // Only Profilers with work in their subtree will have an Update effect scheduled.\n        if ((finishedWork.flags & Update) !== NoFlags$1) {\n          switch (finishedWork.tag) {\n            case Profiler: {\n              var passiveEffectDuration =\n                finishedWork.stateNode.passiveEffectDuration;\n              var _finishedWork$memoize = finishedWork.memoizedProps,\n                id = _finishedWork$memoize.id,\n                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n              // It does not get reset until the start of the next commit phase.\n\n              var commitTime = getCommitTime();\n              var phase = finishedWork.alternate === null ? \"mount\" : \"update\";\n\n              {\n                if (isCurrentUpdateNested()) {\n                  phase = \"nested-update\";\n                }\n              }\n\n              if (typeof onPostCommit === \"function\") {\n                onPostCommit(id, phase, passiveEffectDuration, commitTime);\n              } // Bubble times to the next nearest ancestor Profiler.\n              // After we process that Profiler, we'll bubble further up.\n\n              var parentFiber = finishedWork.return;\n\n              outer: while (parentFiber !== null) {\n                switch (parentFiber.tag) {\n                  case HostRoot:\n                    var root = parentFiber.stateNode;\n                    root.passiveEffectDuration += passiveEffectDuration;\n                    break outer;\n\n                  case Profiler:\n                    var parentStateNode = parentFiber.stateNode;\n                    parentStateNode.passiveEffectDuration +=\n                      passiveEffectDuration;\n                    break outer;\n                }\n\n                parentFiber = parentFiber.return;\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    function commitHookLayoutEffects(finishedWork, hookFlags) {\n      // At this point layout effects have already been destroyed (during mutation phase).\n      // This is done to prevent sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (shouldProfile(finishedWork)) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n\n        recordLayoutEffectDuration(finishedWork);\n      } else {\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n\n    function commitClassLayoutLifecycles(finishedWork, current) {\n      var instance = finishedWork.stateNode;\n\n      if (current === null) {\n        // We could update instance props and state here,\n        // but instead we rely on them being set during last render.\n        // TODO: revisit this when we implement resuming.\n        {\n          if (\n            finishedWork.type === finishedWork.elementType &&\n            !didWarnAboutReassigningProps\n          ) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\n                \"Expected %s props to match memoized props before \" +\n                  \"componentDidMount. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.props`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\n                \"Expected %s state to match memoized state before \" +\n                  \"componentDidMount. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.state`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n          }\n        }\n\n        if (shouldProfile(finishedWork)) {\n          try {\n            startLayoutEffectTimer();\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else {\n        var prevProps =\n          finishedWork.elementType === finishedWork.type\n            ? current.memoizedProps\n            : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n        var prevState = current.memoizedState; // We could update instance props and state here,\n        // but instead we rely on them being set during last render.\n        // TODO: revisit this when we implement resuming.\n\n        {\n          if (\n            finishedWork.type === finishedWork.elementType &&\n            !didWarnAboutReassigningProps\n          ) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\n                \"Expected %s props to match memoized props before \" +\n                  \"componentDidUpdate. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.props`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\n                \"Expected %s state to match memoized state before \" +\n                  \"componentDidUpdate. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.state`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n          }\n        }\n\n        if (shouldProfile(finishedWork)) {\n          try {\n            startLayoutEffectTimer();\n            instance.componentDidUpdate(\n              prevProps,\n              prevState,\n              instance.__reactInternalSnapshotBeforeUpdate\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            instance.componentDidUpdate(\n              prevProps,\n              prevState,\n              instance.__reactInternalSnapshotBeforeUpdate\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n    }\n\n    function commitClassCallbacks(finishedWork) {\n      // TODO: I think this is now always non-null by the time it reaches the\n      // commit phase. Consider removing the type check.\n      var updateQueue = finishedWork.updateQueue;\n\n      if (updateQueue !== null) {\n        var instance = finishedWork.stateNode;\n\n        {\n          if (\n            finishedWork.type === finishedWork.elementType &&\n            !didWarnAboutReassigningProps\n          ) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\n                \"Expected %s props to match memoized props before \" +\n                  \"processing the update queue. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.props`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\n                \"Expected %s state to match memoized state before \" +\n                  \"processing the update queue. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.state`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n          }\n        } // We could update instance props and state here,\n        // but instead we rely on them being set during last render.\n        // TODO: revisit this when we implement resuming.\n\n        try {\n          commitCallbacks(updateQueue, instance);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n\n    function commitHostComponentMount(finishedWork) {\n      var type = finishedWork.type;\n      var props = finishedWork.memoizedProps;\n      var instance = finishedWork.stateNode;\n\n      try {\n        commitMount(instance, type, props, finishedWork);\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n\n    function commitProfilerUpdate(finishedWork, current) {\n      if (getExecutionContext() & CommitContext) {\n        try {\n          var _finishedWork$memoize2 = finishedWork.memoizedProps,\n            onCommit = _finishedWork$memoize2.onCommit,\n            onRender = _finishedWork$memoize2.onRender;\n          var effectDuration = finishedWork.stateNode.effectDuration;\n          var commitTime = getCommitTime();\n          var phase = current === null ? \"mount\" : \"update\";\n\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = \"nested-update\";\n            }\n          }\n\n          if (typeof onRender === \"function\") {\n            onRender(\n              finishedWork.memoizedProps.id,\n              phase,\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime\n            );\n          }\n\n          if (enableProfilerCommitHooks) {\n            if (typeof onCommit === \"function\") {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                phase,\n                effectDuration,\n                commitTime\n              );\n            } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n            // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n            // because the effect is also where times bubble to parent Profilers.\n\n            enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n            // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n            var parentFiber = finishedWork.return;\n\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  var root = parentFiber.stateNode;\n                  root.effectDuration += effectDuration;\n                  break outer;\n\n                case Profiler:\n                  var parentStateNode = parentFiber.stateNode;\n                  parentStateNode.effectDuration += effectDuration;\n                  break outer;\n              }\n\n              parentFiber = parentFiber.return;\n            }\n          }\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n\n    function commitLayoutEffectOnFiber(\n      finishedRoot,\n      current,\n      finishedWork,\n      committedLanes\n    ) {\n      // When updating this function, also update reappearLayoutEffects, which does\n      // most of the same things when an offscreen tree goes from hidden -> visible.\n      var flags = finishedWork.flags;\n\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n          if (flags & Update) {\n            commitHookLayoutEffects(finishedWork, Layout | HasEffect);\n          }\n\n          break;\n        }\n\n        case ClassComponent: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n          if (flags & Update) {\n            commitClassLayoutLifecycles(finishedWork, current);\n          }\n\n          if (flags & Callback) {\n            commitClassCallbacks(finishedWork);\n          }\n\n          if (flags & Ref) {\n            safelyAttachRef(finishedWork, finishedWork.return);\n          }\n\n          break;\n        }\n\n        case HostRoot: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n          if (flags & Callback) {\n            // TODO: I think this is now always non-null by the time it reaches the\n            // commit phase. Consider removing the type check.\n            var updateQueue = finishedWork.updateQueue;\n\n            if (updateQueue !== null) {\n              var instance = null;\n\n              if (finishedWork.child !== null) {\n                switch (finishedWork.child.tag) {\n                  case HostSingleton:\n                  case HostComponent:\n                    instance = getPublicInstance(finishedWork.child.stateNode);\n                    break;\n\n                  case ClassComponent:\n                    instance = finishedWork.child.stateNode;\n                    break;\n                }\n              }\n\n              try {\n                commitCallbacks(updateQueue, instance);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n          }\n\n          break;\n        }\n\n        case HostHoistable:\n\n        case HostSingleton:\n        case HostComponent: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork); // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n\n          if (current === null && flags & Update) {\n            commitHostComponentMount(finishedWork);\n          }\n\n          if (flags & Ref) {\n            safelyAttachRef(finishedWork, finishedWork.return);\n          }\n\n          break;\n        }\n\n        case Profiler: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork); // TODO: Should this fire inside an offscreen tree? Or should it wait to\n          // fire when the tree becomes visible again.\n\n          if (flags & Update) {\n            commitProfilerUpdate(finishedWork, current);\n          }\n\n          break;\n        }\n\n        case SuspenseComponent: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n          break;\n        }\n\n        case OffscreenComponent: {\n          var isModernRoot = (finishedWork.mode & ConcurrentMode) !== NoMode;\n\n          if (isModernRoot) {\n            var isHidden = finishedWork.memoizedState !== null;\n            var newOffscreenSubtreeIsHidden =\n              isHidden || offscreenSubtreeIsHidden;\n\n            if (newOffscreenSubtreeIsHidden);\n            else {\n              // The Offscreen tree is visible.\n              var wasHidden =\n                current !== null && current.memoizedState !== null;\n              var newOffscreenSubtreeWasHidden =\n                wasHidden || offscreenSubtreeWasHidden;\n              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n              offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n              if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n                // This is the root of a reappearing boundary. As we continue\n                // traversing the layout effects, we must also re-mount layout\n                // effects that were unmounted when the Offscreen subtree was\n                // hidden. So this is a superset of the normal commitLayoutEffects.\n                var includeWorkInProgressEffects =\n                  (finishedWork.subtreeFlags & LayoutMask) !== NoFlags$1;\n                recursivelyTraverseReappearLayoutEffects(\n                  finishedRoot,\n                  finishedWork,\n                  includeWorkInProgressEffects\n                );\n              } else {\n                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n              }\n\n              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n            }\n          } else {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n          }\n\n          if (flags & Ref) {\n            var props = finishedWork.memoizedProps;\n\n            if (props.mode === \"manual\") {\n              safelyAttachRef(finishedWork, finishedWork.return);\n            } else {\n              safelyDetachRef(finishedWork, finishedWork.return);\n            }\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n          break;\n        }\n      }\n    }\n\n    function commitAttachRef(finishedWork) {\n      var ref = finishedWork.ref;\n\n      if (ref !== null) {\n        var instance = finishedWork.stateNode;\n        var instanceToUse;\n\n        switch (finishedWork.tag) {\n          case HostHoistable:\n          case HostSingleton:\n          case HostComponent:\n            instanceToUse = getPublicInstance(instance);\n            break;\n\n          default:\n            instanceToUse = instance;\n        } // Moved outside to ensure DCE works with this flag\n\n        if (typeof ref === \"function\") {\n          if (shouldProfile(finishedWork)) {\n            try {\n              startLayoutEffectTimer();\n              finishedWork.refCleanup = ref(instanceToUse);\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            finishedWork.refCleanup = ref(instanceToUse);\n          }\n        } else {\n          {\n            // TODO: We should move these warnings to happen during the render\n            // phase (markRef).\n            if (!ref.hasOwnProperty(\"current\")) {\n              error(\n                \"Unexpected ref object provided for %s. \" +\n                  \"Use either a ref-setter function or React.createRef().\",\n                getComponentNameFromFiber(finishedWork)\n              );\n            }\n          } // $FlowFixMe[incompatible-use] unable to narrow type to the non-function case\n\n          ref.current = instanceToUse;\n        }\n      }\n    }\n\n    function detachFiberMutation(fiber) {\n      // Cut off the return pointer to disconnect it from the tree.\n      // This enables us to detect and warn against state updates on an unmounted component.\n      // It also prevents events from bubbling from within disconnected components.\n      //\n      // Ideally, we should also clear the child pointer of the parent alternate to let this\n      // get GC:ed but we don't know which for sure which parent is the current\n      // one so we'll settle for GC:ing the subtree of this child.\n      // This child itself will be GC:ed when the parent updates the next time.\n      //\n      // Note that we can't clear child or sibling pointers yet.\n      // They're needed for passive effects and for findDOMNode.\n      // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n      //\n      // Don't reset the alternate yet, either. We need that so we can detach the\n      // alternate's fields in the passive phase. Clearing the return pointer is\n      // sufficient for findDOMNode semantics.\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.return = null;\n      }\n\n      fiber.return = null;\n    }\n\n    function detachFiberAfterEffects(fiber) {\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        fiber.alternate = null;\n        detachFiberAfterEffects(alternate);\n      } // Clear cyclical Fiber fields. This level alone is designed to roughly\n      // approximate the planned Fiber refactor. In that world, `setState` will be\n      // bound to a special \"instance\" object instead of a Fiber. The Instance\n      // object will not have any of these fields. It will only be connected to\n      // the fiber tree via a single link at the root. So if this level alone is\n      // sufficient to fix memory issues, that bodes well for our plans.\n\n      fiber.child = null;\n      fiber.deletions = null;\n      fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n\n      fiber.stateNode = null;\n\n      {\n        fiber._debugOwner = null;\n      } // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else.\n\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n      fiber.updateQueue = null;\n    }\n\n    function emptyPortalContainer(current) {\n      createContainerChildSet();\n    }\n\n    function commitPlacement(finishedWork) {\n      {\n        return;\n      }\n    }\n\n    function commitDeletionEffects(root, returnFiber, deletedFiber) {\n      {\n        // Detach refs and call componentWillUnmount() on the whole subtree.\n        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n      }\n\n      detachFiberMutation(deletedFiber);\n    }\n\n    function recursivelyTraverseDeletionEffects(\n      finishedRoot,\n      nearestMountedAncestor,\n      parent\n    ) {\n      // TODO: Use a static flag to skip trees that don't have unmount effects\n      var child = parent.child;\n\n      while (child !== null) {\n        commitDeletionEffectsOnFiber(\n          finishedRoot,\n          nearestMountedAncestor,\n          child\n        );\n        child = child.sibling;\n      }\n    }\n\n    function commitDeletionEffectsOnFiber(\n      finishedRoot,\n      nearestMountedAncestor,\n      deletedFiber\n    ) {\n      onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n      // into their subtree. There are simpler cases in the inner switch\n      // that don't modify the stack.\n\n      switch (deletedFiber.tag) {\n        case HostHoistable:\n\n        case HostSingleton:\n\n        case HostComponent: {\n          if (!offscreenSubtreeWasHidden) {\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n          } // Intentional fallthrough to next branch\n        }\n\n        case HostText: {\n          // We only need to remove the nearest host child. Set the host parent\n          // to `null` on the stack to indicate that nested children don't\n          // need to be removed.\n          {\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n          }\n\n          return;\n        }\n\n        case DehydratedFragment: {\n          return;\n        }\n\n        case HostPortal: {\n          {\n            emptyPortalContainer();\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n          }\n\n          return;\n        }\n\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent: {\n          if (!offscreenSubtreeWasHidden) {\n            var updateQueue = deletedFiber.updateQueue;\n\n            if (updateQueue !== null) {\n              var lastEffect = updateQueue.lastEffect;\n\n              if (lastEffect !== null) {\n                var firstEffect = lastEffect.next;\n                var effect = firstEffect;\n\n                do {\n                  var tag = effect.tag;\n                  var inst = effect.inst;\n                  var destroy = inst.destroy;\n\n                  if (destroy !== undefined) {\n                    if ((tag & Insertion) !== NoFlags) {\n                      inst.destroy = undefined;\n                      safelyCallDestroy(\n                        deletedFiber,\n                        nearestMountedAncestor,\n                        destroy\n                      );\n                    } else if ((tag & Layout) !== NoFlags) {\n                      if (shouldProfile(deletedFiber)) {\n                        startLayoutEffectTimer();\n                        inst.destroy = undefined;\n                        safelyCallDestroy(\n                          deletedFiber,\n                          nearestMountedAncestor,\n                          destroy\n                        );\n                        recordLayoutEffectDuration(deletedFiber);\n                      } else {\n                        inst.destroy = undefined;\n                        safelyCallDestroy(\n                          deletedFiber,\n                          nearestMountedAncestor,\n                          destroy\n                        );\n                      }\n                    }\n                  }\n\n                  effect = effect.next;\n                } while (effect !== firstEffect);\n              }\n            }\n          }\n\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          return;\n        }\n\n        case ClassComponent: {\n          if (!offscreenSubtreeWasHidden) {\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n            var instance = deletedFiber.stateNode;\n\n            if (typeof instance.componentWillUnmount === \"function\") {\n              safelyCallComponentWillUnmount(\n                deletedFiber,\n                nearestMountedAncestor,\n                instance\n              );\n            }\n          }\n\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          return;\n        }\n\n        case ScopeComponent: {\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          return;\n        }\n\n        case OffscreenComponent: {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n\n          if (deletedFiber.mode & ConcurrentMode) {\n            // If this offscreen component is hidden, we already unmounted it. Before\n            // deleting the children, track that it's already unmounted so that we\n            // don't attempt to unmount the effects again.\n            // TODO: If the tree is hidden, in most cases we should be able to skip\n            // over the nested children entirely. An exception is we haven't yet found\n            // the topmost host node to delete, which we already track on the stack.\n            // But the other case is portals, which need to be detached no matter how\n            // deeply they are nested. We should use a subtree flag to track whether a\n            // subtree includes a nested portal.\n            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n            offscreenSubtreeWasHidden =\n              prevOffscreenSubtreeWasHidden ||\n              deletedFiber.memoizedState !== null;\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n          } else {\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          return;\n        }\n      }\n    }\n\n    function commitSuspenseCallback(finishedWork) {}\n\n    function getRetryCache(finishedWork) {\n      // TODO: Unify the interface for the retry cache so we don't have to switch\n      // on the tag like this.\n      switch (finishedWork.tag) {\n        case SuspenseComponent:\n        case SuspenseListComponent: {\n          var retryCache = finishedWork.stateNode;\n\n          if (retryCache === null) {\n            retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n          }\n\n          return retryCache;\n        }\n\n        case OffscreenComponent: {\n          var instance = finishedWork.stateNode;\n          var _retryCache = instance._retryCache;\n\n          if (_retryCache === null) {\n            _retryCache = instance._retryCache = new PossiblyWeakSet();\n          }\n\n          return _retryCache;\n        }\n\n        default: {\n          throw new Error(\n            \"Unexpected Suspense handler tag (\" +\n              finishedWork.tag +\n              \"). This is a \" +\n              \"bug in React.\"\n          );\n        }\n      }\n    }\n\n    function detachOffscreenInstance(instance) {\n      var fiber = instance._current;\n\n      if (fiber === null) {\n        throw new Error(\n          \"Calling Offscreen.detach before instance handle has been set.\"\n        );\n      }\n\n      if ((instance._pendingVisibility & OffscreenDetached) !== NoFlags$1) {\n        // The instance is already detached, this is a noop.\n        return;\n      } // TODO: There is an opportunity to optimise this by not entering commit phase\n      // and unmounting effects directly.\n\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        instance._pendingVisibility |= OffscreenDetached;\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n    function attachOffscreenInstance(instance) {\n      var fiber = instance._current;\n\n      if (fiber === null) {\n        throw new Error(\n          \"Calling Offscreen.detach before instance handle has been set.\"\n        );\n      }\n\n      if ((instance._pendingVisibility & OffscreenDetached) === NoFlags$1) {\n        // The instance is already attached, this is a noop.\n        return;\n      }\n\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        instance._pendingVisibility &= ~OffscreenDetached;\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n\n    function attachSuspenseRetryListeners(finishedWork, wakeables) {\n      // If this boundary just timed out, then it will have a set of wakeables.\n      // For each wakeable, attach a listener so that when it resolves, React\n      // attempts to re-render the boundary in the primary (pre-timeout) state.\n      var retryCache = getRetryCache(finishedWork);\n      wakeables.forEach(function (wakeable) {\n        // Memoize using the boundary fiber to prevent redundant listeners.\n        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n        if (!retryCache.has(wakeable)) {\n          retryCache.add(wakeable);\n\n          {\n            if (isDevToolsPresent) {\n              if (inProgressLanes !== null && inProgressRoot !== null) {\n                // If we have pending work still, associate the original updaters with it.\n                restorePendingUpdaters(inProgressRoot, inProgressLanes);\n              } else {\n                throw Error(\n                  \"Expected finished root and lanes to be set. This is a bug in React.\"\n                );\n              }\n            }\n          }\n\n          wakeable.then(retry, retry);\n        }\n      });\n    } // This function detects when a Suspense boundary goes from visible to hidden.\n    function commitMutationEffects(root, finishedWork, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      setCurrentFiber(finishedWork);\n      commitMutationEffectsOnFiber(finishedWork, root);\n      setCurrentFiber(finishedWork);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n\n    function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n      // Deletions effects can be scheduled on any fiber type. They need to happen\n      // before the children effects hae fired.\n      var deletions = parentFiber.deletions;\n\n      if (deletions !== null) {\n        for (var i = 0; i < deletions.length; i++) {\n          var childToDelete = deletions[i];\n\n          try {\n            commitDeletionEffects(root, parentFiber, childToDelete);\n          } catch (error) {\n            captureCommitPhaseError(childToDelete, parentFiber, error);\n          }\n        }\n      }\n\n      var prevDebugFiber = getCurrentFiber();\n\n      if (parentFiber.subtreeFlags & MutationMask) {\n        var child = parentFiber.child;\n\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitMutationEffectsOnFiber(child, root);\n          child = child.sibling;\n        }\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n      // because the fiber tag is more specific. An exception is any flag related\n      // to reconciliation, because those can be set on all fiber types.\n\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          if (flags & Update) {\n            try {\n              commitHookEffectListUnmount(\n                Insertion | HasEffect,\n                finishedWork,\n                finishedWork.return\n              );\n              commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            } // Layout effects are destroyed during the mutation phase so that all\n            // destroy functions for all fibers are called before any create functions.\n            // This prevents sibling component effects from interfering with each other,\n            // e.g. a destroy function in one component should never override a ref set\n            // by a create function in another component during the same commit.\n\n            if (shouldProfile(finishedWork)) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListUnmount(\n                  Layout | HasEffect,\n                  finishedWork,\n                  finishedWork.return\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n\n              recordLayoutEffectDuration(finishedWork);\n            } else {\n              try {\n                commitHookEffectListUnmount(\n                  Layout | HasEffect,\n                  finishedWork,\n                  finishedWork.return\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n          }\n\n          return;\n        }\n\n        case ClassComponent: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          if (flags & Ref) {\n            if (current !== null) {\n              safelyDetachRef(current, current.return);\n            }\n          }\n\n          if (flags & Callback && offscreenSubtreeIsHidden) {\n            var updateQueue = finishedWork.updateQueue;\n\n            if (updateQueue !== null) {\n              deferHiddenCallbacks(updateQueue);\n            }\n          }\n\n          return;\n        }\n\n        case HostHoistable:\n\n        case HostSingleton:\n\n        case HostComponent: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          if (flags & Ref) {\n            if (current !== null) {\n              safelyDetachRef(current, current.return);\n            }\n          }\n\n          return;\n        }\n\n        case HostText: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          return;\n        }\n\n        case HostRoot: {\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n          }\n\n          if (flags & Update) {\n            {\n              var containerInfo = root.containerInfo;\n              var pendingChildren = root.pendingChildren;\n\n              try {\n                replaceContainerChildren(containerInfo, pendingChildren);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n          }\n\n          return;\n        }\n\n        case HostPortal: {\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n          }\n\n          if (flags & Update) {\n            {\n              var portal = finishedWork.stateNode;\n              var _containerInfo = portal.containerInfo;\n              var _pendingChildren = portal.pendingChildren;\n\n              try {\n                replaceContainerChildren(_containerInfo, _pendingChildren);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n          }\n\n          return;\n        }\n\n        case SuspenseComponent: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork); // TODO: We should mark a flag on the Suspense fiber itself, rather than\n          // relying on the Offscreen fiber having a flag also being marked. The\n          // reason is that this offscreen fiber might not be part of the work-in-\n          // progress tree! It could have been reused from a previous render. This\n          // doesn't lead to incorrect behavior because we don't rely on the flag\n          // check alone; we also compare the states explicitly below. But for\n          // modeling purposes, we _should_ be able to rely on the flag check alone.\n          // So this is a bit fragile.\n          //\n          // Also, all this logic could/should move to the passive phase so it\n          // doesn't block paint.\n\n          var offscreenFiber = finishedWork.child;\n\n          if (offscreenFiber.flags & Visibility) {\n            // Throttle the appearance and disappearance of Suspense fallbacks.\n            var isShowingFallback = finishedWork.memoizedState !== null;\n            var wasShowingFallback =\n              current !== null && current.memoizedState !== null;\n\n            {\n              if (isShowingFallback && !wasShowingFallback) {\n                // Old behavior. Only mark when a fallback appears, not when\n                // it disappears.\n                markCommitTimeOfFallback();\n              }\n            }\n          }\n\n          if (flags & Update) {\n            try {\n              commitSuspenseCallback(finishedWork);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n\n            var retryQueue = finishedWork.updateQueue;\n\n            if (retryQueue !== null) {\n              finishedWork.updateQueue = null;\n              attachSuspenseRetryListeners(finishedWork, retryQueue);\n            }\n          }\n\n          return;\n        }\n\n        case OffscreenComponent: {\n          if (flags & Ref) {\n            if (current !== null) {\n              safelyDetachRef(current, current.return);\n            }\n          }\n\n          var newState = finishedWork.memoizedState;\n          var isHidden = newState !== null;\n          var wasHidden = current !== null && current.memoizedState !== null;\n\n          if (finishedWork.mode & ConcurrentMode) {\n            // Before committing the children, track on the stack whether this\n            // offscreen subtree was already hidden, so that we don't unmount the\n            // effects again.\n            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;\n            offscreenSubtreeWasHidden =\n              prevOffscreenSubtreeWasHidden || wasHidden;\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n          } else {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n          }\n\n          commitReconciliationEffects(finishedWork);\n          var offscreenInstance = finishedWork.stateNode; // TODO: Add explicit effect flag to set _current.\n\n          offscreenInstance._current = finishedWork; // Offscreen stores pending changes to visibility in `_pendingVisibility`. This is\n          // to support batching of `attach` and `detach` calls.\n\n          offscreenInstance._visibility &= ~OffscreenDetached;\n          offscreenInstance._visibility |=\n            offscreenInstance._pendingVisibility & OffscreenDetached;\n\n          if (flags & Visibility) {\n            // Track the current state on the Offscreen instance so we can\n            // read it during an event\n            if (isHidden) {\n              offscreenInstance._visibility &= ~OffscreenVisible;\n            } else {\n              offscreenInstance._visibility |= OffscreenVisible;\n            }\n\n            if (isHidden) {\n              var isUpdate = current !== null;\n              var wasHiddenByAncestorOffscreen =\n                offscreenSubtreeIsHidden || offscreenSubtreeWasHidden; // Only trigger disapper layout effects if:\n              //   - This is an update, not first mount.\n              //   - This Offscreen was not hidden before.\n              //   - Ancestor Offscreen was not hidden in previous commit.\n\n              if (isUpdate && !wasHidden && !wasHiddenByAncestorOffscreen) {\n                if ((finishedWork.mode & ConcurrentMode) !== NoMode) {\n                  // Disappear the layout effects of all the children\n                  recursivelyTraverseDisappearLayoutEffects(finishedWork);\n                }\n              }\n            } // Offscreen with manual mode manages visibility manually.\n          } // TODO: Move to passive phase\n\n          if (flags & Update) {\n            var offscreenQueue = finishedWork.updateQueue;\n\n            if (offscreenQueue !== null) {\n              var _retryQueue = offscreenQueue.retryQueue;\n\n              if (_retryQueue !== null) {\n                offscreenQueue.retryQueue = null;\n                attachSuspenseRetryListeners(finishedWork, _retryQueue);\n              }\n            }\n          }\n\n          return;\n        }\n\n        case SuspenseListComponent: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          if (flags & Update) {\n            var _retryQueue2 = finishedWork.updateQueue;\n\n            if (_retryQueue2 !== null) {\n              finishedWork.updateQueue = null;\n              attachSuspenseRetryListeners(finishedWork, _retryQueue2);\n            }\n          }\n\n          return;\n        }\n\n        case ScopeComponent: {\n          return;\n        }\n\n        default: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          return;\n        }\n      }\n    }\n\n    function commitReconciliationEffects(finishedWork) {\n      // Placement effects (insertions, reorders) can be scheduled on any fiber\n      // type. They needs to happen after the children effects have fired, but\n      // before the effects on this fiber have fired.\n      var flags = finishedWork.flags;\n\n      if (flags & Placement) {\n        try {\n          commitPlacement(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        } // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        // TODO: findDOMNode doesn't rely on this any more but isMounted does\n        // and isMounted is deprecated anyway so we should be able to kill this.\n\n        finishedWork.flags &= ~Placement;\n      }\n\n      if (flags & Hydrating) {\n        finishedWork.flags &= ~Hydrating;\n      }\n    }\n\n    function commitLayoutEffects(finishedWork, root, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      var current = finishedWork.alternate;\n      commitLayoutEffectOnFiber(root, current, finishedWork);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n\n    function recursivelyTraverseLayoutEffects(root, parentFiber, lanes) {\n      var prevDebugFiber = getCurrentFiber();\n\n      if (parentFiber.subtreeFlags & LayoutMask) {\n        var child = parentFiber.child;\n\n        while (child !== null) {\n          setCurrentFiber(child);\n          var current = child.alternate;\n          commitLayoutEffectOnFiber(root, current, child);\n          child = child.sibling;\n        }\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function disappearLayoutEffects(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent: {\n          // TODO (Offscreen) Check: flags & LayoutStatic\n          if (shouldProfile(finishedWork)) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListUnmount(\n                Layout,\n                finishedWork,\n                finishedWork.return\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            commitHookEffectListUnmount(\n              Layout,\n              finishedWork,\n              finishedWork.return\n            );\n          }\n\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        }\n\n        case ClassComponent: {\n          // TODO (Offscreen) Check: flags & RefStatic\n          safelyDetachRef(finishedWork, finishedWork.return);\n          var instance = finishedWork.stateNode;\n\n          if (typeof instance.componentWillUnmount === \"function\") {\n            safelyCallComponentWillUnmount(\n              finishedWork,\n              finishedWork.return,\n              instance\n            );\n          }\n\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        }\n\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent: {\n          // TODO (Offscreen) Check: flags & RefStatic\n          safelyDetachRef(finishedWork, finishedWork.return);\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        }\n\n        case OffscreenComponent: {\n          // TODO (Offscreen) Check: flags & RefStatic\n          safelyDetachRef(finishedWork, finishedWork.return);\n          var isHidden = finishedWork.memoizedState !== null;\n\n          if (isHidden);\n          else {\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        }\n      }\n    }\n\n    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {\n      // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n      var child = parentFiber.child;\n\n      while (child !== null) {\n        disappearLayoutEffects(child);\n        child = child.sibling;\n      }\n    }\n\n    function reappearLayoutEffects(\n      finishedRoot,\n      current,\n      finishedWork, // This function visits both newly finished work and nodes that were re-used\n      // from a previously committed tree. We cannot check non-static flags if the\n      // node was reused.\n      includeWorkInProgressEffects\n    ) {\n      // Turn on layout effects in a tree that previously disappeared.\n      var flags = finishedWork.flags;\n\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          ); // TODO: Check flags & LayoutStatic\n\n          commitHookLayoutEffects(finishedWork, Layout);\n          break;\n        }\n\n        case ClassComponent: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          ); // TODO: Check for LayoutStatic flag\n\n          var instance = finishedWork.stateNode;\n\n          if (typeof instance.componentDidMount === \"function\") {\n            try {\n              instance.componentDidMount();\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          } // Commit any callbacks that would have fired while the component\n          // was hidden.\n\n          var updateQueue = finishedWork.updateQueue;\n\n          if (updateQueue !== null) {\n            commitHiddenCallbacks(updateQueue, instance);\n          } // If this is newly finished work, check for setState callbacks\n\n          if (includeWorkInProgressEffects && flags & Callback) {\n            commitClassCallbacks(finishedWork);\n          } // TODO: Check flags & RefStatic\n\n          safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        }\n        // Unlike commitLayoutEffectsOnFiber, we don't need to handle HostRoot\n        // because this function only visits nodes that are inside an\n        // Offscreen fiber.\n        // case HostRoot: {\n        //  ...\n        // }\n\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          ); // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n\n          if (\n            includeWorkInProgressEffects &&\n            current === null &&\n            flags & Update\n          ) {\n            commitHostComponentMount(finishedWork);\n          } // TODO: Check flags & Ref\n\n          safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        }\n\n        case Profiler: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          ); // TODO: Figure out how Profiler updates should work with Offscreen\n\n          if (includeWorkInProgressEffects && flags & Update) {\n            commitProfilerUpdate(finishedWork, current);\n          }\n\n          break;\n        }\n\n        case SuspenseComponent: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          ); // TODO: Figure out how Suspense hydration callbacks should work\n\n          break;\n        }\n\n        case OffscreenComponent: {\n          var offscreenState = finishedWork.memoizedState;\n          var isHidden = offscreenState !== null;\n\n          if (isHidden);\n          else {\n            recursivelyTraverseReappearLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              includeWorkInProgressEffects\n            );\n          } // TODO: Check flags & Ref\n\n          safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        }\n\n        default: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          );\n          break;\n        }\n      }\n    }\n\n    function recursivelyTraverseReappearLayoutEffects(\n      finishedRoot,\n      parentFiber,\n      includeWorkInProgressEffects\n    ) {\n      // This function visits both newly finished work and nodes that were re-used\n      // from a previously committed tree. We cannot check non-static flags if the\n      // node was reused.\n      var childShouldIncludeWorkInProgressEffects =\n        includeWorkInProgressEffects &&\n        (parentFiber.subtreeFlags & LayoutMask) !== NoFlags$1; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n      var prevDebugFiber = getCurrentFiber();\n      var child = parentFiber.child;\n\n      while (child !== null) {\n        var current = child.alternate;\n        reappearLayoutEffects(\n          finishedRoot,\n          current,\n          child,\n          childShouldIncludeWorkInProgressEffects\n        );\n        child = child.sibling;\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function commitHookPassiveMountEffects(finishedWork, hookFlags) {\n      if (shouldProfile(finishedWork)) {\n        startPassiveEffectTimer();\n\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n\n    function commitPassiveMountEffects(\n      root,\n      finishedWork,\n      committedLanes,\n      committedTransitions\n    ) {\n      setCurrentFiber(finishedWork);\n      commitPassiveMountOnFiber(root, finishedWork);\n      resetCurrentFiber();\n    }\n\n    function recursivelyTraversePassiveMountEffects(\n      root,\n      parentFiber,\n      committedLanes,\n      committedTransitions\n    ) {\n      var prevDebugFiber = getCurrentFiber();\n\n      if (parentFiber.subtreeFlags & PassiveMask) {\n        var child = parentFiber.child;\n\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitPassiveMountOnFiber(root, child);\n          child = child.sibling;\n        }\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function commitPassiveMountOnFiber(\n      finishedRoot,\n      finishedWork,\n      committedLanes,\n      committedTransitions\n    ) {\n      // When updating this function, also update reconnectPassiveEffects, which does\n      // most of the same things when an offscreen tree goes from hidden -> visible,\n      // or when toggling effects inside a hidden tree.\n      var flags = finishedWork.flags;\n\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n\n          if (flags & Passive$1) {\n            commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);\n          }\n\n          break;\n        }\n\n        case HostRoot: {\n          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n\n          break;\n        }\n\n        case LegacyHiddenComponent: {\n          break;\n        }\n\n        case OffscreenComponent: {\n          // TODO: Pass `current` as argument to this function\n          var _instance3 = finishedWork.stateNode;\n          var nextState = finishedWork.memoizedState;\n          var isHidden = nextState !== null;\n\n          if (isHidden) {\n            if (_instance3._visibility & OffscreenPassiveEffectsConnected) {\n              // The effects are currently connected. Update them.\n              recursivelyTraversePassiveMountEffects(\n                finishedRoot,\n                finishedWork\n              );\n            } else {\n              if (finishedWork.mode & ConcurrentMode);\n              else {\n                // Legacy Mode: Fire the effects even if the tree is hidden.\n                _instance3._visibility |= OffscreenPassiveEffectsConnected;\n                recursivelyTraversePassiveMountEffects(\n                  finishedRoot,\n                  finishedWork\n                );\n              }\n            }\n          } else {\n            // Tree is visible\n            if (_instance3._visibility & OffscreenPassiveEffectsConnected) {\n              // The effects are currently connected. Update them.\n              recursivelyTraversePassiveMountEffects(\n                finishedRoot,\n                finishedWork\n              );\n            } else {\n              // The effects are currently disconnected. Reconnect them, while also\n              // firing effects inside newly mounted trees. This also applies to\n              // the initial render.\n              _instance3._visibility |= OffscreenPassiveEffectsConnected;\n              recursivelyTraverseReconnectPassiveEffects(\n                finishedRoot,\n                finishedWork\n              );\n            }\n          }\n\n          break;\n        }\n\n        case CacheComponent: {\n          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n\n          break;\n        }\n\n        case TracingMarkerComponent:\n\n        default: {\n          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n          break;\n        }\n      }\n    }\n\n    function recursivelyTraverseReconnectPassiveEffects(\n      finishedRoot,\n      parentFiber,\n      committedLanes,\n      committedTransitions,\n      includeWorkInProgressEffects\n    ) {\n      var prevDebugFiber = getCurrentFiber();\n      var child = parentFiber.child;\n\n      while (child !== null) {\n        reconnectPassiveEffects(finishedRoot, child);\n        child = child.sibling;\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function reconnectPassiveEffects(\n      finishedRoot,\n      finishedWork,\n      committedLanes,\n      committedTransitions, // This function visits both newly finished work and nodes that were re-used\n      // from a previously committed tree. We cannot check non-static flags if the\n      // node was reused.\n      includeWorkInProgressEffects\n    ) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork\n          ); // TODO: Check for PassiveStatic flag\n\n          commitHookPassiveMountEffects(finishedWork, Passive);\n          break;\n        }\n        // Unlike commitPassiveMountOnFiber, we don't need to handle HostRoot\n        // because this function only visits nodes that are inside an\n        // Offscreen fiber.\n        // case HostRoot: {\n        //  ...\n        // }\n\n        case LegacyHiddenComponent: {\n          break;\n        }\n\n        case OffscreenComponent: {\n          var _instance4 = finishedWork.stateNode;\n          var nextState = finishedWork.memoizedState;\n          var isHidden = nextState !== null;\n\n          if (isHidden) {\n            if (_instance4._visibility & OffscreenPassiveEffectsConnected) {\n              // The effects are currently connected. Update them.\n              recursivelyTraverseReconnectPassiveEffects(\n                finishedRoot,\n                finishedWork\n              );\n            } else {\n              if (finishedWork.mode & ConcurrentMode);\n              else {\n                // Legacy Mode: Fire the effects even if the tree is hidden.\n                _instance4._visibility |= OffscreenPassiveEffectsConnected;\n                recursivelyTraverseReconnectPassiveEffects(\n                  finishedRoot,\n                  finishedWork\n                );\n              }\n            }\n          } else {\n            // Tree is visible\n            // Since we're already inside a reconnecting tree, it doesn't matter\n            // whether the effects are currently connected. In either case, we'll\n            // continue traversing the tree and firing all the effects.\n            //\n            // We do need to set the \"connected\" flag on the instance, though.\n            _instance4._visibility |= OffscreenPassiveEffectsConnected;\n            recursivelyTraverseReconnectPassiveEffects(\n              finishedRoot,\n              finishedWork\n            );\n          }\n\n          break;\n        }\n\n        case CacheComponent: {\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork\n          );\n\n          break;\n        }\n\n        case TracingMarkerComponent:\n\n        default: {\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork\n          );\n          break;\n        }\n      }\n    }\n\n    function commitPassiveUnmountEffects(finishedWork) {\n      setCurrentFiber(finishedWork);\n      commitPassiveUnmountOnFiber(finishedWork);\n      resetCurrentFiber();\n    } // If we're inside a brand new tree, or a tree that was already visible, then we\n    // should only suspend host components that have a ShouldSuspendCommit flag.\n    // Components without it haven't changed since the last commit, so we can skip\n    // over those.\n    //\n    // When we enter a tree that is being revealed (going from hidden -> visible),\n    // we need to suspend _any_ component that _may_ suspend. Even if they're\n    // already in the \"current\" tree. Because their visibility has changed, the\n    // browser may not have prerendered them yet. So we check the MaySuspendCommit\n    // flag instead.\n\n    var suspenseyCommitFlag = ShouldSuspendCommit;\n    function accumulateSuspenseyCommit(finishedWork) {\n      accumulateSuspenseyCommitOnFiber(finishedWork);\n    }\n\n    function recursivelyAccumulateSuspenseyCommit(parentFiber) {\n      if (parentFiber.subtreeFlags & suspenseyCommitFlag) {\n        var child = parentFiber.child;\n\n        while (child !== null) {\n          accumulateSuspenseyCommitOnFiber(child);\n          child = child.sibling;\n        }\n      }\n    }\n\n    function accumulateSuspenseyCommitOnFiber(fiber) {\n      switch (fiber.tag) {\n        case HostHoistable: {\n          recursivelyAccumulateSuspenseyCommit(fiber);\n\n          if (fiber.flags & suspenseyCommitFlag) {\n            if (fiber.memoizedState !== null) {\n              suspendResource();\n            }\n          }\n\n          break;\n        }\n\n        case HostComponent: {\n          recursivelyAccumulateSuspenseyCommit(fiber);\n\n          break;\n        }\n\n        case HostRoot:\n        case HostPortal: {\n          {\n            recursivelyAccumulateSuspenseyCommit(fiber);\n          }\n\n          break;\n        }\n\n        case OffscreenComponent: {\n          var isHidden = fiber.memoizedState !== null;\n\n          if (isHidden);\n          else {\n            var current = fiber.alternate;\n            var wasHidden = current !== null && current.memoizedState !== null;\n\n            if (wasHidden) {\n              // This tree is being revealed. Visit all newly visible suspensey\n              // instances, even if they're in the current tree.\n              var prevFlags = suspenseyCommitFlag;\n              suspenseyCommitFlag = MaySuspendCommit;\n              recursivelyAccumulateSuspenseyCommit(fiber);\n              suspenseyCommitFlag = prevFlags;\n            } else {\n              recursivelyAccumulateSuspenseyCommit(fiber);\n            }\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyAccumulateSuspenseyCommit(fiber);\n        }\n      }\n    }\n\n    function detachAlternateSiblings(parentFiber) {\n      // A fiber was deleted from this parent fiber, but it's still part of the\n      // previous (alternate) parent fiber's list of children. Because children\n      // are a linked list, an earlier sibling that's still alive will be\n      // connected to the deleted fiber via its `alternate`:\n      //\n      //   live fiber --alternate--> previous live fiber --sibling--> deleted\n      //   fiber\n      //\n      // We can't disconnect `alternate` on nodes that haven't been deleted yet,\n      // but we can disconnect the `sibling` and `child` pointers.\n      var previousFiber = parentFiber.alternate;\n\n      if (previousFiber !== null) {\n        var detachedChild = previousFiber.child;\n\n        if (detachedChild !== null) {\n          previousFiber.child = null;\n\n          do {\n            // $FlowFixMe[incompatible-use] found when upgrading Flow\n            var detachedSibling = detachedChild.sibling; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n            detachedChild.sibling = null;\n            detachedChild = detachedSibling;\n          } while (detachedChild !== null);\n        }\n      }\n    }\n\n    function commitHookPassiveUnmountEffects(\n      finishedWork,\n      nearestMountedAncestor,\n      hookFlags\n    ) {\n      if (shouldProfile(finishedWork)) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          hookFlags,\n          finishedWork,\n          nearestMountedAncestor\n        );\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        commitHookEffectListUnmount(\n          hookFlags,\n          finishedWork,\n          nearestMountedAncestor\n        );\n      }\n    }\n\n    function recursivelyTraversePassiveUnmountEffects(parentFiber) {\n      // Deletions effects can be scheduled on any fiber type. They need to happen\n      // before the children effects have fired.\n      var deletions = parentFiber.deletions;\n\n      if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i]; // TODO: Convert this to use recursion\n\n            nextEffect = childToDelete;\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n              childToDelete,\n              parentFiber\n            );\n          }\n        }\n\n        detachAlternateSiblings(parentFiber);\n      }\n\n      var prevDebugFiber = getCurrentFiber(); // TODO: Split PassiveMask into separate masks for mount and unmount?\n\n      if (parentFiber.subtreeFlags & PassiveMask) {\n        var child = parentFiber.child;\n\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitPassiveUnmountOnFiber(child);\n          child = child.sibling;\n        }\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function commitPassiveUnmountOnFiber(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          recursivelyTraversePassiveUnmountEffects(finishedWork);\n\n          if (finishedWork.flags & Passive$1) {\n            commitHookPassiveUnmountEffects(\n              finishedWork,\n              finishedWork.return,\n              Passive | HasEffect\n            );\n          }\n\n          break;\n        }\n\n        case OffscreenComponent: {\n          var instance = finishedWork.stateNode;\n          var nextState = finishedWork.memoizedState;\n          var isHidden = nextState !== null;\n\n          if (\n            isHidden &&\n            instance._visibility & OffscreenPassiveEffectsConnected && // For backwards compatibility, don't unmount when a tree suspends. In\n            // the future we may change this to unmount after a delay.\n            (finishedWork.return === null ||\n              finishedWork.return.tag !== SuspenseComponent)\n          ) {\n            // The effects are currently connected. Disconnect them.\n            // TODO: Add option or heuristic to delay before disconnecting the\n            // effects. Then if the tree reappears before the delay has elapsed, we\n            // can skip toggling the effects entirely.\n            instance._visibility &= ~OffscreenPassiveEffectsConnected;\n            recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n          } else {\n            recursivelyTraversePassiveUnmountEffects(finishedWork);\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyTraversePassiveUnmountEffects(finishedWork);\n          break;\n        }\n      }\n    }\n\n    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {\n      // Deletions effects can be scheduled on any fiber type. They need to happen\n      // before the children effects have fired.\n      var deletions = parentFiber.deletions;\n\n      if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i]; // TODO: Convert this to use recursion\n\n            nextEffect = childToDelete;\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n              childToDelete,\n              parentFiber\n            );\n          }\n        }\n\n        detachAlternateSiblings(parentFiber);\n      }\n\n      var prevDebugFiber = getCurrentFiber(); // TODO: Check PassiveStatic flag\n\n      var child = parentFiber.child;\n\n      while (child !== null) {\n        setCurrentFiber(child);\n        disconnectPassiveEffect(child);\n        child = child.sibling;\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function disconnectPassiveEffect(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          // TODO: Check PassiveStatic flag\n          commitHookPassiveUnmountEffects(\n            finishedWork,\n            finishedWork.return,\n            Passive\n          ); // When disconnecting passive effects, we fire the effects in the same\n          // order as during a deletiong: parent before child\n\n          recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n          break;\n        }\n\n        case OffscreenComponent: {\n          var instance = finishedWork.stateNode;\n\n          if (instance._visibility & OffscreenPassiveEffectsConnected) {\n            instance._visibility &= ~OffscreenPassiveEffectsConnected;\n            recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n          break;\n        }\n      }\n    }\n\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n      deletedSubtreeRoot,\n      nearestMountedAncestor\n    ) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // Deletion effects fire in parent -> child order\n        // TODO: Check if fiber has a PassiveStatic flag\n\n        setCurrentFiber(fiber);\n        commitPassiveUnmountInsideDeletedTreeOnFiber(\n          fiber,\n          nearestMountedAncestor\n        );\n        resetCurrentFiber();\n        var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag.\n\n        if (child !== null) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n            deletedSubtreeRoot\n          );\n        }\n      }\n    }\n\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n      deletedSubtreeRoot\n    ) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var sibling = fiber.sibling;\n        var returnFiber = fiber.return; // Recursively traverse the entire deleted tree and clean up fiber fields.\n        // This is more aggressive than ideal, and the long term goal is to only\n        // have to detach the deleted tree at the root.\n\n        detachFiberAfterEffects(fiber);\n\n        if (fiber === deletedSubtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n\n        if (sibling !== null) {\n          sibling.return = returnFiber;\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = returnFiber;\n      }\n    }\n\n    function commitPassiveUnmountInsideDeletedTreeOnFiber(\n      current,\n      nearestMountedAncestor\n    ) {\n      switch (current.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          commitHookPassiveUnmountEffects(\n            current,\n            nearestMountedAncestor,\n            Passive\n          );\n          break;\n        }\n      }\n    }\n\n    function invokeLayoutEffectMountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent: {\n            try {\n              commitHookEffectListMount(Layout | HasEffect, fiber);\n            } catch (error) {\n              captureCommitPhaseError(fiber, fiber.return, error);\n            }\n\n            break;\n          }\n\n          case ClassComponent: {\n            var instance = fiber.stateNode;\n\n            if (typeof instance.componentDidMount === \"function\") {\n              try {\n                instance.componentDidMount();\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    function invokePassiveEffectMountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent: {\n            try {\n              commitHookEffectListMount(Passive | HasEffect, fiber);\n            } catch (error) {\n              captureCommitPhaseError(fiber, fiber.return, error);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    function invokeLayoutEffectUnmountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent: {\n            try {\n              commitHookEffectListUnmount(\n                Layout | HasEffect,\n                fiber,\n                fiber.return\n              );\n            } catch (error) {\n              captureCommitPhaseError(fiber, fiber.return, error);\n            }\n\n            break;\n          }\n\n          case ClassComponent: {\n            var instance = fiber.stateNode;\n\n            if (typeof instance.componentWillUnmount === \"function\") {\n              safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    function invokePassiveEffectUnmountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent: {\n            try {\n              commitHookEffectListUnmount(\n                Passive | HasEffect,\n                fiber,\n                fiber.return\n              );\n            } catch (error) {\n              captureCommitPhaseError(fiber, fiber.return, error);\n            }\n          }\n        }\n      }\n    }\n\n    if (typeof Symbol === \"function\" && Symbol.for) {\n      var symbolFor = Symbol.for;\n      symbolFor(\"selector.component\");\n      symbolFor(\"selector.has_pseudo_class\");\n      symbolFor(\"selector.role\");\n      symbolFor(\"selector.test_id\");\n      symbolFor(\"selector.text\");\n    }\n\n    var ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n    function isLegacyActEnvironment(fiber) {\n      {\n        // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n        // act environment whenever `jest` is defined, but you can still turn off\n        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n        // to false.\n        // $FlowFixMe[cannot-resolve-name] Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n        typeof IS_REACT_ACT_ENVIRONMENT !== \"undefined\" // $FlowFixMe[cannot-resolve-name]\n          ? IS_REACT_ACT_ENVIRONMENT\n          : undefined; // $FlowFixMe[cannot-resolve-name] - Flow doesn't know about jest\n        return warnsIfNotActing;\n      }\n    }\n    function isConcurrentActEnvironment() {\n      {\n        var isReactActEnvironmentGlobal = // $FlowFixMe[cannot-resolve-name] Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n          typeof IS_REACT_ACT_ENVIRONMENT !== \"undefined\" // $FlowFixMe[cannot-resolve-name]\n            ? IS_REACT_ACT_ENVIRONMENT\n            : undefined;\n\n        if (\n          !isReactActEnvironmentGlobal &&\n          ReactCurrentActQueue$1.current !== null\n        ) {\n          // TODO: Include link to relevant documentation page.\n          error(\n            \"The current testing environment is not configured to support \" +\n              \"act(...)\"\n          );\n        }\n\n        return isReactActEnvironmentGlobal;\n      }\n    }\n\n    var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,\n      ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,\n      ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n    var NoContext =\n      /*             */\n      0;\n    var BatchedContext =\n      /*               */\n      1;\n    var RenderContext =\n      /*         */\n      2;\n    var CommitContext =\n      /*         */\n      4;\n    var RootInProgress = 0;\n    var RootFatalErrored = 1;\n    var RootErrored = 2;\n    var RootSuspended = 3;\n    var RootSuspendedWithDelay = 4;\n    var RootCompleted = 5;\n    var RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\n    var executionContext = NoContext; // The root we're working on\n\n    var workInProgressRoot = null; // The fiber we're working on\n\n    var workInProgress = null; // The lanes we're rendering\n\n    var workInProgressRootRenderLanes = NoLanes;\n    var NotSuspended = 0;\n    var SuspendedOnError = 1;\n    var SuspendedOnData = 2;\n    var SuspendedOnImmediate = 3;\n    var SuspendedOnInstance = 4;\n    var SuspendedOnInstanceAndReadyToContinue = 5;\n    var SuspendedOnDeprecatedThrowPromise = 6;\n    var SuspendedAndReadyToContinue = 7;\n    var SuspendedOnHydration = 8; // When this is true, the work-in-progress fiber just suspended (or errored) and\n    // we've yet to unwind the stack. In some cases, we may yield to the main thread\n    // after this happens. If the fiber is pinged before we resume, we can retry\n    // immediately instead of unwinding the stack.\n\n    var workInProgressSuspendedReason = NotSuspended;\n    var workInProgressThrownValue = null; // Whether a ping listener was attached during this render. This is slightly\n    // different that whether something suspended, because we don't add multiple\n    // listeners to a promise we've already seen (per root and lane).\n\n    var workInProgressRootDidAttachPingListener = false; // A contextual version of workInProgressRootRenderLanes. It is a superset of\n    // the lanes that we started working on at the root. When we enter a subtree\n    // that is currently hidden, we add the lanes that would have committed if\n    // the hidden tree hadn't been deferred. This is modified by the\n    // HiddenContext module.\n    //\n    // Most things in the work loop should deal with workInProgressRootRenderLanes.\n    // Most things in begin/complete phases should deal with entangledRenderLanes.\n\n    var entangledRenderLanes = NoLanes; // Whether to root completed, errored, suspended, etc.\n\n    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\n    var workInProgressRootFatalError = null; // The work left over by components that were visited during this render. Only\n    // includes unprocessed updates, not work in bailed out children.\n\n    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\n    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\n    var workInProgressRootPingedLanes = NoLanes; // If this lane scheduled deferred work, this is the lane of the deferred task.\n\n    var workInProgressDeferredLane = NoLane; // Errors that are thrown during the render phase.\n\n    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n    // We will log them once the tree commits.\n\n    var workInProgressRootRecoverableErrors = null; // Tracks when an update occurs during the render phase.\n\n    var workInProgressRootDidIncludeRecursiveRenderUpdate = false; // Thacks when an update occurs during the commit phase. It's a separate\n    // filled in with the resolved UI. This lets us throttle the appearance of new\n    // content as it streams in, to minimize jank.\n    // TODO: Think of a better name for this variable?\n\n    var globalMostRecentFallbackTime = 0;\n    var FALLBACK_THROTTLE_MS = 300; // The absolute time for when we should start giving up on rendering\n    // more and prefer CPU suspense heuristics instead.\n\n    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n    // suspense heuristics and opt out of rendering more content.\n\n    var RENDER_TIMEOUT_MS = 500;\n    var workInProgressTransitions = null;\n\n    function resetRenderTimer() {\n      workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;\n    }\n\n    function getRenderTargetTime() {\n      return workInProgressRootRenderTargetTime;\n    }\n    var hasUncaughtError = false;\n    var firstUncaughtError = null;\n    var legacyErrorBoundariesThatAlreadyFailed = null;\n    var rootDoesHavePassiveEffects = false;\n    var rootWithPendingPassiveEffects = null;\n    var pendingPassiveEffectsLanes = NoLanes;\n    var pendingPassiveProfilerEffects = [];\n\n    var NESTED_UPDATE_LIMIT = 50;\n    var nestedUpdateCount = 0;\n    var rootWithNestedUpdates = null;\n    var isFlushingPassiveEffects = false;\n    var didScheduleUpdateDuringPassiveEffects = false;\n    var NESTED_PASSIVE_UPDATE_LIMIT = 50;\n    var nestedPassiveUpdateCount = 0;\n    var rootWithPassiveNestedUpdates = null;\n    var isRunningInsertionEffect = false;\n    function getWorkInProgressRoot() {\n      return workInProgressRoot;\n    }\n    function getWorkInProgressRootRenderLanes() {\n      return workInProgressRootRenderLanes;\n    }\n    function isWorkLoopSuspendedOnData() {\n      return workInProgressSuspendedReason === SuspendedOnData;\n    }\n    function requestUpdateLane(fiber) {\n      // Special cases\n      var mode = fiber.mode;\n\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      } else if (\n        (executionContext & RenderContext) !== NoContext &&\n        workInProgressRootRenderLanes !== NoLanes\n      ) {\n        // This is a render phase update. These are not officially supported. The\n        // old behavior is to give this the same \"thread\" (lanes) as\n        // whatever is currently rendering. So if you call `setState` on a component\n        // that happens later in the same render, it will flush. Ideally, we want to\n        // remove the special case and treat them as if they came from an\n        // interleaved event. Regardless, this pattern is not officially supported.\n        // This behavior is only a fallback. The flag only exists until we can roll\n        // out the setState warning, since existing code might accidentally rely on\n        // the current behavior.\n        return pickArbitraryLane(workInProgressRootRenderLanes);\n      }\n\n      var transition = requestCurrentTransition();\n\n      if (transition !== null) {\n        {\n          var batchConfigTransition = ReactCurrentBatchConfig.transition;\n\n          if (!batchConfigTransition._updatedFibers) {\n            batchConfigTransition._updatedFibers = new Set();\n          }\n\n          batchConfigTransition._updatedFibers.add(fiber);\n        }\n\n        var actionScopeLane = peekEntangledActionLane();\n        return actionScopeLane !== NoLane // We're inside an async action scope. Reuse the same lane.\n          ? actionScopeLane // We may or may not be inside an async action scope. If we are, this\n          : // is the first update in that scope. Either way, we need to get a\n            // fresh transition lane.\n            requestTransitionLane();\n      } // Updates originating inside certain React methods, like flushSync, have\n      // their priority set by tracking it with a context variable.\n      //\n      // The opaque type returned by the host config is internally a lane, so we can\n      // use that directly.\n      // TODO: Move this type conversion to the event priority module.\n\n      var updateLane = getCurrentUpdatePriority();\n\n      if (updateLane !== NoLane) {\n        return updateLane;\n      } // This update originated outside React. Ask the host environment for an\n      // appropriate priority, based on the type of event.\n      //\n      // The opaque type returned by the host config is internally a lane, so we can\n      // use that directly.\n      // TODO: Move this type conversion to the event priority module.\n\n      var eventLane = getCurrentEventPriority();\n      return eventLane;\n    }\n\n    function requestRetryLane(fiber) {\n      // This is a fork of `requestUpdateLane` designed specifically for Suspense\n      // \"retries\" — a special update that attempts to flip a Suspense boundary\n      // from its placeholder state to its primary/resolved state.\n      // Special cases\n      var mode = fiber.mode;\n\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      }\n\n      return claimNextRetryLane();\n    }\n\n    function requestDeferredLane() {\n      if (workInProgressDeferredLane === NoLane) {\n        // If there are multiple useDeferredValue hooks in the same render, the\n        // tasks that they spawn should all be batched together, so they should all\n        // receive the same lane.\n        // Check the priority of the current render to decide the priority of the\n        // deferred task.\n        // OffscreenLane is used for prerendering, but we also use OffscreenLane\n        // for incremental hydration. It's given the lowest priority because the\n        // initial HTML is the same as the final UI. But useDeferredValue during\n        // hydration is an exception — we need to upgrade the UI to the final\n        // value. So if we're currently hydrating, we treat it like a transition.\n        var isPrerendering =\n          includesSomeLane(workInProgressRootRenderLanes, OffscreenLane) &&\n          !getIsHydrating();\n\n        if (isPrerendering) {\n          // There's only one OffscreenLane, so if it contains deferred work, we\n          // should just reschedule using the same lane.\n          workInProgressDeferredLane = OffscreenLane;\n        } else {\n          // Everything else is spawned as a transition.\n          workInProgressDeferredLane = claimNextTransitionLane();\n        }\n      } // Mark the parent Suspense boundary so it knows to spawn the deferred lane.\n\n      var suspenseHandler = getSuspenseHandler();\n\n      if (suspenseHandler !== null) {\n        // TODO: As an optimization, we shouldn't entangle the lanes at the root; we\n        // can entangle them using the baseLanes of the Suspense boundary instead.\n        // We only need to do something special if there's no Suspense boundary.\n        suspenseHandler.flags |= DidDefer;\n      }\n\n      return workInProgressDeferredLane;\n    }\n    function peekDeferredLane() {\n      return workInProgressDeferredLane;\n    }\n    function scheduleUpdateOnFiber(root, fiber, lane) {\n      {\n        if (isRunningInsertionEffect) {\n          error(\"useInsertionEffect must not schedule updates.\");\n        }\n      }\n\n      {\n        if (isFlushingPassiveEffects) {\n          didScheduleUpdateDuringPassiveEffects = true;\n        }\n      } // Check if the work loop is currently suspended and waiting for data to\n      // finish loading.\n\n      if (\n        // Suspended render phase\n        (root === workInProgressRoot &&\n          workInProgressSuspendedReason === SuspendedOnData) || // Suspended commit phase\n        root.cancelPendingCommit !== null\n      ) {\n        // The incoming update might unblock the current render. Interrupt the\n        // current attempt and restart from the top.\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended(\n          root,\n          workInProgressRootRenderLanes,\n          workInProgressDeferredLane\n        );\n      } // Mark that the root has a pending update.\n\n      markRootUpdated(root, lane);\n\n      if (\n        (executionContext & RenderContext) !== NoLanes &&\n        root === workInProgressRoot\n      ) {\n        // This update was dispatched during the render phase. This is a mistake\n        // if the update originates from user space (with the exception of local\n        // hook updates, which are handled differently and don't reach this\n        // function), but there are some internal React features that use this as\n        // an implementation detail, like selective hydration.\n        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n      } else {\n        // This is a normal update, scheduled from outside the render phase. For\n        // example, during an input event.\n        {\n          if (isDevToolsPresent) {\n            addFiberToLanesMap(root, fiber, lane);\n          }\n        }\n\n        warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n        if (root === workInProgressRoot) {\n          // Received an update to a tree that's in the middle of rendering. Mark\n          // that there was an interleaved update work on this root.\n          if ((executionContext & RenderContext) === NoContext) {\n            workInProgressRootInterleavedUpdatedLanes = mergeLanes(\n              workInProgressRootInterleavedUpdatedLanes,\n              lane\n            );\n          }\n\n          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n            // The root already suspended with a delay, which means this render\n            // definitely won't finish. Since we have a new update, let's mark it as\n            // suspended now, right before marking the incoming update. This has the\n            // effect of interrupting the current render and switching to the update.\n            // TODO: Make sure this doesn't override pings that happen while we've\n            // already started rendering.\n            markRootSuspended(\n              root,\n              workInProgressRootRenderLanes,\n              workInProgressDeferredLane\n            );\n          }\n        }\n\n        ensureRootIsScheduled(root);\n\n        if (\n          lane === SyncLane &&\n          executionContext === NoContext &&\n          (fiber.mode & ConcurrentMode) === NoMode\n        ) {\n          if (ReactCurrentActQueue.isBatchingLegacy);\n          else {\n            // Flush the synchronous work now, unless we're already working or inside\n            // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n            // scheduleCallbackForFiber to preserve the ability to schedule a callback\n            // without immediately flushing it. We only do this for user-initiated\n            // updates, to preserve historical behavior of legacy mode.\n            resetRenderTimer();\n            flushSyncWorkOnLegacyRootsOnly();\n          }\n        }\n      }\n    }\n    function isUnsafeClassRenderPhaseUpdate(fiber) {\n      // Check if this is a render phase update. Only called by class components,\n      // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n      return (executionContext & RenderContext) !== NoContext;\n    } // This is the entry point for every concurrent task, i.e. anything that\n    // goes through Scheduler.\n\n    function performConcurrentWorkOnRoot(root, didTimeout) {\n      {\n        resetNestedUpdateFlag();\n      }\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      } // Flush any pending passive effects before deciding which lanes to work on,\n      // in case they schedule additional work.\n\n      var originalCallbackNode = root.callbackNode;\n      var didFlushPassiveEffects = flushPassiveEffects();\n\n      if (didFlushPassiveEffects) {\n        // Something in the passive effect phase may have canceled the current task.\n        // Check if the task node for this root was changed.\n        if (root.callbackNode !== originalCallbackNode) {\n          // The current task was canceled. Exit. We don't need to call\n          // `ensureRootIsScheduled` because the check above implies either that\n          // there's a new task, or that there's no remaining work on this root.\n          return null;\n        }\n      } // Determine the next lanes to work on, using the fields stored\n      // on the root.\n      // TODO: This was already computed in the caller. Pass it as an argument.\n\n      var lanes = getNextLanes(\n        root,\n        root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes\n      );\n\n      if (lanes === NoLanes) {\n        // Defensive coding. This is never expected to happen.\n        return null;\n      } // We disable time-slicing in some cases: if the work has been CPU-bound\n      // for too long (\"expired\" work, to prevent starvation), or we're in\n      // sync-updates-by-default mode.\n      // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n      // bug we're still investigating. Once the bug in Scheduler is fixed,\n      // we can remove this, since we track expiration ourselves.\n\n      var shouldTimeSlice =\n        !includesBlockingLane(root, lanes) &&\n        !includesExpiredLane(root, lanes) &&\n        !didTimeout;\n      var exitStatus = shouldTimeSlice\n        ? renderRootConcurrent(root, lanes)\n        : renderRootSync(root, lanes);\n\n      if (exitStatus !== RootInProgress) {\n        var renderWasConcurrent = shouldTimeSlice;\n\n        do {\n          if (exitStatus === RootDidNotComplete) {\n            // The render unwound without completing the tree. This happens in special\n            // cases where need to exit the current render without producing a\n            // consistent tree or committing.\n            markRootSuspended(root, lanes, NoLane);\n          } else {\n            // The render completed.\n            // Check if this render may have yielded to a concurrent event, and if so,\n            // confirm that any newly rendered stores are consistent.\n            // TODO: It's possible that even a concurrent render may never have yielded\n            // to the main thread, if it was fast enough, or if it expired. We could\n            // skip the consistency check in that case, too.\n            var finishedWork = root.current.alternate;\n\n            if (\n              renderWasConcurrent &&\n              !isRenderConsistentWithExternalStores(finishedWork)\n            ) {\n              // A store was mutated in an interleaved event. Render again,\n              // synchronously, to block further mutations.\n              exitStatus = renderRootSync(root, lanes); // We assume the tree is now consistent because we didn't yield to any\n              // concurrent events.\n\n              renderWasConcurrent = false; // Need to check the exit status again.\n\n              continue;\n            } // Check if something threw\n\n            if (exitStatus === RootErrored) {\n              var originallyAttemptedLanes = lanes;\n              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(\n                root,\n                originallyAttemptedLanes\n              );\n\n              if (errorRetryLanes !== NoLanes) {\n                lanes = errorRetryLanes;\n                exitStatus = recoverFromConcurrentError(\n                  root,\n                  originallyAttemptedLanes,\n                  errorRetryLanes\n                );\n                renderWasConcurrent = false;\n              }\n            }\n\n            if (exitStatus === RootFatalErrored) {\n              var fatalError = workInProgressRootFatalError;\n              prepareFreshStack(root, NoLanes);\n              markRootSuspended(root, lanes, NoLane);\n              ensureRootIsScheduled(root);\n              throw fatalError;\n            } // We now have a consistent tree. The next step is either to commit it,\n            // or, if something suspended, wait to commit it after a timeout.\n\n            root.finishedWork = finishedWork;\n            root.finishedLanes = lanes;\n            finishConcurrentRender(root, exitStatus, finishedWork, lanes);\n          }\n\n          break;\n        } while (true);\n      }\n\n      ensureRootIsScheduled(root);\n      return getContinuationForRoot(root, originalCallbackNode);\n    }\n\n    function recoverFromConcurrentError(\n      root,\n      originallyAttemptedLanes,\n      errorRetryLanes\n    ) {\n      // If an error occurred during hydration, discard server response and fall\n      // back to client side render.\n      // Before rendering again, save the errors from the previous attempt.\n      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n      var wasRootDehydrated = isRootDehydrated(root);\n\n      if (wasRootDehydrated) {\n        // The shell failed to hydrate. Set a flag to force a client rendering\n        // during the next attempt. To do this, we call prepareFreshStack now\n        // to create the root work-in-progress fiber. This is a bit weird in terms\n        // of factoring, because it relies on renderRootSync not calling\n        // prepareFreshStack again in the call below, which happens because the\n        // root and lanes haven't changed.\n        //\n        // TODO: I think what we should do is set ForceClientRender inside\n        // throwException, like we do for nested Suspense boundaries. The reason\n        // it's here instead is so we can switch to the synchronous work loop, too.\n        // Something to consider for a future refactor.\n        var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n        rootWorkInProgress.flags |= ForceClientRender;\n\n        {\n          errorHydratingContainer();\n        }\n      }\n\n      var exitStatus = renderRootSync(root, errorRetryLanes);\n\n      if (exitStatus !== RootErrored) {\n        // Successfully finished rendering on retry\n        if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {\n          // During the synchronous render, we attached additional ping listeners.\n          // This is highly suggestive of an uncached promise (though it's not the\n          // only reason this would happen). If it was an uncached promise, then\n          // it may have masked a downstream error from ocurring without actually\n          // fixing it. Example:\n          //\n          //    use(Promise.resolve('uncached'))\n          //    throw new Error('Oops!')\n          //\n          // When this happens, there's a conflict between blocking potential\n          // concurrent data races and unwrapping uncached promise values. We\n          // have to choose one or the other. Because the data race recovery is\n          // a last ditch effort, we'll disable it.\n          root.errorRecoveryDisabledLanes = mergeLanes(\n            root.errorRecoveryDisabledLanes,\n            originallyAttemptedLanes\n          ); // Mark the current render as suspended and force it to restart. Once\n          // these lanes finish successfully, we'll re-enable the error recovery\n          // mechanism for subsequent updates.\n\n          workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes;\n          return RootSuspendedWithDelay;\n        } // The errors from the failed first attempt have been recovered. Add\n        // them to the collection of recoverable errors. We'll log them in the\n        // commit phase.\n\n        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n        workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n        // from the first attempt, to preserve the causal sequence.\n\n        if (errorsFromSecondAttempt !== null) {\n          queueRecoverableErrors(errorsFromSecondAttempt);\n        }\n      }\n\n      return exitStatus;\n    }\n\n    function queueRecoverableErrors(errors) {\n      if (workInProgressRootRecoverableErrors === null) {\n        workInProgressRootRecoverableErrors = errors;\n      } else {\n        // $FlowFixMe[method-unbinding]\n        workInProgressRootRecoverableErrors.push.apply(\n          workInProgressRootRecoverableErrors,\n          errors\n        );\n      }\n    }\n\n    function finishConcurrentRender(root, exitStatus, finishedWork, lanes) {\n      // TODO: The fact that most of these branches are identical suggests that some\n      // of the exit statuses are not best modeled as exit statuses and should be\n      // tracked orthogonally.\n      switch (exitStatus) {\n        case RootInProgress:\n        case RootFatalErrored: {\n          throw new Error(\"Root did not complete. This is a bug in React.\");\n        }\n\n        case RootSuspendedWithDelay: {\n          if (includesOnlyTransitions(lanes)) {\n            // This is a transition, so we should exit without committing a\n            // placeholder and without scheduling a timeout. Delay indefinitely\n            // until we receive more data.\n            markRootSuspended(root, lanes, workInProgressDeferredLane);\n            return;\n          } // Commit the placeholder.\n\n          break;\n        }\n\n        case RootErrored:\n        case RootSuspended:\n        case RootCompleted: {\n          break;\n        }\n\n        default: {\n          throw new Error(\"Unknown root exit status.\");\n        }\n      }\n\n      if (shouldForceFlushFallbacksInDEV()) {\n        // We're inside an `act` scope. Commit immediately.\n        commitRoot(\n          root,\n          workInProgressRootRecoverableErrors,\n          workInProgressTransitions,\n          workInProgressRootDidIncludeRecursiveRenderUpdate,\n          workInProgressDeferredLane\n        );\n      } else {\n        if (includesOnlyRetries(lanes) && exitStatus === RootSuspended) {\n          // This render only included retries, no updates. Throttle committing\n          // retries so that we don't show too many loading states too quickly.\n          var msUntilTimeout =\n            globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(); // Don't bother with a very short suspense time.\n\n          if (msUntilTimeout > 10) {\n            markRootSuspended(root, lanes, workInProgressDeferredLane);\n            var nextLanes = getNextLanes(root, NoLanes);\n\n            if (nextLanes !== NoLanes) {\n              // There's additional work we can do on this root. We might as well\n              // attempt to work on that while we're suspended.\n              return;\n            } // The render is suspended, it hasn't timed out, and there's no\n            // lower priority work to do. Instead of committing the fallback\n            // immediately, wait for more data to arrive.\n            // TODO: Combine retry throttling with Suspensey commits. Right now they\n            // run one after the other.\n\n            root.timeoutHandle = scheduleTimeout(\n              commitRootWhenReady.bind(\n                null,\n                root,\n                finishedWork,\n                workInProgressRootRecoverableErrors,\n                workInProgressTransitions,\n                workInProgressRootDidIncludeRecursiveRenderUpdate,\n                lanes,\n                workInProgressDeferredLane\n              ),\n              msUntilTimeout\n            );\n            return;\n          }\n        }\n\n        commitRootWhenReady(\n          root,\n          finishedWork,\n          workInProgressRootRecoverableErrors,\n          workInProgressTransitions,\n          workInProgressRootDidIncludeRecursiveRenderUpdate,\n          lanes,\n          workInProgressDeferredLane\n        );\n      }\n    }\n\n    function commitRootWhenReady(\n      root,\n      finishedWork,\n      recoverableErrors,\n      transitions,\n      didIncludeRenderPhaseUpdate,\n      lanes,\n      spawnedLane\n    ) {\n      // TODO: Combine retry throttling with Suspensey commits. Right now they run\n      // one after the other.\n      if (includesOnlyNonUrgentLanes(lanes)) {\n        // the suspensey resources. The renderer is responsible for accumulating\n        // all the load events. This all happens in a single synchronous\n        // transaction, so it track state in its own module scope.\n\n        accumulateSuspenseyCommit(finishedWork); // At the end, ask the renderer if it's ready to commit, or if we should\n        // suspend. If it's not ready, it will return a callback to subscribe to\n        // a ready event.\n\n        var schedulePendingCommit = waitForCommitToBeReady();\n\n        if (schedulePendingCommit !== null) {\n          // NOTE: waitForCommitToBeReady returns a subscribe function so that we\n          // only allocate a function if the commit isn't ready yet. The other\n          // pattern would be to always pass a callback to waitForCommitToBeReady.\n          // Not yet ready to commit. Delay the commit until the renderer notifies\n          // us that it's ready. This will be canceled if we start work on the\n          // root again.\n          root.cancelPendingCommit = schedulePendingCommit(\n            commitRoot.bind(\n              null,\n              root,\n              recoverableErrors,\n              transitions,\n              didIncludeRenderPhaseUpdate\n            )\n          );\n          markRootSuspended(root, lanes, spawnedLane);\n          return;\n        }\n      } // Otherwise, commit immediately.\n\n      commitRoot(\n        root,\n        recoverableErrors,\n        transitions,\n        didIncludeRenderPhaseUpdate,\n        spawnedLane\n      );\n    }\n\n    function isRenderConsistentWithExternalStores(finishedWork) {\n      // Search the rendered tree for external store reads, and check whether the\n      // stores were mutated in a concurrent event. Intentionally using an iterative\n      // loop instead of recursion so we can exit early.\n      var node = finishedWork;\n\n      while (true) {\n        if (node.flags & StoreConsistency) {\n          var updateQueue = node.updateQueue;\n\n          if (updateQueue !== null) {\n            var checks = updateQueue.stores;\n\n            if (checks !== null) {\n              for (var i = 0; i < checks.length; i++) {\n                var check = checks[i];\n                var getSnapshot = check.getSnapshot;\n                var renderedValue = check.value;\n\n                try {\n                  if (!objectIs(getSnapshot(), renderedValue)) {\n                    // Found an inconsistent store.\n                    return false;\n                  }\n                } catch (error) {\n                  // If `getSnapshot` throws, return `false`. This will schedule\n                  // a re-render, and the error will be rethrown during render.\n                  return false;\n                }\n              }\n            }\n          }\n        }\n\n        var child = node.child;\n\n        if (node.subtreeFlags & StoreConsistency && child !== null) {\n          child.return = node;\n          node = child;\n          continue;\n        }\n\n        if (node === finishedWork) {\n          return true;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === finishedWork) {\n            return true;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      } // Flow doesn't know this is unreachable, but eslint does\n      // eslint-disable-next-line no-unreachable\n\n      return true;\n    } // The extra indirections around markRootUpdated and markRootSuspended is\n    // needed to avoid a circular dependency between this module and\n    // ReactFiberLane. There's probably a better way to split up these modules and\n    // avoid this problem. Perhaps all the root-marking functions should move into\n    // the work loop.\n\n    function markRootUpdated(root, updatedLanes) {\n      markRootUpdated$1(root, updatedLanes);\n    }\n\n    function markRootPinged(root, pingedLanes) {\n      markRootPinged$1(root, pingedLanes);\n    }\n\n    function markRootSuspended(root, suspendedLanes, spawnedLane) {\n      // When suspending, we should always exclude lanes that were pinged or (more\n      // rarely, since we try to avoid it) updated during the render phase.\n      suspendedLanes = removeLanes(\n        suspendedLanes,\n        workInProgressRootPingedLanes\n      );\n      suspendedLanes = removeLanes(\n        suspendedLanes,\n        workInProgressRootInterleavedUpdatedLanes\n      );\n\n      markRootSuspended$1(root, suspendedLanes, spawnedLane);\n    } // This is the entry point for synchronous tasks that don't go\n    // through Scheduler\n\n    function performSyncWorkOnRoot(root, lanes) {\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      }\n\n      var didFlushPassiveEffects = flushPassiveEffects();\n\n      if (didFlushPassiveEffects) {\n        // If passive effects were flushed, exit to the outer work loop in the root\n        // scheduler, so we can recompute the priority.\n        // TODO: We don't actually need this `ensureRootIsScheduled` call because\n        // this path is only reachable if the root is already part of the schedule.\n        // I'm including it only for consistency with the other exit points from\n        // this function. Can address in a subsequent refactor.\n        ensureRootIsScheduled(root);\n        return null;\n      }\n\n      {\n        syncNestedUpdateFlag();\n      }\n\n      var exitStatus = renderRootSync(root, lanes);\n\n      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n        // If something threw an error, try rendering one more time. We'll render\n        // synchronously to block concurrent data mutations, and we'll includes\n        // all pending updates are included. If it still fails after the second\n        // attempt, we'll give up and commit the resulting tree.\n        var originallyAttemptedLanes = lanes;\n        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(\n          root,\n          originallyAttemptedLanes\n        );\n\n        if (errorRetryLanes !== NoLanes) {\n          lanes = errorRetryLanes;\n          exitStatus = recoverFromConcurrentError(\n            root,\n            originallyAttemptedLanes,\n            errorRetryLanes\n          );\n        }\n      }\n\n      if (exitStatus === RootFatalErrored) {\n        var fatalError = workInProgressRootFatalError;\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended(root, lanes, NoLane);\n        ensureRootIsScheduled(root);\n        throw fatalError;\n      }\n\n      if (exitStatus === RootDidNotComplete) {\n        // The render unwound without completing the tree. This happens in special\n        // cases where need to exit the current render without producing a\n        // consistent tree or committing.\n        markRootSuspended(root, lanes, workInProgressDeferredLane);\n        ensureRootIsScheduled(root);\n        return null;\n      } // We now have a consistent tree. Because this is a sync render, we\n      // will commit it even if something suspended.\n\n      var finishedWork = root.current.alternate;\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n        workInProgressRootDidIncludeRecursiveRenderUpdate,\n        workInProgressDeferredLane\n      ); // Before exiting, make sure there's a callback scheduled for the next\n      // pending level.\n\n      ensureRootIsScheduled(root);\n      return null;\n    }\n    function getExecutionContext() {\n      return executionContext;\n    }\n    function batchedUpdates(fn, a) {\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n\n      try {\n        return fn(a);\n      } finally {\n        executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n        // most batchedUpdates-like method.\n\n        if (\n          executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n          !ReactCurrentActQueue.isBatchingLegacy\n        ) {\n          resetRenderTimer();\n          flushSyncWorkOnLegacyRootsOnly();\n        }\n      }\n    }\n    // Warning, this opts-out of checking the function body.\n    // eslint-disable-next-line no-unused-vars\n    // eslint-disable-next-line no-redeclare\n    // eslint-disable-next-line no-redeclare\n\n    function flushSync(fn) {\n      // In legacy mode, we flush pending passive effects at the beginning of the\n      // next event, not at the end of the previous one.\n      if (\n        rootWithPendingPassiveEffects !== null &&\n        rootWithPendingPassiveEffects.tag === LegacyRoot &&\n        (executionContext & (RenderContext | CommitContext)) === NoContext\n      ) {\n        flushPassiveEffects();\n      }\n\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      var prevTransition = ReactCurrentBatchConfig.transition;\n      var previousPriority = getCurrentUpdatePriority();\n\n      try {\n        ReactCurrentBatchConfig.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n\n        if (fn) {\n          return fn();\n        } else {\n          return undefined;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig.transition = prevTransition;\n        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n        // Note that this will happen even if batchedUpdates is higher up\n        // the stack.\n\n        if (\n          (executionContext & (RenderContext | CommitContext)) ===\n          NoContext\n        ) {\n          flushSyncWorkOnAllRoots();\n        }\n      }\n    }\n    // hidden subtree. The stack logic is managed there because that's the only\n    // place that ever modifies it. Which module it lives in doesn't matter for\n    // performance because this function will get inlined regardless\n\n    function setEntangledRenderLanes(newEntangledRenderLanes) {\n      entangledRenderLanes = newEntangledRenderLanes;\n    }\n    function getEntangledRenderLanes() {\n      return entangledRenderLanes;\n    }\n\n    function resetWorkInProgressStack() {\n      if (workInProgress === null) return;\n      var interruptedWork;\n\n      if (workInProgressSuspendedReason === NotSuspended) {\n        // Normal case. Work-in-progress hasn't started yet. Unwind all\n        // its parents.\n        interruptedWork = workInProgress.return;\n      } else {\n        // Work-in-progress is in suspended state. Reset the work loop and unwind\n        // both the suspended fiber and all its parents.\n        resetSuspendedWorkLoopOnUnwind(workInProgress);\n        interruptedWork = workInProgress;\n      }\n\n      while (interruptedWork !== null) {\n        var current = interruptedWork.alternate;\n        unwindInterruptedWork(current, interruptedWork);\n        interruptedWork = interruptedWork.return;\n      }\n\n      workInProgress = null;\n    }\n\n    function prepareFreshStack(root, lanes) {\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n      var timeoutHandle = root.timeoutHandle;\n\n      if (timeoutHandle !== noTimeout) {\n        // The root previous suspended and scheduled a timeout to commit a fallback\n        // state. Now that we have additional work, cancel the timeout.\n        root.timeoutHandle = noTimeout; // $FlowFixMe[incompatible-call] Complains noTimeout is not a TimeoutID, despite the check above\n\n        cancelTimeout(timeoutHandle);\n      }\n\n      var cancelPendingCommit = root.cancelPendingCommit;\n\n      if (cancelPendingCommit !== null) {\n        root.cancelPendingCommit = null;\n        cancelPendingCommit();\n      }\n\n      resetWorkInProgressStack();\n      workInProgressRoot = root;\n      var rootWorkInProgress = createWorkInProgress(root.current, null);\n      workInProgress = rootWorkInProgress;\n      workInProgressRootRenderLanes = lanes;\n      workInProgressSuspendedReason = NotSuspended;\n      workInProgressThrownValue = null;\n      workInProgressRootDidAttachPingListener = false;\n      workInProgressRootExitStatus = RootInProgress;\n      workInProgressRootFatalError = null;\n      workInProgressRootSkippedLanes = NoLanes;\n      workInProgressRootInterleavedUpdatedLanes = NoLanes;\n      workInProgressRootPingedLanes = NoLanes;\n      workInProgressDeferredLane = NoLane;\n      workInProgressRootConcurrentErrors = null;\n      workInProgressRootRecoverableErrors = null;\n      workInProgressRootDidIncludeRecursiveRenderUpdate = false; // Get the lanes that are entangled with whatever we're about to render. We\n      // track these separately so we can distinguish the priority of the render\n      // task from the priority of the lanes it is entangled with. For example, a\n      // transition may not be allowed to finish unless it includes the Sync lane,\n      // which is currently suspended. We should be able to render the Transition\n      // and Sync lane in the same batch, but at Transition priority, because the\n      // Sync lane already suspended.\n\n      entangledRenderLanes = getEntangledLanes(root, lanes);\n      finishQueueingConcurrentUpdates();\n\n      {\n        ReactStrictModeWarnings.discardPendingWarnings();\n      }\n\n      return rootWorkInProgress;\n    }\n\n    function resetSuspendedWorkLoopOnUnwind(fiber) {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksOnUnwind(fiber);\n      resetChildReconcilerOnUnwind();\n    }\n\n    function handleThrow(root, thrownValue) {\n      // A component threw an exception. Usually this is because it suspended, but\n      // it also includes regular program errors.\n      //\n      // We're either going to unwind the stack to show a Suspense or error\n      // boundary, or we're going to replay the component again. Like after a\n      // promise resolves.\n      //\n      // Until we decide whether we're going to unwind or replay, we should preserve\n      // the current state of the work loop without resetting anything.\n      //\n      // If we do decide to unwind the stack, module-level variables will be reset\n      // in resetSuspendedWorkLoopOnUnwind.\n      // These should be reset immediately because they're only supposed to be set\n      // when React is executing user code.\n      resetHooksAfterThrow();\n      resetCurrentFiber();\n      ReactCurrentOwner$1.current = null;\n\n      if (thrownValue === SuspenseException) {\n        // This is a special type of exception used for Suspense. For historical\n        // reasons, the rest of the Suspense implementation expects the thrown value\n        // to be a thenable, because before `use` existed that was the (unstable)\n        // API for suspending. This implementation detail can change later, once we\n        // deprecate the old API in favor of `use`.\n        thrownValue = getSuspendedThenable();\n        workInProgressSuspendedReason =\n          shouldRemainOnPreviousScreen() && // Check if there are other pending updates that might possibly unblock this\n          // component from suspending. This mirrors the check in\n          // renderDidSuspendDelayIfPossible. We should attempt to unify them somehow.\n          // TODO: Consider unwinding immediately, using the\n          // SuspendedOnHydration mechanism.\n          !includesNonIdleWork(workInProgressRootSkippedLanes) &&\n          !includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes) // Suspend work loop until data resolves\n            ? SuspendedOnData // Don't suspend work loop, except to check if the data has\n            : // immediately resolved (i.e. in a microtask). Otherwise, trigger the\n              // nearest Suspense fallback.\n              SuspendedOnImmediate;\n      } else if (thrownValue === SuspenseyCommitException) {\n        thrownValue = getSuspendedThenable();\n        workInProgressSuspendedReason = SuspendedOnInstance;\n      } else if (thrownValue === SelectiveHydrationException) {\n        // An update flowed into a dehydrated boundary. Before we can apply the\n        // update, we need to finish hydrating. Interrupt the work-in-progress\n        // render so we can restart at the hydration lane.\n        //\n        // The ideal implementation would be able to switch contexts without\n        // unwinding the current stack.\n        //\n        // We could name this something more general but as of now it's the only\n        // case where we think this should happen.\n        workInProgressSuspendedReason = SuspendedOnHydration;\n      } else {\n        // This is a regular error.\n        var isWakeable =\n          thrownValue !== null &&\n          typeof thrownValue === \"object\" &&\n          typeof thrownValue.then === \"function\";\n        workInProgressSuspendedReason = isWakeable // A wakeable object was thrown by a legacy Suspense implementation.\n          ? // This has slightly different behavior than suspending with `use`.\n            SuspendedOnDeprecatedThrowPromise // This is a regular error. If something earlier in the component already\n          : // suspended, we must clear the thenable state to unblock the work loop.\n            SuspendedOnError;\n      }\n\n      workInProgressThrownValue = thrownValue;\n      var erroredWork = workInProgress;\n\n      if (erroredWork === null) {\n        // This is a fatal error\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        return;\n      }\n\n      if (erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n    }\n\n    function shouldRemainOnPreviousScreen() {\n      // This is asking whether it's better to suspend the transition and remain\n      // on the previous screen, versus showing a fallback as soon as possible. It\n      // takes into account both the priority of render and also whether showing a\n      // fallback would produce a desirable user experience.\n      var handler = getSuspenseHandler();\n\n      if (handler === null) {\n        // There's no Suspense boundary that can provide a fallback. We have no\n        // choice but to remain on the previous screen.\n        // NOTE: We do this even for sync updates, for lack of any better option. In\n        // the future, we may change how we handle this, like by putting the whole\n        // root into a \"detached\" mode.\n        return true;\n      } // TODO: Once `use` has fully replaced the `throw promise` pattern, we should\n      // be able to remove the equivalent check in finishConcurrentRender, and rely\n      // just on this one.\n\n      if (includesOnlyTransitions(workInProgressRootRenderLanes)) {\n        if (getShellBoundary() === null) {\n          // We're rendering inside the \"shell\" of the app. Activating the nearest\n          // fallback would cause visible content to disappear. It's better to\n          // suspend the transition and remain on the previous screen.\n          return true;\n        } else {\n          // We're rendering content that wasn't part of the previous screen.\n          // Rather than block the transition, it's better to show a fallback as\n          // soon as possible. The appearance of any nested fallbacks will be\n          // throttled to avoid jank.\n          return false;\n        }\n      }\n\n      if (\n        includesOnlyRetries(workInProgressRootRenderLanes) || // In this context, an OffscreenLane counts as a Retry\n        // TODO: It's become increasingly clear that Retries and Offscreen are\n        // deeply connected. They probably can be unified further.\n        includesSomeLane(workInProgressRootRenderLanes, OffscreenLane)\n      ) {\n        // During a retry, we can suspend rendering if the nearest Suspense boundary\n        // is the boundary of the \"shell\", because we're guaranteed not to block\n        // any new content from appearing.\n        //\n        // The reason we must check if this is a retry is because it guarantees\n        // that suspending the work loop won't block an actual update, because\n        // retries don't \"update\" anything; they fill in fallbacks that were left\n        // behind by a previous transition.\n        return handler === getShellBoundary();\n      } // For all other Lanes besides Transitions and Retries, we should not wait\n      // for the data to load.\n\n      return false;\n    }\n\n    function pushDispatcher(container) {\n      var prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n      if (prevDispatcher === null) {\n        // The React isomorphic package does not include a default dispatcher.\n        // Instead the first renderer will lazily attach one, in order to give\n        // nicer error messages.\n        return ContextOnlyDispatcher;\n      } else {\n        return prevDispatcher;\n      }\n    }\n\n    function popDispatcher(prevDispatcher) {\n      ReactCurrentDispatcher.current = prevDispatcher;\n    }\n\n    function markCommitTimeOfFallback() {\n      globalMostRecentFallbackTime = now$1();\n    }\n    function markSkippedUpdateLanes(lane) {\n      workInProgressRootSkippedLanes = mergeLanes(\n        lane,\n        workInProgressRootSkippedLanes\n      );\n    }\n    function renderDidSuspend() {\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootSuspended;\n      }\n    }\n    function renderDidSuspendDelayIfPossible() {\n      workInProgressRootExitStatus = RootSuspendedWithDelay; // Check if there are updates that we skipped tree that might have unblocked\n      // this render.\n\n      if (\n        (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n          includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) &&\n        workInProgressRoot !== null\n      ) {\n        // Mark the current render as suspended so that we switch to working on\n        // the updates that were skipped. Usually we only suspend at the end of\n        // the render phase.\n        // TODO: We should probably always mark the root as suspended immediately\n        // (inside this function), since by suspending at the end of the render\n        // phase introduces a potential mistake where we suspend lanes that were\n        // pinged or updated while we were rendering.\n        // TODO: Consider unwinding immediately, using the\n        // SuspendedOnHydration mechanism.\n        markRootSuspended(\n          workInProgressRoot,\n          workInProgressRootRenderLanes,\n          workInProgressDeferredLane\n        );\n      }\n    }\n    function renderDidError(error) {\n      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n        workInProgressRootExitStatus = RootErrored;\n      }\n\n      if (workInProgressRootConcurrentErrors === null) {\n        workInProgressRootConcurrentErrors = [error];\n      } else {\n        workInProgressRootConcurrentErrors.push(error);\n      }\n    } // Called during render to determine if anything has suspended.\n    // Returns false if we're not sure.\n\n    function renderHasNotSuspendedYet() {\n      // If something errored or completed, we can't really be sure,\n      // so those are false.\n      return workInProgressRootExitStatus === RootInProgress;\n    } // TODO: Over time, this function and renderRootConcurrent have become more\n    // and more similar. Not sure it makes sense to maintain forked paths. Consider\n    // unifying them again.\n\n    function renderRootSync(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher();\n      // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n      if (\n        workInProgressRoot !== root ||\n        workInProgressRootRenderLanes !== lanes\n      ) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n            // If we bailout on this work, we'll move them back (like above).\n            // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n            // That way we can keep the current update and future updates separate.\n\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n\n        workInProgressTransitions = getTransitionsForLanes();\n        prepareFreshStack(root, lanes);\n      }\n\n      var didSuspendInShell = false;\n\n      outer: do {\n        try {\n          if (\n            workInProgressSuspendedReason !== NotSuspended &&\n            workInProgress !== null\n          ) {\n            // The work loop is suspended. During a synchronous render, we don't\n            // yield to the main thread. Immediately unwind the stack. This will\n            // trigger either a fallback or an error boundary.\n            // TODO: For discrete and \"default\" updates (anything that's not\n            // flushSync), we want to wait for the microtasks the flush before\n            // unwinding. Will probably implement this using renderRootConcurrent,\n            // or merge renderRootSync and renderRootConcurrent into the same\n            // function and fork the behavior some other way.\n            var unitOfWork = workInProgress;\n            var thrownValue = workInProgressThrownValue;\n\n            switch (workInProgressSuspendedReason) {\n              case SuspendedOnHydration: {\n                // Selective hydration. An update flowed into a dehydrated tree.\n                // Interrupt the current render so the work loop can switch to the\n                // hydration lane.\n                resetWorkInProgressStack();\n                workInProgressRootExitStatus = RootDidNotComplete;\n                break outer;\n              }\n\n              case SuspendedOnImmediate:\n              case SuspendedOnData: {\n                if (!didSuspendInShell && getSuspenseHandler() === null) {\n                  didSuspendInShell = true;\n                } // Intentional fallthrough\n              }\n\n              default: {\n                // Unwind then continue with the normal work loop.\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                break;\n              }\n            }\n          }\n\n          workLoopSync();\n          break;\n        } catch (thrownValue) {\n          handleThrow(root, thrownValue);\n        }\n      } while (true); // Check if something suspended in the shell. We use this to detect an\n      // infinite ping loop caused by an uncached promise.\n      //\n      // Only increment this counter once per synchronous render attempt across the\n      // whole tree. Even if there are many sibling components that suspend, this\n      // counter only gets incremented once.\n\n      if (didSuspendInShell) {\n        root.shellSuspendCounter++;\n      }\n\n      resetContextDependencies();\n      executionContext = prevExecutionContext;\n      popDispatcher(prevDispatcher);\n\n      if (workInProgress !== null) {\n        // This is a sync render, so we should have finished the whole tree.\n        throw new Error(\n          \"Cannot commit an incomplete root. This error is likely caused by a \" +\n            \"bug in React. Please file an issue.\"\n        );\n      }\n\n      workInProgressRoot = null;\n      workInProgressRootRenderLanes = NoLanes; // It's safe to process the queue now that the render phase is complete.\n\n      finishQueueingConcurrentUpdates();\n      return workInProgressRootExitStatus;\n    } // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n    /** @noinline */\n\n    function workLoopSync() {\n      // Perform work without checking if we need to yield between fiber.\n      while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n\n    function renderRootConcurrent(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher();\n      // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n      if (\n        workInProgressRoot !== root ||\n        workInProgressRootRenderLanes !== lanes\n      ) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n            // If we bailout on this work, we'll move them back (like above).\n            // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n            // That way we can keep the current update and future updates separate.\n\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n\n        workInProgressTransitions = getTransitionsForLanes();\n        resetRenderTimer();\n        prepareFreshStack(root, lanes);\n      }\n\n      outer: do {\n        try {\n          if (\n            workInProgressSuspendedReason !== NotSuspended &&\n            workInProgress !== null\n          ) {\n            // The work loop is suspended. We need to either unwind the stack or\n            // replay the suspended component.\n            var unitOfWork = workInProgress;\n            var thrownValue = workInProgressThrownValue;\n\n            resumeOrUnwind: switch (workInProgressSuspendedReason) {\n              case SuspendedOnError: {\n                // Unwind then continue with the normal work loop.\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                break;\n              }\n\n              case SuspendedOnData: {\n                var thenable = thrownValue;\n\n                if (isThenableResolved(thenable)) {\n                  // The data resolved. Try rendering the component again.\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  replaySuspendedUnitOfWork(unitOfWork);\n                  break;\n                } // The work loop is suspended on data. We should wait for it to\n                // resolve before continuing to render.\n                // TODO: Handle the case where the promise resolves synchronously.\n                // Usually this is handled when we instrument the promise to add a\n                // `status` field, but if the promise already has a status, we won't\n                // have added a listener until right here.\n\n                var onResolution = function () {\n                  // Check if the root is still suspended on this promise.\n                  if (\n                    workInProgressSuspendedReason === SuspendedOnData &&\n                    workInProgressRoot === root\n                  ) {\n                    // Mark the root as ready to continue rendering.\n                    workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                  } // Ensure the root is scheduled. We should do this even if we're\n                  // currently working on a different root, so that we resume\n                  // rendering later.\n\n                  ensureRootIsScheduled(root);\n                };\n\n                thenable.then(onResolution, onResolution);\n                break outer;\n              }\n\n              case SuspendedOnImmediate: {\n                // If this fiber just suspended, it's possible the data is already\n                // cached. Yield to the main thread to give it a chance to ping. If\n                // it does, we can retry immediately without unwinding the stack.\n                workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                break outer;\n              }\n\n              case SuspendedOnInstance: {\n                workInProgressSuspendedReason =\n                  SuspendedOnInstanceAndReadyToContinue;\n                break outer;\n              }\n\n              case SuspendedAndReadyToContinue: {\n                var _thenable = thrownValue;\n\n                if (isThenableResolved(_thenable)) {\n                  // The data resolved. Try rendering the component again.\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  replaySuspendedUnitOfWork(unitOfWork);\n                } else {\n                  // Otherwise, unwind then continue with the normal work loop.\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                }\n\n                break;\n              }\n\n              case SuspendedOnInstanceAndReadyToContinue: {\n                switch (workInProgress.tag) {\n                  case HostComponent:\n                  case HostHoistable:\n                  case HostSingleton: {\n                    // Before unwinding the stack, check one more time if the\n                    // instance is ready. It may have loaded when React yielded to\n                    // the main thread.\n                    // Assigning this to a constant so Flow knows the binding won't\n                    // be mutated by `preloadInstance`.\n                    var hostFiber = workInProgress;\n                    var type = hostFiber.type;\n                    var props = hostFiber.pendingProps;\n                    var isReady = preloadInstance(type, props);\n\n                    if (isReady) {\n                      // The data resolved. Resume the work loop as if nothing\n                      // suspended. Unlike when a user component suspends, we don't\n                      // have to replay anything because the host fiber\n                      // already completed.\n                      workInProgressSuspendedReason = NotSuspended;\n                      workInProgressThrownValue = null;\n                      var sibling = hostFiber.sibling;\n\n                      if (sibling !== null) {\n                        workInProgress = sibling;\n                      } else {\n                        var returnFiber = hostFiber.return;\n\n                        if (returnFiber !== null) {\n                          workInProgress = returnFiber;\n                          completeUnitOfWork(returnFiber);\n                        } else {\n                          workInProgress = null;\n                        }\n                      }\n\n                      break resumeOrUnwind;\n                    }\n\n                    break;\n                  }\n\n                  default: {\n                    // This will fail gracefully but it's not correct, so log a\n                    // warning in dev.\n                    if (true) {\n                      error(\n                        \"Unexpected type of fiber triggered a suspensey commit. \" +\n                          \"This is a bug in React.\"\n                      );\n                    }\n\n                    break;\n                  }\n                } // Otherwise, unwind then continue with the normal work loop.\n\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                break;\n              }\n\n              case SuspendedOnDeprecatedThrowPromise: {\n                // Suspended by an old implementation that uses the `throw promise`\n                // pattern. The newer replaying behavior can cause subtle issues\n                // like infinite ping loops. So we maintain the old behavior and\n                // always unwind.\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                break;\n              }\n\n              case SuspendedOnHydration: {\n                // Selective hydration. An update flowed into a dehydrated tree.\n                // Interrupt the current render so the work loop can switch to the\n                // hydration lane.\n                resetWorkInProgressStack();\n                workInProgressRootExitStatus = RootDidNotComplete;\n                break outer;\n              }\n\n              default: {\n                throw new Error(\n                  \"Unexpected SuspendedReason. This is a bug in React.\"\n                );\n              }\n            }\n          }\n\n          if (true && ReactCurrentActQueue.current !== null) {\n            // `act` special case: If we're inside an `act` scope, don't consult\n            // `shouldYield`. Always keep working until the render is complete.\n            // This is not just an optimization: in a unit test environment, we\n            // can't trust the result of `shouldYield`, because the host I/O is\n            // likely mocked.\n            workLoopSync();\n          } else {\n            workLoopConcurrent();\n          }\n\n          break;\n        } catch (thrownValue) {\n          handleThrow(root, thrownValue);\n        }\n      } while (true);\n\n      resetContextDependencies();\n      popDispatcher(prevDispatcher);\n      executionContext = prevExecutionContext;\n\n      if (workInProgress !== null) {\n        return RootInProgress;\n      } else {\n        workInProgressRoot = null;\n        workInProgressRootRenderLanes = NoLanes; // It's safe to process the queue now that the render phase is complete.\n\n        finishQueueingConcurrentUpdates(); // Return the final exit status.\n\n        return workInProgressRootExitStatus;\n      }\n    }\n    /** @noinline */\n\n    function workLoopConcurrent() {\n      // Perform work until Scheduler asks us to yield\n      while (workInProgress !== null && !shouldYield()) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        performUnitOfWork(workInProgress);\n      }\n    }\n\n    function performUnitOfWork(unitOfWork) {\n      // The current, flushed, state of this fiber is the alternate. Ideally\n      // nothing should rely on this, but relying on it here means that we don't\n      // need an additional field on the work in progress.\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n\n      if ((unitOfWork.mode & ProfileMode) !== NoMode) {\n        startProfilerTimer(unitOfWork);\n        next = beginWork(current, unitOfWork, entangledRenderLanes);\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      } else {\n        next = beginWork(current, unitOfWork, entangledRenderLanes);\n      }\n\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n      if (next === null) {\n        // If this doesn't spawn new work, complete the current work.\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n\n      ReactCurrentOwner$1.current = null;\n    }\n\n    function replaySuspendedUnitOfWork(unitOfWork) {\n      // This is a fork of performUnitOfWork specifcally for replaying a fiber that\n      // just suspended.\n      //\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n      setCurrentFiber(unitOfWork);\n      var isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;\n\n      if (isProfilingMode) {\n        startProfilerTimer(unitOfWork);\n      }\n\n      switch (unitOfWork.tag) {\n        case IndeterminateComponent: {\n          // Because it suspended with `use`, we can assume it's a\n          // function component.\n          unitOfWork.tag = FunctionComponent; // Fallthrough to the next branch.\n        }\n\n        case SimpleMemoComponent:\n        case FunctionComponent: {\n          // Resolve `defaultProps`. This logic is copied from `beginWork`.\n          // TODO: Consider moving this switch statement into that module. Also,\n          // could maybe use this as an opportunity to say `use` doesn't work with\n          // `defaultProps` :)\n          var Component = unitOfWork.type;\n          var unresolvedProps = unitOfWork.pendingProps;\n          var resolvedProps =\n            unitOfWork.elementType === Component\n              ? unresolvedProps\n              : resolveDefaultProps(Component, unresolvedProps);\n          var context;\n\n          next = replayFunctionComponent(\n            current,\n            unitOfWork,\n            resolvedProps,\n            Component,\n            context,\n            workInProgressRootRenderLanes\n          );\n          break;\n        }\n\n        case ForwardRef: {\n          // Resolve `defaultProps`. This logic is copied from `beginWork`.\n          // TODO: Consider moving this switch statement into that module. Also,\n          // could maybe use this as an opportunity to say `use` doesn't work with\n          // `defaultProps` :)\n          var _Component = unitOfWork.type.render;\n          var _unresolvedProps = unitOfWork.pendingProps;\n\n          var _resolvedProps =\n            unitOfWork.elementType === _Component\n              ? _unresolvedProps\n              : resolveDefaultProps(_Component, _unresolvedProps);\n\n          next = replayFunctionComponent(\n            current,\n            unitOfWork,\n            _resolvedProps,\n            _Component,\n            unitOfWork.ref,\n            workInProgressRootRenderLanes\n          );\n          break;\n        }\n\n        case HostComponent: {\n          // Some host components are stateful (that's how we implement form\n          // actions) but we don't bother to reuse the memoized state because it's\n          // not worth the extra code. The main reason to reuse the previous hooks\n          // is to reuse uncached promises, but we happen to know that the only\n          // promises that a host component might suspend on are definitely cached\n          // because they are controlled by us. So don't bother.\n          resetHooksOnUnwind(unitOfWork); // Fallthrough to the next branch.\n        }\n\n        default: {\n          // Other types besides function components are reset completely before\n          // being replayed. Currently this only happens when a Usable type is\n          // reconciled — the reconciler will suspend.\n          //\n          // We reset the fiber back to its original state; however, this isn't\n          // a full \"unwind\" because we're going to reuse the promises that were\n          // reconciled previously. So it's intentional that we don't call\n          // resetSuspendedWorkLoopOnUnwind here.\n          unwindInterruptedWork(current, unitOfWork);\n          unitOfWork = workInProgress = resetWorkInProgress(\n            unitOfWork,\n            entangledRenderLanes\n          );\n          next = beginWork(current, unitOfWork, entangledRenderLanes);\n          break;\n        }\n      }\n\n      if (isProfilingMode) {\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      } // The begin phase finished successfully without suspending. Return to the\n      // normal work loop.\n\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n      if (next === null) {\n        // If this doesn't spawn new work, complete the current work.\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n\n      ReactCurrentOwner$1.current = null;\n    }\n\n    function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue) {\n      // This is a fork of performUnitOfWork specifcally for unwinding a fiber\n      // that threw an exception.\n      //\n      // Return to the normal work loop. This will unwind the stack, and potentially\n      // result in showing a fallback.\n      resetSuspendedWorkLoopOnUnwind(unitOfWork);\n      var returnFiber = unitOfWork.return;\n\n      try {\n        // Find and mark the nearest Suspense or error boundary that can handle\n        // this \"exception\".\n        var didFatal = throwException(\n          root,\n          returnFiber,\n          unitOfWork,\n          thrownValue,\n          workInProgressRootRenderLanes\n        );\n\n        if (didFatal) {\n          panicOnRootError(thrownValue);\n          return;\n        }\n      } catch (error) {\n        // We had trouble processing the error. An example of this happening is\n        // when accessing the `componentDidCatch` property of an error boundary\n        // throws an error. A weird edge case. There's a regression test for this.\n        // To prevent an infinite loop, bubble the error up to the next parent.\n        if (returnFiber !== null) {\n          workInProgress = returnFiber;\n          throw error;\n        } else {\n          panicOnRootError(thrownValue);\n          return;\n        }\n      }\n\n      if (unitOfWork.flags & Incomplete) {\n        // Unwind the stack until we reach the nearest boundary.\n        unwindUnitOfWork(unitOfWork);\n      } else {\n        // Although the fiber suspended, we're intentionally going to commit it in\n        // an inconsistent state. We can do this safely in cases where we know the\n        // inconsistent tree will be hidden.\n        //\n        // This currently only applies to Legacy Suspense implementation, but we may\n        // port a version of this to concurrent roots, too, when performing a\n        // synchronous render. Because that will allow us to mutate the tree as we\n        // go instead of buffering mutations until the end. Though it's unclear if\n        // this particular path is how that would be implemented.\n        completeUnitOfWork(unitOfWork);\n      }\n    }\n\n    function panicOnRootError(error) {\n      // There's no ancestor that can handle this exception. This should never\n      // happen because the root is supposed to capture all errors that weren't\n      // caught by an error boundary. This is a fatal error, or panic condition,\n      // because we've run out of ways to recover.\n      workInProgressRootExitStatus = RootFatalErrored;\n      workInProgressRootFatalError = error; // Set `workInProgress` to null. This represents advancing to the next\n      // sibling, or the parent if there are no siblings. But since the root\n      // has no siblings nor a parent, we set it to null. Usually this is\n      // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n      // intentionally not calling those, we need set it here.\n      // TODO: Consider calling `unwindWork` to pop the contexts.\n\n      workInProgress = null;\n    }\n\n    function completeUnitOfWork(unitOfWork) {\n      // Attempt to complete the current unit of work, then move to the next\n      // sibling. If there are no more siblings, return to the parent fiber.\n      var completedWork = unitOfWork;\n\n      do {\n        {\n          if ((completedWork.flags & Incomplete) !== NoFlags$1) {\n            // NOTE: If we re-enable sibling prerendering in some cases, this branch\n            // is where we would switch to the unwinding path.\n            error(\n              \"Internal React error: Expected this fiber to be complete, but \" +\n                \"it isn't. It should have been unwound. This is a bug in React.\"\n            );\n          }\n        } // The current, flushed, state of this fiber is the alternate. Ideally\n        // nothing should rely on this, but relying on it here means that we don't\n        // need an additional field on the work in progress.\n\n        var current = completedWork.alternate;\n        var returnFiber = completedWork.return;\n        setCurrentFiber(completedWork);\n        var next = void 0;\n\n        if ((completedWork.mode & ProfileMode) === NoMode) {\n          next = completeWork(current, completedWork, entangledRenderLanes);\n        } else {\n          startProfilerTimer(completedWork);\n          next = completeWork(current, completedWork, entangledRenderLanes); // Update render duration assuming we didn't error.\n\n          stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n        }\n\n        resetCurrentFiber();\n\n        if (next !== null) {\n          // Completing this fiber spawned new work. Work on that next.\n          workInProgress = next;\n          return;\n        }\n\n        var siblingFiber = completedWork.sibling;\n\n        if (siblingFiber !== null) {\n          // If there is more work to do in this returnFiber, do that next.\n          workInProgress = siblingFiber;\n          return;\n        } // Otherwise, return to the parent\n        // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n        completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n        workInProgress = completedWork;\n      } while (completedWork !== null); // We've reached the root.\n\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootCompleted;\n      }\n    }\n\n    function unwindUnitOfWork(unitOfWork) {\n      var incompleteWork = unitOfWork;\n\n      do {\n        // The current, flushed, state of this fiber is the alternate. Ideally\n        // nothing should rely on this, but relying on it here means that we don't\n        // need an additional field on the work in progress.\n        var current = incompleteWork.alternate; // This fiber did not complete because something threw. Pop values off\n        // the stack without entering the complete phase. If this is a boundary,\n        // capture values if possible.\n\n        var next = unwindWork(current, incompleteWork); // Because this fiber did not complete, don't reset its lanes.\n\n        if (next !== null) {\n          // Found a boundary that can handle this exception. Re-renter the\n          // begin phase. This branch will return us to the normal work loop.\n          //\n          // Since we're restarting, remove anything that is not a host effect\n          // from the effect tag.\n          next.flags &= HostEffectMask;\n          workInProgress = next;\n          return;\n        } // Keep unwinding until we reach either a boundary or the root.\n\n        if ((incompleteWork.mode & ProfileMode) !== NoMode) {\n          // Record the render duration for the fiber that errored.\n          stopProfilerTimerIfRunningAndRecordDelta(incompleteWork, false); // Include the time spent working on failed children before continuing.\n\n          var actualDuration = incompleteWork.actualDuration;\n          var child = incompleteWork.child;\n\n          while (child !== null) {\n            // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n            actualDuration += child.actualDuration;\n            child = child.sibling;\n          }\n\n          incompleteWork.actualDuration = actualDuration;\n        } // TODO: Once we stop prerendering siblings, instead of resetting the parent\n        // of the node being unwound, we should be able to reset node itself as we\n        // unwind the stack. Saves an additional null check.\n\n        var returnFiber = incompleteWork.return;\n\n        if (returnFiber !== null) {\n          // Mark the parent fiber as incomplete and clear its subtree flags.\n          // TODO: Once we stop prerendering siblings, we may be able to get rid of\n          // the Incomplete flag because unwinding to the nearest boundary will\n          // happen synchronously.\n          returnFiber.flags |= Incomplete;\n          returnFiber.subtreeFlags = NoFlags$1;\n          returnFiber.deletions = null;\n        } // NOTE: If we re-enable sibling prerendering in some cases, here we\n        // would switch to the normal completion path: check if a sibling\n        // exists, and if so, begin work on it.\n        // Otherwise, return to the parent\n        // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n        incompleteWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n        workInProgress = incompleteWork;\n      } while (incompleteWork !== null); // We've unwound all the way to the root.\n\n      workInProgressRootExitStatus = RootDidNotComplete;\n      workInProgress = null;\n    }\n\n    function commitRoot(\n      root,\n      recoverableErrors,\n      transitions,\n      didIncludeRenderPhaseUpdate,\n      spawnedLane\n    ) {\n      // TODO: This no longer makes any sense. We already wrap the mutation and\n      // layout phases. Should be able to remove.\n      var previousUpdateLanePriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig.transition;\n\n      try {\n        ReactCurrentBatchConfig.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        commitRootImpl(\n          root,\n          recoverableErrors,\n          transitions,\n          didIncludeRenderPhaseUpdate,\n          previousUpdateLanePriority,\n          spawnedLane\n        );\n      } finally {\n        ReactCurrentBatchConfig.transition = prevTransition;\n        setCurrentUpdatePriority(previousUpdateLanePriority);\n      }\n\n      return null;\n    }\n\n    function commitRootImpl(\n      root,\n      recoverableErrors,\n      transitions,\n      didIncludeRenderPhaseUpdate,\n      renderPriorityLevel,\n      spawnedLane\n    ) {\n      do {\n        // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n        // means `flushPassiveEffects` will sometimes result in additional\n        // passive effects. So we need to keep flushing in a loop until there are\n        // no more pending effects.\n        // TODO: Might be better if `flushPassiveEffects` did not automatically\n        // flush synchronous work at the end, to avoid factoring hazards like this.\n        flushPassiveEffects();\n      } while (rootWithPendingPassiveEffects !== null);\n\n      flushRenderPhaseStrictModeWarningsInDEV();\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      }\n\n      var finishedWork = root.finishedWork;\n      var lanes = root.finishedLanes;\n\n      if (finishedWork === null) {\n        return null;\n      } else {\n        {\n          if (lanes === NoLanes) {\n            error(\n              \"root.finishedLanes should not be empty during a commit. This is a \" +\n                \"bug in React.\"\n            );\n          }\n        }\n      }\n\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n\n      if (finishedWork === root.current) {\n        throw new Error(\n          \"Cannot commit the same tree as before. This error is likely caused by \" +\n            \"a bug in React. Please file an issue.\"\n        );\n      } // commitRoot never returns a continuation; it always finishes synchronously.\n      // So we can clear these now to allow a new callback to be scheduled.\n\n      root.callbackNode = null;\n      root.callbackPriority = NoLane;\n      root.cancelPendingCommit = null; // Check which lanes no longer have any work scheduled on them, and mark\n      // those as finished.\n\n      var remainingLanes = mergeLanes(\n        finishedWork.lanes,\n        finishedWork.childLanes\n      ); // Make sure to account for lanes that were updated by a concurrent event\n      // during the render phase; don't mark them as finished.\n\n      var concurrentlyUpdatedLanes = getConcurrentlyUpdatedLanes();\n      remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes);\n      markRootFinished(root, remainingLanes, spawnedLane); // Reset this before firing side effects so we can detect recursive updates.\n\n      if (root === workInProgressRoot) {\n        // We can reset these now that they are finished.\n        workInProgressRoot = null;\n        workInProgress = null;\n        workInProgressRootRenderLanes = NoLanes;\n      } // If there are pending passive effects, schedule a callback to process them.\n      // Do this as early as possible, so it is queued before anything else that\n      // might get scheduled in the commit phase. (See #16714.)\n      // TODO: Delete all other places that schedule the passive effect callback\n      // They're redundant.\n\n      if (\n        (finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1 ||\n        (finishedWork.flags & PassiveMask) !== NoFlags$1\n      ) {\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback(NormalPriority, function () {\n            flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n            // *after* passive effects fire to avoid freeing a cache pool that may\n            // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n            return null;\n          });\n        }\n      } // Check if there are any effects in the whole tree.\n      // TODO: This is left over from the effect list implementation, where we had\n      // to check for the existence of `firstEffect` to satisfy Flow. I think the\n      // only other reason this optimization exists is because it affects profiling.\n      // Reconsider whether this is necessary.\n\n      var subtreeHasEffects =\n        (finishedWork.subtreeFlags &\n          (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n        NoFlags$1;\n      var rootHasEffect =\n        (finishedWork.flags &\n          (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n        NoFlags$1;\n\n      if (subtreeHasEffects || rootHasEffect) {\n        var prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = null;\n        var previousPriority = getCurrentUpdatePriority();\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        var prevExecutionContext = executionContext;\n        executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n        ReactCurrentOwner$1.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n        // of the effect list for each phase: all mutation effects come before all\n        // layout effects, and so on.\n        // The first phase a \"before mutation\" phase. We use this phase to read the\n        // state of the host tree right before we mutate it. This is where\n        // getSnapshotBeforeUpdate is called.\n\n        commitBeforeMutationEffects(root, finishedWork);\n\n        {\n          // Mark the current commit time to be shared by all Profilers in this\n          // batch. This enables them to be grouped later.\n          recordCommitTime();\n        } // The next phase is the mutation phase, where we mutate the host tree.\n\n        commitMutationEffects(root, finishedWork, lanes);\n        // the mutation phase, so that the previous tree is still current during\n        // componentWillUnmount, but before the layout phase, so that the finished\n        // work is current during componentDidMount/Update.\n\n        root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n        commitLayoutEffects(finishedWork, root, lanes);\n        // opportunity to paint.\n\n        requestPaint();\n        executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig.transition = prevTransition;\n      } else {\n        // No effects.\n        root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n        // no effects.\n        // TODO: Maybe there's a better way to report this.\n\n        {\n          recordCommitTime();\n        }\n      }\n\n      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n      if (rootDoesHavePassiveEffects) {\n        // This commit has passive effects. Stash a reference to them. But don't\n        // schedule a callback until after flushing layout work.\n        rootDoesHavePassiveEffects = false;\n        rootWithPendingPassiveEffects = root;\n        pendingPassiveEffectsLanes = lanes;\n      } else {\n        {\n          nestedPassiveUpdateCount = 0;\n          rootWithPassiveNestedUpdates = null;\n        }\n      } // Read this again, since an effect might have updated it\n\n      remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n      // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n      // is to detect whether something might have called setState inside\n      // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n      // inside `componentDidCatch` is itself flawed — that's why we recommend\n      // `getDerivedStateFromError` instead. However, it could be improved by\n      // checking if remainingLanes includes Sync work, instead of whether there's\n      // any work remaining at all (which would also include stuff like Suspense\n      // retries or transitions). It's been like this for a while, though, so fixing\n      // it probably isn't that urgent.\n\n      if (remainingLanes === NoLanes) {\n        // If there's no remaining work, we can clear the set of already failed\n        // error boundaries.\n        legacyErrorBoundariesThatAlreadyFailed = null;\n      }\n\n      {\n        if (!rootDidHavePassiveEffects) {\n          commitDoubleInvokeEffectsInDEV(root, false);\n        }\n      }\n\n      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n\n      {\n        if (isDevToolsPresent) {\n          root.memoizedUpdaters.clear();\n        }\n      }\n      // additional work on this root is scheduled.\n\n      ensureRootIsScheduled(root);\n\n      if (recoverableErrors !== null) {\n        // There were errors during this render, but recovered from them without\n        // needing to surface it to the UI. We log them here.\n        var onRecoverableError = root.onRecoverableError;\n\n        for (var i = 0; i < recoverableErrors.length; i++) {\n          var recoverableError = recoverableErrors[i];\n          var errorInfo = makeErrorInfo(\n            recoverableError.digest,\n            recoverableError.stack\n          );\n          onRecoverableError(recoverableError.value, errorInfo);\n        }\n      }\n\n      if (hasUncaughtError) {\n        hasUncaughtError = false;\n        var error$1 = firstUncaughtError;\n        firstUncaughtError = null;\n        throw error$1;\n      } // If the passive effects are the result of a discrete render, flush them\n      // synchronously at the end of the current task so that the result is\n      // immediately observable. Otherwise, we assume that they are not\n      // order-dependent and do not need to be observed by external systems, so we\n      // can wait until after paint.\n      // TODO: We can optimize this by not scheduling the callback earlier. Since we\n      // currently schedule the callback in multiple places, will wait until those\n      // are consolidated.\n\n      if (\n        includesSyncLane(pendingPassiveEffectsLanes) &&\n        root.tag !== LegacyRoot\n      ) {\n        flushPassiveEffects();\n      } // Read this again, since a passive effect might have updated it\n\n      remainingLanes = root.pendingLanes; // Check if this render scheduled a cascading synchronous update. This is a\n      // heurstic to detect infinite update loops. We are intentionally excluding\n      // hydration lanes in this check, because render triggered by selective\n      // hydration is conceptually not an update.\n\n      if (\n        // Check if there was a recursive update spawned by this render, in either\n        // the render phase or the commit phase. We track these explicitly because\n        // we can't infer from the remaining lanes alone.\n        // Was the finished render the result of an update (not hydration)?\n        includesSomeLane(lanes, UpdateLanes) && // Did it schedule a sync update?\n        includesSomeLane(remainingLanes, SyncUpdateLanes)\n      ) {\n        {\n          markNestedUpdateScheduled();\n        } // Count the number of times the root synchronously re-renders without\n        // finishing. If there are too many, it indicates an infinite update loop.\n\n        if (root === rootWithNestedUpdates) {\n          nestedUpdateCount++;\n        } else {\n          nestedUpdateCount = 0;\n          rootWithNestedUpdates = root;\n        }\n      } else {\n        nestedUpdateCount = 0;\n      } // If layout work was scheduled, flush it now.\n\n      flushSyncWorkOnAllRoots();\n\n      return null;\n    }\n\n    function makeErrorInfo(digest, componentStack) {\n      {\n        var errorInfo = {\n          componentStack: componentStack,\n          digest: digest\n        };\n        Object.defineProperty(errorInfo, \"digest\", {\n          configurable: false,\n          enumerable: true,\n          get: function () {\n            error(\n              'You are accessing \"digest\" from the errorInfo object passed to onRecoverableError.' +\n                \" This property is deprecated and will be removed in a future version of React.\" +\n                \" To access the digest of an Error look for this property on the Error instance itself.\"\n            );\n\n            return digest;\n          }\n        });\n        return errorInfo;\n      }\n    }\n\n    function flushPassiveEffects() {\n      // Returns whether passive effects were flushed.\n      // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n      // probably just combine the two functions. I believe they were only separate\n      // in the first place because we used to wrap it with\n      // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n      // priority within React itself, so we can mutate the variable directly.\n      if (rootWithPendingPassiveEffects !== null) {\n        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n        var prevTransition = ReactCurrentBatchConfig.transition;\n        var previousPriority = getCurrentUpdatePriority();\n\n        try {\n          ReactCurrentBatchConfig.transition = null;\n          setCurrentUpdatePriority(priority);\n          return flushPassiveEffectsImpl();\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n        }\n      }\n\n      return false;\n    }\n    function enqueuePendingPassiveProfilerEffect(fiber) {\n      {\n        pendingPassiveProfilerEffects.push(fiber);\n\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback(NormalPriority, function () {\n            flushPassiveEffects();\n            return null;\n          });\n        }\n      }\n    }\n\n    function flushPassiveEffectsImpl() {\n      if (rootWithPendingPassiveEffects === null) {\n        return false;\n      } // Cache and clear the transitions flag\n      var root = rootWithPendingPassiveEffects;\n      rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n      // Figure out why and fix it. It's not causing any known issues (probably\n      // because it's only used for profiling), but it's a refactor hazard.\n\n      pendingPassiveEffectsLanes = NoLanes;\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\n          \"Cannot flush passive effects while already rendering.\"\n        );\n      }\n\n      {\n        isFlushingPassiveEffects = true;\n        didScheduleUpdateDuringPassiveEffects = false;\n      }\n\n      var prevExecutionContext = executionContext;\n      executionContext |= CommitContext;\n      commitPassiveUnmountEffects(root.current);\n      commitPassiveMountEffects(root, root.current); // TODO: Move to commitPassiveMountEffects\n\n      {\n        var profilerEffects = pendingPassiveProfilerEffects;\n        pendingPassiveProfilerEffects = [];\n\n        for (var i = 0; i < profilerEffects.length; i++) {\n          var fiber = profilerEffects[i];\n          commitPassiveEffectDurations(root, fiber);\n        }\n      }\n\n      {\n        commitDoubleInvokeEffectsInDEV(root, true);\n      }\n\n      executionContext = prevExecutionContext;\n      flushSyncWorkOnAllRoots();\n\n      {\n        // If additional passive effects were scheduled, increment a counter. If this\n        // exceeds the limit, we'll fire a warning.\n        if (didScheduleUpdateDuringPassiveEffects) {\n          if (root === rootWithPassiveNestedUpdates) {\n            nestedPassiveUpdateCount++;\n          } else {\n            nestedPassiveUpdateCount = 0;\n            rootWithPassiveNestedUpdates = root;\n          }\n        } else {\n          nestedPassiveUpdateCount = 0;\n        }\n\n        isFlushingPassiveEffects = false;\n        didScheduleUpdateDuringPassiveEffects = false;\n      } // TODO: Move to commitPassiveMountEffects\n\n      onPostCommitRoot(root);\n\n      {\n        var stateNode = root.current.stateNode;\n        stateNode.effectDuration = 0;\n        stateNode.passiveEffectDuration = 0;\n      }\n\n      return true;\n    }\n\n    function isAlreadyFailedLegacyErrorBoundary(instance) {\n      return (\n        legacyErrorBoundariesThatAlreadyFailed !== null &&\n        legacyErrorBoundariesThatAlreadyFailed.has(instance)\n      );\n    }\n    function markLegacyErrorBoundaryAsFailed(instance) {\n      if (legacyErrorBoundariesThatAlreadyFailed === null) {\n        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n      } else {\n        legacyErrorBoundariesThatAlreadyFailed.add(instance);\n      }\n    }\n\n    function prepareToThrowUncaughtError(error) {\n      if (!hasUncaughtError) {\n        hasUncaughtError = true;\n        firstUncaughtError = error;\n      }\n    }\n\n    var onUncaughtError = prepareToThrowUncaughtError;\n\n    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n      var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n      var root = enqueueUpdate(rootFiber, update, SyncLane);\n\n      if (root !== null) {\n        markRootUpdated(root, SyncLane);\n        ensureRootIsScheduled(root);\n      }\n    }\n\n    function captureCommitPhaseError(\n      sourceFiber,\n      nearestMountedAncestor,\n      error$1\n    ) {\n      {\n        setIsRunningInsertionEffect(false);\n      }\n\n      if (sourceFiber.tag === HostRoot) {\n        // Error was thrown at the root. There is no parent, so the root\n        // itself should capture it.\n        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n        return;\n      }\n\n      var fiber = nearestMountedAncestor;\n\n      while (fiber !== null) {\n        if (fiber.tag === HostRoot) {\n          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n          return;\n        } else if (fiber.tag === ClassComponent) {\n          var ctor = fiber.type;\n          var instance = fiber.stateNode;\n\n          if (\n            typeof ctor.getDerivedStateFromError === \"function\" ||\n            (typeof instance.componentDidCatch === \"function\" &&\n              !isAlreadyFailedLegacyErrorBoundary(instance))\n          ) {\n            var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n            var root = enqueueUpdate(fiber, update, SyncLane);\n\n            if (root !== null) {\n              markRootUpdated(root, SyncLane);\n              ensureRootIsScheduled(root);\n            }\n\n            return;\n          }\n        }\n\n        fiber = fiber.return;\n      }\n\n      {\n        error(\n          \"Internal React error: Attempted to capture a commit phase error \" +\n            \"inside a detached tree. This indicates a bug in React. Potential \" +\n            \"causes include deleting the same fiber more than once, committing an \" +\n            \"already-finished tree, or an inconsistent return pointer.\\n\\n\" +\n            \"Error message:\\n\\n%s\",\n          error$1\n        );\n      }\n    }\n    function attachPingListener(root, wakeable, lanes) {\n      // Attach a ping listener\n      //\n      // The data might resolve before we have a chance to commit the fallback. Or,\n      // in the case of a refresh, we'll never commit a fallback. So we need to\n      // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n      // try rendering the tree again.\n      //\n      // Only attach a listener if one does not already exist for the lanes\n      // we're currently rendering (which acts like a \"thread ID\" here).\n      //\n      // We only need to do this in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n      var pingCache = root.pingCache;\n      var threadIDs;\n\n      if (pingCache === null) {\n        pingCache = root.pingCache = new PossiblyWeakMap();\n        threadIDs = new Set();\n        pingCache.set(wakeable, threadIDs);\n      } else {\n        threadIDs = pingCache.get(wakeable);\n\n        if (threadIDs === undefined) {\n          threadIDs = new Set();\n          pingCache.set(wakeable, threadIDs);\n        }\n      }\n\n      if (!threadIDs.has(lanes)) {\n        workInProgressRootDidAttachPingListener = true; // Memoize using the thread ID to prevent redundant listeners.\n\n        threadIDs.add(lanes);\n        var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n\n        {\n          if (isDevToolsPresent) {\n            // If we have pending work still, restore the original updaters\n            restorePendingUpdaters(root, lanes);\n          }\n        }\n\n        wakeable.then(ping, ping);\n      }\n    }\n\n    function pingSuspendedRoot(root, wakeable, pingedLanes) {\n      var pingCache = root.pingCache;\n\n      if (pingCache !== null) {\n        // The wakeable resolved, so we no longer need to memoize, because it will\n        // never be thrown again.\n        pingCache.delete(wakeable);\n      }\n\n      markRootPinged(root, pingedLanes);\n      warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n      if (\n        workInProgressRoot === root &&\n        isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n      ) {\n        // Received a ping at the same priority level at which we're currently\n        // rendering. We might want to restart this render. This should mirror\n        // the logic of whether or not a root suspends once it completes.\n        // TODO: If we're rendering sync either due to Sync, Batched or expired,\n        // we should probably never restart.\n        // If we're suspended with delay, or if it's a retry, we'll always suspend\n        // so we can always restart.\n        if (\n          workInProgressRootExitStatus === RootSuspendedWithDelay ||\n          (workInProgressRootExitStatus === RootSuspended &&\n            includesOnlyRetries(workInProgressRootRenderLanes) &&\n            now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n        ) {\n          // Force a restart from the root by unwinding the stack. Unless this is\n          // being called from the render phase, because that would cause a crash.\n          if ((executionContext & RenderContext) === NoContext) {\n            prepareFreshStack(root, NoLanes);\n          }\n        } else {\n          // Even though we can't restart right now, we might get an\n          // opportunity later. So we mark this render as having a ping.\n          workInProgressRootPingedLanes = mergeLanes(\n            workInProgressRootPingedLanes,\n            pingedLanes\n          );\n        }\n      }\n\n      ensureRootIsScheduled(root);\n    }\n\n    function retryTimedOutBoundary(boundaryFiber, retryLane) {\n      // The boundary fiber (a Suspense component or SuspenseList component)\n      // previously was rendered in its fallback state. One of the promises that\n      // suspended it has resolved, which means at least part of the tree was\n      // likely unblocked. Try rendering again, at a new lanes.\n      if (retryLane === NoLane) {\n        // TODO: Assign this to `suspenseState.retryLane`? to avoid\n        // unnecessary entanglement?\n        retryLane = requestRetryLane(boundaryFiber);\n      } // TODO: Special case idle priority?\n\n      var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n\n      if (root !== null) {\n        markRootUpdated(root, retryLane);\n        ensureRootIsScheduled(root);\n      }\n    }\n\n    function retryDehydratedSuspenseBoundary(boundaryFiber) {\n      var suspenseState = boundaryFiber.memoizedState;\n      var retryLane = NoLane;\n\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function resolveRetryWakeable(boundaryFiber, wakeable) {\n      var retryLane = NoLane; // Default\n\n      var retryCache;\n\n      switch (boundaryFiber.tag) {\n        case SuspenseComponent:\n          retryCache = boundaryFiber.stateNode;\n          var suspenseState = boundaryFiber.memoizedState;\n\n          if (suspenseState !== null) {\n            retryLane = suspenseState.retryLane;\n          }\n\n          break;\n\n        case SuspenseListComponent:\n          retryCache = boundaryFiber.stateNode;\n          break;\n\n        case OffscreenComponent: {\n          var instance = boundaryFiber.stateNode;\n          retryCache = instance._retryCache;\n          break;\n        }\n\n        default:\n          throw new Error(\n            \"Pinged unknown suspense boundary type. \" +\n              \"This is probably a bug in React.\"\n          );\n      }\n\n      if (retryCache !== null) {\n        // The wakeable resolved, so we no longer need to memoize, because it will\n        // never be thrown again.\n        retryCache.delete(wakeable);\n      }\n\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function throwIfInfiniteUpdateLoopDetected() {\n      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n        nestedUpdateCount = 0;\n        nestedPassiveUpdateCount = 0;\n        rootWithNestedUpdates = null;\n        rootWithPassiveNestedUpdates = null;\n\n        throw new Error(\n          \"Maximum update depth exceeded. This can happen when a component \" +\n            \"repeatedly calls setState inside componentWillUpdate or \" +\n            \"componentDidUpdate. React limits the number of nested updates to \" +\n            \"prevent infinite loops.\"\n        );\n      }\n\n      {\n        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n          nestedPassiveUpdateCount = 0;\n          rootWithPassiveNestedUpdates = null;\n\n          error(\n            \"Maximum update depth exceeded. This can happen when a component \" +\n              \"calls setState inside useEffect, but useEffect either doesn't \" +\n              \"have a dependency array, or one of the dependencies changes on \" +\n              \"every render.\"\n          );\n        }\n      }\n    }\n\n    function flushRenderPhaseStrictModeWarningsInDEV() {\n      {\n        ReactStrictModeWarnings.flushLegacyContextWarning();\n        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n      }\n    }\n\n    function commitDoubleInvokeEffectsInDEV(root, hasPassiveEffects) {\n      {\n        {\n          legacyCommitDoubleInvokeEffectsInDEV(root.current, hasPassiveEffects);\n        }\n      }\n    }\n\n    function legacyCommitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n      // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n      // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n      // Maybe not a big deal since this is DEV only behavior.\n      setCurrentFiber(fiber);\n      invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n\n      if (hasPassiveEffects) {\n        invokeEffectsInDev(\n          fiber,\n          MountPassiveDev,\n          invokePassiveEffectUnmountInDEV\n        );\n      }\n\n      invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n\n      if (hasPassiveEffects) {\n        invokeEffectsInDev(\n          fiber,\n          MountPassiveDev,\n          invokePassiveEffectMountInDEV\n        );\n      }\n\n      resetCurrentFiber();\n    }\n\n    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n      var current = firstChild;\n      var subtreeRoot = null;\n\n      while (current != null) {\n        var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n\n        if (\n          current !== subtreeRoot &&\n          current.child != null &&\n          primarySubtreeFlag !== NoFlags$1\n        ) {\n          current = current.child;\n        } else {\n          if ((current.flags & fiberFlags) !== NoFlags$1) {\n            invokeEffectFn(current);\n          }\n\n          if (current.sibling !== null) {\n            current = current.sibling;\n          } else {\n            current = subtreeRoot = current.return;\n          }\n        }\n      }\n    }\n\n    var didWarnStateUpdateForNotYetMountedComponent = null;\n    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n      {\n        if ((executionContext & RenderContext) !== NoContext) {\n          // We let the other warning about render phase updates deal with this one.\n          return;\n        }\n\n        if (!(fiber.mode & ConcurrentMode)) {\n          return;\n        }\n\n        var tag = fiber.tag;\n\n        if (\n          tag !== IndeterminateComponent &&\n          tag !== HostRoot &&\n          tag !== ClassComponent &&\n          tag !== FunctionComponent &&\n          tag !== ForwardRef &&\n          tag !== MemoComponent &&\n          tag !== SimpleMemoComponent\n        ) {\n          // Only warn for user-defined components, not internal ones like Suspense.\n          return;\n        } // We show the whole stack but dedupe on the top component's name because\n        // the problematic code almost always lies inside that component.\n\n        var componentName =\n          getComponentNameFromFiber(fiber) || \"ReactComponent\";\n\n        if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n            return;\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n        } else {\n          didWarnStateUpdateForNotYetMountedComponent = new Set([\n            componentName\n          ]);\n        }\n\n        var previousFiber = current;\n\n        try {\n          setCurrentFiber(fiber);\n\n          error(\n            \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n              \"This indicates that you have a side-effect in your render function that \" +\n              \"asynchronously later calls tries to update the component. Move this work to \" +\n              \"useEffect instead.\"\n          );\n        } finally {\n          if (previousFiber) {\n            setCurrentFiber(fiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n    var didWarnAboutUpdateInRender = false;\n    var didWarnAboutUpdateInRenderForAnotherComponent;\n\n    {\n      didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n    }\n\n    function warnAboutRenderPhaseUpdatesInDEV(fiber) {\n      {\n        if (isRendering) {\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent: {\n              var renderingComponentName =\n                (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n                \"Unknown\"; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n              var dedupeKey = renderingComponentName;\n\n              if (\n                !didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)\n              ) {\n                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n                var setStateComponentName =\n                  getComponentNameFromFiber(fiber) || \"Unknown\";\n\n                error(\n                  \"Cannot update a component (`%s`) while rendering a \" +\n                    \"different component (`%s`). To locate the bad setState() call inside `%s`, \" +\n                    \"follow the stack trace as described in https://react.dev/link/setstate-in-render\",\n                  setStateComponentName,\n                  renderingComponentName,\n                  renderingComponentName\n                );\n              }\n\n              break;\n            }\n\n            case ClassComponent: {\n              if (!didWarnAboutUpdateInRender) {\n                error(\n                  \"Cannot update during an existing state transition (such as \" +\n                    \"within `render`). Render methods should be a pure \" +\n                    \"function of props and state.\"\n                );\n\n                didWarnAboutUpdateInRender = true;\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    function restorePendingUpdaters(root, lanes) {\n      {\n        if (isDevToolsPresent) {\n          var memoizedUpdaters = root.memoizedUpdaters;\n          memoizedUpdaters.forEach(function (schedulingFiber) {\n            addFiberToLanesMap(root, schedulingFiber, lanes);\n          }); // This function intentionally does not clear memoized updaters.\n          // Those may still be relevant to the current commit\n          // and a future one (e.g. Suspense).\n        }\n      }\n    }\n    var fakeActCallbackNode = {}; // $FlowFixMe[missing-local-annot]\n\n    function scheduleCallback(priorityLevel, callback) {\n      {\n        // If we're currently inside an `act` scope, bypass Scheduler and push to\n        // the `act` queue instead.\n        var actQueue = ReactCurrentActQueue.current;\n\n        if (actQueue !== null) {\n          actQueue.push(callback);\n          return fakeActCallbackNode;\n        } else {\n          return scheduleCallback$2(priorityLevel, callback);\n        }\n      }\n    }\n\n    function shouldForceFlushFallbacksInDEV() {\n      // Never force flush in production. This function should get stripped out.\n      return ReactCurrentActQueue.current !== null;\n    }\n\n    function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n      {\n        if (fiber.mode & ConcurrentMode) {\n          if (!isConcurrentActEnvironment()) {\n            // Not in an act environment. No need to warn.\n            return;\n          }\n        } else {\n          // Legacy mode has additional cases where we suppress a warning.\n          if (!isLegacyActEnvironment()) {\n            // Not in an act environment. No need to warn.\n            return;\n          }\n\n          if (executionContext !== NoContext) {\n            // Legacy mode doesn't warn if the update is batched, i.e.\n            // batchedUpdates or flushSync.\n            return;\n          }\n\n          if (\n            fiber.tag !== FunctionComponent &&\n            fiber.tag !== ForwardRef &&\n            fiber.tag !== SimpleMemoComponent\n          ) {\n            // For backwards compatibility with pre-hooks code, legacy mode only\n            // warns for updates that originate from a hook.\n            return;\n          }\n        }\n\n        if (ReactCurrentActQueue.current === null) {\n          var previousFiber = current;\n\n          try {\n            setCurrentFiber(fiber);\n\n            error(\n              \"An update to %s inside a test was not wrapped in act(...).\\n\\n\" +\n                \"When testing, code that causes React state updates should be \" +\n                \"wrapped into act(...):\\n\\n\" +\n                \"act(() => {\\n\" +\n                \"  /* fire events that update state */\\n\" +\n                \"});\\n\" +\n                \"/* assert on the output */\\n\\n\" +\n                \"This ensures that you're testing the behavior the user would see \" +\n                \"in the browser.\" +\n                \" Learn more at https://react.dev/link/wrap-tests-with-act\",\n              getComponentNameFromFiber(fiber)\n            );\n          } finally {\n            if (previousFiber) {\n              setCurrentFiber(fiber);\n            } else {\n              resetCurrentFiber();\n            }\n          }\n        }\n      }\n    }\n\n    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n      {\n        if (\n          root.tag !== LegacyRoot &&\n          isConcurrentActEnvironment() &&\n          ReactCurrentActQueue.current === null\n        ) {\n          error(\n            \"A suspended resource finished loading inside a test, but the event \" +\n              \"was not wrapped in act(...).\\n\\n\" +\n              \"When testing, code that resolves suspended data should be wrapped \" +\n              \"into act(...):\\n\\n\" +\n              \"act(() => {\\n\" +\n              \"  /* finish loading suspended data */\\n\" +\n              \"});\\n\" +\n              \"/* assert on the output */\\n\\n\" +\n              \"This ensures that you're testing the behavior the user would see \" +\n              \"in the browser.\" +\n              \" Learn more at https://react.dev/link/wrap-tests-with-act\"\n          );\n        }\n      }\n    }\n\n    function setIsRunningInsertionEffect(isRunning) {\n      {\n        isRunningInsertionEffect = isRunning;\n      }\n    }\n\n    /* eslint-disable react-internal/prod-error-codes */\n    // Used by React Refresh runtime through DevTools Global Hook.\n\n    var resolveFamily = null;\n    var failedBoundaries = null;\n    var setRefreshHandler = function (handler) {\n      {\n        resolveFamily = handler;\n      }\n    };\n    function resolveFunctionForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return type;\n        }\n\n        var family = resolveFamily(type);\n\n        if (family === undefined) {\n          return type;\n        } // Use the latest known implementation.\n\n        return family.current;\n      }\n    }\n    function resolveClassForHotReloading(type) {\n      // No implementation differences.\n      return resolveFunctionForHotReloading(type);\n    }\n    function resolveForwardRefForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return type;\n        }\n\n        var family = resolveFamily(type);\n\n        if (family === undefined) {\n          // Check if we're dealing with a real forwardRef. Don't want to crash early.\n          if (\n            type !== null &&\n            type !== undefined &&\n            typeof type.render === \"function\"\n          ) {\n            // ForwardRef is special because its resolved .type is an object,\n            // but it's possible that we only have its inner render function in the map.\n            // If that inner render function is different, we'll build a new forwardRef type.\n            var currentRender = resolveFunctionForHotReloading(type.render);\n\n            if (type.render !== currentRender) {\n              var syntheticType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: currentRender\n              };\n\n              if (type.displayName !== undefined) {\n                syntheticType.displayName = type.displayName;\n              }\n\n              return syntheticType;\n            }\n          }\n\n          return type;\n        } // Use the latest known implementation.\n\n        return family.current;\n      }\n    }\n    function isCompatibleFamilyForHotReloading(fiber, element) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return false;\n        }\n\n        var prevType = fiber.elementType;\n        var nextType = element.type; // If we got here, we know types aren't === equal.\n\n        var needsCompareFamilies = false;\n        var $$typeofNextType =\n          typeof nextType === \"object\" && nextType !== null\n            ? nextType.$$typeof\n            : null;\n\n        switch (fiber.tag) {\n          case ClassComponent: {\n            if (typeof nextType === \"function\") {\n              needsCompareFamilies = true;\n            }\n\n            break;\n          }\n\n          case FunctionComponent: {\n            if (typeof nextType === \"function\") {\n              needsCompareFamilies = true;\n            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n              // We don't know the inner type yet.\n              // We're going to assume that the lazy inner type is stable,\n              // and so it is sufficient to avoid reconciling it away.\n              // We're not going to unwrap or actually use the new lazy type.\n              needsCompareFamilies = true;\n            }\n\n            break;\n          }\n\n          case ForwardRef: {\n            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n              needsCompareFamilies = true;\n            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n              needsCompareFamilies = true;\n            }\n\n            break;\n          }\n\n          case MemoComponent:\n          case SimpleMemoComponent: {\n            if ($$typeofNextType === REACT_MEMO_TYPE) {\n              // TODO: if it was but can no longer be simple,\n              // we shouldn't set this.\n              needsCompareFamilies = true;\n            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n              needsCompareFamilies = true;\n            }\n\n            break;\n          }\n\n          default:\n            return false;\n        } // Check if both types have a family and it's the same one.\n\n        if (needsCompareFamilies) {\n          // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n          // This means both of them need to be registered to preserve state.\n          // If we unwrapped and compared the inner types for wrappers instead,\n          // then we would risk falsely saying two separate memo(Foo)\n          // calls are equivalent because they wrap the same Foo function.\n          var prevFamily = resolveFamily(prevType); // $FlowFixMe[not-a-function] found when upgrading Flow\n\n          if (\n            prevFamily !== undefined &&\n            prevFamily === resolveFamily(nextType)\n          ) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }\n    function markFailedErrorBoundaryForHotReloading(fiber) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return;\n        }\n\n        if (typeof WeakSet !== \"function\") {\n          return;\n        }\n\n        if (failedBoundaries === null) {\n          failedBoundaries = new WeakSet();\n        }\n\n        failedBoundaries.add(fiber);\n      }\n    }\n    var scheduleRefresh = function (root, update) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return;\n        }\n\n        var staleFamilies = update.staleFamilies,\n          updatedFamilies = update.updatedFamilies;\n        flushPassiveEffects();\n        flushSync(function () {\n          scheduleFibersWithFamiliesRecursively(\n            root.current,\n            updatedFamilies,\n            staleFamilies\n          );\n        });\n      }\n    };\n    var scheduleRoot = function (root, element) {\n      {\n        if (root.context !== emptyContextObject) {\n          // Super edge case: root has a legacy _renderSubtree context\n          // but we don't know the parentComponent so we can't pass it.\n          // Just ignore. We'll delete this with _renderSubtree code path later.\n          return;\n        }\n\n        flushPassiveEffects();\n        flushSync(function () {\n          updateContainer(element, root, null, null);\n        });\n      }\n    };\n\n    function scheduleFibersWithFamiliesRecursively(\n      fiber,\n      updatedFamilies,\n      staleFamilies\n    ) {\n      {\n        var alternate = fiber.alternate,\n          child = fiber.child,\n          sibling = fiber.sibling,\n          tag = fiber.tag,\n          type = fiber.type;\n        var candidateType = null;\n\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n\n        if (resolveFamily === null) {\n          throw new Error(\n            \"Expected resolveFamily to be set during hot reload.\"\n          );\n        }\n\n        var needsRender = false;\n        var needsRemount = false;\n\n        if (candidateType !== null) {\n          var family = resolveFamily(candidateType);\n\n          if (family !== undefined) {\n            if (staleFamilies.has(family)) {\n              needsRemount = true;\n            } else if (updatedFamilies.has(family)) {\n              if (tag === ClassComponent) {\n                needsRemount = true;\n              } else {\n                needsRender = true;\n              }\n            }\n          }\n        }\n\n        if (failedBoundaries !== null) {\n          if (\n            failedBoundaries.has(fiber) || // $FlowFixMe[incompatible-use] found when upgrading Flow\n            (alternate !== null && failedBoundaries.has(alternate))\n          ) {\n            needsRemount = true;\n          }\n        }\n\n        if (needsRemount) {\n          fiber._debugNeedsRemount = true;\n        }\n\n        if (needsRemount || needsRender) {\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n\n        if (child !== null && !needsRemount) {\n          scheduleFibersWithFamiliesRecursively(\n            child,\n            updatedFamilies,\n            staleFamilies\n          );\n        }\n\n        if (sibling !== null) {\n          scheduleFibersWithFamiliesRecursively(\n            sibling,\n            updatedFamilies,\n            staleFamilies\n          );\n        }\n      }\n    }\n\n    var findHostInstancesForRefresh = function (root, families) {\n      {\n        var hostInstances = new Set();\n        var types = new Set(\n          families.map(function (family) {\n            return family.current;\n          })\n        );\n        findHostInstancesForMatchingFibersRecursively(\n          root.current,\n          types,\n          hostInstances\n        );\n        return hostInstances;\n      }\n    };\n\n    function findHostInstancesForMatchingFibersRecursively(\n      fiber,\n      types,\n      hostInstances\n    ) {\n      {\n        var child = fiber.child,\n          sibling = fiber.sibling,\n          tag = fiber.tag,\n          type = fiber.type;\n        var candidateType = null;\n\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n\n        var didMatch = false;\n\n        if (candidateType !== null) {\n          if (types.has(candidateType)) {\n            didMatch = true;\n          }\n        }\n\n        if (didMatch) {\n          // We have a match. This only drills down to the closest host components.\n          // There's no need to search deeper because for the purpose of giving\n          // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n          findHostInstancesForFiberShallowly(fiber, hostInstances);\n        } else {\n          // If there's no match, maybe there will be one further down in the child tree.\n          if (child !== null) {\n            findHostInstancesForMatchingFibersRecursively(\n              child,\n              types,\n              hostInstances\n            );\n          }\n        }\n\n        if (sibling !== null) {\n          findHostInstancesForMatchingFibersRecursively(\n            sibling,\n            types,\n            hostInstances\n          );\n        }\n      }\n    }\n\n    function findHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var foundHostInstances = findChildHostInstancesForFiberShallowly(\n          fiber,\n          hostInstances\n        );\n\n        if (foundHostInstances) {\n          return;\n        } // If we didn't find any host children, fallback to closest host parent.\n\n        var node = fiber;\n\n        while (true) {\n          switch (node.tag) {\n            case HostSingleton:\n            case HostComponent:\n              hostInstances.add(node.stateNode);\n              return;\n\n            case HostPortal:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n\n            case HostRoot:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n          }\n\n          if (node.return === null) {\n            throw new Error(\"Expected to reach root first.\");\n          }\n\n          node = node.return;\n        }\n      }\n    }\n\n    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var node = fiber;\n        var foundHostInstances = false;\n\n        while (true) {\n          if (\n            node.tag === HostComponent ||\n            node.tag === HostHoistable ||\n            false\n          ) {\n            // We got a match.\n            foundHostInstances = true;\n            hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === fiber) {\n            return foundHostInstances;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === fiber) {\n              return foundHostInstances;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n\n      return false;\n    }\n\n    var hasBadMapPolyfill;\n\n    {\n      hasBadMapPolyfill = false;\n\n      try {\n        var nonExtensibleObject = Object.preventExtensions({});\n        /* eslint-disable no-new */\n\n        new Map([[nonExtensibleObject, null]]);\n        new Set([nonExtensibleObject]);\n        /* eslint-enable no-new */\n      } catch (e) {\n        // TODO: Consider warning about bad polyfills\n        hasBadMapPolyfill = true;\n      }\n    }\n\n    function FiberNode(tag, pendingProps, key, mode) {\n      // Instance\n      this.tag = tag;\n      this.key = key;\n      this.elementType = null;\n      this.type = null;\n      this.stateNode = null; // Fiber\n\n      this.return = null;\n      this.child = null;\n      this.sibling = null;\n      this.index = 0;\n      this.ref = null;\n      this.refCleanup = null;\n      this.pendingProps = pendingProps;\n      this.memoizedProps = null;\n      this.updateQueue = null;\n      this.memoizedState = null;\n      this.dependencies = null;\n      this.mode = mode; // Effects\n\n      this.flags = NoFlags$1;\n      this.subtreeFlags = NoFlags$1;\n      this.deletions = null;\n      this.lanes = NoLanes;\n      this.childLanes = NoLanes;\n      this.alternate = null;\n\n      {\n        // Note: The following is done to avoid a v8 performance cliff.\n        //\n        // Initializing the fields below to smis and later updating them with\n        // double values will cause Fibers to end up having separate shapes.\n        // This behavior/bug has something to do with Object.preventExtension().\n        // Fortunately this only impacts DEV builds.\n        // Unfortunately it makes React unusably slow for some applications.\n        // To work around this, initialize the fields below with doubles.\n        //\n        // Learn more about this here:\n        // https://github.com/facebook/react/issues/14365\n        // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n        this.actualDuration = Number.NaN;\n        this.actualStartTime = Number.NaN;\n        this.selfBaseDuration = Number.NaN;\n        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n        // This won't trigger the performance cliff mentioned above,\n        // and it simplifies other profiler code (including DevTools).\n\n        this.actualDuration = 0;\n        this.actualStartTime = -1;\n        this.selfBaseDuration = 0;\n        this.treeBaseDuration = 0;\n      }\n\n      {\n        // This isn't directly used but is handy for debugging internals:\n        this._debugInfo = null;\n        this._debugOwner = null;\n        this._debugNeedsRemount = false;\n        this._debugHookTypes = null;\n\n        if (\n          !hasBadMapPolyfill &&\n          typeof Object.preventExtensions === \"function\"\n        ) {\n          Object.preventExtensions(this);\n        }\n      }\n    } // This is a constructor function, rather than a POJO constructor, still\n    // please ensure we do the following:\n    // 1) Nobody should add any instance methods on this. Instance methods can be\n    //    more difficult to predict when they get optimized and they are almost\n    //    never inlined properly in static compilers.\n    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n    //    always know when it is a fiber.\n    // 3) We might want to experiment with using numeric keys since they are easier\n    //    to optimize in a non-JIT environment.\n    // 4) We can easily go from a constructor to a createFiber object literal if that\n    //    is faster.\n    // 5) It should be easy to port this to a C struct and keep a C implementation\n    //    compatible.\n\n    function createFiber(tag, pendingProps, key, mode) {\n      // $FlowFixMe[invalid-constructor]: the shapes are exact here but Flow doesn't like constructors\n      return new FiberNode(tag, pendingProps, key, mode);\n    }\n\n    function shouldConstruct(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n\n    function isSimpleFunctionComponent(type) {\n      return (\n        typeof type === \"function\" &&\n        !shouldConstruct(type) &&\n        type.defaultProps === undefined\n      );\n    }\n    function resolveLazyComponentTag(Component) {\n      if (typeof Component === \"function\") {\n        return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n      } else if (Component !== undefined && Component !== null) {\n        var $$typeof = Component.$$typeof;\n\n        if ($$typeof === REACT_FORWARD_REF_TYPE) {\n          return ForwardRef;\n        }\n\n        if ($$typeof === REACT_MEMO_TYPE) {\n          return MemoComponent;\n        }\n      }\n\n      return IndeterminateComponent;\n    } // This is used to create an alternate fiber to do work on.\n\n    function createWorkInProgress(current, pendingProps) {\n      var workInProgress = current.alternate;\n\n      if (workInProgress === null) {\n        // We use a double buffering pooling technique because we know that we'll\n        // only ever need at most two versions of a tree. We pool the \"other\" unused\n        // node that we're free to reuse. This is lazily created to avoid allocating\n        // extra objects for things that are never updated. It also allow us to\n        // reclaim the extra memory if needed.\n        workInProgress = createFiber(\n          current.tag,\n          pendingProps,\n          current.key,\n          current.mode\n        );\n        workInProgress.elementType = current.elementType;\n        workInProgress.type = current.type;\n        workInProgress.stateNode = current.stateNode;\n\n        {\n          // DEV-only fields\n          workInProgress._debugOwner = current._debugOwner;\n          workInProgress._debugHookTypes = current._debugHookTypes;\n        }\n\n        workInProgress.alternate = current;\n        current.alternate = workInProgress;\n      } else {\n        workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n        workInProgress.type = current.type; // We already have an alternate.\n        // Reset the effect tag.\n\n        workInProgress.flags = NoFlags$1; // The effects are no longer valid.\n\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.deletions = null;\n\n        {\n          // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n          // This prevents time from endlessly accumulating in new commits.\n          // This has the downside of resetting values for different priority renders,\n          // But works for yielding (the common case) and should support resuming.\n          workInProgress.actualDuration = 0;\n          workInProgress.actualStartTime = -1;\n        }\n      } // Reset all effects except static ones.\n      // Static effects are not specific to a render.\n\n      workInProgress.flags = current.flags & StaticMask;\n      workInProgress.childLanes = current.childLanes;\n      workInProgress.lanes = current.lanes;\n      workInProgress.child = current.child;\n      workInProgress.memoizedProps = current.memoizedProps;\n      workInProgress.memoizedState = current.memoizedState;\n      workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n      // it cannot be shared with the current fiber.\n\n      var currentDependencies = current.dependencies;\n      workInProgress.dependencies =\n        currentDependencies === null\n          ? null\n          : {\n              lanes: currentDependencies.lanes,\n              firstContext: currentDependencies.firstContext\n            }; // These will be overridden during the parent's reconciliation\n\n      workInProgress.sibling = current.sibling;\n      workInProgress.index = current.index;\n      workInProgress.ref = current.ref;\n      workInProgress.refCleanup = current.refCleanup;\n\n      {\n        workInProgress.selfBaseDuration = current.selfBaseDuration;\n        workInProgress.treeBaseDuration = current.treeBaseDuration;\n      }\n\n      {\n        workInProgress._debugInfo = current._debugInfo;\n        workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n          case FunctionComponent:\n          case SimpleMemoComponent:\n            workInProgress.type = resolveFunctionForHotReloading(current.type);\n            break;\n\n          case ClassComponent:\n            workInProgress.type = resolveClassForHotReloading(current.type);\n            break;\n\n          case ForwardRef:\n            workInProgress.type = resolveForwardRefForHotReloading(\n              current.type\n            );\n            break;\n        }\n      }\n\n      return workInProgress;\n    } // Used to reuse a Fiber for a second pass.\n\n    function resetWorkInProgress(workInProgress, renderLanes) {\n      // This resets the Fiber to what createFiber or createWorkInProgress would\n      // have set the values to before during the first pass. Ideally this wouldn't\n      // be necessary but unfortunately many code paths reads from the workInProgress\n      // when they should be reading from current and writing to workInProgress.\n      // We assume pendingProps, index, key, ref, return are still untouched to\n      // avoid doing another reconciliation.\n      // Reset the effect flags but keep any Placement tags, since that's something\n      // that child fiber is setting, not the reconciliation.\n      workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n      var current = workInProgress.alternate;\n\n      if (current === null) {\n        // Reset to createFiber's initial values.\n        workInProgress.childLanes = NoLanes;\n        workInProgress.lanes = renderLanes;\n        workInProgress.child = null;\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.memoizedProps = null;\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null;\n        workInProgress.dependencies = null;\n        workInProgress.stateNode = null;\n\n        {\n          // Note: We don't reset the actualTime counts. It's useful to accumulate\n          // actual time across multiple render passes.\n          workInProgress.selfBaseDuration = 0;\n          workInProgress.treeBaseDuration = 0;\n        }\n      } else {\n        // Reset to the cloned values that createWorkInProgress would've.\n        workInProgress.childLanes = current.childLanes;\n        workInProgress.lanes = current.lanes;\n        workInProgress.child = current.child;\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.deletions = null;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n        workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n        // it cannot be shared with the current fiber.\n\n        var currentDependencies = current.dependencies;\n        workInProgress.dependencies =\n          currentDependencies === null\n            ? null\n            : {\n                lanes: currentDependencies.lanes,\n                firstContext: currentDependencies.firstContext\n              };\n\n        {\n          // Note: We don't reset the actualTime counts. It's useful to accumulate\n          // actual time across multiple render passes.\n          workInProgress.selfBaseDuration = current.selfBaseDuration;\n          workInProgress.treeBaseDuration = current.treeBaseDuration;\n        }\n      }\n\n      return workInProgress;\n    }\n    function createHostRootFiber(\n      tag,\n      isStrictMode,\n      concurrentUpdatesByDefaultOverride\n    ) {\n      var mode;\n\n      if (tag === ConcurrentRoot) {\n        mode = ConcurrentMode;\n\n        if (isStrictMode === true) {\n          mode |= StrictLegacyMode | StrictEffectsMode;\n        }\n      } else {\n        mode = NoMode;\n      }\n\n      if (isDevToolsPresent) {\n        // Always collect profile timings when DevTools are present.\n        // This enables DevTools to start capturing timing at any point–\n        // Without some nodes in the tree having empty base times.\n        mode |= ProfileMode;\n      }\n\n      return createFiber(HostRoot, null, null, mode);\n    }\n    function createFiberFromTypeAndProps(\n      type, // React$ElementType\n      key,\n      pendingProps,\n      owner,\n      mode,\n      lanes\n    ) {\n      var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n      var resolvedType = type;\n\n      if (typeof type === \"function\") {\n        if (shouldConstruct(type)) {\n          fiberTag = ClassComponent;\n\n          {\n            resolvedType = resolveClassForHotReloading(resolvedType);\n          }\n        } else {\n          {\n            resolvedType = resolveFunctionForHotReloading(resolvedType);\n          }\n        }\n      } else if (typeof type === \"string\") {\n        {\n          fiberTag = HostComponent;\n        }\n      } else {\n        getTag: switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return createFiberFromFragment(\n              pendingProps.children,\n              mode,\n              lanes,\n              key\n            );\n\n          case REACT_STRICT_MODE_TYPE:\n            fiberTag = Mode;\n            mode |= StrictLegacyMode;\n\n            if ((mode & ConcurrentMode) !== NoMode) {\n              // Strict effects should never run on legacy roots\n              mode |= StrictEffectsMode;\n            }\n\n            break;\n\n          case REACT_PROFILER_TYPE:\n            return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n          case REACT_SUSPENSE_TYPE:\n            return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n          case REACT_SUSPENSE_LIST_TYPE:\n            return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n          case REACT_OFFSCREEN_TYPE:\n            return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n          case REACT_LEGACY_HIDDEN_TYPE:\n\n          // Fall through\n\n          case REACT_SCOPE_TYPE:\n\n          // Fall through\n\n          case REACT_CACHE_TYPE:\n\n          // Fall through\n\n          case REACT_TRACING_MARKER_TYPE:\n\n          // Fall through\n\n          case REACT_DEBUG_TRACING_MODE_TYPE:\n\n          // Fall through\n\n          default: {\n            if (typeof type === \"object\" && type !== null) {\n              switch (type.$$typeof) {\n                case REACT_PROVIDER_TYPE: {\n                  fiberTag = ContextProvider;\n                  break getTag;\n                }\n\n                // Fall through\n\n                case REACT_CONTEXT_TYPE: {\n                  fiberTag = ContextConsumer;\n                  break getTag;\n                }\n\n                case REACT_CONSUMER_TYPE:\n\n                // Fall through\n\n                case REACT_FORWARD_REF_TYPE:\n                  fiberTag = ForwardRef;\n\n                  {\n                    resolvedType =\n                      resolveForwardRefForHotReloading(resolvedType);\n                  }\n\n                  break getTag;\n\n                case REACT_MEMO_TYPE:\n                  fiberTag = MemoComponent;\n                  break getTag;\n\n                case REACT_LAZY_TYPE:\n                  fiberTag = LazyComponent;\n                  resolvedType = null;\n                  break getTag;\n              }\n            }\n\n            var info = \"\";\n\n            {\n              if (\n                type === undefined ||\n                (typeof type === \"object\" &&\n                  type !== null &&\n                  Object.keys(type).length === 0)\n              ) {\n                info +=\n                  \" You likely forgot to export your component from the file \" +\n                  \"it's defined in, or you might have mixed up default and \" +\n                  \"named imports.\";\n              }\n\n              var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n              if (ownerName) {\n                info += \"\\n\\nCheck the render method of `\" + ownerName + \"`.\";\n              }\n            }\n\n            throw new Error(\n              \"Element type is invalid: expected a string (for built-in \" +\n                \"components) or a class/function (for composite components) \" +\n                (\"but got: \" + (type == null ? type : typeof type) + \".\" + info)\n            );\n          }\n        }\n      }\n\n      var fiber = createFiber(fiberTag, pendingProps, key, mode);\n      fiber.elementType = type;\n      fiber.type = resolvedType;\n      fiber.lanes = lanes;\n\n      {\n        fiber._debugOwner = owner;\n      }\n\n      return fiber;\n    }\n    function createFiberFromElement(element, mode, lanes) {\n      var owner = null;\n\n      {\n        owner = element._owner;\n      }\n\n      var type = element.type;\n      var key = element.key;\n      var pendingProps = element.props;\n      var fiber = createFiberFromTypeAndProps(\n        type,\n        key,\n        pendingProps,\n        owner,\n        mode,\n        lanes\n      );\n\n      {\n        fiber._debugOwner = element._owner;\n      }\n\n      return fiber;\n    }\n    function createFiberFromFragment(elements, mode, lanes, key) {\n      var fiber = createFiber(Fragment, elements, key, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n\n    function createFiberFromProfiler(pendingProps, mode, lanes, key) {\n      {\n        if (typeof pendingProps.id !== \"string\") {\n          error(\n            'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n            typeof pendingProps.id\n          );\n        }\n      }\n\n      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n      fiber.elementType = REACT_PROFILER_TYPE;\n      fiber.lanes = lanes;\n\n      {\n        fiber.stateNode = {\n          effectDuration: 0,\n          passiveEffectDuration: 0\n        };\n      }\n\n      return fiber;\n    }\n\n    function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_OFFSCREEN_TYPE;\n      fiber.lanes = lanes;\n      var primaryChildInstance = {\n        _visibility: OffscreenVisible,\n        _pendingVisibility: OffscreenVisible,\n        _pendingMarkers: null,\n        _retryCache: null,\n        _transitions: null,\n        _current: null,\n        detach: function () {\n          return detachOffscreenInstance(primaryChildInstance);\n        },\n        attach: function () {\n          return attachOffscreenInstance(primaryChildInstance);\n        }\n      };\n      fiber.stateNode = primaryChildInstance;\n      return fiber;\n    }\n    function createFiberFromText(content, mode, lanes) {\n      var fiber = createFiber(HostText, content, null, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromPortal(portal, mode, lanes) {\n      var pendingProps = portal.children !== null ? portal.children : [];\n      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n      fiber.lanes = lanes;\n      fiber.stateNode = {\n        containerInfo: portal.containerInfo,\n        pendingChildren: null,\n        // Used by persistent updates\n        implementation: portal.implementation\n      };\n      return fiber;\n    }\n\n    function FiberRootNode(\n      containerInfo, // $FlowFixMe[missing-local-annot]\n      tag,\n      hydrate,\n      identifierPrefix,\n      onRecoverableError,\n      formState\n    ) {\n      this.tag = tag;\n      this.containerInfo = containerInfo;\n      this.pendingChildren = null;\n      this.current = null;\n      this.pingCache = null;\n      this.finishedWork = null;\n      this.timeoutHandle = noTimeout;\n      this.cancelPendingCommit = null;\n      this.context = null;\n      this.pendingContext = null;\n      this.next = null;\n      this.callbackNode = null;\n      this.callbackPriority = NoLane;\n      this.expirationTimes = createLaneMap(NoTimestamp);\n      this.pendingLanes = NoLanes;\n      this.suspendedLanes = NoLanes;\n      this.pingedLanes = NoLanes;\n      this.expiredLanes = NoLanes;\n      this.finishedLanes = NoLanes;\n      this.errorRecoveryDisabledLanes = NoLanes;\n      this.shellSuspendCounter = 0;\n      this.entangledLanes = NoLanes;\n      this.entanglements = createLaneMap(NoLanes);\n      this.hiddenUpdates = createLaneMap(null);\n      this.identifierPrefix = identifierPrefix;\n      this.onRecoverableError = onRecoverableError;\n\n      this.formState = formState;\n      this.incompleteTransitions = new Map();\n\n      {\n        this.effectDuration = 0;\n        this.passiveEffectDuration = 0;\n      }\n\n      {\n        this.memoizedUpdaters = new Set();\n        var pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n\n        for (var _i = 0; _i < TotalLanes; _i++) {\n          pendingUpdatersLaneMap.push(new Set());\n        }\n      }\n\n      {\n        switch (tag) {\n          case ConcurrentRoot:\n            this._debugRootType = hydrate ? \"hydrateRoot()\" : \"createRoot()\";\n            break;\n\n          case LegacyRoot:\n            this._debugRootType = hydrate ? \"hydrate()\" : \"render()\";\n            break;\n        }\n      }\n    }\n\n    function createFiberRoot(\n      containerInfo,\n      tag,\n      hydrate,\n      initialChildren,\n      hydrationCallbacks,\n      isStrictMode,\n      concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n      // host config, but because they are passed in at runtime, we have to thread\n      // them through the root constructor. Perhaps we should put them all into a\n      // single type, like a DynamicHostConfig that is defined by the renderer.\n      identifierPrefix,\n      onRecoverableError,\n      transitionCallbacks,\n      formState\n    ) {\n      // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n      var root = new FiberRootNode(\n        containerInfo,\n        tag,\n        hydrate,\n        identifierPrefix,\n        onRecoverableError,\n        formState\n      );\n      // stateNode is any.\n\n      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n      root.current = uninitializedFiber;\n      uninitializedFiber.stateNode = root;\n\n      {\n        var _initialState = {\n          element: initialChildren,\n          isDehydrated: hydrate,\n          cache: null // not enabled yet\n        };\n        uninitializedFiber.memoizedState = _initialState;\n      }\n\n      initializeUpdateQueue(uninitializedFiber);\n      return root;\n    }\n\n    var ReactVersion = \"18.3.0-canary-9372c6311-20240315\";\n\n    function createPortal$1(\n      children,\n      containerInfo, // TODO: figure out the API for cross-renderer implementation.\n      implementation\n    ) {\n      var key =\n        arguments.length > 3 && arguments[3] !== undefined\n          ? arguments[3]\n          : null;\n\n      {\n        checkKeyStringCoercion(key);\n      }\n\n      return {\n        // This tag allow us to uniquely identify this as a React Portal\n        $$typeof: REACT_PORTAL_TYPE,\n        key: key == null ? null : \"\" + key,\n        children: children,\n        containerInfo: containerInfo,\n        implementation: implementation\n      };\n    }\n\n    // Might add PROFILE later.\n\n    var didWarnAboutNestedUpdates;\n    var didWarnAboutFindNodeInStrictMode;\n\n    {\n      didWarnAboutNestedUpdates = false;\n      didWarnAboutFindNodeInStrictMode = {};\n    }\n\n    function getContextForSubtree(parentComponent) {\n      if (!parentComponent) {\n        return emptyContextObject;\n      }\n\n      var fiber = get(parentComponent);\n      var parentContext = findCurrentUnmaskedContext();\n\n      if (fiber.tag === ClassComponent) {\n        var Component = fiber.type;\n\n        if (isContextProvider()) {\n          return processChildContext(fiber, Component, parentContext);\n        }\n      }\n\n      return parentContext;\n    }\n\n    function findHostInstanceWithWarning(component, methodName) {\n      {\n        var fiber = get(component);\n\n        if (fiber === undefined) {\n          if (typeof component.render === \"function\") {\n            throw new Error(\"Unable to find node on an unmounted component.\");\n          } else {\n            var keys = Object.keys(component).join(\",\");\n            throw new Error(\n              \"Argument appears to not be a ReactComponent. Keys: \" + keys\n            );\n          }\n        }\n\n        var hostFiber = findCurrentHostFiber(fiber);\n\n        if (hostFiber === null) {\n          return null;\n        }\n\n        if (hostFiber.mode & StrictLegacyMode) {\n          var componentName = getComponentNameFromFiber(fiber) || \"Component\";\n\n          if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n            didWarnAboutFindNodeInStrictMode[componentName] = true;\n            var previousFiber = current;\n\n            try {\n              setCurrentFiber(hostFiber);\n\n              if (fiber.mode & StrictLegacyMode) {\n                error(\n                  \"%s is deprecated in StrictMode. \" +\n                    \"%s was passed an instance of %s which is inside StrictMode. \" +\n                    \"Instead, add a ref directly to the element you want to reference. \" +\n                    \"Learn more about using refs safely here: \" +\n                    \"https://react.dev/link/strict-mode-find-node\",\n                  methodName,\n                  methodName,\n                  componentName\n                );\n              } else {\n                error(\n                  \"%s is deprecated in StrictMode. \" +\n                    \"%s was passed an instance of %s which renders StrictMode children. \" +\n                    \"Instead, add a ref directly to the element you want to reference. \" +\n                    \"Learn more about using refs safely here: \" +\n                    \"https://react.dev/link/strict-mode-find-node\",\n                  methodName,\n                  methodName,\n                  componentName\n                );\n              }\n            } finally {\n              // Ideally this should reset to previous but this shouldn't be called in\n              // render and there's another warning for that anyway.\n              if (previousFiber) {\n                setCurrentFiber(previousFiber);\n              } else {\n                resetCurrentFiber();\n              }\n            }\n          }\n        }\n\n        return getPublicInstance(hostFiber.stateNode);\n      }\n    }\n\n    function createContainer(\n      containerInfo,\n      tag,\n      hydrationCallbacks,\n      isStrictMode,\n      concurrentUpdatesByDefaultOverride,\n      identifierPrefix,\n      onRecoverableError,\n      transitionCallbacks\n    ) {\n      var hydrate = false;\n      var initialChildren = null;\n      return createFiberRoot(\n        containerInfo,\n        tag,\n        hydrate,\n        initialChildren,\n        hydrationCallbacks,\n        isStrictMode,\n        concurrentUpdatesByDefaultOverride,\n        identifierPrefix,\n        onRecoverableError,\n        transitionCallbacks,\n        null\n      );\n    }\n    function updateContainer(element, container, parentComponent, callback) {\n      {\n        onScheduleRoot(container, element);\n      }\n\n      var current$1 = container.current;\n      var lane = requestUpdateLane(current$1);\n\n      var context = getContextForSubtree(parentComponent);\n\n      if (container.context === null) {\n        container.context = context;\n      } else {\n        container.pendingContext = context;\n      }\n\n      {\n        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n          didWarnAboutNestedUpdates = true;\n\n          error(\n            \"Render methods should be a pure function of props and state; \" +\n              \"triggering nested component updates from render is not allowed. \" +\n              \"If necessary, trigger nested updates in componentDidUpdate.\\n\\n\" +\n              \"Check the render method of %s.\",\n            getComponentNameFromFiber(current) || \"Unknown\"\n          );\n        }\n      }\n\n      var update = createUpdate(lane); // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      update.payload = {\n        element: element\n      };\n      callback = callback === undefined ? null : callback;\n\n      if (callback !== null) {\n        {\n          if (typeof callback !== \"function\") {\n            error(\n              \"Expected the last optional `callback` argument to be a \" +\n                \"function. Instead received: %s.\",\n              callback\n            );\n          }\n        }\n\n        update.callback = callback;\n      }\n\n      var root = enqueueUpdate(current$1, update, lane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, current$1, lane);\n        entangleTransitions(root, current$1, lane);\n      }\n\n      return lane;\n    }\n    function getPublicRootInstance(container) {\n      var containerFiber = container.current;\n\n      if (!containerFiber.child) {\n        return null;\n      }\n\n      switch (containerFiber.child.tag) {\n        case HostSingleton:\n        case HostComponent:\n          return getPublicInstance(containerFiber.child.stateNode);\n\n        default:\n          return containerFiber.child.stateNode;\n      }\n    }\n\n    var shouldErrorImpl = function (fiber) {\n      return null;\n    };\n\n    function shouldError(fiber) {\n      return shouldErrorImpl(fiber);\n    }\n\n    var shouldSuspendImpl = function (fiber) {\n      return false;\n    };\n\n    function shouldSuspend(fiber) {\n      return shouldSuspendImpl(fiber);\n    }\n    var overrideHookState = null;\n    var overrideHookStateDeletePath = null;\n    var overrideHookStateRenamePath = null;\n    var overrideProps = null;\n    var overridePropsDeletePath = null;\n    var overridePropsRenamePath = null;\n    var scheduleUpdate = null;\n    var setErrorHandler = null;\n    var setSuspenseHandler = null;\n\n    {\n      var copyWithDeleteImpl = function (obj, path, index) {\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n        if (index + 1 === path.length) {\n          if (isArray(updated)) {\n            updated.splice(key, 1);\n          } else {\n            delete updated[key];\n          }\n\n          return updated;\n        } // $FlowFixMe[incompatible-use] number or string is fine here\n\n        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n        return updated;\n      };\n\n      var copyWithDelete = function (obj, path) {\n        return copyWithDeleteImpl(obj, path, 0);\n      };\n\n      var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n        var oldKey = oldPath[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n        if (index + 1 === oldPath.length) {\n          var newKey = newPath[index]; // $FlowFixMe[incompatible-use] number or string is fine here\n\n          updated[newKey] = updated[oldKey];\n\n          if (isArray(updated)) {\n            updated.splice(oldKey, 1);\n          } else {\n            delete updated[oldKey];\n          }\n        } else {\n          // $FlowFixMe[incompatible-use] number or string is fine here\n          updated[oldKey] = copyWithRenameImpl(\n            // $FlowFixMe[incompatible-use] number or string is fine here\n            obj[oldKey],\n            oldPath,\n            newPath,\n            index + 1\n          );\n        }\n\n        return updated;\n      };\n\n      var copyWithRename = function (obj, oldPath, newPath) {\n        if (oldPath.length !== newPath.length) {\n          warn(\"copyWithRename() expects paths of the same length\");\n\n          return;\n        } else {\n          for (var i = 0; i < newPath.length - 1; i++) {\n            if (oldPath[i] !== newPath[i]) {\n              warn(\n                \"copyWithRename() expects paths to be the same except for the deepest key\"\n              );\n\n              return;\n            }\n          }\n        }\n\n        return copyWithRenameImpl(obj, oldPath, newPath, 0);\n      };\n\n      var copyWithSetImpl = function (obj, path, index, value) {\n        if (index >= path.length) {\n          return value;\n        }\n\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe[incompatible-use] number or string is fine here\n\n        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n        return updated;\n      };\n\n      var copyWithSet = function (obj, path, value) {\n        return copyWithSetImpl(obj, path, 0, value);\n      };\n\n      var findHook = function (fiber, id) {\n        // For now, the \"id\" of stateful hooks is just the stateful hook index.\n        // This may change in the future with e.g. nested hooks.\n        var currentHook = fiber.memoizedState;\n\n        while (currentHook !== null && id > 0) {\n          currentHook = currentHook.next;\n          id--;\n        }\n\n        return currentHook;\n      }; // Support DevTools editable values for useState and useReducer.\n\n      overrideHookState = function (fiber, id, path, value) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithSet(hook.memoizedState, path, value);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      };\n\n      overrideHookStateDeletePath = function (fiber, id, path) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithDelete(hook.memoizedState, path);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      };\n\n      overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n      overrideProps = function (fiber, path, value) {\n        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n\n      overridePropsDeletePath = function (fiber, path) {\n        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n\n      overridePropsRenamePath = function (fiber, oldPath, newPath) {\n        fiber.pendingProps = copyWithRename(\n          fiber.memoizedProps,\n          oldPath,\n          newPath\n        );\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n\n      scheduleUpdate = function (fiber) {\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n\n      setErrorHandler = function (newShouldErrorImpl) {\n        shouldErrorImpl = newShouldErrorImpl;\n      };\n\n      setSuspenseHandler = function (newShouldSuspendImpl) {\n        shouldSuspendImpl = newShouldSuspendImpl;\n      };\n    }\n\n    function findHostInstanceByFiber(fiber) {\n      var hostFiber = findCurrentHostFiber(fiber);\n\n      if (hostFiber === null) {\n        return null;\n      }\n\n      return hostFiber.stateNode;\n    }\n\n    function emptyFindFiberByHostInstance(instance) {\n      return null;\n    }\n\n    function getCurrentFiberForDevTools() {\n      return current;\n    }\n\n    function injectIntoDevTools(devToolsConfig) {\n      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n      return injectInternals({\n        bundleType: devToolsConfig.bundleType,\n        version: devToolsConfig.version,\n        rendererPackageName: devToolsConfig.rendererPackageName,\n        rendererConfig: devToolsConfig.rendererConfig,\n        overrideHookState: overrideHookState,\n        overrideHookStateDeletePath: overrideHookStateDeletePath,\n        overrideHookStateRenamePath: overrideHookStateRenamePath,\n        overrideProps: overrideProps,\n        overridePropsDeletePath: overridePropsDeletePath,\n        overridePropsRenamePath: overridePropsRenamePath,\n        setErrorHandler: setErrorHandler,\n        setSuspenseHandler: setSuspenseHandler,\n        scheduleUpdate: scheduleUpdate,\n        currentDispatcherRef: ReactCurrentDispatcher,\n        findHostInstanceByFiber: findHostInstanceByFiber,\n        findFiberByHostInstance:\n          findFiberByHostInstance || emptyFindFiberByHostInstance,\n        // React Refresh\n        findHostInstancesForRefresh: findHostInstancesForRefresh,\n        scheduleRefresh: scheduleRefresh,\n        scheduleRoot: scheduleRoot,\n        setRefreshHandler: setRefreshHandler,\n        // Enables DevTools to append owner stacks to error messages in DEV mode.\n        getCurrentFiber: getCurrentFiberForDevTools,\n        // Enables DevTools to detect reconciler version rather than renderer version\n        // which may not match for third party renderers.\n        reconcilerVersion: ReactVersion\n      });\n    }\n\n    var instanceCache = new Map();\n\n    function getInstanceFromTag(tag) {\n      return instanceCache.get(tag) || null;\n    }\n\n    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n    function findHostInstance_DEPRECATED(componentOrHandle) {\n      {\n        var owner = ReactCurrentOwner.current;\n\n        if (owner !== null && owner.stateNode !== null) {\n          if (!owner.stateNode._warnedAboutRefsInRender) {\n            error(\n              \"%s is accessing findNodeHandle inside its render(). \" +\n                \"render() should be a pure function of props and state. It should \" +\n                \"never access something that requires stale data from the previous \" +\n                \"render, such as refs. Move this logic to componentDidMount and \" +\n                \"componentDidUpdate instead.\",\n              getComponentNameFromType(owner.type) || \"A component\"\n            );\n          }\n\n          owner.stateNode._warnedAboutRefsInRender = true;\n        }\n      }\n\n      if (componentOrHandle == null) {\n        return null;\n      } // For compatibility with Fabric instances\n\n      if (\n        componentOrHandle.canonical &&\n        componentOrHandle.canonical.publicInstance\n      ) {\n        // $FlowExpectedError[incompatible-return] Can't refine componentOrHandle as a Fabric instance\n        return componentOrHandle.canonical.publicInstance;\n      } // For compatibility with legacy renderer instances\n\n      if (componentOrHandle._nativeTag) {\n        // $FlowFixMe[incompatible-exact] Necessary when running Flow on Fabric\n        // $FlowFixMe[incompatible-return]\n        return componentOrHandle;\n      }\n\n      var hostInstance;\n\n      {\n        hostInstance = findHostInstanceWithWarning(\n          componentOrHandle,\n          \"findHostInstance_DEPRECATED\"\n        );\n      } // findHostInstance handles legacy vs. Fabric differences correctly\n      // $FlowFixMe[incompatible-exact] we need to fix the definition of `HostComponent` to use NativeMethods as an interface, not as a type.\n      // $FlowFixMe[incompatible-return]\n\n      return hostInstance;\n    }\n    function findNodeHandle(componentOrHandle) {\n      {\n        var owner = ReactCurrentOwner.current;\n\n        if (owner !== null && owner.stateNode !== null) {\n          if (!owner.stateNode._warnedAboutRefsInRender) {\n            error(\n              \"%s is accessing findNodeHandle inside its render(). \" +\n                \"render() should be a pure function of props and state. It should \" +\n                \"never access something that requires stale data from the previous \" +\n                \"render, such as refs. Move this logic to componentDidMount and \" +\n                \"componentDidUpdate instead.\",\n              getComponentNameFromType(owner.type) || \"A component\"\n            );\n          }\n\n          owner.stateNode._warnedAboutRefsInRender = true;\n        }\n      }\n\n      if (componentOrHandle == null) {\n        return null;\n      }\n\n      if (typeof componentOrHandle === \"number\") {\n        // Already a node handle\n        return componentOrHandle;\n      } // For compatibility with legacy renderer instances\n\n      if (componentOrHandle._nativeTag) {\n        return componentOrHandle._nativeTag;\n      } // For compatibility with Fabric instances\n\n      if (\n        componentOrHandle.canonical != null &&\n        componentOrHandle.canonical.nativeTag != null\n      ) {\n        return componentOrHandle.canonical.nativeTag;\n      } // For compatibility with Fabric public instances\n\n      var nativeTag =\n        ReactNativePrivateInterface.getNativeTagFromPublicInstance(\n          componentOrHandle\n        );\n\n      if (nativeTag) {\n        return nativeTag;\n      }\n\n      var hostInstance;\n\n      {\n        hostInstance = findHostInstanceWithWarning(\n          componentOrHandle,\n          \"findNodeHandle\"\n        );\n      }\n\n      if (hostInstance == null) {\n        // $FlowFixMe[incompatible-return] Flow limitation in refining an opaque type\n        return hostInstance;\n      }\n\n      if (hostInstance._nativeTag != null) {\n        // $FlowFixMe[incompatible-return] For compatibility with legacy renderer instances\n        return hostInstance._nativeTag;\n      } // $FlowFixMe[incompatible-call] Necessary when running Flow on the legacy renderer\n\n      return ReactNativePrivateInterface.getNativeTagFromPublicInstance(\n        hostInstance\n      );\n    }\n    function dispatchCommand(handle, command, args) {\n      var nativeTag =\n        handle._nativeTag != null\n          ? handle._nativeTag\n          : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);\n\n      if (nativeTag == null) {\n        {\n          error(\n            \"dispatchCommand was called with a ref that isn't a \" +\n              \"native component. Use React.forwardRef to get access to the underlying native component\"\n          );\n        }\n\n        return;\n      }\n\n      var node = ReactNativePrivateInterface.getNodeFromPublicInstance(handle);\n\n      if (node != null) {\n        nativeFabricUIManager.dispatchCommand(node, command, args);\n      } else {\n        ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(\n          nativeTag,\n          command,\n          args\n        );\n      }\n    }\n    function sendAccessibilityEvent(handle, eventType) {\n      var nativeTag =\n        handle._nativeTag != null\n          ? handle._nativeTag\n          : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);\n\n      if (nativeTag == null) {\n        {\n          error(\n            \"sendAccessibilityEvent was called with a ref that isn't a \" +\n              \"native component. Use React.forwardRef to get access to the underlying native component\"\n          );\n        }\n\n        return;\n      }\n\n      var node = ReactNativePrivateInterface.getNodeFromPublicInstance(handle);\n\n      if (node != null) {\n        nativeFabricUIManager.sendAccessibilityEvent(node, eventType);\n      } else {\n        ReactNativePrivateInterface.legacySendAccessibilityEvent(\n          nativeTag,\n          eventType\n        );\n      }\n    }\n    function getNodeFromInternalInstanceHandle(internalInstanceHandle) {\n      return (\n        // $FlowExpectedError[incompatible-return] internalInstanceHandle is opaque but we need to make an exception here.\n        internalInstanceHandle && // $FlowExpectedError[incompatible-return]\n        internalInstanceHandle.stateNode && // $FlowExpectedError[incompatible-use]\n        internalInstanceHandle.stateNode.node\n      );\n    } // Should have been PublicInstance from ReactFiberConfigFabric\n    // Should have been PublicInstance from ReactFiberConfigNative\n    // Remove this once Paper is no longer supported and DOM Node API are enabled by default in RN.\n\n    function isChildPublicInstance(parentInstance, childInstance) {\n      {\n        // Paper\n        if (\n          // $FlowExpectedError[incompatible-type]\n          // $FlowExpectedError[prop-missing] Don't check via `instanceof ReactNativeFiberHostComponent`, so it won't be leaked to Fabric.\n          parentInstance._internalFiberInstanceHandleDEV && // $FlowExpectedError[incompatible-type]\n          // $FlowExpectedError[prop-missing] Don't check via `instanceof ReactNativeFiberHostComponent`, so it won't be leaked to Fabric.\n          childInstance._internalFiberInstanceHandleDEV\n        ) {\n          return doesFiberContain(\n            // $FlowExpectedError[incompatible-call]\n            parentInstance._internalFiberInstanceHandleDEV, // $FlowExpectedError[incompatible-call]\n            childInstance._internalFiberInstanceHandleDEV\n          );\n        }\n\n        var parentInternalInstanceHandle = // $FlowExpectedError[incompatible-call] Type for parentInstance should have been PublicInstance from ReactFiberConfigFabric.\n          ReactNativePrivateInterface.getInternalInstanceHandleFromPublicInstance(\n            parentInstance\n          );\n        var childInternalInstanceHandle = // $FlowExpectedError[incompatible-call] Type for childInstance should have been PublicInstance from ReactFiberConfigFabric.\n          ReactNativePrivateInterface.getInternalInstanceHandleFromPublicInstance(\n            childInstance\n          ); // Fabric\n\n        if (\n          parentInternalInstanceHandle != null &&\n          childInternalInstanceHandle != null\n        ) {\n          return doesFiberContain(\n            parentInternalInstanceHandle,\n            childInternalInstanceHandle\n          );\n        } // Means that one instance is from Fabric and other is from Paper.\n\n        return false;\n      }\n    }\n\n    var emptyObject = {};\n\n    {\n      Object.freeze(emptyObject);\n    } // $FlowFixMe[missing-local-annot]\n\n    function createHierarchy(fiberHierarchy) {\n      return fiberHierarchy.map(function (fiber) {\n        return {\n          name: getComponentNameFromType(fiber.type),\n          getInspectorData: function (findNodeHandle) {\n            return {\n              props: getHostProps(fiber),\n              measure: function (callback) {\n                // If this is Fabric, we'll find a shadow node and use that to measure.\n                var hostFiber = findCurrentHostFiber(fiber);\n                var node =\n                  hostFiber != null &&\n                  hostFiber.stateNode !== null &&\n                  hostFiber.stateNode.node;\n\n                if (node) {\n                  nativeFabricUIManager.measure(node, callback);\n                } else {\n                  return ReactNativePrivateInterface.UIManager.measure(\n                    getHostNode(fiber, findNodeHandle),\n                    callback\n                  );\n                }\n              }\n            };\n          }\n        };\n      });\n    } // $FlowFixMe[missing-local-annot]\n\n    function getHostNode(fiber, findNodeHandle) {\n      {\n        var hostNode; // look for children first for the hostNode\n        // as composite fibers do not have a hostNode\n\n        while (fiber) {\n          if (fiber.stateNode !== null && fiber.tag === HostComponent) {\n            hostNode = findNodeHandle(fiber.stateNode);\n          }\n\n          if (hostNode) {\n            return hostNode;\n          }\n\n          fiber = fiber.child;\n        }\n\n        return null;\n      }\n    } // $FlowFixMe[missing-local-annot]\n\n    function getHostProps(fiber) {\n      var host = findCurrentHostFiber(fiber);\n\n      if (host) {\n        return host.memoizedProps || emptyObject;\n      }\n\n      return emptyObject;\n    }\n\n    function getInspectorDataForInstance(closestInstance) {\n      {\n        // Handle case where user clicks outside of ReactNative\n        if (!closestInstance) {\n          return {\n            hierarchy: [],\n            props: emptyObject,\n            selectedIndex: null,\n            componentStack: \"\"\n          };\n        }\n\n        var fiber = findCurrentFiberUsingSlowPath(closestInstance);\n        var fiberHierarchy = getOwnerHierarchy(fiber);\n        var instance = lastNonHostInstance(fiberHierarchy);\n        var hierarchy = createHierarchy(fiberHierarchy);\n        var props = getHostProps(instance);\n        var selectedIndex = fiberHierarchy.indexOf(instance);\n        var componentStack =\n          fiber !== null ? getStackByFiberInDevAndProd(fiber) : \"\";\n        return {\n          closestInstance: instance,\n          hierarchy: hierarchy,\n          props: props,\n          selectedIndex: selectedIndex,\n          componentStack: componentStack\n        };\n      }\n    }\n\n    function getOwnerHierarchy(instance) {\n      var hierarchy = [];\n      traverseOwnerTreeUp(hierarchy, instance);\n      return hierarchy;\n    } // $FlowFixMe[missing-local-annot]\n\n    function lastNonHostInstance(hierarchy) {\n      for (var i = hierarchy.length - 1; i > 1; i--) {\n        var instance = hierarchy[i];\n\n        if (instance.tag !== HostComponent) {\n          return instance;\n        }\n      }\n\n      return hierarchy[0];\n    } // $FlowFixMe[missing-local-annot]\n\n    function traverseOwnerTreeUp(hierarchy, instance) {\n      {\n        if (instance) {\n          hierarchy.unshift(instance);\n          traverseOwnerTreeUp(hierarchy, instance._debugOwner);\n        }\n      }\n    }\n\n    function getInspectorDataForViewTag(viewTag) {\n      {\n        var closestInstance = getInstanceFromTag(viewTag);\n        return getInspectorDataForInstance(closestInstance);\n      }\n    }\n\n    function getInspectorDataForViewAtPoint(\n      findNodeHandle,\n      inspectedView,\n      locationX,\n      locationY,\n      callback\n    ) {\n      {\n        var closestInstance = null;\n        var fabricNode =\n          ReactNativePrivateInterface.getNodeFromPublicInstance(inspectedView);\n\n        if (fabricNode) {\n          // For Fabric we can look up the instance handle directly and measure it.\n          nativeFabricUIManager.findNodeAtPoint(\n            fabricNode,\n            locationX,\n            locationY,\n            function (internalInstanceHandle) {\n              var node =\n                internalInstanceHandle != null\n                  ? getNodeFromInternalInstanceHandle(internalInstanceHandle)\n                  : null;\n\n              if (internalInstanceHandle == null || node == null) {\n                callback(\n                  assign(\n                    {\n                      pointerY: locationY,\n                      frame: {\n                        left: 0,\n                        top: 0,\n                        width: 0,\n                        height: 0\n                      }\n                    },\n                    getInspectorDataForInstance(closestInstance)\n                  )\n                );\n                return;\n              }\n\n              closestInstance =\n                internalInstanceHandle.stateNode.canonical\n                  .internalInstanceHandle; // Note: this is deprecated and we want to remove it ASAP. Keeping it here for React DevTools compatibility for now.\n\n              var nativeViewTag =\n                internalInstanceHandle.stateNode.canonical.nativeTag;\n              nativeFabricUIManager.measure(\n                node,\n                function (x, y, width, height, pageX, pageY) {\n                  var inspectorData =\n                    getInspectorDataForInstance(closestInstance);\n                  callback(\n                    assign({}, inspectorData, {\n                      pointerY: locationY,\n                      frame: {\n                        left: pageX,\n                        top: pageY,\n                        width: width,\n                        height: height\n                      },\n                      touchedViewTag: nativeViewTag\n                    })\n                  );\n                }\n              );\n            }\n          );\n        } else if (inspectedView._internalFiberInstanceHandleDEV != null) {\n          // For Paper we fall back to the old strategy using the React tag.\n          ReactNativePrivateInterface.UIManager.findSubviewIn(\n            findNodeHandle(inspectedView),\n            [locationX, locationY],\n            function (nativeViewTag, left, top, width, height) {\n              var inspectorData = getInspectorDataForInstance(\n                getInstanceFromTag(nativeViewTag)\n              );\n              callback(\n                assign({}, inspectorData, {\n                  pointerY: locationY,\n                  frame: {\n                    left: left,\n                    top: top,\n                    width: width,\n                    height: height\n                  },\n                  touchedViewTag: nativeViewTag\n                })\n              );\n            }\n          );\n        } else {\n          error(\n            \"getInspectorDataForViewAtPoint expects to receive a host component\"\n          );\n\n          return;\n        }\n      }\n    }\n\n    function onRecoverableError(error$1) {\n      // TODO: Expose onRecoverableError option to userspace\n      // eslint-disable-next-line react-internal/no-production-logging, react-internal/warning-args\n      error(error$1);\n    }\n\n    function render(element, containerTag, callback, concurrentRoot) {\n      var root = roots.get(containerTag);\n\n      if (!root) {\n        // TODO (bvaughn): If we decide to keep the wrapper component,\n        // We could create a wrapper for containerTag as well to reduce special casing.\n        root = createContainer(\n          containerTag,\n          concurrentRoot ? ConcurrentRoot : LegacyRoot,\n          null,\n          false,\n          null,\n          \"\",\n          onRecoverableError,\n          null\n        );\n        roots.set(containerTag, root);\n      }\n\n      updateContainer(element, root, null, callback);\n      return getPublicRootInstance(root);\n    } // $FlowFixMe[missing-this-annot]\n\n    function unmountComponentAtNode(containerTag) {\n      this.stopSurface(containerTag);\n    }\n\n    function stopSurface(containerTag) {\n      var root = roots.get(containerTag);\n\n      if (root) {\n        // TODO: Is it safe to reset this now or should I wait since this unmount could be deferred?\n        updateContainer(null, root, null, function () {\n          roots.delete(containerTag);\n        });\n      }\n    }\n\n    function createPortal(children, containerTag) {\n      var key =\n        arguments.length > 2 && arguments[2] !== undefined\n          ? arguments[2]\n          : null;\n      return createPortal$1(children, containerTag, null, key);\n    }\n\n    setBatchingImplementation(batchedUpdates);\n    var roots = new Map();\n    injectIntoDevTools({\n      // $FlowExpectedError[incompatible-call] The type of `Instance` in `getClosestInstanceFromNode` does not match in Fabric and the legacy renderer, so it fails to typecheck here.\n      findFiberByHostInstance: getInstanceFromNode,\n      bundleType: 1,\n      version: ReactVersion,\n      rendererPackageName: \"react-native-renderer\",\n      rendererConfig: {\n        getInspectorDataForInstance: getInspectorDataForInstance,\n        getInspectorDataForViewTag: getInspectorDataForViewTag,\n        getInspectorDataForViewAtPoint: getInspectorDataForViewAtPoint.bind(\n          null,\n          findNodeHandle\n        )\n      }\n    });\n\n    exports.createPortal = createPortal;\n    exports.dispatchCommand = dispatchCommand;\n    exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;\n    exports.findNodeHandle = findNodeHandle;\n    exports.getInspectorDataForInstance = getInspectorDataForInstance;\n    exports.getNodeFromInternalInstanceHandle =\n      getNodeFromInternalInstanceHandle;\n    exports.getPublicInstanceFromInternalInstanceHandle =\n      getPublicInstanceFromInternalInstanceHandle;\n    exports.isChildPublicInstance = isChildPublicInstance;\n    exports.render = render;\n    exports.sendAccessibilityEvent = sendAccessibilityEvent;\n    exports.stopSurface = stopSurface;\n    exports.unmountComponentAtNode = unmountComponentAtNode;\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n    if (\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" &&\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n        \"function\"\n    ) {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n    }\n  })();\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}