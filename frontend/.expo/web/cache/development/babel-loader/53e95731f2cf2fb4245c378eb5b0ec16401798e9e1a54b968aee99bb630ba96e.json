{"ast":null,"code":"'use strict';\n\nclass SyntheticError extends Error {\n  name = '';\n}\nlet userExceptionDecorator;\nlet inUserExceptionDecorator = false;\nconst decoratedExtraDataKey = Symbol('decoratedExtraDataKey');\nfunction unstable_setExceptionDecorator(exceptionDecorator) {\n  userExceptionDecorator = exceptionDecorator;\n}\nfunction preprocessException(data) {\n  if (userExceptionDecorator && !inUserExceptionDecorator) {\n    inUserExceptionDecorator = true;\n    try {\n      return userExceptionDecorator(data);\n    } catch {} finally {\n      inUserExceptionDecorator = false;\n    }\n  }\n  return data;\n}\nlet exceptionID = 0;\nfunction reportException(e, isFatal, reportToConsole) {\n  const parseErrorStack = require(\"./Devtools/parseErrorStack\");\n  const stack = parseErrorStack(e?.stack);\n  const currentExceptionID = ++exceptionID;\n  const originalMessage = e.message || '';\n  let message = originalMessage;\n  if (e.componentStack != null) {\n    message += `\\n\\nThis error is located at:${e.componentStack}`;\n  }\n  const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\n  if (!message.startsWith(namePrefix)) {\n    message = namePrefix + message;\n  }\n  message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\n  const extraData = Object.assign({}, e[decoratedExtraDataKey], {\n    jsEngine: e.jsEngine,\n    rawStack: e.stack\n  });\n  if (e.cause != null && typeof e.cause === 'object') {\n    extraData.stackSymbols = e.cause.stackSymbols;\n    extraData.stackReturnAddresses = e.cause.stackReturnAddresses;\n    extraData.stackElements = e.cause.stackElements;\n  }\n  const data = preprocessException({\n    message,\n    originalMessage: message === originalMessage ? null : originalMessage,\n    name: e.name == null || e.name === '' ? null : e.name,\n    componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,\n    stack,\n    id: currentExceptionID,\n    isFatal,\n    extraData\n  });\n  if (reportToConsole) {\n    console.error(data.message);\n  }\n  if (__DEV__) {\n    const LogBox = require(\"../LogBox/LogBox\").default;\n    LogBox.addException(Object.assign({}, data, {\n      isComponentError: !!e.isComponentError\n    }));\n  } else if (isFatal || e.type !== 'warn') {\n    const NativeExceptionsManager = require(\"./NativeExceptionsManager\").default;\n    if (NativeExceptionsManager) {\n      NativeExceptionsManager.reportException(data);\n    }\n  }\n}\nlet inExceptionHandler = false;\nfunction handleException(e, isFatal) {\n  let error;\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    error = new SyntheticError(e);\n  }\n  try {\n    inExceptionHandler = true;\n    reportException(error, isFatal, true);\n  } finally {\n    inExceptionHandler = false;\n  }\n}\nfunction reactConsoleErrorHandler(...args) {\n  console._errorOriginal(...args);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n  if (inExceptionHandler) {\n    return;\n  }\n  let error;\n  const firstArg = args[0];\n  if (firstArg?.stack) {\n    error = firstArg;\n  } else {\n    const stringifySafe = require(\"../Utilities/stringifySafe\").default;\n    if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {\n      return;\n    }\n    const message = args.map(arg => typeof arg === 'string' ? arg : stringifySafe(arg)).join(' ');\n    error = new SyntheticError(message);\n    error.name = 'console.error';\n  }\n  reportException(error, false, false);\n}\nfunction installConsoleErrorReporter() {\n  if (console._errorOriginal) {\n    return;\n  }\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    console.reportErrorsAsExceptions = true;\n  }\n}\nmodule.exports = {\n  decoratedExtraDataKey,\n  handleException,\n  installConsoleErrorReporter,\n  SyntheticError,\n  unstable_setExceptionDecorator\n};","map":{"version":3,"names":["SyntheticError","Error","name","userExceptionDecorator","inUserExceptionDecorator","decoratedExtraDataKey","Symbol","unstable_setExceptionDecorator","exceptionDecorator","preprocessException","data","exceptionID","reportException","e","isFatal","reportToConsole","parseErrorStack","require","stack","currentExceptionID","originalMessage","message","componentStack","namePrefix","startsWith","jsEngine","extraData","Object","assign","rawStack","cause","stackSymbols","stackReturnAddresses","stackElements","id","console","error","__DEV__","LogBox","default","addException","isComponentError","type","NativeExceptionsManager","inExceptionHandler","handleException","reactConsoleErrorHandler","args","_errorOriginal","reportErrorsAsExceptions","firstArg","stringifySafe","map","arg","join","installConsoleErrorReporter","bind","undefined","module","exports"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Core/ExceptionsManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {ExtendedError} from './ExtendedError';\nimport type {ExceptionData} from './NativeExceptionsManager';\n\nclass SyntheticError extends Error {\n  name: string = '';\n}\n\ntype ExceptionDecorator = ExceptionData => ExceptionData;\n\nlet userExceptionDecorator: ?ExceptionDecorator;\nlet inUserExceptionDecorator = false;\n\n// This Symbol is used to decorate an ExtendedError with extra data in select usecases.\n// Note that data passed using this method should be strictly contained,\n// as data that's not serializable/too large may cause issues with passing the error to the native code.\nconst decoratedExtraDataKey: symbol = Symbol('decoratedExtraDataKey');\n\n/**\n * Allows the app to add information to the exception report before it is sent\n * to native. This API is not final.\n */\n\nfunction unstable_setExceptionDecorator(\n  exceptionDecorator: ?ExceptionDecorator,\n) {\n  userExceptionDecorator = exceptionDecorator;\n}\n\nfunction preprocessException(data: ExceptionData): ExceptionData {\n  if (userExceptionDecorator && !inUserExceptionDecorator) {\n    inUserExceptionDecorator = true;\n    try {\n      return userExceptionDecorator(data);\n    } catch {\n      // Fall through\n    } finally {\n      inUserExceptionDecorator = false;\n    }\n  }\n  return data;\n}\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(\n  e: ExtendedError,\n  isFatal: boolean,\n  reportToConsole: boolean, // only true when coming from handleException; the error has not yet been logged\n) {\n  const parseErrorStack = require('./Devtools/parseErrorStack');\n  const stack = parseErrorStack(e?.stack);\n  const currentExceptionID = ++exceptionID;\n  const originalMessage = e.message || '';\n  let message = originalMessage;\n  if (e.componentStack != null) {\n    message += `\\n\\nThis error is located at:${e.componentStack}`;\n  }\n  const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\n\n  if (!message.startsWith(namePrefix)) {\n    message = namePrefix + message;\n  }\n\n  message =\n    e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\n\n  // $FlowFixMe[unclear-type]\n  const extraData: Object = {\n    // $FlowFixMe[incompatible-use] we can't define a type with a Symbol-keyed field in flow\n    ...e[decoratedExtraDataKey],\n    jsEngine: e.jsEngine,\n    rawStack: e.stack,\n  };\n  if (e.cause != null && typeof e.cause === 'object') {\n    extraData.stackSymbols = e.cause.stackSymbols;\n    extraData.stackReturnAddresses = e.cause.stackReturnAddresses;\n    extraData.stackElements = e.cause.stackElements;\n  }\n\n  const data = preprocessException({\n    message,\n    originalMessage: message === originalMessage ? null : originalMessage,\n    name: e.name == null || e.name === '' ? null : e.name,\n    componentStack:\n      typeof e.componentStack === 'string' ? e.componentStack : null,\n    stack,\n    id: currentExceptionID,\n    isFatal,\n    extraData,\n  });\n\n  if (reportToConsole) {\n    // we feed back into console.error, to make sure any methods that are\n    // monkey patched on top of console.error are called when coming from\n    // handleException\n    console.error(data.message);\n  }\n\n  if (__DEV__) {\n    const LogBox = require('../LogBox/LogBox').default;\n    LogBox.addException({\n      ...data,\n      isComponentError: !!e.isComponentError,\n    });\n  } else if (isFatal || e.type !== 'warn') {\n    const NativeExceptionsManager =\n      require('./NativeExceptionsManager').default;\n    if (NativeExceptionsManager) {\n      NativeExceptionsManager.reportException(data);\n    }\n  }\n}\n\ndeclare var console: {\n  error: (...data: $ReadOnlyArray<mixed>) => void,\n  _errorOriginal: (...data: $ReadOnlyArray<mixed>) => void,\n  reportErrorsAsExceptions: boolean,\n  ...\n};\n\n// If we trigger console.error _from_ handleException,\n// we do want to make sure that console.error doesn't trigger error reporting again\nlet inExceptionHandler = false;\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: mixed, isFatal: boolean) {\n  let error: Error;\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    // Workaround for reporting errors caused by `throw 'some string'`\n    // Unfortunately there is no way to figure out the stacktrace in this\n    // case, so if you ended up here trying to trace an error, look for\n    // `throw '<error message>'` somewhere in your codebase.\n    error = new SyntheticError(e);\n  }\n  try {\n    inExceptionHandler = true;\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for this\n     * parameters */\n    // $FlowFixMe[incompatible-call]\n    reportException(error, isFatal, /*reportToConsole*/ true);\n  } finally {\n    inExceptionHandler = false;\n  }\n}\n\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\nfunction reactConsoleErrorHandler(...args) {\n  // bubble up to any original handlers\n  console._errorOriginal(...args);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n  if (inExceptionHandler) {\n    // The fundamental trick here is that are multiple entry point to logging errors:\n    // (see D19743075 for more background)\n    //\n    // 1. An uncaught exception being caught by the global handler\n    // 2. An error being logged throw console.error\n    //\n    // However, console.error is monkey patched multiple times: by this module, and by the\n    // DevTools setup that sends messages to Metro.\n    // The patching order cannot be relied upon.\n    //\n    // So, some scenarios that are handled by this flag:\n    //\n    // Logging an error:\n    // 1. console.error called from user code\n    // 2. (possibly) arrives _first_ at DevTool handler, send to Metro\n    // 3. Bubbles to here\n    // 4. goes into report Exception.\n    // 5. should not trigger console.error again, to avoid looping / logging twice\n    // 6. should still bubble up to original console\n    //    (which might either be console.log, or the DevTools handler in case it patched _earlier_ and (2) didn't happen)\n    //\n    // Throwing an uncaught exception:\n    // 1. exception thrown\n    // 2. picked up by handleException\n    // 3. should be sent to console.error (not console._errorOriginal, as DevTools might have patched _later_ and it needs to send it to Metro)\n    // 4. that _might_ bubble again to the `reactConsoleErrorHandle` defined here\n    //    -> should not handle exception _again_, to avoid looping / showing twice (this code branch)\n    // 5. should still bubble up to original console (which might either be console.log, or the DevTools handler in case that one patched _earlier_)\n    return;\n  }\n\n  let error;\n\n  const firstArg = args[0];\n  if (firstArg?.stack) {\n    // reportException will console.error this with high enough fidelity.\n    error = firstArg;\n  } else {\n    const stringifySafe = require('../Utilities/stringifySafe').default;\n    if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const message = args\n      .map(arg => (typeof arg === 'string' ? arg : stringifySafe(arg)))\n      .join(' ');\n\n    error = new SyntheticError(message);\n    error.name = 'console.error';\n  }\n\n  reportException(\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for this\n     * parameters */\n    // $FlowFixMe[incompatible-call]\n    error,\n    false, // isFatal\n    false, // reportToConsole\n  );\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {\n  decoratedExtraDataKey,\n  handleException,\n  installConsoleErrorReporter,\n  SyntheticError,\n  unstable_setExceptionDecorator,\n};\n"],"mappings":"AAUA,YAAY;;AAKZ,MAAMA,cAAc,SAASC,KAAK,CAAC;EACjCC,IAAI,GAAW,EAAE;AACnB;AAIA,IAAIC,sBAA2C;AAC/C,IAAIC,wBAAwB,GAAG,KAAK;AAKpC,MAAMC,qBAA6B,GAAGC,MAAM,CAAC,uBAAuB,CAAC;AAOrE,SAASC,8BAA8BA,CACrCC,kBAAuC,EACvC;EACAL,sBAAsB,GAAGK,kBAAkB;AAC7C;AAEA,SAASC,mBAAmBA,CAACC,IAAmB,EAAiB;EAC/D,IAAIP,sBAAsB,IAAI,CAACC,wBAAwB,EAAE;IACvDA,wBAAwB,GAAG,IAAI;IAC/B,IAAI;MACF,OAAOD,sBAAsB,CAACO,IAAI,CAAC;IACrC,CAAC,CAAC,MAAM,CAER,CAAC,SAAS;MACRN,wBAAwB,GAAG,KAAK;IAClC;EACF;EACA,OAAOM,IAAI;AACb;AAKA,IAAIC,WAAW,GAAG,CAAC;AACnB,SAASC,eAAeA,CACtBC,CAAgB,EAChBC,OAAgB,EAChBC,eAAwB,EACxB;EACA,MAAMC,eAAe,GAAGC,OAAO,6BAA6B,CAAC;EAC7D,MAAMC,KAAK,GAAGF,eAAe,CAACH,CAAC,EAAEK,KAAK,CAAC;EACvC,MAAMC,kBAAkB,GAAG,EAAER,WAAW;EACxC,MAAMS,eAAe,GAAGP,CAAC,CAACQ,OAAO,IAAI,EAAE;EACvC,IAAIA,OAAO,GAAGD,eAAe;EAC7B,IAAIP,CAAC,CAACS,cAAc,IAAI,IAAI,EAAE;IAC5BD,OAAO,IAAK,gCAA+BR,CAAC,CAACS,cAAe,EAAC;EAC/D;EACA,MAAMC,UAAU,GAAGV,CAAC,CAACX,IAAI,IAAI,IAAI,IAAIW,CAAC,CAACX,IAAI,KAAK,EAAE,GAAG,EAAE,GAAI,GAAEW,CAAC,CAACX,IAAK,IAAG;EAEvE,IAAI,CAACmB,OAAO,CAACG,UAAU,CAACD,UAAU,CAAC,EAAE;IACnCF,OAAO,GAAGE,UAAU,GAAGF,OAAO;EAChC;EAEAA,OAAO,GACLR,CAAC,CAACY,QAAQ,IAAI,IAAI,GAAGJ,OAAO,GAAI,GAAEA,OAAQ,gBAAeR,CAAC,CAACY,QAAS,EAAC;EAGvE,MAAMC,SAAiB,GAAAC,MAAA,CAAAC,MAAA,KAElBf,CAAC,CAACR,qBAAqB,CAAC;IAC3BoB,QAAQ,EAAEZ,CAAC,CAACY,QAAQ;IACpBI,QAAQ,EAAEhB,CAAC,CAACK;EAAK,EAClB;EACD,IAAIL,CAAC,CAACiB,KAAK,IAAI,IAAI,IAAI,OAAOjB,CAAC,CAACiB,KAAK,KAAK,QAAQ,EAAE;IAClDJ,SAAS,CAACK,YAAY,GAAGlB,CAAC,CAACiB,KAAK,CAACC,YAAY;IAC7CL,SAAS,CAACM,oBAAoB,GAAGnB,CAAC,CAACiB,KAAK,CAACE,oBAAoB;IAC7DN,SAAS,CAACO,aAAa,GAAGpB,CAAC,CAACiB,KAAK,CAACG,aAAa;EACjD;EAEA,MAAMvB,IAAI,GAAGD,mBAAmB,CAAC;IAC/BY,OAAO;IACPD,eAAe,EAAEC,OAAO,KAAKD,eAAe,GAAG,IAAI,GAAGA,eAAe;IACrElB,IAAI,EAAEW,CAAC,CAACX,IAAI,IAAI,IAAI,IAAIW,CAAC,CAACX,IAAI,KAAK,EAAE,GAAG,IAAI,GAAGW,CAAC,CAACX,IAAI;IACrDoB,cAAc,EACZ,OAAOT,CAAC,CAACS,cAAc,KAAK,QAAQ,GAAGT,CAAC,CAACS,cAAc,GAAG,IAAI;IAChEJ,KAAK;IACLgB,EAAE,EAAEf,kBAAkB;IACtBL,OAAO;IACPY;EACF,CAAC,CAAC;EAEF,IAAIX,eAAe,EAAE;IAInBoB,OAAO,CAACC,KAAK,CAAC1B,IAAI,CAACW,OAAO,CAAC;EAC7B;EAEA,IAAIgB,OAAO,EAAE;IACX,MAAMC,MAAM,GAAGrB,OAAO,mBAAmB,CAAC,CAACsB,OAAO;IAClDD,MAAM,CAACE,YAAY,CAAAb,MAAA,CAAAC,MAAA,KACdlB,IAAI;MACP+B,gBAAgB,EAAE,CAAC,CAAC5B,CAAC,CAAC4B;IAAgB,EACvC,CAAC;EACJ,CAAC,MAAM,IAAI3B,OAAO,IAAID,CAAC,CAAC6B,IAAI,KAAK,MAAM,EAAE;IACvC,MAAMC,uBAAuB,GAC3B1B,OAAO,4BAA4B,CAAC,CAACsB,OAAO;IAC9C,IAAII,uBAAuB,EAAE;MAC3BA,uBAAuB,CAAC/B,eAAe,CAACF,IAAI,CAAC;IAC/C;EACF;AACF;AAWA,IAAIkC,kBAAkB,GAAG,KAAK;AAK9B,SAASC,eAAeA,CAAChC,CAAQ,EAAEC,OAAgB,EAAE;EACnD,IAAIsB,KAAY;EAChB,IAAIvB,CAAC,YAAYZ,KAAK,EAAE;IACtBmC,KAAK,GAAGvB,CAAC;EACX,CAAC,MAAM;IAKLuB,KAAK,GAAG,IAAIpC,cAAc,CAACa,CAAC,CAAC;EAC/B;EACA,IAAI;IACF+B,kBAAkB,GAAG,IAAI;IAIzBhC,eAAe,CAACwB,KAAK,EAAEtB,OAAO,EAAsB,IAAI,CAAC;EAC3D,CAAC,SAAS;IACR8B,kBAAkB,GAAG,KAAK;EAC5B;AACF;AAIA,SAASE,wBAAwBA,CAAC,GAAGC,IAAI,EAAE;EAEzCZ,OAAO,CAACa,cAAc,CAAC,GAAGD,IAAI,CAAC;EAC/B,IAAI,CAACZ,OAAO,CAACc,wBAAwB,EAAE;IACrC;EACF;EACA,IAAIL,kBAAkB,EAAE;IA6BtB;EACF;EAEA,IAAIR,KAAK;EAET,MAAMc,QAAQ,GAAGH,IAAI,CAAC,CAAC,CAAC;EACxB,IAAIG,QAAQ,EAAEhC,KAAK,EAAE;IAEnBkB,KAAK,GAAGc,QAAQ;EAClB,CAAC,MAAM;IACL,MAAMC,aAAa,GAAGlC,OAAO,6BAA6B,CAAC,CAACsB,OAAO;IACnE,IAAI,OAAOW,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAAC1B,UAAU,CAAC,WAAW,CAAC,EAAE;MAIpE;IACF;IACA,MAAMH,OAAO,GAAG0B,IAAI,CACjBK,GAAG,CAACC,GAAG,IAAK,OAAOA,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGF,aAAa,CAACE,GAAG,CAAE,CAAC,CAChEC,IAAI,CAAC,GAAG,CAAC;IAEZlB,KAAK,GAAG,IAAIpC,cAAc,CAACqB,OAAO,CAAC;IACnCe,KAAK,CAAClC,IAAI,GAAG,eAAe;EAC9B;EAEAU,eAAe,CAIbwB,KAAK,EACL,KAAK,EACL,KACF,CAAC;AACH;AAMA,SAASmB,2BAA2BA,CAAA,EAAG;EAErC,IAAIpB,OAAO,CAACa,cAAc,EAAE;IAC1B;EACF;EAEAb,OAAO,CAACa,cAAc,GAAGb,OAAO,CAACC,KAAK,CAACoB,IAAI,CAACrB,OAAO,CAAC;EACpDA,OAAO,CAACC,KAAK,GAAGU,wBAAwB;EACxC,IAAIX,OAAO,CAACc,wBAAwB,KAAKQ,SAAS,EAAE;IAGlDtB,OAAO,CAACc,wBAAwB,GAAG,IAAI;EACzC;AACF;AAEAS,MAAM,CAACC,OAAO,GAAG;EACftD,qBAAqB;EACrBwC,eAAe;EACfU,2BAA2B;EAC3BvD,cAAc;EACdO;AACF,CAAC"},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}