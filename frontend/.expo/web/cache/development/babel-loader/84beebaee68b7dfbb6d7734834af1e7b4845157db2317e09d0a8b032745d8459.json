{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"accessible\", \"accessibilityLabel\", \"accessibilityState\", \"allowFontScaling\", \"aria-busy\", \"aria-checked\", \"aria-disabled\", \"aria-expanded\", \"aria-label\", \"aria-selected\", \"children\", \"ellipsizeMode\", \"disabled\", \"id\", \"nativeID\", \"numberOfLines\", \"onLongPress\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onResponderGrant\", \"onResponderMove\", \"onResponderRelease\", \"onResponderTerminate\", \"onResponderTerminationRequest\", \"onStartShouldSetResponder\", \"pressRetentionOffset\", \"selectable\", \"selectionColor\", \"suppressHighlighting\", \"style\"];\nvar _jsxFileName = \"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Text/Text.js\";\nimport * as PressabilityDebug from \"../Pressability/PressabilityDebug\";\nimport usePressability from \"../Pressability/usePressability\";\nimport flattenStyle from \"../StyleSheet/flattenStyle\";\nimport processColor from \"../StyleSheet/processColor\";\nimport Platform from \"../Utilities/Platform\";\nimport TextAncestor from \"./TextAncestor\";\nimport { NativeText, NativeVirtualText } from \"./TextNativeComponent\";\nimport * as React from 'react';\nimport { useContext, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Text = React.forwardRef((_ref, forwardedRef) => {\n  let {\n      accessible,\n      accessibilityLabel,\n      accessibilityState,\n      allowFontScaling,\n      'aria-busy': ariaBusy,\n      'aria-checked': ariaChecked,\n      'aria-disabled': ariaDisabled,\n      'aria-expanded': ariaExpanded,\n      'aria-label': ariaLabel,\n      'aria-selected': ariaSelected,\n      children,\n      ellipsizeMode,\n      disabled,\n      id,\n      nativeID,\n      numberOfLines,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n      pressRetentionOffset,\n      selectable,\n      selectionColor,\n      suppressHighlighting,\n      style\n    } = _ref,\n    restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const _accessibilityLabel = ariaLabel ?? accessibilityLabel;\n  let _accessibilityState = accessibilityState;\n  if (ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {\n    if (_accessibilityState != null) {\n      _accessibilityState = {\n        busy: ariaBusy ?? _accessibilityState.busy,\n        checked: ariaChecked ?? _accessibilityState.checked,\n        disabled: ariaDisabled ?? _accessibilityState.disabled,\n        expanded: ariaExpanded ?? _accessibilityState.expanded,\n        selected: ariaSelected ?? _accessibilityState.selected\n      };\n    } else {\n      _accessibilityState = {\n        busy: ariaBusy,\n        checked: ariaChecked,\n        disabled: ariaDisabled,\n        expanded: ariaExpanded,\n        selected: ariaSelected\n      };\n    }\n  }\n  const _accessibilityStateDisabled = _accessibilityState?.disabled;\n  const _disabled = disabled ?? _accessibilityStateDisabled;\n  const isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;\n  const _selectionColor = selectionColor == null ? null : processColor(selectionColor);\n  let _style = style;\n  if (__DEV__) {\n    if (PressabilityDebug.isEnabled() && onPress != null) {\n      _style = [style, {\n        color: 'magenta'\n      }];\n    }\n  }\n  let _numberOfLines = numberOfLines;\n  if (_numberOfLines != null && !(_numberOfLines >= 0)) {\n    if (__DEV__) {\n      console.error(`'numberOfLines' in <Text> must be a non-negative number, received: ${_numberOfLines}. The value will be set to 0.`);\n    }\n    _numberOfLines = 0;\n  }\n  let _selectable = selectable;\n  let processedStyle = flattenStyle(_style);\n  if (processedStyle != null) {\n    let overrides = null;\n    if (typeof processedStyle.fontWeight === 'number') {\n      overrides = overrides || {};\n      overrides.fontWeight = processedStyle.fontWeight.toString();\n    }\n    if (processedStyle.userSelect != null) {\n      _selectable = userSelectToSelectableMap[processedStyle.userSelect];\n      overrides = overrides || {};\n      overrides.userSelect = undefined;\n    }\n    if (processedStyle.verticalAlign != null) {\n      overrides = overrides || {};\n      overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[processedStyle.verticalAlign];\n      overrides.verticalAlign = undefined;\n    }\n    if (overrides != null) {\n      _style = [_style, overrides];\n    }\n  }\n  const _nativeID = id ?? nativeID;\n  const hasTextAncestor = useContext(TextAncestor);\n  if (hasTextAncestor) {\n    if (isPressable) {\n      return _jsxDEV(NativePressableVirtualText, {\n        ref: forwardedRef,\n        textProps: Object.assign({}, restProps, {\n          accessibilityLabel: _accessibilityLabel,\n          accessibilityState: _accessibilityState,\n          nativeID: _nativeID,\n          numberOfLines: _numberOfLines,\n          selectable: _selectable,\n          selectionColor: _selectionColor,\n          style: _style,\n          disabled: disabled,\n          children\n        }),\n        textPressabilityProps: {\n          onLongPress,\n          onPress,\n          onPressIn,\n          onPressOut,\n          onResponderGrant,\n          onResponderMove,\n          onResponderRelease,\n          onResponderTerminate,\n          onResponderTerminationRequest,\n          onStartShouldSetResponder,\n          pressRetentionOffset,\n          suppressHighlighting\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this);\n    }\n    return _jsxDEV(NativeVirtualText, Object.assign({}, restProps, {\n      accessibilityLabel: _accessibilityLabel,\n      accessibilityState: _accessibilityState,\n      isHighlighted: false,\n      isPressable: false,\n      nativeID: _nativeID,\n      numberOfLines: _numberOfLines,\n      ref: forwardedRef,\n      selectable: _selectable,\n      selectionColor: _selectionColor,\n      style: _style,\n      disabled: disabled,\n      children: children\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }, this);\n  }\n  if (_disabled !== _accessibilityStateDisabled && (_disabled != null && _disabled !== false || _accessibilityStateDisabled != null && _accessibilityStateDisabled !== false)) {\n    _accessibilityState = Object.assign({}, _accessibilityState, {\n      disabled: _disabled\n    });\n  }\n  const _accessible = Platform.select({\n    ios: accessible !== false,\n    android: accessible == null ? onPress != null || onLongPress != null : accessible,\n    default: accessible\n  });\n  let nativeText = null;\n  if (isPressable) {\n    nativeText = _jsxDEV(NativePressableText, {\n      ref: forwardedRef,\n      textProps: Object.assign({}, restProps, {\n        accessibilityLabel: _accessibilityLabel,\n        accessibilityState: _accessibilityState,\n        accessible: _accessible,\n        allowFontScaling: allowFontScaling !== false,\n        disabled: _disabled,\n        ellipsizeMode: ellipsizeMode ?? 'tail',\n        nativeID: _nativeID,\n        numberOfLines: _numberOfLines,\n        selectable: _selectable,\n        selectionColor: _selectionColor,\n        style: _style,\n        children\n      }),\n      textPressabilityProps: {\n        onLongPress,\n        onPress,\n        onPressIn,\n        onPressOut,\n        onResponderGrant,\n        onResponderMove,\n        onResponderRelease,\n        onResponderTerminate,\n        onResponderTerminationRequest,\n        onStartShouldSetResponder,\n        pressRetentionOffset,\n        suppressHighlighting\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }, this);\n  } else {\n    nativeText = _jsxDEV(NativeText, Object.assign({}, restProps, {\n      accessibilityLabel: _accessibilityLabel,\n      accessibilityState: _accessibilityState,\n      accessible: _accessible,\n      allowFontScaling: allowFontScaling !== false,\n      disabled: _disabled,\n      ellipsizeMode: ellipsizeMode ?? 'tail',\n      isHighlighted: false,\n      nativeID: _nativeID,\n      numberOfLines: _numberOfLines,\n      ref: forwardedRef,\n      selectable: _selectable,\n      selectionColor: _selectionColor,\n      style: _style,\n      children: children\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 11\n    }, this);\n  }\n  if (children == null) {\n    return nativeText;\n  }\n  if (Array.isArray(children) && children.length <= 3) {\n    let hasNonTextChild = false;\n    for (let child of children) {\n      if (child != null && typeof child === 'object') {\n        hasNonTextChild = true;\n        break;\n      }\n    }\n    if (!hasNonTextChild) {\n      return nativeText;\n    }\n  } else if (typeof children !== 'object') {\n    return nativeText;\n  }\n  return _jsxDEV(TextAncestor.Provider, {\n    value: true,\n    children: nativeText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 9\n  }, this);\n});\nText.displayName = 'Text';\nfunction useTextPressability({\n  onLongPress,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onResponderGrant,\n  onResponderMove,\n  onResponderRelease,\n  onResponderTerminate,\n  onResponderTerminationRequest,\n  onStartShouldSetResponder,\n  pressRetentionOffset,\n  suppressHighlighting\n}) {\n  const [isHighlighted, setHighlighted] = useState(false);\n  const config = useMemo(() => {\n    let _onPressIn = onPressIn;\n    let _onPressOut = onPressOut;\n    if (Platform.OS === 'ios') {\n      _onPressIn = event => {\n        setHighlighted(suppressHighlighting == null || !suppressHighlighting);\n        onPressIn?.(event);\n      };\n      _onPressOut = event => {\n        setHighlighted(false);\n        onPressOut?.(event);\n      };\n    }\n    return {\n      disabled: false,\n      pressRectOffset: pressRetentionOffset,\n      onLongPress,\n      onPress,\n      onPressIn: _onPressIn,\n      onPressOut: _onPressOut\n    };\n  }, [pressRetentionOffset, onLongPress, onPress, onPressIn, onPressOut, suppressHighlighting]);\n  const eventHandlers = usePressability(config);\n  const eventHandlersForText = useMemo(() => eventHandlers == null ? null : {\n    onResponderGrant(event) {\n      eventHandlers.onResponderGrant(event);\n      if (onResponderGrant != null) {\n        onResponderGrant(event);\n      }\n    },\n    onResponderMove(event) {\n      eventHandlers.onResponderMove(event);\n      if (onResponderMove != null) {\n        onResponderMove(event);\n      }\n    },\n    onResponderRelease(event) {\n      eventHandlers.onResponderRelease(event);\n      if (onResponderRelease != null) {\n        onResponderRelease(event);\n      }\n    },\n    onResponderTerminate(event) {\n      eventHandlers.onResponderTerminate(event);\n      if (onResponderTerminate != null) {\n        onResponderTerminate(event);\n      }\n    },\n    onClick: eventHandlers.onClick,\n    onResponderTerminationRequest: onResponderTerminationRequest != null ? onResponderTerminationRequest : eventHandlers.onResponderTerminationRequest,\n    onStartShouldSetResponder: onStartShouldSetResponder != null ? onStartShouldSetResponder : eventHandlers.onStartShouldSetResponder\n  }, [eventHandlers, onResponderGrant, onResponderMove, onResponderRelease, onResponderTerminate, onResponderTerminationRequest, onStartShouldSetResponder]);\n  return useMemo(() => [isHighlighted, eventHandlersForText], [isHighlighted, eventHandlersForText]);\n}\nconst NativePressableVirtualText = React.forwardRef(({\n  textProps,\n  textPressabilityProps\n}, forwardedRef) => {\n  const [isHighlighted, eventHandlersForText] = useTextPressability(textPressabilityProps);\n  return _jsxDEV(NativeVirtualText, Object.assign({}, textProps, eventHandlersForText, {\n    isHighlighted: isHighlighted,\n    isPressable: true,\n    ref: forwardedRef\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 488,\n    columnNumber: 5\n  }, this);\n});\nconst NativePressableText = React.forwardRef(({\n  textProps,\n  textPressabilityProps\n}, forwardedRef) => {\n  const [isHighlighted, eventHandlersForText] = useTextPressability(textPressabilityProps);\n  return _jsxDEV(NativeText, Object.assign({}, textProps, eventHandlersForText, {\n    isHighlighted: isHighlighted,\n    isPressable: true,\n    ref: forwardedRef\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 513,\n    columnNumber: 5\n  }, this);\n});\nconst userSelectToSelectableMap = {\n  auto: true,\n  text: true,\n  none: false,\n  contain: true,\n  all: true\n};\nconst verticalAlignToTextAlignVerticalMap = {\n  auto: 'auto',\n  top: 'top',\n  bottom: 'bottom',\n  middle: 'center'\n};\nmodule.exports = Text;","map":{"version":3,"names":["PressabilityDebug","usePressability","flattenStyle","processColor","Platform","TextAncestor","NativeText","NativeVirtualText","React","useContext","useMemo","useState","jsxDEV","_jsxDEV","Text","forwardRef","_ref","forwardedRef","accessible","accessibilityLabel","accessibilityState","allowFontScaling","ariaBusy","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","ariaSelected","children","ellipsizeMode","disabled","id","nativeID","numberOfLines","onLongPress","onPress","onPressIn","onPressOut","onResponderGrant","onResponderMove","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","pressRetentionOffset","selectable","selectionColor","suppressHighlighting","style","restProps","_objectWithoutPropertiesLoose","_excluded","_accessibilityLabel","_accessibilityState","busy","checked","expanded","selected","_accessibilityStateDisabled","_disabled","isPressable","_selectionColor","_style","__DEV__","isEnabled","color","_numberOfLines","console","error","_selectable","processedStyle","overrides","fontWeight","toString","userSelect","userSelectToSelectableMap","undefined","verticalAlign","textAlignVertical","verticalAlignToTextAlignVerticalMap","_nativeID","hasTextAncestor","NativePressableVirtualText","ref","textProps","Object","assign","textPressabilityProps","fileName","_jsxFileName","lineNumber","columnNumber","isHighlighted","_accessible","select","ios","android","default","nativeText","NativePressableText","Array","isArray","length","hasNonTextChild","child","Provider","value","displayName","useTextPressability","setHighlighted","config","_onPressIn","_onPressOut","OS","event","pressRectOffset","eventHandlers","eventHandlersForText","onClick","auto","text","none","contain","all","top","bottom","middle","module","exports"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Text/Text.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {TextStyleProp} from '../StyleSheet/StyleSheet';\nimport type {____TextStyle_Internal as TextStyleInternal} from '../StyleSheet/StyleSheetTypes';\nimport type {PressEvent} from '../Types/CoreEventTypes';\nimport type {NativeTextProps} from './TextNativeComponent';\nimport type {PressRetentionOffset, TextProps} from './TextProps';\n\nimport * as PressabilityDebug from '../Pressability/PressabilityDebug';\nimport usePressability from '../Pressability/usePressability';\nimport flattenStyle from '../StyleSheet/flattenStyle';\nimport processColor from '../StyleSheet/processColor';\nimport Platform from '../Utilities/Platform';\nimport TextAncestor from './TextAncestor';\nimport {NativeText, NativeVirtualText} from './TextNativeComponent';\nimport * as React from 'react';\nimport {useContext, useMemo, useState} from 'react';\n\ntype TextForwardRef = React.ElementRef<\n  typeof NativeText | typeof NativeVirtualText,\n>;\n\n/**\n * Text is the fundamental component for displaying text.\n *\n * @see https://reactnative.dev/docs/text\n */\nconst Text: React.AbstractComponent<TextProps, TextForwardRef> =\n  React.forwardRef(\n    (\n      {\n        accessible,\n        accessibilityLabel,\n        accessibilityState,\n        allowFontScaling,\n        'aria-busy': ariaBusy,\n        'aria-checked': ariaChecked,\n        'aria-disabled': ariaDisabled,\n        'aria-expanded': ariaExpanded,\n        'aria-label': ariaLabel,\n        'aria-selected': ariaSelected,\n        children,\n        ellipsizeMode,\n        disabled,\n        id,\n        nativeID,\n        numberOfLines,\n        onLongPress,\n        onPress,\n        onPressIn,\n        onPressOut,\n        onResponderGrant,\n        onResponderMove,\n        onResponderRelease,\n        onResponderTerminate,\n        onResponderTerminationRequest,\n        onStartShouldSetResponder,\n        pressRetentionOffset,\n        selectable,\n        selectionColor,\n        suppressHighlighting,\n        style,\n        ...restProps\n      }: TextProps,\n      forwardedRef,\n    ) => {\n      const _accessibilityLabel = ariaLabel ?? accessibilityLabel;\n\n      let _accessibilityState: ?TextProps['accessibilityState'] =\n        accessibilityState;\n      if (\n        ariaBusy != null ||\n        ariaChecked != null ||\n        ariaDisabled != null ||\n        ariaExpanded != null ||\n        ariaSelected != null\n      ) {\n        if (_accessibilityState != null) {\n          _accessibilityState = {\n            busy: ariaBusy ?? _accessibilityState.busy,\n            checked: ariaChecked ?? _accessibilityState.checked,\n            disabled: ariaDisabled ?? _accessibilityState.disabled,\n            expanded: ariaExpanded ?? _accessibilityState.expanded,\n            selected: ariaSelected ?? _accessibilityState.selected,\n          };\n        } else {\n          _accessibilityState = {\n            busy: ariaBusy,\n            checked: ariaChecked,\n            disabled: ariaDisabled,\n            expanded: ariaExpanded,\n            selected: ariaSelected,\n          };\n        }\n      }\n\n      const _accessibilityStateDisabled = _accessibilityState?.disabled;\n      const _disabled = disabled ?? _accessibilityStateDisabled;\n\n      const isPressable =\n        (onPress != null ||\n          onLongPress != null ||\n          onStartShouldSetResponder != null) &&\n        _disabled !== true;\n\n      // TODO: Move this processing to the view configuration.\n      const _selectionColor =\n        selectionColor == null ? null : processColor(selectionColor);\n\n      let _style = style;\n      if (__DEV__) {\n        if (PressabilityDebug.isEnabled() && onPress != null) {\n          _style = [style, {color: 'magenta'}];\n        }\n      }\n\n      let _numberOfLines = numberOfLines;\n      if (_numberOfLines != null && !(_numberOfLines >= 0)) {\n        if (__DEV__) {\n          console.error(\n            `'numberOfLines' in <Text> must be a non-negative number, received: ${_numberOfLines}. The value will be set to 0.`,\n          );\n        }\n        _numberOfLines = 0;\n      }\n\n      let _selectable = selectable;\n\n      let processedStyle = flattenStyle<TextStyleProp>(_style);\n      if (processedStyle != null) {\n        let overrides: ?{...TextStyleInternal} = null;\n        if (typeof processedStyle.fontWeight === 'number') {\n          overrides = overrides || ({}: {...TextStyleInternal});\n          overrides.fontWeight =\n            // $FlowFixMe[incompatible-cast]\n            (processedStyle.fontWeight.toString(): TextStyleInternal['fontWeight']);\n        }\n\n        if (processedStyle.userSelect != null) {\n          _selectable = userSelectToSelectableMap[processedStyle.userSelect];\n          overrides = overrides || ({}: {...TextStyleInternal});\n          overrides.userSelect = undefined;\n        }\n\n        if (processedStyle.verticalAlign != null) {\n          overrides = overrides || ({}: {...TextStyleInternal});\n          overrides.textAlignVertical =\n            verticalAlignToTextAlignVerticalMap[processedStyle.verticalAlign];\n          overrides.verticalAlign = undefined;\n        }\n\n        if (overrides != null) {\n          // $FlowFixMe[incompatible-type]\n          _style = [_style, overrides];\n        }\n      }\n\n      const _nativeID = id ?? nativeID;\n\n      const hasTextAncestor = useContext(TextAncestor);\n      if (hasTextAncestor) {\n        if (isPressable) {\n          return (\n            <NativePressableVirtualText\n              ref={forwardedRef}\n              textProps={{\n                ...restProps,\n                accessibilityLabel: _accessibilityLabel,\n                accessibilityState: _accessibilityState,\n                nativeID: _nativeID,\n                numberOfLines: _numberOfLines,\n                selectable: _selectable,\n                selectionColor: _selectionColor,\n                style: _style,\n                disabled: disabled,\n                children,\n              }}\n              textPressabilityProps={{\n                onLongPress,\n                onPress,\n                onPressIn,\n                onPressOut,\n                onResponderGrant,\n                onResponderMove,\n                onResponderRelease,\n                onResponderTerminate,\n                onResponderTerminationRequest,\n                onStartShouldSetResponder,\n                pressRetentionOffset,\n                suppressHighlighting,\n              }}\n            />\n          );\n        }\n\n        return (\n          <NativeVirtualText\n            {...restProps}\n            accessibilityLabel={_accessibilityLabel}\n            accessibilityState={_accessibilityState}\n            isHighlighted={false}\n            isPressable={false}\n            nativeID={_nativeID}\n            numberOfLines={_numberOfLines}\n            ref={forwardedRef}\n            selectable={_selectable}\n            selectionColor={_selectionColor}\n            style={_style}\n            disabled={disabled}>\n            {children}\n          </NativeVirtualText>\n        );\n      }\n\n      // If the disabled prop and accessibilityState.disabled are out of sync but not both in\n      // falsy states we need to update the accessibilityState object to use the disabled prop.\n      if (\n        _disabled !== _accessibilityStateDisabled &&\n        ((_disabled != null && _disabled !== false) ||\n          (_accessibilityStateDisabled != null &&\n            _accessibilityStateDisabled !== false))\n      ) {\n        _accessibilityState = {..._accessibilityState, disabled: _disabled};\n      }\n\n      const _accessible = Platform.select({\n        ios: accessible !== false,\n        android:\n          accessible == null\n            ? onPress != null || onLongPress != null\n            : accessible,\n        default: accessible,\n      });\n\n      let nativeText = null;\n      if (isPressable) {\n        nativeText = (\n          <NativePressableText\n            ref={forwardedRef}\n            textProps={{\n              ...restProps,\n              accessibilityLabel: _accessibilityLabel,\n              accessibilityState: _accessibilityState,\n              accessible: _accessible,\n              allowFontScaling: allowFontScaling !== false,\n              disabled: _disabled,\n              ellipsizeMode: ellipsizeMode ?? 'tail',\n              nativeID: _nativeID,\n              numberOfLines: _numberOfLines,\n              selectable: _selectable,\n              selectionColor: _selectionColor,\n              style: _style,\n              children,\n            }}\n            textPressabilityProps={{\n              onLongPress,\n              onPress,\n              onPressIn,\n              onPressOut,\n              onResponderGrant,\n              onResponderMove,\n              onResponderRelease,\n              onResponderTerminate,\n              onResponderTerminationRequest,\n              onStartShouldSetResponder,\n              pressRetentionOffset,\n              suppressHighlighting,\n            }}\n          />\n        );\n      } else {\n        nativeText = (\n          <NativeText\n            {...restProps}\n            accessibilityLabel={_accessibilityLabel}\n            accessibilityState={_accessibilityState}\n            accessible={_accessible}\n            allowFontScaling={allowFontScaling !== false}\n            disabled={_disabled}\n            ellipsizeMode={ellipsizeMode ?? 'tail'}\n            isHighlighted={false}\n            nativeID={_nativeID}\n            numberOfLines={_numberOfLines}\n            ref={forwardedRef}\n            selectable={_selectable}\n            selectionColor={_selectionColor}\n            style={_style}>\n            {children}\n          </NativeText>\n        );\n      }\n\n      if (children == null) {\n        return nativeText;\n      }\n\n      // If the children do not contain a JSX element it would not be possible to have a\n      // nested `Text` component so we can skip adding the `TextAncestor` context wrapper\n      // which has a performance overhead. Since we do this for performance reasons we need\n      // to keep the check simple to avoid regressing overall perf. For this reason the\n      // `children.length` constant is set to `3`, this should be a reasonable tradeoff\n      // to capture the majority of `Text` uses but also not make this check too expensive.\n      if (Array.isArray(children) && children.length <= 3) {\n        let hasNonTextChild = false;\n        for (let child of children) {\n          if (child != null && typeof child === 'object') {\n            hasNonTextChild = true;\n            break;\n          }\n        }\n        if (!hasNonTextChild) {\n          return nativeText;\n        }\n      } else if (typeof children !== 'object') {\n        return nativeText;\n      }\n\n      return (\n        <TextAncestor.Provider value={true}>{nativeText}</TextAncestor.Provider>\n      );\n    },\n  );\n\nText.displayName = 'Text';\n\ntype TextPressabilityProps = $ReadOnly<{\n  onLongPress?: ?(event: PressEvent) => mixed,\n  onPress?: ?(event: PressEvent) => mixed,\n  onPressIn?: ?(event: PressEvent) => mixed,\n  onPressOut?: ?(event: PressEvent) => mixed,\n  onResponderGrant?: ?(event: PressEvent) => void,\n  onResponderMove?: ?(event: PressEvent) => void,\n  onResponderRelease?: ?(event: PressEvent) => void,\n  onResponderTerminate?: ?(event: PressEvent) => void,\n  onResponderTerminationRequest?: ?() => boolean,\n  onStartShouldSetResponder?: ?() => boolean,\n  pressRetentionOffset?: ?PressRetentionOffset,\n  suppressHighlighting?: ?boolean,\n}>;\n\n/**\n * Hook that handles setting up Pressability of Text components.\n *\n * NOTE: This hook is relatively expensive so it should only be used absolutely necessary.\n */\nfunction useTextPressability({\n  onLongPress,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onResponderGrant,\n  onResponderMove,\n  onResponderRelease,\n  onResponderTerminate,\n  onResponderTerminationRequest,\n  onStartShouldSetResponder,\n  pressRetentionOffset,\n  suppressHighlighting,\n}: TextPressabilityProps) {\n  const [isHighlighted, setHighlighted] = useState(false);\n\n  // Setup pressability config and wrap callbacks needs to track the highlight state.\n  const config = useMemo(() => {\n    let _onPressIn = onPressIn;\n    let _onPressOut = onPressOut;\n\n    // Updating isHighlighted causes unnecessary re-renders for platforms that don't use it\n    // in the best case, and cause issues with text selection in the worst case. Forcing\n    // the isHighlighted prop to false on all platforms except iOS.\n    if (Platform.OS === 'ios') {\n      _onPressIn = (event: PressEvent) => {\n        setHighlighted(suppressHighlighting == null || !suppressHighlighting);\n        onPressIn?.(event);\n      };\n\n      _onPressOut = (event: PressEvent) => {\n        setHighlighted(false);\n        onPressOut?.(event);\n      };\n    }\n\n    return {\n      disabled: false,\n      pressRectOffset: pressRetentionOffset,\n      onLongPress,\n      onPress,\n      onPressIn: _onPressIn,\n      onPressOut: _onPressOut,\n    };\n  }, [\n    pressRetentionOffset,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    suppressHighlighting,\n  ]);\n\n  // Init the pressability class\n  const eventHandlers = usePressability(config);\n\n  // Create NativeText event handlers which proxy events to pressability\n  const eventHandlersForText = useMemo(\n    () =>\n      eventHandlers == null\n        ? null\n        : {\n            onResponderGrant(event: PressEvent) {\n              eventHandlers.onResponderGrant(event);\n              if (onResponderGrant != null) {\n                onResponderGrant(event);\n              }\n            },\n            onResponderMove(event: PressEvent) {\n              eventHandlers.onResponderMove(event);\n              if (onResponderMove != null) {\n                onResponderMove(event);\n              }\n            },\n            onResponderRelease(event: PressEvent) {\n              eventHandlers.onResponderRelease(event);\n              if (onResponderRelease != null) {\n                onResponderRelease(event);\n              }\n            },\n            onResponderTerminate(event: PressEvent) {\n              eventHandlers.onResponderTerminate(event);\n              if (onResponderTerminate != null) {\n                onResponderTerminate(event);\n              }\n            },\n            onClick: eventHandlers.onClick,\n            onResponderTerminationRequest:\n              onResponderTerminationRequest != null\n                ? onResponderTerminationRequest\n                : eventHandlers.onResponderTerminationRequest,\n            onStartShouldSetResponder:\n              onStartShouldSetResponder != null\n                ? onStartShouldSetResponder\n                : eventHandlers.onStartShouldSetResponder,\n          },\n    [\n      eventHandlers,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n    ],\n  );\n\n  // Return the highlight state and NativeText event handlers\n  return useMemo(\n    () => [isHighlighted, eventHandlersForText],\n    [isHighlighted, eventHandlersForText],\n  );\n}\n\ntype NativePressableTextProps = $ReadOnly<{\n  textProps: NativeTextProps,\n  textPressabilityProps: TextPressabilityProps,\n}>;\n\n/**\n * Wrap the NativeVirtualText component and initialize pressability.\n *\n * This logic is split out from the main Text component to enable the more\n * expensive pressability logic to be only initialized when needed.\n */\nconst NativePressableVirtualText: React.AbstractComponent<\n  NativePressableTextProps,\n  TextForwardRef,\n> = React.forwardRef(({textProps, textPressabilityProps}, forwardedRef) => {\n  const [isHighlighted, eventHandlersForText] = useTextPressability(\n    textPressabilityProps,\n  );\n\n  return (\n    <NativeVirtualText\n      {...textProps}\n      {...eventHandlersForText}\n      isHighlighted={isHighlighted}\n      isPressable={true}\n      ref={forwardedRef}\n    />\n  );\n});\n\n/**\n * Wrap the NativeText component and initialize pressability.\n *\n * This logic is split out from the main Text component to enable the more\n * expensive pressability logic to be only initialized when needed.\n */\nconst NativePressableText: React.AbstractComponent<\n  NativePressableTextProps,\n  TextForwardRef,\n> = React.forwardRef(({textProps, textPressabilityProps}, forwardedRef) => {\n  const [isHighlighted, eventHandlersForText] = useTextPressability(\n    textPressabilityProps,\n  );\n\n  return (\n    <NativeText\n      {...textProps}\n      {...eventHandlersForText}\n      isHighlighted={isHighlighted}\n      isPressable={true}\n      ref={forwardedRef}\n    />\n  );\n});\n\nconst userSelectToSelectableMap = {\n  auto: true,\n  text: true,\n  none: false,\n  contain: true,\n  all: true,\n};\n\nconst verticalAlignToTextAlignVerticalMap = {\n  auto: 'auto',\n  top: 'top',\n  bottom: 'bottom',\n  middle: 'center',\n};\n\nmodule.exports = Text;\n"],"mappings":"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"},"metadata":{"hasCjsExports":true},"sourceType":"module","externalDependencies":[]}