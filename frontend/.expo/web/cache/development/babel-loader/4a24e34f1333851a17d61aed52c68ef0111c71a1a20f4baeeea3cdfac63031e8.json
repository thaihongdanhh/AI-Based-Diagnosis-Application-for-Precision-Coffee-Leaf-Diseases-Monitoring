{"ast":null,"code":"'use strict';\n\nconst infoLog = require(\"../Utilities/infoLog\");\nconst invariant = require('invariant');\nconst DEBUG = false;\nclass TaskQueue {\n  constructor({\n    onMoreTasks\n  }) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{\n      tasks: [],\n      popable: false\n    }];\n  }\n  enqueue(task) {\n    this._getCurrentQueue().push(task);\n  }\n  enqueueTasks(tasks) {\n    tasks.forEach(task => this.enqueue(task));\n  }\n  cancelTasks(tasksToCancel) {\n    this._queueStack = this._queueStack.map(queue => Object.assign({}, queue, {\n      tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1)\n    })).filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n  hasTasksToProcess() {\n    return this._getCurrentQueue().length > 0;\n  }\n  processNext() {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (typeof task === 'object' && task.gen) {\n          DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n          this._genPromise(task);\n        } else if (typeof task === 'object' && task.run) {\n          DEBUG && infoLog('TaskQueue: run task ' + task.name);\n          task.run();\n        } else {\n          invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\\n' + JSON.stringify(task, null, 2));\n          DEBUG && infoLog('TaskQueue: run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n  _getCurrentQueue() {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {\n      this._queueStack.pop();\n      DEBUG && infoLog('TaskQueue: popped queue: ', {\n        stackIdx,\n        queueStackSize: this._queueStack.length\n      });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n  _genPromise(task) {\n    this._queueStack.push({\n      tasks: [],\n      popable: false\n    });\n    const stackIdx = this._queueStack.length - 1;\n    const stackItem = this._queueStack[stackIdx];\n    DEBUG && infoLog('TaskQueue: push new queue: ', {\n      stackIdx\n    });\n    DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n    task.gen().then(() => {\n      DEBUG && infoLog('TaskQueue: onThen for gen task ' + task.name, {\n        stackIdx,\n        queueStackSize: this._queueStack.length\n      });\n      stackItem.popable = true;\n      this.hasTasksToProcess() && this._onMoreTasks();\n    }).catch(ex => {\n      setTimeout(() => {\n        ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n        throw ex;\n      }, 0);\n    });\n  }\n}\nmodule.exports = TaskQueue;","map":{"version":3,"names":["infoLog","require","invariant","DEBUG","TaskQueue","constructor","onMoreTasks","_onMoreTasks","_queueStack","tasks","popable","enqueue","task","_getCurrentQueue","push","enqueueTasks","forEach","cancelTasks","tasksToCancel","map","queue","Object","assign","filter","indexOf","idx","length","hasTasksToProcess","processNext","shift","gen","name","_genPromise","run","JSON","stringify","e","message","stackIdx","pop","queueStackSize","stackItem","then","catch","ex","setTimeout","module","exports"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Interaction/TaskQueue.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst infoLog = require('../Utilities/infoLog');\nconst invariant = require('invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<void>,\n};\nexport type Task = SimpleTask | PromiseTask | (() => void);\n\nconst DEBUG: false = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void, ...}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach(task => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map(queue => ({\n        ...queue,\n        tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): boolean {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (typeof task === 'object' && task.gen) {\n          DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n          this._genPromise(task);\n        } else if (typeof task === 'object' && task.run) {\n          DEBUG && infoLog('TaskQueue: run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2),\n          );\n          DEBUG && infoLog('TaskQueue: run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message =\n          // $FlowFixMe[incompatible-type]\n          'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{\n    tasks: Array<Task>,\n    popable: boolean,\n    ...\n  }>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (\n      queue.popable &&\n      queue.tasks.length === 0 &&\n      this._queueStack.length > 1\n    ) {\n      this._queueStack.pop();\n      DEBUG &&\n        infoLog('TaskQueue: popped queue: ', {\n          stackIdx,\n          queueStackSize: this._queueStack.length,\n        });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    const stackItem = this._queueStack[stackIdx];\n    DEBUG && infoLog('TaskQueue: push new queue: ', {stackIdx});\n    DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n    task\n      .gen()\n      .then(() => {\n        DEBUG &&\n          infoLog('TaskQueue: onThen for gen task ' + task.name, {\n            stackIdx,\n            queueStackSize: this._queueStack.length,\n          });\n        stackItem.popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch(ex => {\n        setTimeout(() => {\n          ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n          throw ex;\n        }, 0);\n      });\n  }\n}\n\nmodule.exports = TaskQueue;\n"],"mappings":"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"},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}