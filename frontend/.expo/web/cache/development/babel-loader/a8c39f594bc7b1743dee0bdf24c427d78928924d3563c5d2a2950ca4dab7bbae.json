{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"firebaseConfig\", \"firebaseVersion\", \"appVerificationDisabledForTesting\", \"languageCode\", \"onVerify\", \"onLoad\", \"onError\", \"onFullChallenge\", \"invisible\", \"verify\"];\nimport { DEFAULT_WEB_APP_OPTIONS } from 'expo-firebase-core';\nimport { CodedError } from 'expo-modules-core';\nimport * as React from 'react';\nimport { WebView } from \"./WebView\";\nfunction getWebviewSource(firebaseConfig, firebaseVersion, appVerificationDisabledForTesting = false, languageCode, invisible) {\n  firebaseVersion = firebaseVersion || '8.0.0';\n  return {\n    baseUrl: `https://${firebaseConfig.authDomain}`,\n    html: `\n<!DOCTYPE html><html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"HandheldFriendly\" content=\"true\">\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-app.js\"></script>\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-auth.js\"></script>\n  <script type=\"text/javascript\">firebase.initializeApp(${JSON.stringify(firebaseConfig)});</script>\n  <style>\n    html, body {\n      height: 100%;\n      ${invisible ? `padding: 0; margin: 0;` : ``}\n    }\n    #recaptcha-btn {\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n      border: 0;\n      user-select: none;\n      -webkit-user-select: none;\n    }\n  </style>\n</head>\n<body>\n  ${invisible ? `<button id=\"recaptcha-btn\" type=\"button\" onclick=\"onClickButton()\">Confirm reCAPTCHA</button>` : `<div id=\"recaptcha-cont\" class=\"g-recaptcha\"></div>`}\n  <script>\n    var fullChallengeTimer;\n    function onVerify(token) {\n      if (fullChallengeTimer) {\n        clearInterval(fullChallengeTimer);\n        fullChallengeTimer = undefined;\n      }\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'verify',\n        token: token\n      }));\n    }\n    function onLoad() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'load'\n      }));\n      firebase.auth().settings.appVerificationDisabledForTesting = ${appVerificationDisabledForTesting};\n      ${languageCode ? `firebase.auth().languageCode = '${languageCode}';` : ''}\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\"${invisible ? 'recaptcha-btn' : 'recaptcha-cont'}\", {\n        size: \"${invisible ? 'invisible' : 'normal'}\",\n        callback: onVerify\n      });\n      window.recaptchaVerifier.render();\n    }\n    function onError() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'error'\n      }));\n    }\n    function onClickButton() {\n      if (!fullChallengeTimer) {\n        fullChallengeTimer = setInterval(function() {\n          var iframes = document.getElementsByTagName(\"iframe\");\n          var isFullChallenge = false;\n          for (i = 0; i < iframes.length; i++) {\n            var parentWindow = iframes[i].parentNode ? iframes[i].parentNode.parentNode : undefined;\n            var isHidden = parentWindow && parentWindow.style.opacity == 0;\n            isFullChallenge = isFullChallenge || (\n              !isHidden && \n              ((iframes[i].title === 'recaptcha challenge') ||\n               (iframes[i].src.indexOf('google.com/recaptcha/api2/bframe') >= 0)));\n          }\n          if (isFullChallenge) {\n            clearInterval(fullChallengeTimer);\n            fullChallengeTimer = undefined;\n            window.ReactNativeWebView.postMessage(JSON.stringify({\n              type: 'fullChallenge'\n            }));  \n          }\n        }, 100);\n      }\n    }\n    window.addEventListener('message', function(event) {\n      if (event.data.verify) {\n        document.getElementById('recaptcha-btn').click();\n      }\n    });\n  </script>\n  <script src=\"https://www.google.com/recaptcha/api.js?onload=onLoad&render=explicit&hl=${languageCode ?? ''}\" onerror=\"onError()\"></script>\n</body></html>`\n  };\n}\nfunction validateFirebaseConfig(firebaseConfig) {\n  if (!firebaseConfig) {\n    throw new CodedError('ERR_FIREBASE_RECAPTCHA_CONFIG', `Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`);\n  }\n  const {\n    authDomain\n  } = firebaseConfig;\n  if (!authDomain) {\n    throw new CodedError('ERR_FIREBASE_RECAPTCHA_CONFIG', `Missing \"authDomain\" in firebase web configuration.`);\n  }\n}\nexport default function FirebaseRecaptcha(props) {\n  const {\n      firebaseConfig,\n      firebaseVersion,\n      appVerificationDisabledForTesting,\n      languageCode,\n      onVerify,\n      onLoad,\n      onError,\n      onFullChallenge,\n      invisible,\n      verify\n    } = props,\n    otherProps = _objectWithoutPropertiesLoose(props, _excluded);\n  const webview = React.useRef(null);\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    if (webview.current && loaded && verify) {\n      webview.current.injectJavaScript(`\n    (function(){\n      window.dispatchEvent(new MessageEvent('message', {data: { verify: true }}));\n    })();\n    true;\n    `);\n    }\n    return () => {};\n  }, [webview, verify, loaded]);\n  validateFirebaseConfig(firebaseConfig);\n  if (!firebaseConfig) {\n    console.error(`FirebaseRecaptcha: Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`);\n    return null;\n  }\n  return React.createElement(WebView, Object.assign({\n    ref: webview,\n    javaScriptEnabled: true,\n    automaticallyAdjustContentInsets: true,\n    scalesPageToFit: true,\n    mixedContentMode: \"always\",\n    source: getWebviewSource(firebaseConfig, firebaseVersion, appVerificationDisabledForTesting, languageCode, invisible),\n    onError: onError,\n    onMessage: event => {\n      const data = JSON.parse(event.nativeEvent.data);\n      switch (data.type) {\n        case 'load':\n          if (onLoad) {\n            setLoaded(true);\n            onLoad();\n          }\n          break;\n        case 'error':\n          if (onError) {\n            onError();\n          }\n          break;\n        case 'verify':\n          onVerify(data.token);\n          break;\n        case 'fullChallenge':\n          if (onFullChallenge) {\n            onFullChallenge();\n          }\n          break;\n      }\n    }\n  }, otherProps));\n}\nFirebaseRecaptcha.defaultProps = {\n  firebaseConfig: DEFAULT_WEB_APP_OPTIONS\n};","map":{"version":3,"names":["DEFAULT_WEB_APP_OPTIONS","CodedError","React","WebView","getWebviewSource","firebaseConfig","firebaseVersion","appVerificationDisabledForTesting","languageCode","invisible","baseUrl","authDomain","html","JSON","stringify","validateFirebaseConfig","FirebaseRecaptcha","props","onVerify","onLoad","onError","onFullChallenge","verify","otherProps","_objectWithoutPropertiesLoose","_excluded","webview","useRef","loaded","setLoaded","useState","useEffect","current","injectJavaScript","console","error","createElement","Object","assign","ref","javaScriptEnabled","automaticallyAdjustContentInsets","scalesPageToFit","mixedContentMode","source","onMessage","event","data","parse","nativeEvent","type","token","defaultProps"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/expo-firebase-recaptcha/src/FirebaseRecaptcha.tsx"],"sourcesContent":["import { DEFAULT_WEB_APP_OPTIONS, FirebaseOptions } from 'expo-firebase-core';\nimport { CodedError } from 'expo-modules-core';\nimport * as React from 'react';\n\nimport { WebView } from './WebView';\n\ninterface Props extends React.ComponentProps<typeof WebView> {\n  firebaseConfig?: FirebaseOptions;\n  firebaseVersion?: string;\n  appVerificationDisabledForTesting?: boolean;\n  languageCode?: string;\n  onLoad?: () => any;\n  onError?: () => any;\n  onVerify: (token: string) => any;\n  onFullChallenge?: () => any;\n  invisible?: boolean;\n  verify?: boolean;\n}\n\nfunction getWebviewSource(\n  firebaseConfig: FirebaseOptions,\n  firebaseVersion?: string,\n  appVerificationDisabledForTesting: boolean = false,\n  languageCode?: string,\n  invisible?: boolean\n) {\n  firebaseVersion = firebaseVersion || '8.0.0';\n  return {\n    baseUrl: `https://${firebaseConfig.authDomain}`,\n    html: `\n<!DOCTYPE html><html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"HandheldFriendly\" content=\"true\">\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-app.js\"></script>\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-auth.js\"></script>\n  <script type=\"text/javascript\">firebase.initializeApp(${JSON.stringify(firebaseConfig)});</script>\n  <style>\n    html, body {\n      height: 100%;\n      ${invisible ? `padding: 0; margin: 0;` : ``}\n    }\n    #recaptcha-btn {\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n      border: 0;\n      user-select: none;\n      -webkit-user-select: none;\n    }\n  </style>\n</head>\n<body>\n  ${\n    invisible\n      ? `<button id=\"recaptcha-btn\" type=\"button\" onclick=\"onClickButton()\">Confirm reCAPTCHA</button>`\n      : `<div id=\"recaptcha-cont\" class=\"g-recaptcha\"></div>`\n  }\n  <script>\n    var fullChallengeTimer;\n    function onVerify(token) {\n      if (fullChallengeTimer) {\n        clearInterval(fullChallengeTimer);\n        fullChallengeTimer = undefined;\n      }\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'verify',\n        token: token\n      }));\n    }\n    function onLoad() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'load'\n      }));\n      firebase.auth().settings.appVerificationDisabledForTesting = ${appVerificationDisabledForTesting};\n      ${languageCode ? `firebase.auth().languageCode = '${languageCode}';` : ''}\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\"${\n        invisible ? 'recaptcha-btn' : 'recaptcha-cont'\n      }\", {\n        size: \"${invisible ? 'invisible' : 'normal'}\",\n        callback: onVerify\n      });\n      window.recaptchaVerifier.render();\n    }\n    function onError() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'error'\n      }));\n    }\n    function onClickButton() {\n      if (!fullChallengeTimer) {\n        fullChallengeTimer = setInterval(function() {\n          var iframes = document.getElementsByTagName(\"iframe\");\n          var isFullChallenge = false;\n          for (i = 0; i < iframes.length; i++) {\n            var parentWindow = iframes[i].parentNode ? iframes[i].parentNode.parentNode : undefined;\n            var isHidden = parentWindow && parentWindow.style.opacity == 0;\n            isFullChallenge = isFullChallenge || (\n              !isHidden && \n              ((iframes[i].title === 'recaptcha challenge') ||\n               (iframes[i].src.indexOf('google.com/recaptcha/api2/bframe') >= 0)));\n          }\n          if (isFullChallenge) {\n            clearInterval(fullChallengeTimer);\n            fullChallengeTimer = undefined;\n            window.ReactNativeWebView.postMessage(JSON.stringify({\n              type: 'fullChallenge'\n            }));  \n          }\n        }, 100);\n      }\n    }\n    window.addEventListener('message', function(event) {\n      if (event.data.verify) {\n        document.getElementById('recaptcha-btn').click();\n      }\n    });\n  </script>\n  <script src=\"https://www.google.com/recaptcha/api.js?onload=onLoad&render=explicit&hl=${\n    languageCode ?? ''\n  }\" onerror=\"onError()\"></script>\n</body></html>`,\n  };\n}\n\nfunction validateFirebaseConfig(firebaseConfig?: FirebaseOptions) {\n  if (!firebaseConfig) {\n    throw new CodedError(\n      'ERR_FIREBASE_RECAPTCHA_CONFIG',\n      `Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`\n    );\n  }\n  const { authDomain } = firebaseConfig;\n  if (!authDomain) {\n    throw new CodedError(\n      'ERR_FIREBASE_RECAPTCHA_CONFIG',\n      `Missing \"authDomain\" in firebase web configuration.`\n    );\n  }\n}\n\nexport default function FirebaseRecaptcha(props: Props) {\n  const {\n    firebaseConfig,\n    firebaseVersion,\n    appVerificationDisabledForTesting,\n    languageCode,\n    onVerify,\n    onLoad,\n    onError,\n    onFullChallenge,\n    invisible,\n    verify,\n    ...otherProps\n  } = props;\n  const webview = React.useRef(null);\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    if (webview.current && loaded && verify) {\n      // @ts-ignore: Object is possibly null\n      webview.current.injectJavaScript(`\n    (function(){\n      window.dispatchEvent(new MessageEvent('message', {data: { verify: true }}));\n    })();\n    true;\n    `);\n    }\n    return () => {};\n  }, [webview, verify, loaded]);\n  validateFirebaseConfig(firebaseConfig);\n  if (!firebaseConfig) {\n    console.error(\n      `FirebaseRecaptcha: Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`\n    );\n    return null;\n  }\n  return (\n    <WebView\n      ref={webview}\n      javaScriptEnabled\n      automaticallyAdjustContentInsets\n      scalesPageToFit\n      mixedContentMode=\"always\"\n      source={getWebviewSource(\n        firebaseConfig,\n        firebaseVersion,\n        appVerificationDisabledForTesting,\n        languageCode,\n        invisible\n      )}\n      onError={onError}\n      onMessage={(event) => {\n        const data = JSON.parse(event.nativeEvent.data);\n        switch (data.type) {\n          case 'load':\n            if (onLoad) {\n              setLoaded(true);\n              onLoad();\n            }\n            break;\n          case 'error':\n            if (onError) {\n              onError();\n            }\n            break;\n          case 'verify':\n            onVerify(data.token);\n            break;\n          case 'fullChallenge':\n            if (onFullChallenge) {\n              onFullChallenge();\n            }\n            break;\n        }\n      }}\n      {...otherProps}\n    />\n  );\n}\n\nFirebaseRecaptcha.defaultProps = {\n  firebaseConfig: DEFAULT_WEB_APP_OPTIONS,\n};\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}