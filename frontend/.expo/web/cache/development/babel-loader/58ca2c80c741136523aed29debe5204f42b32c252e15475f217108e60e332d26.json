{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"navigation\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport DrawerStatusContext from \"../utils/DrawerStatusContext\";\nimport getDrawerStatusFromState from \"../utils/getDrawerStatusFromState\";\nimport DrawerContent from \"./DrawerContent\";\nimport DrawerToggleButton from \"./DrawerToggleButton\";\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback\";\nconst getDefaultDrawerWidth = _ref => {\n  let {\n    height,\n    width\n  } = _ref;\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  const maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n  let {\n    state,\n    navigation,\n    descriptors,\n    defaultStatus,\n    drawerContent = props => React.createElement(DrawerContent, props),\n    detachInactiveScreens = Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios',\n    useLegacyImplementation = !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated))\n  } = _ref2;\n  const legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  const Drawer = useLegacyImplementation ? require(\"./legacy/Drawer\").default : require(\"./modern/Drawer\").default;\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n    overlayAccessibilityLabel\n  } = descriptors[focusedRouteKey].options;\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n  const dimensions = useSafeAreaFrame();\n  const {\n    colors\n  } = useTheme();\n  const drawerStatus = getDrawerStatusFromState(state);\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch(Object.assign({}, DrawerActions.openDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch(Object.assign({}, DrawerActions.closeDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    const handleHardwareBack = () => {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    const handleEscape = e => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n    const subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return () => {\n      subscription.remove();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  const renderDrawerContent = () => {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  const renderSceneContent = () => {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map((route, index) => {\n      const descriptor = descriptors[route.key];\n      const {\n        lazy = true,\n        unmountOnBlur\n      } = descriptor.options;\n      const isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      const {\n        freezeOnBlur,\n        header = _ref3 => {\n          let {\n            layout,\n            options\n          } = _ref3;\n          return React.createElement(Header, _extends({}, options, {\n            layout: layout,\n            title: getHeaderTitle(options, route.name),\n            headerLeft: options.headerLeft ?? (props => React.createElement(DrawerToggleButton, props))\n          }));\n        },\n        headerShown,\n        headerStatusBarHeight,\n        headerTransparent,\n        sceneContainerStyle\n      } = descriptor.options;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    overlayAccessibilityLabel: overlayAccessibilityLabel,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\nexport default function DrawerView(_ref4) {\n  let {\n      navigation\n    } = _ref4,\n    rest = _objectWithoutPropertiesLoose(_ref4, _excluded);\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","BackHandler","I18nManager","Platform","StyleSheet","View","Reanimated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","_ref","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerViewBase","_ref2","_Reanimated$isConfigu","state","navigation","descriptors","defaultStatus","drawerContent","props","createElement","detachInactiveScreens","useLegacyImplementation","isConfigured","call","legacyImplemenationNotAvailable","require","abs","undefined","Error","Drawer","default","focusedRouteKey","routes","index","key","drawerHideStatusBarOnOpen","drawerPosition","getConstants","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","overlayAccessibilityLabel","options","loaded","setLoaded","useState","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","Object","assign","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","addEventListener","_document","_document$body","_document$body$addEve","document","body","remove","_document2","_document2$body","_document2$body$remov","removeEventListener","renderDrawerContent","Provider","value","renderSceneContent","enabled","hasTwoStates","style","styles","content","map","route","descriptor","lazy","unmountOnBlur","freezeOnBlur","header","_ref3","layout","_extends","title","name","headerLeft","headerShown","headerStatusBarHeight","headerTransparent","sceneContainerStyle","absoluteFill","zIndex","visible","focused","render","open","onOpen","onClose","swipeVelocityThreshold","swipeDistanceThreshold","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","_ref4","rest","_objectWithoutPropertiesLoose","_excluded","create","flex"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/@react-navigation/drawer/src/views/DrawerView.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Reanimated 2 is not configured\n  // @ts-expect-error: the type definitions are incomplete\n  useLegacyImplementation = !Reanimated.isConfigured?.(),\n}: Props) {\n  // Reanimated v3 dropped legacy v1 syntax\n  const legacyImplemenationNotAvailable =\n    require('react-native-reanimated').abs === undefined;\n\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error(\n      'The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.'\n    );\n  }\n\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n    overlayAccessibilityLabel,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            freezeOnBlur,\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            headerShown,\n            headerStatusBarHeight,\n            headerTransparent,\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n              freezeOnBlur={freezeOnBlur}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={headerShown}\n                headerStatusBarHeight={headerStatusBarHeight}\n                headerTransparent={headerTransparent}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        overlayAccessibilityLabel={overlayAccessibilityLabel}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}