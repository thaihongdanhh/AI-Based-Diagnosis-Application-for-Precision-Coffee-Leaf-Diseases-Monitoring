{"ast":null,"code":"export var GLLoggingOption;\n(function (GLLoggingOption) {\n  GLLoggingOption[GLLoggingOption[\"DISABLED\"] = 0] = \"DISABLED\";\n  GLLoggingOption[GLLoggingOption[\"METHOD_CALLS\"] = 1] = \"METHOD_CALLS\";\n  GLLoggingOption[GLLoggingOption[\"GET_ERRORS\"] = 2] = \"GET_ERRORS\";\n  GLLoggingOption[GLLoggingOption[\"RESOLVE_CONSTANTS\"] = 4] = \"RESOLVE_CONSTANTS\";\n  GLLoggingOption[GLLoggingOption[\"TRUNCATE_STRINGS\"] = 8] = \"TRUNCATE_STRINGS\";\n  GLLoggingOption[GLLoggingOption[\"ALL\"] = 15] = \"ALL\";\n})(GLLoggingOption || (GLLoggingOption = {}));","map":{"version":3,"names":["GLLoggingOption"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/expo-gl/src/GLView.types.ts"],"sourcesContent":["import { Component, ComponentClass } from 'react';\nimport { ViewProps } from 'react-native';\n\n// @docsMissing\nexport type SurfaceCreateEvent = {\n  nativeEvent: {\n    exglCtxId: number;\n  };\n};\n\n// @needsAudit\nexport type SnapshotOptions = {\n  /**\n   * Whether to flip the snapshot vertically.\n   * @default false\n   */\n  flip?: boolean;\n  /**\n   * Specify the framebuffer that we will be reading from.\n   * Defaults to underlying framebuffer that is presented in the view or the current framebuffer if context is headless.\n   */\n  framebuffer?: WebGLFramebuffer;\n  /**\n   * Rect to crop the snapshot. It's passed directly to `glReadPixels`.\n   */\n  rect?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  /**\n   * Specifies what type of compression should be used and what is the result file extension.\n   * PNG compression is lossless but slower, JPEG is faster but the image has visible artifacts.\n   * > **Note:** When using WebP format, the iOS version will print a warning, and generate a `'png'` file instead.\n   * > It is recommended to use [platform-specific](https://reactnative.dev/docs/platform-specific-code) code in this case.\n   * @default 'jpeg'\n   */\n  format?: 'jpeg' | 'png' | 'webp';\n  /**\n   * A value in range `0` to `1.0` specifying compression level of the result image.\n   * `1.0` means no compression and `0` the highest compression.\n   * @default 1.0\n   */\n  compress?: number;\n};\n\n// @needsAudit\nexport type GLSnapshot = {\n  /**\n   * URI to the snapshot.\n   */\n  uri: string | Blob | null;\n  /**\n   * Synonym for `uri`. Makes snapshot object compatible with `texImage2D`.\n   */\n  localUri: string;\n  /**\n   * Width of the snapshot.\n   */\n  width: number;\n  /**\n   * Height of the snapshot.\n   */\n  height: number;\n};\n\n// @docsMissing\nexport interface ExpoWebGLRenderingContext extends WebGL2RenderingContext {\n  contextId: number;\n  endFrameEXP(): void;\n  flushEXP(): void;\n  __expoSetLogging(option: GLLoggingOption): void;\n}\n\n// @docsMissing\nexport type ComponentOrHandle = null | number | Component<any, any> | ComponentClass<any>;\n\n// @needsAudit\nexport type GLViewProps = {\n  /**\n   * A function that will be called when the OpenGL ES context is created.\n   * The function is passed a single argument `gl` that extends a [WebGLRenderingContext](https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14) interface.\n   */\n  onContextCreate(gl: ExpoWebGLRenderingContext): void;\n  /**\n   * `GLView` can enable iOS's built-in [multisampling](https://www.khronos.org/registry/OpenGL/extensions/APPLE/APPLE_framebuffer_multisample.txt).\n   * This prop specifies the number of samples to use. Setting this to `0` turns off multisampling.\n   * @platform ios\n   * @default 4\n   */\n  msaaSamples: number;\n  /**\n   * Enables support for interacting with a `gl` object from code running on the Reanimated worklet thread.\n   * @default false\n   */\n  enableExperimentalWorkletSupport: boolean;\n  /**\n   * @hidden\n   * A ref callback for the native GLView\n   */\n  nativeRef_EXPERIMENTAL?(callback: ComponentOrHandle | null);\n} & ViewProps;\n\n// @needsAudit\nexport enum GLLoggingOption {\n  /**\n   * Disables logging entirely.\n   */\n  DISABLED = 0,\n  /**\n   * Logs method calls, their parameters and results.\n   */\n  METHOD_CALLS = 1,\n  /**\n   * Calls `gl.getError()` after each other method call and prints an error if any is returned.\n   * This option has a significant impact on the performance as this method is blocking.\n   */\n  GET_ERRORS = 2,\n  /**\n   * Resolves parameters of type `number` to their constant names.\n   */\n  RESOLVE_CONSTANTS = 4,\n  /**\n   * When this option is enabled, long strings will be truncated.\n   * It's useful if your shaders are really big and logging them significantly reduces performance.\n   */\n  TRUNCATE_STRINGS = 8,\n  /**\n   * Enables all other options. It implies `GET_ERRORS` so be aware of the slowdown.\n   */\n  ALL = METHOD_CALLS | GET_ERRORS | RESOLVE_CONSTANTS | TRUNCATE_STRINGS,\n}\n"],"mappings":"AAyGA,WAAYA,eA2BX;AA3BD,WAAYA,eAAe;EAIzBA,eAAA,CAAAA,eAAA,8BAAY;EAIZA,eAAA,CAAAA,eAAA,sCAAgB;EAKhBA,eAAA,CAAAA,eAAA,kCAAc;EAIdA,eAAA,CAAAA,eAAA,gDAAqB;EAKrBA,eAAA,CAAAA,eAAA,8CAAoB;EAIpBA,eAAA,CAAAA,eAAA,qBAAsE;AACxE,CAAC,EA3BWA,eAAe,KAAfA,eAAe"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}