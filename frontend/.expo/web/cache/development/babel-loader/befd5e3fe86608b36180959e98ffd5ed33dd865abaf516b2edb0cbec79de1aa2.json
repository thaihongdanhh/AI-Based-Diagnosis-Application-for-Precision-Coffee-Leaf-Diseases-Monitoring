{"ast":null,"code":"import * as React from 'react';\nimport { useImperativeHandle, useRef, useState } from 'react';\nexport default function useSyncOnScroll(inputRef) {\n  const componentRef = useRef(null);\n  const [enableSyncOnScroll, setEnableSyncOnScroll] = useState();\n  useImperativeHandle(inputRef, () => {\n    return {\n      componentRef,\n      unstable_setEnableSyncOnScroll(enabled) {\n        setEnableSyncOnScroll(enabled);\n      }\n    };\n  }, []);\n  return [componentRef, enableSyncOnScroll];\n}","map":{"version":3,"names":["React","useImperativeHandle","useRef","useState","useSyncOnScroll","inputRef","componentRef","enableSyncOnScroll","setEnableSyncOnScroll","unstable_setEnableSyncOnScroll","enabled"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/src/private/components/useSyncOnScroll.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n * @oncall react_native\n */\n\nimport type {ScrollViewNativeProps} from '../../../Libraries/Components/ScrollView/ScrollViewNativeComponentType';\nimport type {HostComponent} from '../../../Libraries/Renderer/shims/ReactNativeTypes';\n\nimport * as React from 'react';\nimport {useImperativeHandle, useRef, useState} from 'react';\n\nexport type TScrollViewNativeComponentInstance = React.ElementRef<\n  HostComponent<ScrollViewNativeProps>,\n>;\n\nexport type TScrollViewNativeImperativeHandle = {\n  componentRef: React.RefObject<TScrollViewNativeComponentInstance | null>,\n  unstable_setEnableSyncOnScroll: (enabled: true) => void,\n};\n\n/**\n * Hook used by `HScrollViewNativeComponent` and `VScrollViewNativeComponent`\n * to make an implementation of `unstable_setEnableSyncOnScroll` available that\n * does not require updating all `ScrollView` children.\n */\nexport default function useSyncOnScroll(\n  inputRef: ?React.RefSetter<TScrollViewNativeImperativeHandle | null>,\n): [React.RefSetter<TScrollViewNativeComponentInstance | null>, true | void] {\n  const componentRef = useRef<TScrollViewNativeComponentInstance | null>(null);\n  const [enableSyncOnScroll, setEnableSyncOnScroll] = useState<true | void>();\n\n  useImperativeHandle<TScrollViewNativeImperativeHandle>(inputRef, () => {\n    return {\n      componentRef,\n      unstable_setEnableSyncOnScroll(enabled: true): void {\n        setEnableSyncOnScroll(enabled);\n      },\n    };\n  }, []);\n\n  return [componentRef, enableSyncOnScroll];\n}\n"],"mappings":"AAcA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAQC,mBAAmB,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AAgB3D,eAAe,SAASC,eAAeA,CACrCC,QAAoE,EACO;EAC3E,MAAMC,YAAY,GAAGJ,MAAM,CAA4C,IAAI,CAAC;EAC5E,MAAM,CAACK,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGL,QAAQ,CAAc,CAAC;EAE3EF,mBAAmB,CAAoCI,QAAQ,EAAE,MAAM;IACrE,OAAO;MACLC,YAAY;MACZG,8BAA8BA,CAACC,OAAa,EAAQ;QAClDF,qBAAqB,CAACE,OAAO,CAAC;MAChC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACJ,YAAY,EAAEC,kBAAkB,CAAC;AAC3C"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}