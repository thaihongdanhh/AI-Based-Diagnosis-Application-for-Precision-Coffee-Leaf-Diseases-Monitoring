{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onBlur\", \"onFocus\"];\nvar _jsxFileName = \"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js\";\nimport View from \"../../Components/View/View\";\nimport { PressabilityDebugView } from \"../../Pressability/PressabilityDebug\";\nimport usePressability from \"../../Pressability/usePressability\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PASSTHROUGH_PROPS = ['accessibilityActions', 'accessibilityElementsHidden', 'accessibilityHint', 'accessibilityLanguage', 'accessibilityIgnoresInvertColors', 'accessibilityLabel', 'accessibilityLiveRegion', 'accessibilityRole', 'accessibilityValue', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'accessibilityViewIsModal', 'aria-modal', 'hitSlop', 'importantForAccessibility', 'nativeID', 'onAccessibilityAction', 'onBlur', 'onFocus', 'onLayout', 'testID'];\nmodule.exports = function TouchableWithoutFeedback(props) {\n  const {\n    disabled,\n    rejectResponderTermination,\n    'aria-disabled': ariaDisabled,\n    accessibilityState,\n    hitSlop,\n    delayLongPress,\n    delayPressIn,\n    delayPressOut,\n    pressRetentionOffset,\n    touchSoundDisabled,\n    onBlur: _onBlur,\n    onFocus: _onFocus,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut\n  } = props;\n  const pressabilityConfig = useMemo(() => ({\n    cancelable: !rejectResponderTermination,\n    disabled: disabled !== null ? disabled : ariaDisabled ?? accessibilityState?.disabled,\n    hitSlop: hitSlop,\n    delayLongPress: delayLongPress,\n    delayPressIn: delayPressIn,\n    delayPressOut: delayPressOut,\n    minPressDuration: 0,\n    pressRectOffset: pressRetentionOffset,\n    android_disableSound: touchSoundDisabled,\n    onBlur: _onBlur,\n    onFocus: _onFocus,\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut\n  }), [rejectResponderTermination, disabled, ariaDisabled, accessibilityState?.disabled, hitSlop, delayLongPress, delayPressIn, delayPressOut, pressRetentionOffset, touchSoundDisabled, _onBlur, _onFocus, onLongPress, onPress, onPressIn, onPressOut]);\n  const eventHandlers = usePressability(pressabilityConfig);\n  const element = React.Children.only(props.children);\n  const children = [element.props.children];\n  const ariaLive = props['aria-live'];\n  if (__DEV__) {\n    if (element.type === View) {\n      children.push(_jsxDEV(PressabilityDebugView, {\n        color: \"red\",\n        hitSlop: props.hitSlop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  let _accessibilityState = {\n    busy: props['aria-busy'] ?? props.accessibilityState?.busy,\n    checked: props['aria-checked'] ?? props.accessibilityState?.checked,\n    disabled: props['aria-disabled'] ?? props.accessibilityState?.disabled,\n    expanded: props['aria-expanded'] ?? props.accessibilityState?.expanded,\n    selected: props['aria-selected'] ?? props.accessibilityState?.selected\n  };\n  const _ref = eventHandlers || {},\n    eventHandlersWithoutBlurAndFocus = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const elementProps = Object.assign({}, eventHandlersWithoutBlurAndFocus, {\n    accessible: props.accessible !== false,\n    accessibilityState: props.disabled != null ? Object.assign({}, _accessibilityState, {\n      disabled: props.disabled\n    }) : _accessibilityState,\n    focusable: props.focusable !== false && props.onPress !== undefined && !props.disabled,\n    accessibilityElementsHidden: props['aria-hidden'] ?? props.accessibilityElementsHidden,\n    importantForAccessibility: props['aria-hidden'] === true ? 'no-hide-descendants' : props.importantForAccessibility,\n    accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion,\n    nativeID: props.id ?? props.nativeID\n  });\n  for (const prop of PASSTHROUGH_PROPS) {\n    if (props[prop] !== undefined) {\n      elementProps[prop] = props[prop];\n    }\n  }\n  return React.cloneElement(element, elementProps, ...children);\n};","map":{"version":3,"names":["View","PressabilityDebugView","usePressability","React","useMemo","jsxDEV","_jsxDEV","PASSTHROUGH_PROPS","module","exports","TouchableWithoutFeedback","props","disabled","rejectResponderTermination","ariaDisabled","accessibilityState","hitSlop","delayLongPress","delayPressIn","delayPressOut","pressRetentionOffset","touchSoundDisabled","onBlur","_onBlur","onFocus","_onFocus","onLongPress","onPress","onPressIn","onPressOut","pressabilityConfig","cancelable","minPressDuration","pressRectOffset","android_disableSound","eventHandlers","element","Children","only","children","ariaLive","__DEV__","type","push","color","fileName","_jsxFileName","lineNumber","columnNumber","_accessibilityState","busy","checked","expanded","selected","_ref","eventHandlersWithoutBlurAndFocus","_objectWithoutPropertiesLoose","_excluded","elementProps","Object","assign","accessible","focusable","undefined","accessibilityElementsHidden","importantForAccessibility","accessibilityLiveRegion","nativeID","id","prop","cloneElement"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../../Components/View/ViewAccessibility';\nimport type {EdgeInsetsOrSizeProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  LayoutEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\n\nimport View from '../../Components/View/View';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport usePressability from '../../Pressability/usePressability';\nimport * as React from 'react';\nimport {useMemo} from 'react';\n\ntype Props = $ReadOnly<{|\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityLanguage?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  'aria-valuemax'?: AccessibilityValue['max'],\n  'aria-valuemin'?: AccessibilityValue['min'],\n  'aria-valuenow'?: AccessibilityValue['now'],\n  'aria-valuetext'?: AccessibilityValue['text'],\n  accessibilityViewIsModal?: ?boolean,\n  'aria-modal'?: ?boolean,\n  accessible?: ?boolean,\n  /**\n   * alias for accessibilityState\n   *\n   * see https://reactnative.dev/docs/accessibility#accessibilitystate\n   */\n  'aria-busy'?: ?boolean,\n  'aria-checked'?: ?boolean | 'mixed',\n  'aria-disabled'?: ?boolean,\n  'aria-expanded'?: ?boolean,\n  'aria-selected'?: ?boolean,\n  'aria-hidden'?: ?boolean,\n  'aria-live'?: ?('polite' | 'assertive' | 'off'),\n  'aria-label'?: ?Stringish,\n  children?: ?React.Node,\n  delayLongPress?: ?number,\n  delayPressIn?: ?number,\n  delayPressOut?: ?number,\n  disabled?: ?boolean,\n  focusable?: ?boolean,\n  hitSlop?: ?EdgeInsetsOrSizeProp,\n  id?: string,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  nativeID?: ?string,\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n  onBlur?: ?(event: BlurEvent) => mixed,\n  onFocus?: ?(event: FocusEvent) => mixed,\n  onLayout?: ?(event: LayoutEvent) => mixed,\n  onLongPress?: ?(event: PressEvent) => mixed,\n  onPress?: ?(event: PressEvent) => mixed,\n  onPressIn?: ?(event: PressEvent) => mixed,\n  onPressOut?: ?(event: PressEvent) => mixed,\n  pressRetentionOffset?: ?EdgeInsetsOrSizeProp,\n  rejectResponderTermination?: ?boolean,\n  testID?: ?string,\n  touchSoundDisabled?: ?boolean,\n|}>;\n\nconst PASSTHROUGH_PROPS = [\n  'accessibilityActions',\n  'accessibilityElementsHidden',\n  'accessibilityHint',\n  'accessibilityLanguage',\n  'accessibilityIgnoresInvertColors',\n  'accessibilityLabel',\n  'accessibilityLiveRegion',\n  'accessibilityRole',\n  'accessibilityValue',\n  'aria-valuemax',\n  'aria-valuemin',\n  'aria-valuenow',\n  'aria-valuetext',\n  'accessibilityViewIsModal',\n  'aria-modal',\n  'hitSlop',\n  'importantForAccessibility',\n  'nativeID',\n  'onAccessibilityAction',\n  'onBlur',\n  'onFocus',\n  'onLayout',\n  'testID',\n];\n\nmodule.exports = function TouchableWithoutFeedback(props: Props): React.Node {\n  const {\n    disabled,\n    rejectResponderTermination,\n    'aria-disabled': ariaDisabled,\n    accessibilityState,\n    hitSlop,\n    delayLongPress,\n    delayPressIn,\n    delayPressOut,\n    pressRetentionOffset,\n    touchSoundDisabled,\n    onBlur: _onBlur,\n    onFocus: _onFocus,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n  } = props;\n\n  const pressabilityConfig = useMemo(\n    () => ({\n      cancelable: !rejectResponderTermination,\n      disabled:\n        disabled !== null\n          ? disabled\n          : ariaDisabled ?? accessibilityState?.disabled,\n      hitSlop: hitSlop,\n      delayLongPress: delayLongPress,\n      delayPressIn: delayPressIn,\n      delayPressOut: delayPressOut,\n      minPressDuration: 0,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound: touchSoundDisabled,\n      onBlur: _onBlur,\n      onFocus: _onFocus,\n      onLongPress: onLongPress,\n      onPress: onPress,\n      onPressIn: onPressIn,\n      onPressOut: onPressOut,\n    }),\n    [\n      rejectResponderTermination,\n      disabled,\n      ariaDisabled,\n      accessibilityState?.disabled,\n      hitSlop,\n      delayLongPress,\n      delayPressIn,\n      delayPressOut,\n      pressRetentionOffset,\n      touchSoundDisabled,\n      _onBlur,\n      _onFocus,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n    ],\n  );\n\n  const eventHandlers = usePressability(pressabilityConfig);\n\n  const element = React.Children.only<$FlowFixMe>(props.children);\n  const children: Array<React.Node> = [element.props.children];\n  const ariaLive = props['aria-live'];\n\n  if (__DEV__) {\n    if (element.type === View) {\n      children.push(\n        <PressabilityDebugView color=\"red\" hitSlop={props.hitSlop} />,\n      );\n    }\n  }\n\n  let _accessibilityState = {\n    busy: props['aria-busy'] ?? props.accessibilityState?.busy,\n    checked: props['aria-checked'] ?? props.accessibilityState?.checked,\n    disabled: props['aria-disabled'] ?? props.accessibilityState?.disabled,\n    expanded: props['aria-expanded'] ?? props.accessibilityState?.expanded,\n    selected: props['aria-selected'] ?? props.accessibilityState?.selected,\n  };\n\n  // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n  // adopting `Pressability`, so preserve that behavior.\n  const {onBlur, onFocus, ...eventHandlersWithoutBlurAndFocus} =\n    eventHandlers || {};\n\n  const elementProps: {[string]: mixed, ...} = {\n    ...eventHandlersWithoutBlurAndFocus,\n    accessible: props.accessible !== false,\n    accessibilityState:\n      props.disabled != null\n        ? {\n            ..._accessibilityState,\n            disabled: props.disabled,\n          }\n        : _accessibilityState,\n    focusable:\n      props.focusable !== false &&\n      props.onPress !== undefined &&\n      !props.disabled,\n\n    accessibilityElementsHidden:\n      props['aria-hidden'] ?? props.accessibilityElementsHidden,\n    importantForAccessibility:\n      props['aria-hidden'] === true\n        ? 'no-hide-descendants'\n        : props.importantForAccessibility,\n    accessibilityLiveRegion:\n      ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion,\n    nativeID: props.id ?? props.nativeID,\n  };\n\n  for (const prop of PASSTHROUGH_PROPS) {\n    if (props[prop] !== undefined) {\n      elementProps[prop] = props[prop];\n    }\n  }\n\n  // $FlowFixMe[incompatible-call]\n  return React.cloneElement(element, elementProps, ...children);\n};\n"],"mappings":"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"},"metadata":{"hasCjsExports":true},"sourceType":"module","externalDependencies":[]}