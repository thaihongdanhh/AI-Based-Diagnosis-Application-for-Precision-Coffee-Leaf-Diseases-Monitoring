{"ast":null,"code":"var _jsxFileName = \"/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/ReactNative/renderApplication.js\";\nimport GlobalPerformanceLogger from \"../Utilities/GlobalPerformanceLogger\";\nimport PerformanceLoggerContext from \"../Utilities/PerformanceLoggerContext\";\nimport AppContainer from \"./AppContainer\";\nimport DisplayMode from \"./DisplayMode\";\nimport getCachedComponentWithDebugName from \"./getCachedComponentWithDebugName\";\nimport * as Renderer from \"./RendererProxy\";\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport \"../Utilities/BackHandler\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, rootViewStyle, fabric, scopedPerformanceLogger, isLogBox, debugName, displayMode, useConcurrentRoot, useOffscreen) {\n  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);\n  const performanceLogger = scopedPerformanceLogger ?? GlobalPerformanceLogger;\n  let renderable = _jsxDEV(PerformanceLoggerContext.Provider, {\n    value: performanceLogger,\n    children: _jsxDEV(AppContainer, {\n      rootTag: rootTag,\n      fabric: fabric,\n      WrapperComponent: WrapperComponent,\n      rootViewStyle: rootViewStyle,\n      initialProps: initialProps ?? Object.freeze({}),\n      internal_excludeLogBox: isLogBox,\n      children: _jsxDEV(RootComponent, Object.assign({}, initialProps, {\n        rootTag: rootTag\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n  if (__DEV__ && debugName) {\n    const RootComponentWithMeaningfulName = getCachedComponentWithDebugName(`${debugName}(RootComponent)`);\n    renderable = _jsxDEV(RootComponentWithMeaningfulName, {\n      children: renderable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n  if (useOffscreen && displayMode != null) {\n    const Activity = React.unstable_Activity;\n    renderable = _jsxDEV(Activity, {\n      mode: displayMode === DisplayMode.VISIBLE ? 'visible' : 'hidden',\n      children: renderable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n  const useConcurrentRootOverride = fabric;\n  performanceLogger.startTimespan('renderApplication_React_render');\n  performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRootOverride ? '1' : '0');\n  performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');\n  performanceLogger.setExtra('usedReactProfiler', Renderer.isProfilingRenderer());\n  Renderer.renderElement({\n    element: renderable,\n    rootTag,\n    useFabric: Boolean(fabric),\n    useConcurrentRoot: Boolean(useConcurrentRootOverride)\n  });\n  performanceLogger.stopTimespan('renderApplication_React_render');\n}","map":{"version":3,"names":["GlobalPerformanceLogger","PerformanceLoggerContext","AppContainer","DisplayMode","getCachedComponentWithDebugName","Renderer","invariant","React","jsxDEV","_jsxDEV","renderApplication","RootComponent","initialProps","rootTag","WrapperComponent","rootViewStyle","fabric","scopedPerformanceLogger","isLogBox","debugName","displayMode","useConcurrentRoot","useOffscreen","performanceLogger","renderable","Provider","value","children","Object","freeze","internal_excludeLogBox","assign","fileName","_jsxFileName","lineNumber","columnNumber","__DEV__","RootComponentWithMeaningfulName","Activity","unstable_Activity","mode","VISIBLE","useConcurrentRootOverride","startTimespan","setExtra","isProfilingRenderer","renderElement","element","useFabric","Boolean","stopTimespan"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/ReactNative/renderApplication.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\nimport type {IPerformanceLogger} from '../Utilities/createPerformanceLogger';\n\nimport GlobalPerformanceLogger from '../Utilities/GlobalPerformanceLogger';\nimport PerformanceLoggerContext from '../Utilities/PerformanceLoggerContext';\nimport AppContainer from './AppContainer';\nimport DisplayMode, {type DisplayModeType} from './DisplayMode';\nimport getCachedComponentWithDebugName from './getCachedComponentWithDebugName';\nimport * as Renderer from './RendererProxy';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\n// require BackHandler so it sets the default handler that exits the app if no listeners respond\nimport '../Utilities/BackHandler';\n\ntype ActivityType = React.AbstractComponent<{\n  mode: 'visible' | 'hidden',\n  children: React.Node,\n}>;\n\nexport default function renderApplication<Props: Object>(\n  RootComponent: React.ComponentType<Props>,\n  initialProps: Props,\n  rootTag: any,\n  WrapperComponent?: ?React.ComponentType<any>,\n  rootViewStyle?: ?ViewStyleProp,\n  fabric?: boolean,\n  scopedPerformanceLogger?: IPerformanceLogger,\n  isLogBox?: boolean,\n  debugName?: string,\n  displayMode?: ?DisplayModeType,\n  useConcurrentRoot?: boolean,\n  useOffscreen?: boolean,\n) {\n  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);\n\n  const performanceLogger = scopedPerformanceLogger ?? GlobalPerformanceLogger;\n\n  let renderable: React.MixedElement = (\n    <PerformanceLoggerContext.Provider value={performanceLogger}>\n      <AppContainer\n        rootTag={rootTag}\n        fabric={fabric}\n        WrapperComponent={WrapperComponent}\n        rootViewStyle={rootViewStyle}\n        initialProps={initialProps ?? Object.freeze({})}\n        internal_excludeLogBox={isLogBox}>\n        <RootComponent {...initialProps} rootTag={rootTag} />\n      </AppContainer>\n    </PerformanceLoggerContext.Provider>\n  );\n\n  if (__DEV__ && debugName) {\n    const RootComponentWithMeaningfulName = getCachedComponentWithDebugName(\n      `${debugName}(RootComponent)`,\n    );\n    renderable = (\n      <RootComponentWithMeaningfulName>\n        {renderable}\n      </RootComponentWithMeaningfulName>\n    );\n  }\n\n  if (useOffscreen && displayMode != null) {\n    // $FlowFixMe[incompatible-type]\n    // $FlowFixMe[prop-missing]\n    const Activity: ActivityType = React.unstable_Activity;\n\n    renderable = (\n      <Activity\n        mode={displayMode === DisplayMode.VISIBLE ? 'visible' : 'hidden'}>\n        {renderable}\n      </Activity>\n    );\n  }\n\n  // We want to have concurrentRoot always enabled when you're on Fabric.\n  const useConcurrentRootOverride = fabric;\n\n  performanceLogger.startTimespan('renderApplication_React_render');\n  performanceLogger.setExtra(\n    'usedReactConcurrentRoot',\n    useConcurrentRootOverride ? '1' : '0',\n  );\n  performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');\n  performanceLogger.setExtra(\n    'usedReactProfiler',\n    Renderer.isProfilingRenderer(),\n  );\n  Renderer.renderElement({\n    element: renderable,\n    rootTag,\n    useFabric: Boolean(fabric),\n    useConcurrentRoot: Boolean(useConcurrentRootOverride),\n  });\n  performanceLogger.stopTimespan('renderApplication_React_render');\n}\n"],"mappings":"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"},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}