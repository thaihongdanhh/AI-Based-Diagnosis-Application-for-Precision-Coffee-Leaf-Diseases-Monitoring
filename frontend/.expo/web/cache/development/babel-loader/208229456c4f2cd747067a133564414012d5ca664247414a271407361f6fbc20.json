{"ast":null,"code":"import registerCallableModule from \"../Core/registerCallableModule\";\nimport BugReporting from \"../BugReporting/BugReporting\";\nimport createPerformanceLogger from \"../Utilities/createPerformanceLogger\";\nimport infoLog from \"../Utilities/infoLog\";\nimport SceneTracker from \"../Utilities/SceneTracker\";\nimport { coerceDisplayMode } from \"./DisplayMode\";\nimport HeadlessJsTaskError from \"./HeadlessJsTaskError\";\nimport NativeHeadlessJsTaskSupport from \"./NativeHeadlessJsTaskSupport\";\nimport renderApplication from \"./renderApplication\";\nimport { unmountComponentAtNodeAndRemoveContainer } from \"./RendererProxy\";\nimport invariant from 'invariant';\nconst runnables = {};\nlet runCount = 1;\nconst sections = {};\nconst taskProviders = new Map();\nconst taskCancelProviders = new Map();\nlet componentProviderInstrumentationHook = component => component();\nlet wrapperComponentProvider;\nlet rootViewStyleProvider;\nconst AppRegistry = {\n  setWrapperComponentProvider(provider) {\n    wrapperComponentProvider = provider;\n  },\n  setRootViewStyleProvider(provider) {\n    rootViewStyleProvider = provider;\n  },\n  registerConfig(config) {\n    config.forEach(appConfig => {\n      if (appConfig.run) {\n        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);\n      } else {\n        invariant(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);\n        AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);\n      }\n    });\n  },\n  registerComponent(appKey, componentProvider, section) {\n    const scopedPerformanceLogger = createPerformanceLogger();\n    runnables[appKey] = (appParameters, displayMode) => {\n      const concurrentRootEnabled = Boolean(appParameters.initialProps?.concurrentRoot || appParameters.concurrentRoot);\n      renderApplication(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), rootViewStyleProvider && rootViewStyleProvider(appParameters), appParameters.fabric, scopedPerformanceLogger, appKey === 'LogBox', appKey, displayMode, concurrentRootEnabled);\n    };\n    if (section) {\n      sections[appKey] = runnables[appKey];\n    }\n    return appKey;\n  },\n  registerRunnable(appKey, run) {\n    runnables[appKey] = run;\n    return appKey;\n  },\n  registerSection(appKey, component) {\n    AppRegistry.registerComponent(appKey, component, true);\n  },\n  getAppKeys() {\n    return Object.keys(runnables);\n  },\n  getSectionKeys() {\n    return Object.keys(sections);\n  },\n  getSections() {\n    return Object.assign({}, sections);\n  },\n  getRunnable(appKey) {\n    return runnables[appKey];\n  },\n  getRegistry() {\n    return {\n      sections: AppRegistry.getSectionKeys(),\n      runnables: Object.assign({}, runnables)\n    };\n  },\n  setComponentProviderInstrumentationHook(hook) {\n    componentProviderInstrumentationHook = hook;\n  },\n  runApplication(appKey, appParameters, displayMode) {\n    if (appKey !== 'LogBox') {\n      const logParams = __DEV__ ? ` with ${JSON.stringify(appParameters)}` : '';\n      const msg = `Running \"${appKey}\"${logParams}`;\n      infoLog(msg);\n      BugReporting.addSource('AppRegistry.runApplication' + runCount++, () => msg);\n    }\n    invariant(runnables[appKey], `\"${appKey}\" has not been registered. This can happen if:\\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\\n' + \"* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\");\n    SceneTracker.setActiveScene({\n      name: appKey\n    });\n    runnables[appKey](appParameters, coerceDisplayMode(displayMode));\n  },\n  setSurfaceProps(appKey, appParameters, displayMode) {\n    if (appKey !== 'LogBox') {\n      const msg = 'Updating props for Surface \"' + appKey + '\" with ' + JSON.stringify(appParameters);\n      infoLog(msg);\n      BugReporting.addSource('AppRegistry.setSurfaceProps' + runCount++, () => msg);\n    }\n    invariant(runnables[appKey], `\"${appKey}\" has not been registered. This can happen if:\\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\\n' + \"* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\");\n    runnables[appKey](appParameters, coerceDisplayMode(displayMode));\n  },\n  unmountApplicationComponentAtRootTag(rootTag) {\n    unmountComponentAtNodeAndRemoveContainer(rootTag);\n  },\n  registerHeadlessTask(taskKey, taskProvider) {\n    this.registerCancellableHeadlessTask(taskKey, taskProvider, () => () => {});\n  },\n  registerCancellableHeadlessTask(taskKey, taskProvider, taskCancelProvider) {\n    if (taskProviders.has(taskKey)) {\n      console.warn(`registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '${taskKey}'`);\n    }\n    taskProviders.set(taskKey, taskProvider);\n    taskCancelProviders.set(taskKey, taskCancelProvider);\n  },\n  startHeadlessTask(taskId, taskKey, data) {\n    const taskProvider = taskProviders.get(taskKey);\n    if (!taskProvider) {\n      console.warn(`No task registered for key ${taskKey}`);\n      if (NativeHeadlessJsTaskSupport) {\n        NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n      }\n      return;\n    }\n    taskProvider()(data).then(() => {\n      if (NativeHeadlessJsTaskSupport) {\n        NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n      }\n    }).catch(reason => {\n      console.error(reason);\n      if (NativeHeadlessJsTaskSupport && reason instanceof HeadlessJsTaskError) {\n        NativeHeadlessJsTaskSupport.notifyTaskRetry(taskId).then(retryPosted => {\n          if (!retryPosted) {\n            NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n          }\n        });\n      }\n    });\n  },\n  cancelHeadlessTask(taskId, taskKey) {\n    const taskCancelProvider = taskCancelProviders.get(taskKey);\n    if (!taskCancelProvider) {\n      throw new Error(`No task canceller registered for key '${taskKey}'`);\n    }\n    taskCancelProvider()();\n  }\n};\nAppRegistry.registerComponent('LogBox', () => {\n  if (__DEV__ && typeof jest === 'undefined') {\n    return require(\"../LogBox/LogBoxInspectorContainer\").default;\n  } else {\n    return function NoOp() {\n      return null;\n    };\n  }\n});\nglobal.RN$AppRegistry = AppRegistry;\nglobal.RN$SurfaceRegistry = {\n  renderSurface: AppRegistry.runApplication,\n  setSurfaceProps: AppRegistry.setSurfaceProps\n};\nif (global.RN$Bridgeless === true) {\n  console.log('Bridgeless mode is enabled');\n}\nregisterCallableModule('AppRegistry', AppRegistry);\nmodule.exports = AppRegistry;","map":{"version":3,"names":["registerCallableModule","BugReporting","createPerformanceLogger","infoLog","SceneTracker","coerceDisplayMode","HeadlessJsTaskError","NativeHeadlessJsTaskSupport","renderApplication","unmountComponentAtNodeAndRemoveContainer","invariant","runnables","runCount","sections","taskProviders","Map","taskCancelProviders","componentProviderInstrumentationHook","component","wrapperComponentProvider","rootViewStyleProvider","AppRegistry","setWrapperComponentProvider","provider","setRootViewStyleProvider","registerConfig","config","forEach","appConfig","run","registerRunnable","appKey","registerComponent","section","componentProvider","scopedPerformanceLogger","appParameters","displayMode","concurrentRootEnabled","Boolean","initialProps","concurrentRoot","rootTag","fabric","registerSection","getAppKeys","Object","keys","getSectionKeys","getSections","assign","getRunnable","getRegistry","setComponentProviderInstrumentationHook","hook","runApplication","logParams","__DEV__","JSON","stringify","msg","addSource","setActiveScene","name","setSurfaceProps","unmountApplicationComponentAtRootTag","registerHeadlessTask","taskKey","taskProvider","registerCancellableHeadlessTask","taskCancelProvider","has","console","warn","set","startHeadlessTask","taskId","data","get","notifyTaskFinished","then","catch","reason","error","notifyTaskRetry","retryPosted","cancelHeadlessTask","Error","jest","require","default","NoOp","global","RN$AppRegistry","RN$SurfaceRegistry","renderSurface","RN$Bridgeless","log","module","exports"],"sources":["/home/data2/AIFace/AICoffeeLeaf/frontend/node_modules/react-native/Libraries/ReactNative/AppRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\nimport type {RootTag} from '../Types/RootTagTypes';\nimport type {IPerformanceLogger} from '../Utilities/createPerformanceLogger';\nimport type {DisplayModeType} from './DisplayMode';\n\nimport registerCallableModule from '../Core/registerCallableModule';\nimport BugReporting from '../BugReporting/BugReporting';\nimport createPerformanceLogger from '../Utilities/createPerformanceLogger';\nimport infoLog from '../Utilities/infoLog';\nimport SceneTracker from '../Utilities/SceneTracker';\nimport {coerceDisplayMode} from './DisplayMode';\nimport HeadlessJsTaskError from './HeadlessJsTaskError';\nimport NativeHeadlessJsTaskSupport from './NativeHeadlessJsTaskSupport';\nimport renderApplication from './renderApplication';\nimport {unmountComponentAtNodeAndRemoveContainer} from './RendererProxy';\nimport invariant from 'invariant';\n\ntype Task = (taskData: any) => Promise<void>;\nexport type TaskProvider = () => Task;\ntype TaskCanceller = () => void;\ntype TaskCancelProvider = () => TaskCanceller;\n\nexport type ComponentProvider = () => React$ComponentType<any>;\nexport type ComponentProviderInstrumentationHook = (\n  component_: ComponentProvider,\n  scopedPerformanceLogger: IPerformanceLogger,\n) => React$ComponentType<any>;\nexport type AppConfig = {\n  appKey: string,\n  component?: ComponentProvider,\n  run?: Runnable,\n  section?: boolean,\n  ...\n};\ntype AppParameters = {\n  initialProps: $ReadOnly<{[string]: mixed, ...}>,\n  rootTag: RootTag,\n  fabric?: boolean,\n  concurrentRoot?: boolean,\n};\nexport type Runnable = (\n  appParameters: AppParameters,\n  displayMode: DisplayModeType,\n) => void;\nexport type Runnables = {[appKey: string]: Runnable};\nexport type Registry = {\n  sections: $ReadOnlyArray<string>,\n  runnables: Runnables,\n  ...\n};\nexport type WrapperComponentProvider = (\n  appParameters: Object,\n) => React$ComponentType<any>;\nexport type RootViewStyleProvider = (appParameters: Object) => ViewStyleProp;\n\nconst runnables: Runnables = {};\nlet runCount = 1;\nconst sections: Runnables = {};\nconst taskProviders: Map<string, TaskProvider> = new Map();\nconst taskCancelProviders: Map<string, TaskCancelProvider> = new Map();\nlet componentProviderInstrumentationHook: ComponentProviderInstrumentationHook =\n  (component: ComponentProvider) => component();\n\nlet wrapperComponentProvider: ?WrapperComponentProvider;\nlet rootViewStyleProvider: ?RootViewStyleProvider;\n\n/**\n * `AppRegistry` is the JavaScript entry point to running all React Native apps.\n *\n * See https://reactnative.dev/docs/appregistry\n */\nconst AppRegistry = {\n  setWrapperComponentProvider(provider: WrapperComponentProvider) {\n    wrapperComponentProvider = provider;\n  },\n\n  setRootViewStyleProvider(provider: RootViewStyleProvider) {\n    rootViewStyleProvider = provider;\n  },\n\n  registerConfig(config: Array<AppConfig>): void {\n    config.forEach(appConfig => {\n      if (appConfig.run) {\n        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);\n      } else {\n        invariant(\n          appConfig.component != null,\n          'AppRegistry.registerConfig(...): Every config is expected to set ' +\n            'either `run` or `component`, but `%s` has neither.',\n          appConfig.appKey,\n        );\n        AppRegistry.registerComponent(\n          appConfig.appKey,\n          appConfig.component,\n          appConfig.section,\n        );\n      }\n    });\n  },\n\n  /**\n   * Registers an app's root component.\n   *\n   * See https://reactnative.dev/docs/appregistry#registercomponent\n   */\n  registerComponent(\n    appKey: string,\n    componentProvider: ComponentProvider,\n    section?: boolean,\n  ): string {\n    const scopedPerformanceLogger = createPerformanceLogger();\n    runnables[appKey] = (appParameters, displayMode) => {\n      const concurrentRootEnabled = Boolean(\n        appParameters.initialProps?.concurrentRoot ||\n          appParameters.concurrentRoot,\n      );\n      renderApplication(\n        componentProviderInstrumentationHook(\n          componentProvider,\n          scopedPerformanceLogger,\n        ),\n        appParameters.initialProps,\n        appParameters.rootTag,\n        wrapperComponentProvider && wrapperComponentProvider(appParameters),\n        rootViewStyleProvider && rootViewStyleProvider(appParameters),\n        appParameters.fabric,\n        scopedPerformanceLogger,\n        appKey === 'LogBox', // is logbox\n        appKey,\n        displayMode,\n        concurrentRootEnabled,\n      );\n    };\n    if (section) {\n      sections[appKey] = runnables[appKey];\n    }\n    return appKey;\n  },\n\n  registerRunnable(appKey: string, run: Runnable): string {\n    runnables[appKey] = run;\n    return appKey;\n  },\n\n  registerSection(appKey: string, component: ComponentProvider): void {\n    AppRegistry.registerComponent(appKey, component, true);\n  },\n\n  getAppKeys(): $ReadOnlyArray<string> {\n    return Object.keys(runnables);\n  },\n\n  getSectionKeys(): $ReadOnlyArray<string> {\n    return Object.keys(sections);\n  },\n\n  getSections(): Runnables {\n    return {\n      ...sections,\n    };\n  },\n\n  getRunnable(appKey: string): ?Runnable {\n    return runnables[appKey];\n  },\n\n  getRegistry(): Registry {\n    return {\n      sections: AppRegistry.getSectionKeys(),\n      runnables: {...runnables},\n    };\n  },\n\n  setComponentProviderInstrumentationHook(\n    hook: ComponentProviderInstrumentationHook,\n  ) {\n    componentProviderInstrumentationHook = hook;\n  },\n\n  /**\n   * Loads the JavaScript bundle and runs the app.\n   *\n   * See https://reactnative.dev/docs/appregistry#runapplication\n   */\n  runApplication(\n    appKey: string,\n    appParameters: AppParameters,\n    displayMode?: number,\n  ): void {\n    if (appKey !== 'LogBox') {\n      const logParams = __DEV__ ? ` with ${JSON.stringify(appParameters)}` : '';\n      const msg = `Running \"${appKey}\"${logParams}`;\n      infoLog(msg);\n      BugReporting.addSource(\n        'AppRegistry.runApplication' + runCount++,\n        () => msg,\n      );\n    }\n    invariant(\n      runnables[appKey],\n      `\"${appKey}\" has not been registered. This can happen if:\\n` +\n        '* Metro (the local dev server) is run from the wrong folder. ' +\n        'Check if Metro is running, stop it and restart it in the current project.\\n' +\n        \"* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\",\n    );\n\n    SceneTracker.setActiveScene({name: appKey});\n    runnables[appKey](appParameters, coerceDisplayMode(displayMode));\n  },\n\n  /**\n   * Update initial props for a surface that's already rendered\n   */\n  setSurfaceProps(\n    appKey: string,\n    appParameters: Object,\n    displayMode?: number,\n  ): void {\n    if (appKey !== 'LogBox') {\n      const msg =\n        'Updating props for Surface \"' +\n        appKey +\n        '\" with ' +\n        JSON.stringify(appParameters);\n      infoLog(msg);\n      BugReporting.addSource(\n        'AppRegistry.setSurfaceProps' + runCount++,\n        () => msg,\n      );\n    }\n    invariant(\n      runnables[appKey],\n      `\"${appKey}\" has not been registered. This can happen if:\\n` +\n        '* Metro (the local dev server) is run from the wrong folder. ' +\n        'Check if Metro is running, stop it and restart it in the current project.\\n' +\n        \"* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\",\n    );\n\n    runnables[appKey](appParameters, coerceDisplayMode(displayMode));\n  },\n\n  /**\n   * Stops an application when a view should be destroyed.\n   *\n   * See https://reactnative.dev/docs/appregistry#unmountapplicationcomponentatroottag\n   */\n  unmountApplicationComponentAtRootTag(rootTag: RootTag): void {\n    unmountComponentAtNodeAndRemoveContainer(rootTag);\n  },\n\n  /**\n   * Register a headless task. A headless task is a bit of code that runs without a UI.\n   *\n   * See https://reactnative.dev/docs/appregistry#registerheadlesstask\n   */\n  registerHeadlessTask(taskKey: string, taskProvider: TaskProvider): void {\n    // $FlowFixMe[object-this-reference]\n    this.registerCancellableHeadlessTask(taskKey, taskProvider, () => () => {\n      /* Cancel is no-op */\n    });\n  },\n\n  /**\n   * Register a cancellable headless task. A headless task is a bit of code that runs without a UI.\n   *\n   * See https://reactnative.dev/docs/appregistry#registercancellableheadlesstask\n   */\n  registerCancellableHeadlessTask(\n    taskKey: string,\n    taskProvider: TaskProvider,\n    taskCancelProvider: TaskCancelProvider,\n  ): void {\n    if (taskProviders.has(taskKey)) {\n      console.warn(\n        `registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '${taskKey}'`,\n      );\n    }\n    taskProviders.set(taskKey, taskProvider);\n    taskCancelProviders.set(taskKey, taskCancelProvider);\n  },\n\n  /**\n   * Only called from native code. Starts a headless task.\n   *\n   * See https://reactnative.dev/docs/appregistry#startheadlesstask\n   */\n  startHeadlessTask(taskId: number, taskKey: string, data: any): void {\n    const taskProvider = taskProviders.get(taskKey);\n    if (!taskProvider) {\n      console.warn(`No task registered for key ${taskKey}`);\n      if (NativeHeadlessJsTaskSupport) {\n        NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n      }\n      return;\n    }\n    taskProvider()(data)\n      .then(() => {\n        if (NativeHeadlessJsTaskSupport) {\n          NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n        }\n      })\n      .catch(reason => {\n        console.error(reason);\n\n        if (\n          NativeHeadlessJsTaskSupport &&\n          reason instanceof HeadlessJsTaskError\n        ) {\n          // $FlowFixMe[unused-promise]\n          NativeHeadlessJsTaskSupport.notifyTaskRetry(taskId).then(\n            retryPosted => {\n              if (!retryPosted) {\n                NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n              }\n            },\n          );\n        }\n      });\n  },\n\n  /**\n   * Only called from native code. Cancels a headless task.\n   *\n   * See https://reactnative.dev/docs/appregistry#cancelheadlesstask\n   */\n  cancelHeadlessTask(taskId: number, taskKey: string): void {\n    const taskCancelProvider = taskCancelProviders.get(taskKey);\n    if (!taskCancelProvider) {\n      throw new Error(`No task canceller registered for key '${taskKey}'`);\n    }\n    taskCancelProvider()();\n  },\n};\n\n// Register LogBox as a default surface\nAppRegistry.registerComponent('LogBox', () => {\n  if (__DEV__ && typeof jest === 'undefined') {\n    return require('../LogBox/LogBoxInspectorContainer').default;\n  } else {\n    return function NoOp() {\n      return null;\n    };\n  }\n});\n\nglobal.RN$AppRegistry = AppRegistry;\n\n// Backwards compat with SurfaceRegistry, remove me later\nglobal.RN$SurfaceRegistry = {\n  renderSurface: AppRegistry.runApplication,\n  setSurfaceProps: AppRegistry.setSurfaceProps,\n};\n\nif (global.RN$Bridgeless === true) {\n  console.log('Bridgeless mode is enabled');\n}\n\nregisterCallableModule('AppRegistry', AppRegistry);\n\nmodule.exports = AppRegistry;\n"],"mappings":"AAeA,OAAOA,sBAAsB;AAC7B,OAAOC,YAAY;AACnB,OAAOC,uBAAuB;AAC9B,OAAOC,OAAO;AACd,OAAOC,YAAY;AACnB,SAAQC,iBAAiB;AACzB,OAAOC,mBAAmB;AAC1B,OAAOC,2BAA2B;AAClC,OAAOC,iBAAiB;AACxB,SAAQC,wCAAwC;AAChD,OAAOC,SAAS,MAAM,WAAW;AAwCjC,MAAMC,SAAoB,GAAG,CAAC,CAAC;AAC/B,IAAIC,QAAQ,GAAG,CAAC;AAChB,MAAMC,QAAmB,GAAG,CAAC,CAAC;AAC9B,MAAMC,aAAwC,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC1D,MAAMC,mBAAoD,GAAG,IAAID,GAAG,CAAC,CAAC;AACtE,IAAIE,oCAA0E,GAC3EC,SAA4B,IAAKA,SAAS,CAAC,CAAC;AAE/C,IAAIC,wBAAmD;AACvD,IAAIC,qBAA6C;AAOjD,MAAMC,WAAW,GAAG;EAClBC,2BAA2BA,CAACC,QAAkC,EAAE;IAC9DJ,wBAAwB,GAAGI,QAAQ;EACrC,CAAC;EAEDC,wBAAwBA,CAACD,QAA+B,EAAE;IACxDH,qBAAqB,GAAGG,QAAQ;EAClC,CAAC;EAEDE,cAAcA,CAACC,MAAwB,EAAQ;IAC7CA,MAAM,CAACC,OAAO,CAACC,SAAS,IAAI;MAC1B,IAAIA,SAAS,CAACC,GAAG,EAAE;QACjBR,WAAW,CAACS,gBAAgB,CAACF,SAAS,CAACG,MAAM,EAAEH,SAAS,CAACC,GAAG,CAAC;MAC/D,CAAC,MAAM;QACLnB,SAAS,CACPkB,SAAS,CAACV,SAAS,IAAI,IAAI,EAC3B,mEAAmE,GACjE,oDAAoD,EACtDU,SAAS,CAACG,MACZ,CAAC;QACDV,WAAW,CAACW,iBAAiB,CAC3BJ,SAAS,CAACG,MAAM,EAChBH,SAAS,CAACV,SAAS,EACnBU,SAAS,CAACK,OACZ,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC;EAODD,iBAAiBA,CACfD,MAAc,EACdG,iBAAoC,EACpCD,OAAiB,EACT;IACR,MAAME,uBAAuB,GAAGjC,uBAAuB,CAAC,CAAC;IACzDS,SAAS,CAACoB,MAAM,CAAC,GAAG,CAACK,aAAa,EAAEC,WAAW,KAAK;MAClD,MAAMC,qBAAqB,GAAGC,OAAO,CACnCH,aAAa,CAACI,YAAY,EAAEC,cAAc,IACxCL,aAAa,CAACK,cAClB,CAAC;MACDjC,iBAAiB,CACfS,oCAAoC,CAClCiB,iBAAiB,EACjBC,uBACF,CAAC,EACDC,aAAa,CAACI,YAAY,EAC1BJ,aAAa,CAACM,OAAO,EACrBvB,wBAAwB,IAAIA,wBAAwB,CAACiB,aAAa,CAAC,EACnEhB,qBAAqB,IAAIA,qBAAqB,CAACgB,aAAa,CAAC,EAC7DA,aAAa,CAACO,MAAM,EACpBR,uBAAuB,EACvBJ,MAAM,KAAK,QAAQ,EACnBA,MAAM,EACNM,WAAW,EACXC,qBACF,CAAC;IACH,CAAC;IACD,IAAIL,OAAO,EAAE;MACXpB,QAAQ,CAACkB,MAAM,CAAC,GAAGpB,SAAS,CAACoB,MAAM,CAAC;IACtC;IACA,OAAOA,MAAM;EACf,CAAC;EAEDD,gBAAgBA,CAACC,MAAc,EAAEF,GAAa,EAAU;IACtDlB,SAAS,CAACoB,MAAM,CAAC,GAAGF,GAAG;IACvB,OAAOE,MAAM;EACf,CAAC;EAEDa,eAAeA,CAACb,MAAc,EAAEb,SAA4B,EAAQ;IAClEG,WAAW,CAACW,iBAAiB,CAACD,MAAM,EAAEb,SAAS,EAAE,IAAI,CAAC;EACxD,CAAC;EAED2B,UAAUA,CAAA,EAA2B;IACnC,OAAOC,MAAM,CAACC,IAAI,CAACpC,SAAS,CAAC;EAC/B,CAAC;EAEDqC,cAAcA,CAAA,EAA2B;IACvC,OAAOF,MAAM,CAACC,IAAI,CAAClC,QAAQ,CAAC;EAC9B,CAAC;EAEDoC,WAAWA,CAAA,EAAc;IACvB,OAAAH,MAAA,CAAAI,MAAA,KACKrC,QAAQ;EAEf,CAAC;EAEDsC,WAAWA,CAACpB,MAAc,EAAa;IACrC,OAAOpB,SAAS,CAACoB,MAAM,CAAC;EAC1B,CAAC;EAEDqB,WAAWA,CAAA,EAAa;IACtB,OAAO;MACLvC,QAAQ,EAAEQ,WAAW,CAAC2B,cAAc,CAAC,CAAC;MACtCrC,SAAS,EAAAmC,MAAA,CAAAI,MAAA,KAAMvC,SAAS;IAC1B,CAAC;EACH,CAAC;EAED0C,uCAAuCA,CACrCC,IAA0C,EAC1C;IACArC,oCAAoC,GAAGqC,IAAI;EAC7C,CAAC;EAODC,cAAcA,CACZxB,MAAc,EACdK,aAA4B,EAC5BC,WAAoB,EACd;IACN,IAAIN,MAAM,KAAK,QAAQ,EAAE;MACvB,MAAMyB,SAAS,GAAGC,OAAO,GAAI,SAAQC,IAAI,CAACC,SAAS,CAACvB,aAAa,CAAE,EAAC,GAAG,EAAE;MACzE,MAAMwB,GAAG,GAAI,YAAW7B,MAAO,IAAGyB,SAAU,EAAC;MAC7CrD,OAAO,CAACyD,GAAG,CAAC;MACZ3D,YAAY,CAAC4D,SAAS,CACpB,4BAA4B,GAAGjD,QAAQ,EAAE,EACzC,MAAMgD,GACR,CAAC;IACH;IACAlD,SAAS,CACPC,SAAS,CAACoB,MAAM,CAAC,EAChB,IAAGA,MAAO,kDAAiD,GAC1D,+DAA+D,GAC/D,6EAA6E,GAC7E,8FACJ,CAAC;IAED3B,YAAY,CAAC0D,cAAc,CAAC;MAACC,IAAI,EAAEhC;IAAM,CAAC,CAAC;IAC3CpB,SAAS,CAACoB,MAAM,CAAC,CAACK,aAAa,EAAE/B,iBAAiB,CAACgC,WAAW,CAAC,CAAC;EAClE,CAAC;EAKD2B,eAAeA,CACbjC,MAAc,EACdK,aAAqB,EACrBC,WAAoB,EACd;IACN,IAAIN,MAAM,KAAK,QAAQ,EAAE;MACvB,MAAM6B,GAAG,GACP,8BAA8B,GAC9B7B,MAAM,GACN,SAAS,GACT2B,IAAI,CAACC,SAAS,CAACvB,aAAa,CAAC;MAC/BjC,OAAO,CAACyD,GAAG,CAAC;MACZ3D,YAAY,CAAC4D,SAAS,CACpB,6BAA6B,GAAGjD,QAAQ,EAAE,EAC1C,MAAMgD,GACR,CAAC;IACH;IACAlD,SAAS,CACPC,SAAS,CAACoB,MAAM,CAAC,EAChB,IAAGA,MAAO,kDAAiD,GAC1D,+DAA+D,GAC/D,6EAA6E,GAC7E,8FACJ,CAAC;IAEDpB,SAAS,CAACoB,MAAM,CAAC,CAACK,aAAa,EAAE/B,iBAAiB,CAACgC,WAAW,CAAC,CAAC;EAClE,CAAC;EAOD4B,oCAAoCA,CAACvB,OAAgB,EAAQ;IAC3DjC,wCAAwC,CAACiC,OAAO,CAAC;EACnD,CAAC;EAODwB,oBAAoBA,CAACC,OAAe,EAAEC,YAA0B,EAAQ;IAEtE,IAAI,CAACC,+BAA+B,CAACF,OAAO,EAAEC,YAAY,EAAE,MAAM,MAAM,CAExE,CAAC,CAAC;EACJ,CAAC;EAODC,+BAA+BA,CAC7BF,OAAe,EACfC,YAA0B,EAC1BE,kBAAsC,EAChC;IACN,IAAIxD,aAAa,CAACyD,GAAG,CAACJ,OAAO,CAAC,EAAE;MAC9BK,OAAO,CAACC,IAAI,CACT,+FAA8FN,OAAQ,GACzG,CAAC;IACH;IACArD,aAAa,CAAC4D,GAAG,CAACP,OAAO,EAAEC,YAAY,CAAC;IACxCpD,mBAAmB,CAAC0D,GAAG,CAACP,OAAO,EAAEG,kBAAkB,CAAC;EACtD,CAAC;EAODK,iBAAiBA,CAACC,MAAc,EAAET,OAAe,EAAEU,IAAS,EAAQ;IAClE,MAAMT,YAAY,GAAGtD,aAAa,CAACgE,GAAG,CAACX,OAAO,CAAC;IAC/C,IAAI,CAACC,YAAY,EAAE;MACjBI,OAAO,CAACC,IAAI,CAAE,8BAA6BN,OAAQ,EAAC,CAAC;MACrD,IAAI5D,2BAA2B,EAAE;QAC/BA,2BAA2B,CAACwE,kBAAkB,CAACH,MAAM,CAAC;MACxD;MACA;IACF;IACAR,YAAY,CAAC,CAAC,CAACS,IAAI,CAAC,CACjBG,IAAI,CAAC,MAAM;MACV,IAAIzE,2BAA2B,EAAE;QAC/BA,2BAA2B,CAACwE,kBAAkB,CAACH,MAAM,CAAC;MACxD;IACF,CAAC,CAAC,CACDK,KAAK,CAACC,MAAM,IAAI;MACfV,OAAO,CAACW,KAAK,CAACD,MAAM,CAAC;MAErB,IACE3E,2BAA2B,IAC3B2E,MAAM,YAAY5E,mBAAmB,EACrC;QAEAC,2BAA2B,CAAC6E,eAAe,CAACR,MAAM,CAAC,CAACI,IAAI,CACtDK,WAAW,IAAI;UACb,IAAI,CAACA,WAAW,EAAE;YAChB9E,2BAA2B,CAACwE,kBAAkB,CAACH,MAAM,CAAC;UACxD;QACF,CACF,CAAC;MACH;IACF,CAAC,CAAC;EACN,CAAC;EAODU,kBAAkBA,CAACV,MAAc,EAAET,OAAe,EAAQ;IACxD,MAAMG,kBAAkB,GAAGtD,mBAAmB,CAAC8D,GAAG,CAACX,OAAO,CAAC;IAC3D,IAAI,CAACG,kBAAkB,EAAE;MACvB,MAAM,IAAIiB,KAAK,CAAE,yCAAwCpB,OAAQ,GAAE,CAAC;IACtE;IACAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;EACxB;AACF,CAAC;AAGDjD,WAAW,CAACW,iBAAiB,CAAC,QAAQ,EAAE,MAAM;EAC5C,IAAIyB,OAAO,IAAI,OAAO+B,IAAI,KAAK,WAAW,EAAE;IAC1C,OAAOC,OAAO,qCAAqC,CAAC,CAACC,OAAO;EAC9D,CAAC,MAAM;IACL,OAAO,SAASC,IAAIA,CAAA,EAAG;MACrB,OAAO,IAAI;IACb,CAAC;EACH;AACF,CAAC,CAAC;AAEFC,MAAM,CAACC,cAAc,GAAGxE,WAAW;AAGnCuE,MAAM,CAACE,kBAAkB,GAAG;EAC1BC,aAAa,EAAE1E,WAAW,CAACkC,cAAc;EACzCS,eAAe,EAAE3C,WAAW,CAAC2C;AAC/B,CAAC;AAED,IAAI4B,MAAM,CAACI,aAAa,KAAK,IAAI,EAAE;EACjCxB,OAAO,CAACyB,GAAG,CAAC,4BAA4B,CAAC;AAC3C;AAEAjG,sBAAsB,CAAC,aAAa,EAAEqB,WAAW,CAAC;AAElD6E,MAAM,CAACC,OAAO,GAAG9E,WAAW"},"metadata":{"hasCjsExports":true},"sourceType":"module","externalDependencies":[]}